generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String?   @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?                 @db.Uuid
  id                          String                  @id @db.Uuid
  aud                         String?                 @db.VarChar(255)
  role                        String?                 @db.VarChar(255)
  email                       String?                 @db.VarChar(255)
  encrypted_password          String?                 @db.VarChar(255)
  email_confirmed_at          DateTime?               @db.Timestamptz(6)
  invited_at                  DateTime?               @db.Timestamptz(6)
  confirmation_token          String?                 @db.VarChar(255)
  confirmation_sent_at        DateTime?               @db.Timestamptz(6)
  recovery_token              String?                 @db.VarChar(255)
  recovery_sent_at            DateTime?               @db.Timestamptz(6)
  email_change_token_new      String?                 @db.VarChar(255)
  email_change                String?                 @db.VarChar(255)
  email_change_sent_at        DateTime?               @db.Timestamptz(6)
  last_sign_in_at             DateTime?               @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?               @db.Timestamptz(6)
  updated_at                  DateTime?               @db.Timestamptz(6)
  phone                       String?                 @unique
  phone_confirmed_at          DateTime?               @db.Timestamptz(6)
  phone_change                String?
  phone_change_token          String?                 @db.VarChar(255)
  phone_change_sent_at        DateTime?               @db.Timestamptz(6)
  confirmed_at                DateTime?               @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?                 @db.VarChar(255)
  email_change_confirm_status Int?                    @default(0) @db.SmallInt
  banned_until                DateTime?               @db.Timestamptz(6)
  reauthentication_token      String?                 @db.VarChar(255)
  reauthentication_sent_at    DateTime?               @db.Timestamptz(6)
  is_sso_user                 Boolean                 @default(false)
  deleted_at                  DateTime?               @db.Timestamptz(6)
  is_anonymous                Boolean                 @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  profiles                    profiles?
  user_enterprise_roles       user_enterprise_roles[]
  user_roles                  user_roles[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

model branches {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  code              String?   @unique
  short_address     String?
  city              String
  region            String?
  zip_code          String
  phone             String?
  email             String?
  manager           String?
  is_active         Boolean   @default(true)
  notes             String?
  user_id           String    @db.Uuid
  enterprise_id     String    @db.Uuid
  additional_number String?
  country           String?
  street_name       String?
  building_number   String?

  @@index([code])
  @@index([name])
  @@index([user_id])
  @@schema("public")
}

model clients {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime?  @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  email             String?
  phone             String
  short_address     String?
  city              String
  region            String?
  zip_code          String
  notes             String?
  user_id           String     @db.Uuid
  company           String?    @db.Uuid
  enterprise_id     String     @db.Uuid
  additional_number String?
  building_number   String?
  street_name       String?
  country           String?
  companies         companies? @relation(fields: [company], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices          invoices[]
  quotes            quotes[]

  @@index([email])
  @@index([name])
  @@index([user_id])
  @@schema("public")
}

model companies {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  email             String
  phone             String?
  website           String?
  city              String?
  zip_code          String?
  industry          String?
  size              String?
  notes             String?
  is_active         Boolean   @default(true)
  user_id           String    @db.Uuid
  enterprise_id     String    @db.Uuid
  building_number   String?
  street_name       String?
  region            String?
  additional_number String?
  short_address     String?
  country           String?
  clients           clients[]

  @@index([email])
  @@index([is_active])
  @@index([name])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model department_locations {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  department_id String      @db.Uuid
  location_type String
  location_id   String      @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  user_id       String      @db.Uuid
  enterprise_id String      @db.Uuid
  departments   departments @relation(fields: [department_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "department_locations_department_id_departments_id_fk")

  @@unique([department_id, location_type, location_id], map: "unique_department_location")
  @@schema("public")
}

model departments {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at           DateTime?              @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name                 String
  description          String?
  user_id              String                 @db.Uuid
  updated_at           DateTime?              @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  is_active            Boolean                @default(true)
  enterprise_id        String                 @db.Uuid
  department_locations department_locations[]
  employees            employees[]

  @@index([name])
  @@index([user_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model documents {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at    DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name          String
  url           String
  file_path     String
  entity_id     String    @db.Uuid
  entity_type   String
  user_id       String    @db.Uuid
  enterprise_id String    @db.Uuid

  @@index([entity_id])
  @@index([entity_type])
  @@index([user_id])
  @@schema("public")
}

model employee_requests {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id   String    @db.Uuid
  type          String
  status        String    @default("pending")
  title         String
  description   String?
  start_date    DateTime? @db.Date
  end_date      DateTime? @db.Date
  amount        Decimal?  @db.Decimal(10, 2)
  attachments   Json?     @default("[]")
  notes         String?
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @db.Timestamptz(6)
  user_id       String    @db.Uuid
  enterprise_id String    @db.Uuid
  employees     employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_requests_employee_id_employees_id_fk")

  @@index([created_at])
  @@index([employee_id])
  @@index([status])
  @@index([type])
  @@index([user_id])
  @@schema("public")
}

model employees {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name        String
  last_name         String
  email             String
  phone             String?
  hire_date         DateTime?           @db.Date
  created_at        DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  user_id           String              @db.Uuid
  enterprise_id     String              @db.Uuid
  short_address     String?
  city              String?
  region            String?
  zip_code          String?
  country           String?
  termination_date  DateTime?           @db.Date
  is_active         Boolean             @default(true)
  department_id     String?             @db.Uuid
  position          String?
  salary            Decimal?            @db.Decimal(10, 2)
  notes             String?
  additional_number String?
  building_number   String?
  street_name       String?
  employee_requests employee_requests[]
  departments       departments?        @relation(fields: [department_id], references: [id], onUpdate: NoAction, map: "employees_department_id_departments_id_fk")
  salaries          salaries[]

  @@index([department_id])
  @@index([email])
  @@index([user_id])
  @@schema("public")
}

model enterprises {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  expenses    expenses[]
  invoices    invoices[]
  memberships memberships[]
  roles       roles[]

  @@schema("public")
}

model expenses {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enterprise_id String?      @db.Uuid
  description   String?
  amount        Decimal?     @db.Decimal
  incurred_at   DateTime?    @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_by    String?      @db.Uuid
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  profiles      profiles?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enterprises   enterprises? @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model invoice_items {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at  DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  description String
  quantity    Decimal   @default(1) @db.Decimal(10, 2)
  unit_price  Decimal   @db.Decimal(10, 2)
  amount      Decimal?  @default(dbgenerated("(quantity * unit_price)")) @db.Decimal(10, 2)
  invoice_id  String    @db.Uuid
  product_id  String?   @db.Uuid
  products    products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([invoice_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model invoices {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enterprise_id  String?      @db.Uuid
  created_by     String?      @db.Uuid
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
  invoice_number String
  issue_date     DateTime?    @default(dbgenerated("CURRENT_DATE")) @db.Date
  due_date       DateTime?    @db.Date
  status         String       @default("draft")
  subtotal       Decimal      @default(0) @db.Decimal(10, 2)
  tax_rate       Decimal?     @default(0) @db.Decimal(5, 2)
  tax_amount     Decimal?     @default(dbgenerated("\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND")) @db.Decimal(10, 2)
  total          Decimal?     @default(dbgenerated("\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND")) @db.Decimal(10, 2)
  notes          String?
  client_id      String       @db.Uuid
  clients        clients      @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles       profiles?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enterprises    enterprises? @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([client_id])
  @@index([invoice_number])
  @@index([status])
  @@schema("public")
}

model job_listing_jobs {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_listing_id String       @db.Uuid
  job_id         String       @db.Uuid
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  user_id        String       @db.Uuid
  enterprise_id  String       @db.Uuid
  jobs           jobs         @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_listing_jobs_job_id_jobs_id_fk")
  job_listings   job_listings @relation(fields: [job_listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_listing_jobs_job_listing_id_job_listings_id_fk")

  @@index([job_id])
  @@index([job_listing_id])
  @@schema("public")
}

model job_listings {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String             @db.VarChar(255)
  description      String?
  is_active        Boolean            @default(true)
  slug             String             @unique(map: "job_listings_slug_unique") @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  user_id          String             @db.Uuid
  enterprise_id    String             @db.Uuid
  is_public        Boolean            @default(false)
  job_listing_jobs job_listing_jobs[]

  @@index([slug])
  @@index([title])
  @@index([user_id])
  @@schema("public")
}

model jobs {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String             @db.VarChar(255)
  description      String?
  requirements     String?
  location         String?            @db.VarChar(255)
  department       String?            @db.VarChar(255)
  type             String             @db.VarChar(50)
  salary           Decimal?           @db.Decimal(10, 2)
  is_active        Boolean            @default(true)
  start_date       DateTime?          @db.Date
  end_date         DateTime?          @db.Date
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  user_id          String             @db.Uuid
  enterprise_id    String             @db.Uuid
  job_listing_jobs job_listing_jobs[]

  @@index([department])
  @@index([title])
  @@index([user_id])
  @@schema("public")
}

model memberships {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_id    String?      @db.Uuid
  enterprise_id String?      @db.Uuid
  role_id       String?      @db.Uuid
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  enterprises   enterprises? @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles      profiles?    @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles?       @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@unique([profile_id, enterprise_id])
  @@schema("public")
}

model offices {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  short_address     String
  city              String
  region            String
  zip_code          String
  phone             String?
  email             String?
  is_active         Boolean   @default(true)
  user_id           String    @db.Uuid
  enterprise_id     String    @db.Uuid
  additional_number String?
  building_number   String?
  street_name       String?
  country           String?
  notes             String?

  @@index([name])
  @@index([user_id])
  @@schema("public")
}

model permissions {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id    String @db.Uuid
  permission String
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([role_id])
  @@schema("public")
}

model products {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  description   String?
  price         Decimal         @db.Decimal(10, 2)
  sku           String?
  created_at    DateTime?       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  user_id       String          @db.Uuid
  enterprise_id String          @db.Uuid
  cost          Decimal?        @db.Decimal(10, 2)
  quantity      Decimal         @default(0) @db.Decimal(10, 2)
  unit          String?
  is_active     Boolean         @default(true)
  invoice_items invoice_items[]
  quote_items   quote_items[]

  @@index([name])
  @@index([sku])
  @@index([user_id])
  @@schema("public")
}

model profiles {
  id            String        @id @db.Uuid
  email         String?       @unique
  full_name     String?
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  user_settings Json?
  expenses      expenses[]
  invoices      invoices[]
  memberships   memberships[]
  users         users         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model quote_items {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at  DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  description String
  quantity    Decimal   @default(1) @db.Decimal(10, 2)
  unit_price  Decimal   @db.Decimal(10, 2)
  amount      Decimal?  @default(dbgenerated("(quantity * unit_price)")) @db.Decimal(10, 2)
  quote_id    String    @db.Uuid
  product_id  String?   @db.Uuid
  products    products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotes      quotes    @relation(fields: [quote_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([quote_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model quotes {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime?     @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  quote_number  String
  issue_date    DateTime      @db.Date
  expiry_date   DateTime      @db.Date
  status        String        @default("draft")
  subtotal      Decimal       @default(0) @db.Decimal(10, 2)
  tax_rate      Decimal?      @default(0) @db.Decimal(5, 2)
  notes         String?
  client_id     String        @db.Uuid
  user_id       String        @db.Uuid
  tax_amount    Decimal?      @default(dbgenerated("\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND")) @db.Decimal(10, 2)
  total         Decimal?      @default(dbgenerated("\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND")) @db.Decimal(10, 2)
  enterprise_id String        @db.Uuid
  quote_items   quote_items[]
  clients       clients       @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([client_id])
  @@index([status])
  @@index([user_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model roles {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @unique
  description   String?
  is_system     Boolean       @default(false)
  enterprise_id String?       @db.Uuid
  memberships   memberships[]
  permissions   permissions[]
  enterprises   enterprises?  @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "roles_enterprise_id_enterprises_id_fk")

  @@index([enterprise_id], map: "idx_roles_enterprise_id")
  @@schema("public")
}

model salaries {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  notes             String?
  user_id           String    @db.Uuid
  enterprise_id     String    @db.Uuid
  employee_id       String    @db.Uuid
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")
  payment_frequency String    @default("monthly")
  start_date        DateTime  @db.Date
  end_date          DateTime? @db.Date
  employees         employees @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([employee_id])
  @@index([user_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model templates {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name          String
  type          String
  content       Json
  is_default    Boolean   @default(false)
  user_id       String    @db.Uuid
  enterprise_id String    @db.Uuid

  @@index([name])
  @@index([type])
  @@index([user_id])
  @@schema("public")
}

model user_enterprise_roles {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String    @db.Uuid
  enterprise_id String    @db.Uuid
  role_id       String    @db.Uuid
  created_at    DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at    DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, enterprise_id])
  @@schema("public")
}

model user_roles {
  user_id       String   @db.Uuid
  role_id       String   @db.Uuid
  enterprise_id String   @db.Uuid
  created_at    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id, enterprise_id])
  @@index([enterprise_id])
  @@index([role_id])
  @@index([user_id])
  @@schema("public")
}

model vendors {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  email             String
  phone             String
  company           String
  short_address     String?
  city              String
  region            String?
  zip_code          String
  notes             String?
  user_id           String    @db.Uuid
  updated_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  enterprise_id     String    @db.Uuid
  additional_number String?
  building_number   String?
  street_name       String?
  country           String?

  @@index([email])
  @@index([name])
  @@index([user_id])
  @@schema("public")
}

model warehouses {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String
  code              String    @unique
  short_address     String?
  city              String
  region            String?
  zip_code          String
  capacity          Decimal?  @db.Decimal(10, 2)
  is_active         Boolean   @default(true)
  notes             String?
  user_id           String    @db.Uuid
  enterprise_id     String    @db.Uuid
  additional_number String?
  building_number   String?
  street_name       String?
  country           String?

  @@index([code])
  @@index([name])
  @@index([user_id])
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum app_permission {
  users_create        @map("users.create")
  users_read          @map("users.read")
  users_update        @map("users.update")
  users_delete        @map("users.delete")
  users_export        @map("users.export")
  users_invite        @map("users.invite")
  roles_create        @map("roles.create")
  roles_read          @map("roles.read")
  roles_update        @map("roles.update")
  roles_delete        @map("roles.delete")
  roles_export        @map("roles.export")
  roles_assign        @map("roles.assign")
  companies_create    @map("companies.create")
  companies_read      @map("companies.read")
  companies_update    @map("companies.update")
  companies_delete    @map("companies.delete")
  companies_export    @map("companies.export")
  companies_duplicate @map("companies.duplicate")
  branches_create     @map("branches.create")
  branches_read       @map("branches.read")
  branches_update     @map("branches.update")
  branches_delete     @map("branches.delete")
  branches_export     @map("branches.export")
  branches_duplicate  @map("branches.duplicate")
  clients_create      @map("clients.create")
  clients_read        @map("clients.read")
  clients_update      @map("clients.update")
  clients_delete      @map("clients.delete")
  clients_export      @map("clients.export")
  clients_duplicate   @map("clients.duplicate")
  vendors_create      @map("vendors.create")
  vendors_read        @map("vendors.read")
  vendors_update      @map("vendors.update")
  vendors_delete      @map("vendors.delete")
  vendors_export      @map("vendors.export")
  vendors_duplicate   @map("vendors.duplicate")
  products_create     @map("products.create")
  products_read       @map("products.read")
  products_update     @map("products.update")
  products_delete     @map("products.delete")
  products_export     @map("products.export")
  products_duplicate  @map("products.duplicate")
  invoices_create     @map("invoices.create")
  invoices_read       @map("invoices.read")
  invoices_update     @map("invoices.update")
  invoices_delete     @map("invoices.delete")
  invoices_export     @map("invoices.export")
  invoices_duplicate  @map("invoices.duplicate")
  expenses_create     @map("expenses.create")
  expenses_read       @map("expenses.read")
  expenses_update     @map("expenses.update")
  expenses_delete     @map("expenses.delete")
  expenses_export     @map("expenses.export")
  expenses_duplicate  @map("expenses.duplicate")
  settings_read       @map("settings.read")
  settings_update     @map("settings.update")

  @@schema("public")
}
