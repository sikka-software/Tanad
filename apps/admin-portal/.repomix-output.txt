This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    db-migrations.mdc
    db-setup.mdc
    enterprise-structure.mdc
    module-pattern.mdc
    module-service-pattern.mdc
    product-specs.mdc
    vibe-tools.mdc
  mcp.json
backups/
  tanad_backup_20250422_164947.sql
locales/
  ar.json
  en.json
mcp-servers/
  puppeteer/
public/
  assets/
    pukla-logo-symbol-purple.svg
  icons/
    browserconfig.xml
    manifest.json
scripts/
  migrations/
    001_fix_clients_company_fk.sql
  apply-policies.ts
  apply-rbac.ts
  apply-triggers.ts
  apply-types.ts
  generate-migration.ts
  list-tables.ts
  setup-new.ts
  sync.ts
src/
  components/
    app/
      AnalyticsTable.tsx
      FeedbackDialog.tsx
      LazimAd.tsx
      new-role-dialog.tsx
      NoPuklaFound.tsx
      NoPuklas.tsx
      OnboardingDialog.tsx
      ProtectedRoute.tsx
      QrCodeDialog.tsx
      SetupRedirect.tsx
      ShareDialog.tsx
      ShareViaPlatformButton.tsx
      SharingStage.tsx
      SingleThemeThumbnail.tsx
      SocialPlatformsSection.tsx
      TemplateEditor.tsx
      TemplateViewer.tsx
      UpdateAvatarDialog.tsx
      UpgradeDialog.tsx
    forms/
      address-form-section.tsx
      address-schema.ts
    landing/
      AsymmetricalFeatureSection.tsx
      BottomCTA.tsx
      ContactForm.tsx
      CustomMotionDiv.tsx
      CustomPageMeta.tsx
      departments-features.tsx
      FakeChart.tsx
      FeatureCard.tsx
      features-section.tsx
      Features.tsx
      FloatingPuklas.tsx
      Footer.tsx
      HeroSection.tsx
      MobileNavMenuItem.tsx
      Navbar.tsx
      pricing-with-comparison.tsx
      PricingPlans.tsx
      SocialIcons.tsx
      ThumbnailImage.tsx
      waitlist-section.tsx
    layouts/
      app-layout.tsx
      auth-layout.tsx
      data-page-layout.tsx
      landing-layout.tsx
    settings/
      general-settings.tsx
      notification-settings.tsx
      preference-settings.tsx
      sidebar-settings.tsx
    ui/
      accordion.tsx
      adjustable-dialog.tsx
      alert-dialog.tsx
      alert.tsx
      animated-group.tsx
      app-sidebar.tsx
      avatar.tsx
      badge.tsx
      bento-grid.tsx
      beta-flag.tsx
      bike-icon.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      chart.tsx
      checkbox.tsx
      chip.tsx
      code-input.tsx
      collapse-menu-button.tsx
      collapsible.tsx
      combobox-add.tsx
      combobox.tsx
      command-menu.tsx
      command.tsx
      confirm-delete.tsx
      currency-input.tsx
      customers-section.tsx
      data-model-list.tsx
      date-picker.tsx
      debug-pukla.tsx
      debug-tools.tsx
      dialog.tsx
      documents-list.tsx
      documents-uploader.tsx
      dropdown-menu.tsx
      enterprise-switcher.tsx
      error-component.tsx
      filter-popover.tsx
      final-confirm-delete.tsx
      flippable-input.tsx
      form-dialog.tsx
      form.tsx
      google-button.tsx
      grid-background.tsx
      grid-bg.tsx
      hero-section-2.tsx
      icon-button.tsx
      infinite-slider.tsx
      input.tsx
      label.tsx
      language-switcher.tsx
      loading-bar.tsx
      logos.tsx
      marquee.tsx
      motion-highlight.tsx
      multi-select.tsx
      no-permission.tsx
      number-input.tsx
      page-search-and-filter.tsx
      page-title.tsx
      pagination.tsx
      phone-input.tsx
      popover.tsx
      pricing-card.tsx
      pricing-section-with-comparison.tsx
      progress.tsx
      progressive-blur.tsx
      pukla-card.tsx
      radio-group.tsx
      radix-collapsible.tsx
      radix-dialog.tsx
      row-actions.tsx
      sar-symbol.tsx
      scroll-area.tsx
      select.tsx
      selection-mode.tsx
      separator.tsx
      sheet-table.tsx
      sheet.tsx
      sidebar-menu.tsx
      sidebar-user-footer.tsx
      sidebar.tsx
      signature.tsx
      skeleton.tsx
      slider-with-input.tsx
      slider.tsx
      social-platforms.tsx
      sonner.tsx
      sort-popover.tsx
      stat-card.tsx
      switch.tsx
      table-skeleton.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      theme-switcher.tsx
      tooltip.tsx
      transition-panel.tsx
      user-dropdown.tsx
    loading-page.tsx
  db/
    archive/
      policies.sql
      rbac.sql
      triggers.sql
      types.sql
    drizzle.ts
    README.md
    relations.ts
    schema.ts
  hooks/
    main.store.ts
    use-breakpoint.ts
    use-clipboard.ts
    use-data-table-actions.ts
    use-delete-handler.ts
    use-media-query.ts
    use-mobile.ts
    use-permission.ts
    use-profile.ts
    use-shortcuts.ts
    use-slider-with-input.ts
    use-social-links-store.ts
    use-sticky-header.ts
    use-window-size.ts
  lib/
    constants/
      animations.ts
      countries.ts
      currencies.ts
      invoice-consts.ts
      locales.ts
      payment-consts.ts
      product-consts.ts
    services/
    api-handler.ts
    breadcrumbs-list.ts
    command-list.ts
    constants.ts
    dummy-factory.ts
    dummy-generator.ts
    filter-utils.ts
    operations.ts
    prisma.ts
    sidebar-list.ts
    sort-utils.ts
    types.ts
    utils.ts
  messages/
  modules/
    branch/
      branch.card.tsx
      branch.form.tsx
      branch.hooks.ts
      branch.options.ts
      branch.service.ts
      branch.store.ts
      branch.table.tsx
      branch.type.ts
    client/
      client.card.tsx
      client.form.tsx
      client.hooks.ts
      client.options.ts
      client.service.ts
      client.store.ts
      client.table.tsx
      client.type.ts
    company/
      company.card.tsx
      company.form.tsx
      company.hooks.ts
      company.options.ts
      company.service.ts
      company.store.ts
      company.table.tsx
      company.type.ts
    department/
      department.card.tsx
      department.form.tsx
      department.hooks.ts
      department.options.ts
      department.service.ts
      department.store.ts
      department.table.tsx
      department.type.ts
    employee/
      employee.card.tsx
      employee.form.tsx
      employee.hooks.ts
      employee.options.ts
      employee.service.ts
      employee.store.ts
      employee.table.tsx
      employee.types.ts
    employee-request/
      employee-request.card.tsx
      employee-request.form.tsx
      employee-request.hooks.ts
      employee-request.options.ts
      employee-request.service.ts
      employee-request.store.ts
      employee-request.table.tsx
      employee-request.type.ts
    expense/
      expense.card.tsx
      expense.form.tsx
      expense.hooks.ts
      expense.options.ts
      expense.service.ts
      expense.store.ts
      expense.table.tsx
      expense.type.ts
    invoice/
      invoice.card.tsx
      invoice.form.tsx
      invoice.hooks.ts
      invoice.options.ts
      invoice.service.ts
      invoice.store.ts
      invoice.table.tsx
      invoice.type.ts
    job/
      job.card.tsx
      job.form.tsx
      job.hooks.ts
      job.options.ts
      job.service.ts
      job.store.ts
      job.table.tsx
      job.type.ts
    job-listing/
      job-listing.card.tsx
      job-listing.form.tsx
      job-listing.hooks.ts
      job-listing.options.ts
      job-listing.service.ts
      job-listing.store.ts
      job-listing.table.tsx
      job-listing.type.ts
    office/
      office.card.tsx
      office.form.tsx
      office.hooks.ts
      office.options.ts
      office.service.ts
      office.store.ts
      office.table.tsx
      office.type.ts
    onboarding/
      onboarding.form.tsx
      onboarding.hooks.ts
      onboarding.service.ts
      onboarding.type.ts
    permission/
      permission.hooks.ts
    product/
      product.card.tsx
      product.form.tsx
      product.hooks.ts
      product.options.ts
      product.service.ts
      product.store.ts
      product.table.tsx
      product.type.ts
    quote/
      quote.card.tsx
      quote.form.tsx
      quote.hooks.ts
      quote.options.ts
      quote.service.ts
      quote.store.ts
      quote.table.tsx
      quote.type.ts
    role/
      role.card.tsx
      role.form.tsx
      role.hooks.ts
      role.options.ts
      role.service.ts
      role.store.ts
      role.type.ts
    salary/
      salary.card.tsx
      salary.form.tsx
      salary.hooks.ts
      salary.options.ts
      salary.service.ts
      salary.store.ts
      salary.table.tsx
      salary.type.ts
    user/
      user.card.tsx
      user.form.tsx
      user.hooks.ts
      user.options.ts
      user.service.ts
      user.store.ts
      user.table.tsx
      user.type.ts
    vendor/
      vendor.card.tsx
      vendor.form.tsx
      vendor.hooks.ts
      vendor.options.ts
      vendor.service.ts
      vendor.store.ts
      vendor.table.tsx
      vendor.type.ts
    warehouse/
      warehouse.card.tsx
      warehouse.form.tsx
      warehouse.hooks.ts
      warehouse.options.ts
      warehouse.service.ts
      warehouse.store.ts
      warehouse.table.tsx
      warehouse.type.ts
  pages/
    api/
      profile/
        info.ts
        update.ts
      resource/
        [model]/
          [id]/
            duplicate.ts
            index.ts
          index.ts
        users/
          [id]/
            duplicate.ts
          permissions/
            [role].ts
          [id].ts
          index.ts
      roles/
        list.ts
      settings/
        update.ts
      templates/
        [id].ts
        archive.ts
        index.ts
      form-contact.ts
      user-info.ts
    branches/
      add.tsx
      index.tsx
    clients/
      add.tsx
      index.tsx
    companies/
      add.tsx
      index.tsx
    departments/
      add.tsx
      index.tsx
    employee-requests/
      add.tsx
      index.tsx
    employees/
      add.tsx
      index.tsx
    expenses/
      add.tsx
      index.tsx
    invoices/
      add.tsx
      index.tsx
    jobs/
      [slug]/
        index.tsx
      listings/
        add.tsx
        index.tsx
      add.tsx
      index.tsx
    offices/
      add.tsx
      index.tsx
    pay/
      [invoice].tsx
    products/
      add.tsx
      edit.tsx
      index.tsx
    quotes/
      add.tsx
      index.tsx
    roles/
      add.tsx
    salaries/
      add.tsx
      index.tsx
    users/
      add.tsx
      index.tsx
    vendors/
      [id]/
        edit.tsx
      add.tsx
      index.tsx
    warehouses/
      add.tsx
      index.tsx
    _app.tsx
    _document.tsx
    [code].tsx
    404.tsx
    account.tsx
    analytics.tsx
    auth.tsx
    billing.tsx
    blog.tsx
    contact.tsx
    contacts.tsx
    dashboard.tsx
    directory.tsx
    features.tsx
    help.tsx
    index.tsx
    legal.tsx
    onboarding.tsx
    pricing.tsx
    privacy.tsx
    reset-password.tsx
    roles.tsx
    settings.tsx
    sitemap.xml.js
    support.tsx
    templates.tsx
    terms.tsx
    theme.tsx
  providers/
    index.ts
    QueryProvider.tsx
  services/
    documents.ts
  stores/
    use-user-store.ts
  styles/
    globals.css
  types/
    comment.type.ts
    common.type.ts
    generic-store-types.ts
    note.type.ts
    rbac.ts
    transaction.type.ts
    user.type.ts
  utils/
    supabase/
      api.ts
      component.ts
      server-admin.ts
      server-props.ts
      static-props.ts
    action-utils.ts
    generic-store.ts
supabase/
  migrations/
    meta/
      _journal.json
      0000_snapshot.json
      0001_snapshot.json
      0002_snapshot.json
      0003_snapshot.json
      0004_snapshot.json
    0000_careful_ronan.sql
    0001_smooth_jubilee.sql
    0002_tough_clint_barton.sql
    0003_jittery_meteorite.sql
    0004_amazing_warhawk.sql
    20250422152050_create_enterprises.sql
    20250422152100_mig_1.sql
    20250422152150_create_role_permissions.sql
    20250422152200_create_profiles.sql
    20250422152232_mig_2.sql
    20250422152300_create_departments.sql
    20250422152400_create_employees.sql
    20250422152611_drop_role_column.sql
    20250422152849_add_custom_access_token_hook_and_permissions.sql
    20250422152908_fix_types_and_roles.sql
    20250422152925_fix_profiles_role_column.sql
    20250422152941_add_profile_creation_trigger_fixed.sql
    20250422153001_fix_auth_user_trigger.sql
    20250422153016_fix_auth_trigger_with_logging.sql
    20250422153030_fix_enterprises_rls_policies.sql
    20250422153049_update_enterprises_rls_policies.sql
    20250422153200_fix_app_role_type.sql
    20250422154925_create_test_table.sql
    20250422170000_fix_app_role_type.sql
    20250422170100_fix_enterprises_rls.sql
    20250422170200_fix_enterprises_rls_again.sql
    20250422172512_create_handle_new_user_trigger.sql
    20250422174135_add_role_to_profiles.sql
    20250422174152_create_user_roles_table.sql
    20250422180000_fix_enterprise_access.sql
    20250422180100_fix_user_creation.sql
    20250422183025_allow_custom_role_names.sql
    20250422195136_add_predefiend_roles.sql
    20250422205935_create_role_permissions_table.sql
    20250422215653_update_handle_new_user_with_enterprise_owner_check.sql
    20250422220226_update_user_handler_metadata.sql
    20250428230141_add_roles_table.sql
    20250429105801_fix-user-roles-trigger.sql
    20250429112252_fix-ambiguous-enterprise-id.sql
    20250429112833_fix-deprecated-role-constraint.sql
    20250429202902_create_get_user_permissions_function.sql
    20250429203927_update_get_permissions_function.sql
    20250429210946_fix_role_permissions.sql
    20250429212638_create_user_permissions_view.sql
    20250429221132_fix_role_permissions_schema.sql
    20250429223334_fix_deprecated_role.sql
    20250429223947_fix_role_permissions_relationship.sql
    20250429224612_fix_user_role_permissions_relationship.sql
    20250429225425_fix_role_permissions_policy.sql
    20250429225707_fix_role_permissions_view.sql
    20250429232805_setup_roles_and_permissions.sql
    20250430093635_fix_user_permissions_function.sql
    20250430100832_fix_user_permissions_parameter_order.sql
    20250430102020_init_rbac_system.sql
    20250430102021_add_rbac_policies.sql
    20250430103245_fix_rbac_system.sql
    20250430105728_fix_user_roles_table.sql
    20250430111354_create_user_roles_table.sql
    20250430112929_fix_user_roles_policies_and_function.sql
    20250430113406_fix_user_role_functions.sql
    20250430113713_fix_jwt_metadata_access.sql
    20250430114134_fix_user_roles_rls_policies.sql
    20250430122127_create_user_enterprise_roles.sql
    20250430151506_add_invoice_columns.sql
    20250430163726_add_role_description_and_system_flag.sql
    20250430184030_fix_role_enterprise_data.sql
    20250430184341_cleanup_enterprises_and_roles.sql
    20250430190714_fix_custom_role_permission_names.sql
    20250430215354_add_permissions_to_accounting_role.sql
    20250430223230_add_user_settings_to_profiles.sql
    20250501181741_update_companies_table_fields.sql
    20250501214218_remove_null_from_address_fields.sql
    20250501214649_remove_null_from_address_fields_2.sql
    20250501214818_turn_address_fields_optional.sql
    relations.ts
    schema.ts
  .gitignore
  config.toml
.gitignore
.nvmrc
components.json
drizzle.config.ts
landing.config.tsx
middleware.ts
next.config.ts
nixpacks.toml
package.json
postcss.config.mjs
prettier.config.js
tanad.config.ts
tsconfig.json
vibe-tools.config.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/db-migrations.mdc">
---
description: 
globs: 
alwaysApply: true
---
Anytime you need to make an adjustment to the db, you run `supabase migrations new FILE_NAME` without npx (we already have it installed with brew). 

After that in order to apply the migration you run `supabase db push --include-all`
</file>

<file path=".cursor/rules/db-setup.mdc">
---
description: 
globs: 
alwaysApply: true
---
- if you want to know what's currently in the db, run use the execute_sql mcp tool with project_id: jbyougyxkvhffbnqstiq
- Anytime you want to understand our db schema refer to [schema.ts](mdc:src/db/schema.ts)
- Anytime you want to make changes to the db run `supabase migration new FILE_NAME`
- And to apply the migrations run `supabase migration up --include-all`
</file>

<file path=".cursor/rules/enterprise-structure.mdc">
---
description: 
globs: 
alwaysApply: true
---
This project is meant to be multi-tenant. we refer to the tenant as enterprise.

when the user signs up, they create an enterprise. And in the enterprise they can invite users with custom/predefined roles.

When a user signs in and they're part of an enterprise, they login to that enterprise.
</file>

<file path=".cursor/rules/module-pattern.mdc">
---
description: 
globs: 
alwaysApply: true
---
# Module Pattern Guide

This document outlines the standardized pattern for creating new modules and their corresponding pages in the admin portal.

## Module Structure

Each module follows a consistent file structure:

```
src/modules/<module-name>/
├── <module-name>.type.ts      # Type definitions
├── <module-name>.store.ts     # Zustand store
├── <module-name>.service.ts   # API services
├── <module-name>.form.tsx     # Form component
├── <module-name>.table.tsx    # Table view component
├── <module-name>.hooks.ts     # Custom hooks
├── <module-name>.card.tsx     # Card view component
└── <module-name>.options.ts   # Constants and options
```

## Best Practices

1. Follow the file naming convention strictly
2. Use TypeScript for type safety
3. Implement proper error handling
4. Use consistent API patterns
5. Follow the page layout structure
6. Implement proper form validation
7. Handle loading and error states
8. Use proper toast notifications
9. Implement proper access control
10. Follow the store pattern for UI state
</file>

<file path=".cursor/rules/module-service-pattern.mdc">
---
description: 
globs: 
alwaysApply: true
---
# Module Service Pattern Guide

This document outlines the standardized pattern for implementing services in module components.

## Service Structure

Each module's `service.ts` file should implement these standard methods:

```typescript
// <module-name>.service.ts
import { supabase } from '@/lib/supabase';
import type { ModuleName, ModuleNameCreateData, ModuleNameUpdateData } from './module-name.type';

export class ModuleNameService {
  private static readonly TABLE_NAME = 'module_names';

  // List all records
  static async list(): Promise<ModuleName[]> {
    const { data, error } = await supabase
      .from(this.TABLE_NAME)
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data;
  }

  // Get single record
  static async get(id: string): Promise<ModuleName> {
    const { data, error } = await supabase
      .from(this.TABLE_NAME)
      .select('*')
      .eq('id', id)
      .single();

    if (error) throw error;
    return data;
  }

  // Create record
  static async create(data: ModuleNameCreateData): Promise<ModuleName> {
    const { data: created, error } = await supabase
      .from(this.TABLE_NAME)
      .insert(data)
      .select()
      .single();

    if (error) throw error;
    return created;
  }

  // Update record
  static async update(id: string, data: ModuleNameUpdateData): Promise<ModuleName> {
    const { data: updated, error } = await supabase
      .from(this.TABLE_NAME)
      .update(data)
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    return updated;
  }

  // Delete record
  static async delete(id: string): Promise<void> {
    const { error } = await supabase
      .from(this.TABLE_NAME)
      .delete()
      .eq('id', id);

    if (error) throw error;
  }

  // Bulk delete records
  static async bulkDelete(ids: string[]): Promise<void> {
    const { error } = await supabase
      .from(this.TABLE_NAME)
      .delete()
      .in('id', ids);

    if (error) throw error;
  }

  // Duplicate record
  static async duplicate(id: string): Promise<ModuleName> {
    // 1. Get the original record
    const original = await this.get(id);

    // 2. Remove unique fields and create new record
    const { id: _, created_at: __, ...duplicateData } = original;
    
    // 3. Create the duplicate
    return this.create(duplicateData as ModuleNameCreateData);
  }
}
```

## Method Naming Conventions

1. List Records: `list()`
2. Get Single Record: `get(id)`
3. Create Record: `create(data)`
4. Update Record: `update(id, data)`
5. Delete Record: `delete(id)`
6. Bulk Delete: `bulkDelete(ids)`
7. Duplicate: `duplicate(id)`

## Error Handling Pattern

Implement consistent error handling:

```typescript
static async operation(): Promise<Result> {
  try {
    const { data, error } = await supabase
      // ... operation
    
    if (error) throw error;
    return data;
  } catch (error) {
    console.error('ModuleNameService.operation error:', error);
    throw error;
  }
}
```

## Query Building Patterns

Follow consistent query building patterns:

```typescript
// Basic select
.from(TABLE_NAME).select('*')

// Filtered select
.from(TABLE_NAME)
.select('*')
.eq('field', value)

// Ordered select
.from(TABLE_NAME)
.select('*')
.order('created_at', { ascending: false })

// Pagination
.from(TABLE_NAME)
.select('*')
.range(start, end)

// Relationships
.from(TABLE_NAME)
.select(`
  *,
  related_table(*)
`)
```

## Example Implementation

For reference implementation, see:
- Companies service: [src/modules/company/company.service.ts](mdc:src/modules/company/company.service.ts)
- Branches service: [src/modules/branch/branch.service.ts](mdc:src/modules/branch/branch.service.ts)

## Best Practices

1. Use TypeScript for type safety
2. Implement proper error handling
3. Use consistent method naming
4. Document complex queries
5. Keep methods focused and single-purpose
6. Use table constants
7. Handle relationships properly
8. Validate input data
9. Use proper return types
10. Maintain consistent error messages

## Security Considerations

1. Always use parameterized queries
2. Never expose internal errors to clients
3. Validate input data
4. Use RLS policies
5. Handle sensitive data appropriately
6. Implement proper access control
7. Use appropriate error codes
</file>

<file path=".cursor/rules/product-specs.mdc">
---
description: 
globs: 
alwaysApply: false
---

### **2. Product Summary**
**What is Tanad?**  
Tanad (Arabic: تند) is a modular enterprise management platform designed to serve as the digital backbone for SMEs and large enterprises. It replaces the need for multiple disjointed apps by offering a unified solution for HR, invoicing, payroll, accounting, CRM, fleet management, and more.

**Mission**: To simplify and unify enterprise operations through a localized, extensible, and fully digital system with compliance and localization at its core.  
**Vision**: To be the most trusted enterprise platform in Saudi Arabia and the broader MENA region.  
**Target Market**: SMEs and large enterprises in Saudi Arabia initially, with plans to expand to the GCC and MENA regions. Suitable for companies seeking full digitalization and operational unification.

---

### **3. Problem Statement**
Modern enterprises typically rely on a patchwork of apps for different operational functions — one for HR, another for invoicing, another for expenses, etc. This leads to:

- **Data Silos**: Information is trapped within separate systems (e.g., HR, finance, CRM), making it difficult to obtain a unified view of the business.  
- **Redundant Manual Work**: Employees often re-enter the same data in different systems, wasting time and increasing the risk of human error.  
- **Inconsistent Reporting**: Disconnected tools generate fragmented reports, making strategic planning and financial auditing unreliable.  
- **High Operational Overhead**: Managing, maintaining, and training staff on multiple systems increases costs and complexity.  
- **Regulatory Compliance Risks**: Siloed systems may fail to adhere to local regulations (e.g., ZATCA), exposing businesses to potential audits, fines, or legal consequences.  

In Saudi Arabia, regulatory compliance (e.g., ZATCA e-invoicing mandates) and digital transformation initiatives are accelerating the need for unified, compliant, and fully digitized enterprise platforms.

---

### **4. Solution Overview: Tanad's Core Proposition**
Tanad is a fully integrated and modular enterprise management platform designed with the following core principles:

- **Centralization**: A single platform handling all key enterprise functions, eliminating the need for multiple, disconnected software tools. This improves organizational cohesion, data integrity, and management visibility across all departments.  
- **Modularity**: Businesses can activate only the modules they need, making Tanad cost-efficient and adaptable. This ensures that each enterprise customizes the system based on current needs, with the flexibility to scale up as requirements evolve.  
- **Interconnected Data**: All modules are interoperable for seamless data flow. For example, data entered in the HR module (e.g., new employee onboarding) automatically syncs with payroll, attendance, and accounting, minimizing duplication and improving accuracy.  
- **Localization**: Designed specifically for Saudi business practices and regulatory frameworks such as ZATCA compliance and GOSI integration. The UI/UX, language support, tax structures, and official formats are tailored to Saudi and broader GCC expectations.  
- **Scalability**: Suitable for both SMEs and large enterprises. Tanad can scale horizontally by adding new modules (e.g., inventory, procurement) and vertically by introducing more advanced features in each module (e.g., AI-driven analytics in accounting).

---

### **5. Core Modules and Features**
#### **5.1 Invoicing**
- **ZATCA Phase 2 Compliant Invoicing**: Automatically generates electronic invoices that meet Saudi Arabia's Phase 2 e-invoicing regulations, including QR codes, UUIDs, and digital signatures. Ensures legal compliance and audit-readiness.  
- **Integrated Digital Payments**: Enables customers to pay directly through invoices using various methods such as credit cards, Mada (Saudi debit system), Apple Pay, and bank transfers. Payments are tracked in real-time, improving cash flow visibility.  
- **Recurring/Subscription Billing**: Supports automated recurring invoices for subscription-based services. Customers are billed on a schedule, and automatic payment collection is possible through pre-authorized payment methods.  
- **Accounting Integration**: Every invoice action (issue, payment, refund) is instantly reflected in the accounting ledger. This real-time synchronization eliminates manual entries and provides up-to-date financial snapshots.

#### **5.2 HR Management**
- **Employee Portal with Permissions and Access Control**: A secure, self-service interface where employees can view their profiles, submit requests, and track HR-related activities. Access is controlled based on role, department, or custom permissions to ensure data security and proper workflow delegation.  
- **Leave and Time-Off Management**: Allows employees to request vacation, sick leave, or custom time-off types. Managers can review, approve, or reject requests, with the system automatically updating attendance records and notifying payroll.  
- **Automated Onboarding Through Job Applicant Tracking**: New hires move seamlessly from candidate status to active employees with automated onboarding workflows. This includes document collection, initial training assignments, account provisioning, and role-based setup.  
- **Salary and GOSI Integration** (Planned): Will enable automated salary calculation and submission to GOSI (Saudi Arabia’s social insurance system). Once integrated, the system will also handle GOSI contributions, deductions, and official reports.

#### **5.3 Payroll**
- **Salary Calculation Based on Attendance, Contracts, and Benefits**: The payroll engine computes salaries dynamically by aggregating inputs such as employee attendance logs, contract terms (fixed, hourly, commission-based), bonuses, and deductions. This ensures precise payouts in line with employee agreements.  
- **Payslip Generation and Distribution**: Automatically generates detailed, compliant payslips each payroll cycle. Employees are notified through the portal or email and can securely access their payslips, which include breakdowns of earnings, deductions, and net salary.  
- **Integration with HR and Accounting Modules**: Payroll is tightly integrated with HR for attendance and contract data, and with accounting for financial records and reporting. Salary payments, advances, and deductions are automatically reflected in the general ledger and expense reports.

#### **5.4 Expense Management & Accounting**
- **Capture, Categorize, and Analyze Expenses**: Allows users to upload receipts, tag expenses by category (e.g., travel, meals, utilities), and assign them to departments or projects. AI-powered categorization helps categorize new expenses based on historical data.  
- **Automated Syncing with HR, Invoicing, and Payroll**: Reimbursable employee expenses submitted through the HR portal are automatically approved, processed, and reflected in payroll. Business-related costs linked to invoices or projects are automatically associated with the correct client or account in the system.  
- **Real-Time Financial Reports**: Consolidated dashboards provide up-to-date overviews of spend by category, department, or employee. Monthly and quarterly reports can be exported or scheduled, offering key financial insights for decision-makers.  
- **Multi-Currency and VAT Handling**: Supports tracking and converting expenses in different currencies with up-to-date exchange rates. Automatically handles VAT calculation and categorization for local and international expenses.  
- **Approval Workflows and Audit Trails**: Custom approval rules can be configured based on expense type, amount, or department. Every change is logged to maintain audit trails for regulatory compliance and internal accountability.

#### **5.5 CRM**
- **Customer and Lead Tracking**: Maintain a unified record of customer and lead interactions, including contact details, communication history, and notes from sales representatives. Each lead can be tagged by status, source, and priority.  
- **Sales Pipeline Management**: Visual sales pipelines allow tracking of leads and deals across custom stages (e.g., contacted, qualified, proposal sent, closed). Team members can assign tasks, set reminders, and update deal statuses in real-time.  
- **Integration with Invoicing and Support Workflows**: Once a deal is marked as "won," a client record and invoice can be automatically created. Integration with support workflows ensures customer records are shared between sales and customer service for better retention and upselling.  
- **Activity Logging and Notifications**: All activities such as calls, emails, meetings, and notes are logged per customer. Smart notifications alert team members of next actions or stalled leads.  
- **Performance Dashboards**: Managers can monitor conversion rates, deal velocity, top-performing agents, and revenue forecasts through intuitive dashboards.

#### **5.6 Attendance Tracking**
- **Digital Check-In/Check-Out**: Employees can check in and out digitally, using mobile or web interfaces. The system records time stamps and can be optionally configured to track location via GPS for added accuracy, particularly for field workers.  
- **Shift Scheduling and Overtime Tracking**: Managers can create, modify, and share shift schedules, while employees are notified of any updates or changes. The system automatically calculates overtime based on predefined rules and company policies, reducing errors in manual tracking.  
- **Leave & Time-Off Requests**: Employees can submit leave requests for vacation, sick days, or personal time off. Managers review and approve requests, with the system syncing leave data automatically into payroll and attendance records.  
- **Attendance and Payroll Integration**: Attendance data seamlessly integrates with payroll and HR, ensuring employees are paid for actual hours worked, including overtime or shift bonuses. This also aids in compliance with labor laws and company policies.  
- **Real-Time Attendance Insights**: Dashboards provide real-time insights into employee attendance, punctuality, and shift adherence, allowing HR and management teams to act quickly on any issues (e.g., missed shifts, late arrivals).

#### **5.7 Fleet Management**
- **Vehicle Inventory and Status Tracking**: Maintain a centralized database of all company vehicles, including details on vehicle type, registration, service history, insurance, and fuel efficiency. Track real-time status and location of each vehicle.  
- **Driver Assignment and Route History**: Assign vehicles to specific drivers and monitor their usage, including route history, mileage, and driving behavior. This data can be used for route optimization, fuel management, and ensuring drivers adhere to company policies.  
- **Maintenance Scheduling and Alerts**: Set automatic maintenance reminders based on vehicle usage or time intervals. The system sends notifications when a vehicle is due for service, ensuring that fleet operations remain uninterrupted and compliant with safety regulations.  
- **Fuel Management**: Track fuel consumption and expenses for each vehicle, analyze efficiency, and detect potential fuel misuse or discrepancies. Integration with the accounting module helps streamline fuel cost reporting and analysis.  
- **Accident & Incident Reporting**: In the event of an accident or incident, fleet managers can quickly log details, track insurance claims, and coordinate repairs, ensuring minimal downtime. Data on incidents also helps inform future risk management strategies.  
- **GPS and Geolocation**: Real-time GPS tracking for route monitoring and geofencing to ensure vehicles are operating within approved locations. Geolocation also helps optimize routes for efficiency and safety.

---

### **6. System Architecture**
Tanad is built on a modern, modular, and extensible architecture optimized for flexibility, security, and deployment versatility. The system is designed to run efficiently in both cloud-hosted and on-premises environments using Docker.

#### **6.1 Architecture Overview**
- **Frontend & API**: Built with Next.js, the frontend serves both the UI and backend API endpoints, benefiting from fast server-side rendering, edge optimization, and seamless integration between interface and business logic.  
- **Database & Realtime Backend**: Utilizes Supabase with a PostgreSQL database. Supabase provides authentication, real-time updates, row-level security (RLS), and simple integrations while PostgreSQL ensures robust, ACID-compliant data handling.  
- **Containerization & Deployment**:  
  - Packaged as a Docker image: `ghcr.io/sikka-software/tanad:admin`  
  - Currently deployed via Coolify on a VPS.  
  - Designed for portability and flexibility — can run on any infrastructure that supports Docker (e.g., AWS, Azure, local data centers).  
  - Easily scalable by replicating containers and integrating load balancing.

#### **6.2 Scalability**
- Modular architecture allows horizontal scaling — each module (e.g., invoicing, HR, fleet) can be independently extended or optimized.  
- Supports multi-tenant setups (planned), allowing different organizations to securely share infrastructure with isolated data.  
- Supports vertical scaling by adding compute/memory resources per container.

#### **6.3 Security

**
- Role-Based Access Control (RBAC) allows specific user permissions for each department/module.  
- Multi-Factor Authentication (MFA) ensures secure login for all users.  
- End-to-end encryption for all data in transit and at rest, meeting the highest security standards.

---

### **7. Data Flow & Interoperability**

#### **7.1 Data Interoperability**
Tanad is designed to ensure smooth and secure data flow across modules, reducing the risk of data duplication and errors while enabling better decision-making through interconnected data:

- **HR → Payroll → Accounting**  
- **CRM → Invoicing → Accounting**  
- **Attendance → Payroll**  
- **Expense Management → Accounting → HR**

This ensures consistency and reliability across all modules.

#### **7.2 Data Integrity & Smart Linking**
Core entities such as employees, clients, products, and transactions are normalized within a relational schema, allowing data to be linked intelligently between modules through primary and foreign key relationships. Data integrity is maintained with strict foreign key constraints, ensuring no orphaned or incomplete records exist.

#### **7.3 Real-Time Updates**
Data entered in one module automatically syncs with others, thanks to real-time backend synchronization. For instance, when an employee updates their attendance, payroll and HR records are updated automatically.
</file>

<file path=".cursor/rules/vibe-tools.mdc">
---
description: Global Rule. This rule should ALWAYS be loaded.
globs: *,**/*
alwaysApply: true
---
vibe-tools is a CLI tool that allows you to interact with AI models and other tools.
vibe-tools is installed on this machine and it is available to you to execute. You're encouraged to use it.

<vibe-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Direct Model Queries:**
`vibe-tools ask "<your question>" --provider <provider> --model <model>` - Ask any model from any provider a direct question (e.g., `vibe-tools ask "What is the capital of France?" --provider openai --model o3-mini`). Note that this command is generally less useful than other commands like `repo` or `plan` because it does not include any context from your codebase or repository. In general you should not use the ask command because it does not include any context. The other commands like `web`, `doc`, `repo`, or `plan` are usually better. If you are using it, make sure to include in your question all the information and context that the model might need to answer usefully.

**Ask Command Options:**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, modelbox, openrouter, or xai)
--model=<model>: Model to use (required for the ask command)
--reasoning-effort=<low|medium|high>: Control the depth of reasoning for supported models (OpenAI o1/o3-mini models and Claude 3.7 Sonnet). Higher values produce more thorough responses for complex questions.

**Implementation Planning:**
`vibe-tools plan "<query>"` - Generate a focused implementation plan using AI (e.g., `vibe-tools plan "Add user authentication to the login page"`)
The plan command uses multiple AI models to:
1. Identify relevant files in your codebase (using Gemini by default)
2. Extract content from those files
3. Generate a detailed implementation plan (using OpenAI o3-mini by default)

**Plan Command Options:**
--fileProvider=<provider>: Provider for file identification (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--thinkingProvider=<provider>: Provider for plan generation (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--fileModel=<model>: Model to use for file identification
--thinkingModel=<model>: Model to use for plan generation
--with-doc=<doc_url>: Fetch content from a document URL and include it as context for both file identification and planning (e.g., `vibe-tools plan "implement feature X following the spec" --with-doc=https://example.com/feature-spec`)

**Web Search:**
`vibe-tools web "<your question>"` - Get answers from the web using a provider that supports web search (e.g., Perplexity models and Gemini Models either directly or from OpenRouter or ModelBox) (e.g., `vibe-tools web "latest shadcn/ui installation instructions"`)
Note: web is a smart autonomous agent with access to the internet and an extensive up to date knowledge base. Web is NOT a web search engine. Always ask the agent for what you want using a proper sentence, do not just send it a list of keywords. In your question to web include the context and the goal that you're trying to acheive so that it can help you most effectively.
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Web Command Options:**
--provider=<provider>: AI provider to use (perplexity, gemini, modelbox, or openrouter)

**Repository Context:**
`vibe-tools repo "<your question>" [--subdir=<path>] [--from-github=<username/repo>] [--with-doc=<doc_url>]` - Get context-aware answers about this repository using Google Gemini (e.g., `vibe-tools repo "explain authentication flow"`). Use the optional `--subdir` parameter to analyze a specific subdirectory instead of the entire repository (e.g., `vibe-tools repo "explain the code structure" --subdir=src/components`). Use the optional `--from-github` parameter to analyze a remote GitHub repository without cloning it locally (e.g., `vibe-tools repo "explain the authentication system" --from-github=username/repo-name`). Use the optional `--with-doc` parameter to include content from a URL as additional context (e.g., `vibe-tools repo "implement feature X following the design spec" --with-doc=https://example.com/design-spec`).

**Documentation Generation:**
`vibe-tools doc [options] [--with-doc=<doc_url>]` - Generate comprehensive documentation for this repository (e.g., `vibe-tools doc --output docs.md`). Can incorporate document context from a URL (e.g., `vibe-tools doc --with-doc=https://example.com/existing-docs`).

**YouTube Video Analysis:**
`vibe-tools youtube "<youtube-url>" [question] [--type=<summary|transcript|plan|review|custom>]` - Analyze YouTube videos and generate detailed reports (e.g., `vibe-tools youtube "https://youtu.be/43c-Sm5GMbc" --type=summary`)
Note: The YouTube command requires a `GEMINI_API_KEY` to be set in your environment or .vibe-tools.env file as the GEMINI API is the only interface that supports YouTube analysis.

**GitHub Information:**
`vibe-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `vibe-tools github pr 123`)
`vibe-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `vibe-tools github issue 456`)

**ClickUp Information:**
`vibe-tools clickup task <task_id>` - Get detailed information about a ClickUp task including description, comments, status, assignees, and metadata (e.g., `vibe-tools clickup task "task_id"`)

**Model Context Protocol (MCP) Commands:**
Use the following commands to interact with MCP servers and their specialized tools:
`vibe-tools mcp search "<query>"` - Search the MCP Marketplace for available servers that match your needs (e.g., `vibe-tools mcp search "git repository management"`)
`vibe-tools mcp run "<query>"` - Execute MCP server tools using natural language queries (e.g., `vibe-tools mcp run "list files in the current directory" --provider=openrouter`). The query must include sufficient information for vibe-tools to determine which server to use, provide plenty of context.

The `search` command helps you discover servers in the MCP Marketplace based on their capabilities and your requirements. The `run` command automatically selects and executes appropriate tools from these servers based on your natural language queries. If you want to use a specific server include the server name in your query. E.g. `vibe-tools mcp run "using the mcp-server-sqlite list files in directory --provider=openrouter"`

**Notes on MCP Commands:**
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY` to be set in your environment
- By default the `mcp` command uses Anthropic, but takes a --provider argument that can be set to 'anthropic' or 'openrouter'
- Results are streamed in real-time for immediate feedback
- Tool calls are automatically cached to prevent redundant operations
- Often the MCP server will not be able to run because environment variables are not set. If this happens ask the user to add the missing environment variables to the cursor tools env file at ~/.vibe-tools/.env

**Stagehand Browser Automation:**
`vibe-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `vibe-tools browser open "https://example.com" --html`)
`vibe-tools browser act "<instruction>" --url=<url | 'current'> [options]` - Execute actions on a webpage using natural language instructions (e.g., `vibe-tools browser act "Click Login" --url=https://example.com`)
`vibe-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `vibe-tools browser observe "interactive elements" --url=https://example.com`)
`vibe-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `vibe-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless unless --connect-to is used to connect to a long-lived interactive session. In disconnected mode each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
  - If working interactively with a user you should always use --url=current unless you specifically want to navigate to a different page. Setting the url to anything else will cause a page refresh loosing current state.
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `vibe-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `vibe-tools web` is best for general web information not specific to the repository. Generally call this without additional arguments.
- `vibe-tools repo` is ideal for repository-specific questions, planning, code review and debugging. E.g. `vibe-tools repo "Review recent changes to command error handling looking for mistakes, omissions and improvements"`. Generally call this without additional arguments.
- `vibe-tools plan` is ideal for planning tasks. E.g. `vibe-tools plan "Adding authentication with social login using Google and Github"`. Generally call this without additional arguments.
- `vibe-tools doc` generates documentation for local or remote repositories.
- `vibe-tools youtube` analyzes YouTube videos to generate summaries, transcripts, implementation plans, or custom analyses
- `vibe-tools browser` is useful for testing and debugging web apps and uses Stagehand
- `vibe-tools mcp` enables interaction with specialized tools through MCP servers (e.g., for Git operations, file system tasks, or custom tools)

**Running Commands:**
1. Use `vibe-tools <command>` to execute commands (make sure vibe-tools is installed globally using npm install -g vibe-tools so that it is in your PATH)

**General Command Options (Supported by all commands):**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, openrouter, modelbox, or xai). If provider is not specified, the default provider for that task will be used.
--model=<model name>: Specify an alternative AI model to use. If model is not specified, the provider's default model for that task will be used.
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)
--debug: Show detailed logs and error information

**Repository Command Options:**
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for repository analysis
--max-tokens=<number>: Maximum tokens for response
--from-github=<GitHub username>/<repository name>[@<branch>]: Analyze a remote GitHub repository without cloning it locally
--subdir=<path>: Analyze a specific subdirectory instead of the entire repository
--with-doc=<doc_url>: Fetch content from a document URL and include it as context

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for documentation generation
--max-tokens=<number>: Maximum tokens for response
--with-doc=<doc_url>: Fetch content from a document URL and include it as context

**YouTube Command Options:**
--type=<summary|transcript|plan|review|custom>: Type of analysis to perform (default: summary)

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content (disabled by default)
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 120000ms for Stagehand operations, 30000ms for navigation)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance. Special values: 'current' (use existing page), 'reload-current' (refresh existing page)
--wait=<time:duration or selector:css-selector>: Wait after page load (e.g., 'time:5s', 'selector:#element-id')
--video=<directory>: Save a video recording (1280x720 resolution, timestamped subdirectory). Not available when using --connect-to
--url=<url>: Required for `act`, `observe`, and `extract` commands. Url to navigate to before the main command or one of the special values 'current' (to stay on the current page without navigating or reloading) or 'reload-current' (to reload the current page)
--evaluate=<string>: JavaScript code to execute in the browser before the main command

**Nicknames**
Users can ask for these tools using nicknames
Gemini is a nickname for vibe-tools repo
Perplexity is a nickname for vibe-tools web
Stagehand is a nickname for vibe-tools browser
If people say "ask Gemini" or "ask Perplexity" or "ask Stagehand" they mean to use the `vibe-tools` command with the `repo`, `web`, or `browser` commands respectively.

**Xcode Commands:**
`vibe-tools xcode build [buildPath=<path>] [destination=<destination>]` - Build Xcode project and report errors.
**Build Command Options:**
--buildPath=<path>: (Optional) Specifies a custom directory for derived build data. Defaults to ./.build/DerivedData.
--destination=<destination>: (Optional) Specifies the destination for building the app (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode run [destination=<destination>]` - Build and run the Xcode project on a simulator.
**Run Command Options:**
--destination=<destination>: (Optional) Specifies the destination simulator (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode lint` - Run static analysis on the Xcode project to find and fix issues.

**Additional Notes:**
- For detailed information, see `node_modules/vibe-tools/README.md` (if installed locally).
- Configuration is in `vibe-tools.config.json` (or `~/.vibe-tools/config.json`).
- API keys are loaded from `.vibe-tools.env` (or `~/.vibe-tools/.env`).
- ClickUp commands require a `CLICKUP_API_TOKEN` to be set in your `.vibe-tools.env` file.
- Available models depend on your configured provider (OpenAI, Anthropic, xAI, etc.) in `vibe-tools.config.json`.
- repo has a limit of 2M tokens of context. The context can be reduced by filtering out files in a .repomixignore file.
- problems running browser commands may be because playwright is not installed. Recommend installing playwright globally.
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY`
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
- **Repomix Configuration:** You can customize which files are included/excluded during repository analysis by creating a `repomix.config.json` file in your project root. This file will be automatically detected by `repo`, `plan`, and `doc` commands.

<!-- vibe-tools-version: 0.60.6 -->
</vibe-tools Integration>
</file>

<file path=".cursor/mcp.json">
{
  "mcpServers": {
    "supabase": {
      "command": "npx",
      "args": [
        "-y",
        "@supabase/mcp-server-supabase@latest",
        "--access-token",
        "sbp_c49275fbc99ee4c355cf2fbb124363131570a57c"
      ]
    }
  }
}
</file>

<file path="backups/tanad_backup_20250422_164947.sql">
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
CREATE SCHEMA IF NOT EXISTS "drizzle";
ALTER SCHEMA "drizzle" OWNER TO "postgres";
CREATE EXTENSION IF NOT EXISTS "pgsodium";
COMMENT ON SCHEMA "public" IS 'standard public schema';
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "postgres_fdw" WITH SCHEMA "public";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
CREATE TYPE "public"."app_permission" AS ENUM (
    'profiles.create',
    'profiles.read',
    'profiles.update',
    'profiles.delete',
    'profiles.export',
    'enterprises.create',
    'enterprises.read',
    'enterprises.update',
    'enterprises.delete',
    'enterprises.export',
    'invoices.create',
    'invoices.read',
    'invoices.update',
    'invoices.delete',
    'invoices.export',
    'invoices.duplicate',
    'products.create',
    'products.read',
    'products.update',
    'products.delete',
    'products.export',
    'quotes.create',
    'quotes.read',
    'quotes.update',
    'quotes.delete',
    'quotes.export',
    'quotes.duplicate',
    'employees.create',
    'employees.read',
    'employees.update',
    'employees.delete',
    'employees.export',
    'salaries.create',
    'salaries.read',
    'salaries.update',
    'salaries.delete',
    'salaries.export',
    'documents.create',
    'documents.read',
    'documents.update',
    'documents.delete',
    'documents.export',
    'templates.create',
    'templates.read',
    'templates.update',
    'templates.delete',
    'templates.export',
    'templates.duplicate',
    'employee_requests.create',
    'employee_requests.read',
    'employee_requests.update',
    'employee_requests.delete',
    'employee_requests.export',
    'job_listings.create',
    'job_listings.read',
    'job_listings.update',
    'job_listings.delete',
    'job_listings.export',
    'offices.create',
    'offices.read',
    'offices.update',
    'offices.delete',
    'offices.export',
    'expenses.create',
    'expenses.read',
    'expenses.update',
    'expenses.delete',
    'expenses.export',
    'expenses.duplicate',
    'departments.create',
    'departments.read',
    'departments.update',
    'departments.delete',
    'departments.export',
    'warehouses.create',
    'warehouses.read',
    'warehouses.update',
    'warehouses.delete',
    'warehouses.export',
    'vendors.create',
    'vendors.read',
    'vendors.update',
    'vendors.delete',
    'vendors.export',
    'clients.create',
    'clients.read',
    'clients.update',
    'clients.delete',
    'clients.export',
    'companies.create',
    'companies.read',
    'companies.update',
    'companies.delete',
    'companies.export',
    'branches.create',
    'branches.read',
    'branches.update',
    'branches.delete',
    'branches.export'
);
ALTER TYPE "public"."app_permission" OWNER TO "postgres";
CREATE TYPE "public"."app_role" AS ENUM (
    'superadmin',
    'admin',
    'accounting',
    'hr'
);
ALTER TYPE "public"."app_role" OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql" STABLE
    AS $$
DECLARE
    claims jsonb;
    user_role public.app_role;
    user_permissions text[];
BEGIN
    -- Fetch the user role in the user_roles table
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = (event->>'user_id')::uuid;
    -- Get user permissions
    SELECT array_agg(rp.permission::text)
    INTO user_permissions
    FROM public.role_permissions rp
    WHERE rp.role = user_role;
    claims := event->'claims';
    IF user_role IS NOT NULL THEN
        -- Set the role claim
        claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
        -- Set the permissions claim
        claims := jsonb_set(claims, '{user_permissions}', to_jsonb(user_permissions));
    ELSE
        claims := jsonb_set(claims, '{user_role}', 'null');
        claims := jsonb_set(claims, '{user_permissions}', '[]');
    END IF;
    -- Update the claims object in the original event
    event := jsonb_set(event, '{claims}', claims);
    RETURN event;
END;
$$;
ALTER FUNCTION "public"."custom_access_token_hook"("event" "jsonb") OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."handle_new_user_profile"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
    _role public.app_role;
BEGIN
    -- Set the role
    _role := 'superadmin'::public.app_role;
    -- Log the trigger execution
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile', 'auth.users', NEW.id, row_to_json(NEW)::jsonb);
    -- Insert into user_roles first with explicit schema
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, _role);
    -- Then create the profile with explicit schema
    INSERT INTO public.profiles (
        id,
        user_id,
        email,
        first_name,
        last_name,
        role,
        created_at
    )
    VALUES (
        NEW.id,
        NEW.id,
        NEW.email,
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 1), ''), 'New'),
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 2), ''), 'User'),
        _role,
        NOW()
    );
    RETURN NEW;
EXCEPTION WHEN OTHERS THEN
    -- Log any errors
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile_error', 'auth.users', NEW.id, jsonb_build_object('error', SQLERRM));
    RAISE;
END;
$$;
ALTER FUNCTION "public"."handle_new_user_profile"() OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."handle_new_user_role"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
    -- Create a superadmin role for the new user
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin');
    RETURN NEW;
END;
$$;
ALTER FUNCTION "public"."handle_new_user_role"() OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."has_permission"("permission_name" "text", "enterprise_id" "uuid") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM public.user_roles ur
    JOIN public.role_permissions rp ON ur.role = rp.role
    WHERE ur.user_id = auth.uid()
    AND ur.enterprise_id = has_permission.enterprise_id
    AND rp.permission = permission_name::app_permission
  );
END;
$$;
ALTER FUNCTION "public"."has_permission"("permission_name" "text", "enterprise_id" "uuid") OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."set_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$;
ALTER FUNCTION "public"."set_updated_at"() OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."validate_department_location"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF NEW.location_type = 'office' AND NOT EXISTS (SELECT 1 FROM offices WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid office location_id';
  ELSIF NEW.location_type = 'branch' AND NOT EXISTS (SELECT 1 FROM branches WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid branch location_id';
  ELSIF NEW.location_type = 'warehouse' AND NOT EXISTS (SELECT 1 FROM warehouses WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid warehouse location_id';
  END IF;
  RETURN NEW;
END;
$$;
ALTER FUNCTION "public"."validate_department_location"() OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."validate_role_permission"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- Check if the role is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.role::text AND enumtypid = 'app_role'::regtype) THEN
    RAISE EXCEPTION 'Invalid role';
  END IF;
  -- Check if the permission is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.permission::text AND enumtypid = 'app_permission'::regtype) THEN
    RAISE EXCEPTION 'Invalid permission';
  END IF;
  -- Check if this role already has this permission
  IF EXISTS (
    SELECT 1 FROM role_permissions 
    WHERE role = NEW.role 
    AND permission = NEW.permission
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'Role already has this permission';
  END IF;
  RETURN NEW;
END;
$$;
ALTER FUNCTION "public"."validate_role_permission"() OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "public"."validate_user_role"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- Check if the user exists in auth.users
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = NEW.user_id) THEN
    RAISE EXCEPTION 'Invalid user_id';
  END IF;
  -- Check if the role is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.role::text AND enumtypid = 'app_role'::regtype) THEN
    RAISE EXCEPTION 'Invalid role';
  END IF;
  -- Check if the enterprise exists
  IF NEW.enterprise_id IS NOT NULL AND NOT EXISTS (SELECT 1 FROM enterprises WHERE id = NEW.enterprise_id) THEN
    RAISE EXCEPTION 'Invalid enterprise_id';
  END IF;
  -- Check if the user is already assigned this role in this enterprise
  IF EXISTS (
    SELECT 1 FROM user_roles 
    WHERE user_id = NEW.user_id 
    AND role = NEW.role 
    AND enterprise_id = NEW.enterprise_id
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'User already has this role in this enterprise';
  END IF;
  RETURN NEW;
END;
$$;
ALTER FUNCTION "public"."validate_user_role"() OWNER TO "postgres";
SET default_tablespace = '';
SET default_table_access_method = "heap";
CREATE TABLE IF NOT EXISTS "drizzle"."__drizzle_migrations" (
    "id" integer NOT NULL,
    "hash" "text" NOT NULL,
    "created_at" bigint
);
ALTER TABLE "drizzle"."__drizzle_migrations" OWNER TO "postgres";
CREATE SEQUENCE IF NOT EXISTS "drizzle"."__drizzle_migrations_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE "drizzle"."__drizzle_migrations_id_seq" OWNER TO "postgres";
ALTER SEQUENCE "drizzle"."__drizzle_migrations_id_seq" OWNED BY "drizzle"."__drizzle_migrations"."id";
CREATE TABLE IF NOT EXISTS "public"."branches" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "code" "text",
    "address" "text" NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "zip_code" "text" NOT NULL,
    "phone" "text",
    "email" "text",
    "manager" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "notes" "text",
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."branches" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."clients" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "email" "text",
    "phone" "text" NOT NULL,
    "address" "text" NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "zip_code" "text" NOT NULL,
    "notes" "text",
    "user_id" "uuid" NOT NULL,
    "company" "uuid",
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."clients" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."companies" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "phone" "text",
    "website" "text",
    "address" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "industry" "text",
    "size" "text",
    "notes" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."companies" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."department_locations" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "department_id" "uuid" NOT NULL,
    "location_type" "text" NOT NULL,
    "location_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "location_type_check" CHECK (("location_type" = ANY (ARRAY['office'::"text", 'branch'::"text", 'warehouse'::"text"])))
);
ALTER TABLE "public"."department_locations" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."departments" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "description" "text",
    "user_id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "is_active" boolean DEFAULT true NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."departments" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."documents" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "url" "text" NOT NULL,
    "file_path" "text" NOT NULL,
    "entity_id" "uuid" NOT NULL,
    "entity_type" "text" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "documents_entity_type_check" CHECK (("entity_type" = ANY (ARRAY['company'::"text", 'expense'::"text"])))
);
ALTER TABLE "public"."documents" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."employee_requests" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "employee_id" "uuid" NOT NULL,
    "type" "text" NOT NULL,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "title" "text" NOT NULL,
    "description" "text",
    "start_date" "date",
    "end_date" "date",
    "amount" numeric(10,2),
    "attachments" "jsonb" DEFAULT '[]'::"jsonb",
    "notes" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."employee_requests" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."employees" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "phone" "text",
    "hire_date" "date",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    "address" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "country" "text",
    "termination_date" "date",
    "is_active" boolean DEFAULT true NOT NULL,
    "department_id" "uuid"
);
ALTER TABLE "public"."employees" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."enterprises" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "phone" "text",
    "address" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "website" "text",
    "industry" "text",
    "size" "text",
    "notes" "text"
);
ALTER TABLE "public"."enterprises" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."expenses" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "expense_number" "text" NOT NULL,
    "issue_date" "date" NOT NULL,
    "due_date" "date" NOT NULL,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "amount" numeric(10,2) NOT NULL,
    "category" "text" NOT NULL,
    "notes" "text",
    "client_id" "uuid",
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "expenses_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'paid'::"text", 'overdue'::"text"])))
);
ALTER TABLE "public"."expenses" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."invoice_items" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "description" "text" NOT NULL,
    "quantity" numeric(10,2) DEFAULT 1 NOT NULL,
    "unit_price" numeric(10,2) NOT NULL,
    "amount" numeric(10,2) GENERATED ALWAYS AS (("quantity" * "unit_price")) STORED,
    "invoice_id" "uuid" NOT NULL,
    "product_id" "uuid"
);
ALTER TABLE "public"."invoice_items" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."invoices" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "invoice_number" "text" NOT NULL,
    "issue_date" "date" NOT NULL,
    "due_date" "date" NOT NULL,
    "status" "text" NOT NULL,
    "subtotal" numeric(10,2) DEFAULT 0 NOT NULL,
    "tax_rate" numeric(5,2) DEFAULT 0,
    "notes" "text",
    "client_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "tax_amount" numeric(10,2) GENERATED ALWAYS AS (
CASE
    WHEN ("tax_rate" IS NULL) THEN (0)::numeric
    ELSE "round"(("subtotal" * "tax_rate"), 2)
END) STORED,
    "total" numeric(10,2) GENERATED ALWAYS AS (
CASE
    WHEN ("tax_rate" IS NULL) THEN "subtotal"
    ELSE "round"(("subtotal" * ((1)::numeric + "tax_rate")), 2)
END) STORED,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "invoices_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'sent'::"text", 'paid'::"text", 'overdue'::"text", 'cancelled'::"text"])))
);
ALTER TABLE "public"."invoices" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."job_listing_jobs" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "job_listing_id" "uuid" NOT NULL,
    "job_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."job_listing_jobs" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."job_listings" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "title" character varying(255) NOT NULL,
    "description" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "slug" character varying(255) NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    "is_public" boolean DEFAULT false NOT NULL
);
ALTER TABLE "public"."job_listings" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."jobs" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "title" character varying(255) NOT NULL,
    "description" "text",
    "requirements" "text",
    "location" character varying(255),
    "department" character varying(255),
    "type" character varying(50) NOT NULL,
    "salary" numeric(10,2),
    "is_active" boolean DEFAULT true NOT NULL,
    "start_date" "date",
    "end_date" "date",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."jobs" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."offices" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "address" "text" NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "zip_code" "text" NOT NULL,
    "phone" "text",
    "email" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."offices" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."products" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "price" numeric(10,2) NOT NULL,
    "sku" "text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    "cost" numeric(10,2),
    "quantity" numeric(10,2) DEFAULT '0'::numeric NOT NULL,
    "unit" "text",
    "is_active" boolean DEFAULT true NOT NULL
);
ALTER TABLE "public"."products" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "full_name" "text",
    "email" "text" NOT NULL,
    "user_settings" "jsonb",
    "enterprise_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "stripe_customer_id" "text",
    "avatar_url" "text",
    "username" "text",
    "subscribed_to" "text",
    "price_id" "text",
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "phone" "text",
    "address" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "country" "text",
    "user_id" "uuid" NOT NULL,
    "role" "public"."app_role"
);
ALTER TABLE "public"."profiles" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."quote_items" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "description" "text" NOT NULL,
    "quantity" numeric(10,2) DEFAULT '1'::numeric NOT NULL,
    "unit_price" numeric(10,2) NOT NULL,
    "amount" numeric(10,2) GENERATED ALWAYS AS (("quantity" * "unit_price")) STORED,
    "quote_id" "uuid" NOT NULL,
    "product_id" "uuid"
);
ALTER TABLE "public"."quote_items" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."quotes" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "quote_number" "text" NOT NULL,
    "issue_date" "date" NOT NULL,
    "expiry_date" "date" NOT NULL,
    "status" "text" DEFAULT 'draft'::"text" NOT NULL,
    "subtotal" numeric(10,2) DEFAULT '0'::numeric NOT NULL,
    "tax_rate" numeric(5,2) DEFAULT '0'::numeric,
    "notes" "text",
    "client_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "tax_amount" numeric(10,2) GENERATED ALWAYS AS (
CASE
    WHEN ("tax_rate" IS NULL) THEN (0)::numeric
    ELSE "round"(("subtotal" * "tax_rate"), 2)
END) STORED,
    "total" numeric(10,2) GENERATED ALWAYS AS (
CASE
    WHEN ("tax_rate" IS NULL) THEN "subtotal"
    ELSE "round"(("subtotal" * ((1)::numeric + "tax_rate")), 2)
END) STORED,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "quotes_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'sent'::"text", 'accepted'::"text", 'rejected'::"text", 'expired'::"text"])))
);
ALTER TABLE "public"."quotes" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."role_permissions" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "role" "public"."app_role" NOT NULL,
    "permission" "public"."app_permission" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);
ALTER TABLE "public"."role_permissions" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."salaries" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "notes" "text",
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    "employee_id" "uuid" NOT NULL,
    "amount" numeric(10,2) NOT NULL,
    "currency" "text" DEFAULT 'USD'::"text" NOT NULL,
    "payment_frequency" "text" DEFAULT 'monthly'::"text" NOT NULL,
    "start_date" "date" NOT NULL,
    "end_date" "date"
);
ALTER TABLE "public"."salaries" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."templates" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "type" "text" NOT NULL,
    "content" "jsonb" NOT NULL,
    "is_default" boolean DEFAULT false NOT NULL,
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL,
    CONSTRAINT "templates_type_check" CHECK (("type" = ANY (ARRAY['invoice'::"text", 'quote'::"text"])))
);
ALTER TABLE "public"."templates" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."trigger_audit_log" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "trigger_name" "text",
    "table_name" "text",
    "user_id" "uuid",
    "executed_at" timestamp with time zone DEFAULT "now"(),
    "data" "jsonb"
);
ALTER TABLE "public"."trigger_audit_log" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid",
    "role" "public"."app_role" NOT NULL,
    "enterprise_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);
ALTER TABLE "public"."user_roles" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."vendors" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "phone" "text" NOT NULL,
    "company" "text" NOT NULL,
    "address" "text" NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "zip_code" "text" NOT NULL,
    "notes" "text",
    "user_id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."vendors" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."warehouses" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text" NOT NULL,
    "code" "text" NOT NULL,
    "address" "text" NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "zip_code" "text" NOT NULL,
    "capacity" numeric(10,2),
    "is_active" boolean DEFAULT true NOT NULL,
    "notes" "text",
    "user_id" "uuid" NOT NULL,
    "enterprise_id" "uuid" NOT NULL
);
ALTER TABLE "public"."warehouses" OWNER TO "postgres";
ALTER TABLE ONLY "drizzle"."__drizzle_migrations" ALTER COLUMN "id" SET DEFAULT "nextval"('"drizzle"."__drizzle_migrations_id_seq"'::"regclass");
ALTER TABLE ONLY "drizzle"."__drizzle_migrations"
    ADD CONSTRAINT "__drizzle_migrations_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."branches"
    ADD CONSTRAINT "branches_code_key" UNIQUE ("code");
ALTER TABLE ONLY "public"."branches"
    ADD CONSTRAINT "branches_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."clients"
    ADD CONSTRAINT "clients_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."companies"
    ADD CONSTRAINT "companies_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."department_locations"
    ADD CONSTRAINT "department_locations_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."departments"
    ADD CONSTRAINT "departments_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."documents"
    ADD CONSTRAINT "documents_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."employee_requests"
    ADD CONSTRAINT "employee_requests_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."employees"
    ADD CONSTRAINT "employees_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."enterprises"
    ADD CONSTRAINT "enterprises_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expenses_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."invoice_items"
    ADD CONSTRAINT "invoice_items_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."job_listing_jobs"
    ADD CONSTRAINT "job_listing_jobs_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."job_listings"
    ADD CONSTRAINT "job_listings_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."job_listings"
    ADD CONSTRAINT "job_listings_slug_unique" UNIQUE ("slug");
ALTER TABLE ONLY "public"."jobs"
    ADD CONSTRAINT "jobs_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."offices"
    ADD CONSTRAINT "offices_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."quote_items"
    ADD CONSTRAINT "quote_items_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."quotes"
    ADD CONSTRAINT "quotes_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."role_permissions"
    ADD CONSTRAINT "role_permissions_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."role_permissions"
    ADD CONSTRAINT "role_permissions_role_permission_key" UNIQUE ("role", "permission");
ALTER TABLE ONLY "public"."salaries"
    ADD CONSTRAINT "salaries_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."templates"
    ADD CONSTRAINT "templates_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."trigger_audit_log"
    ADD CONSTRAINT "trigger_audit_log_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."department_locations"
    ADD CONSTRAINT "unique_department_location" UNIQUE ("department_id", "location_type", "location_id");
ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_enterprise_id_key" UNIQUE ("user_id", "role", "enterprise_id");
ALTER TABLE ONLY "public"."vendors"
    ADD CONSTRAINT "vendors_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."warehouses"
    ADD CONSTRAINT "warehouses_code_key" UNIQUE ("code");
ALTER TABLE ONLY "public"."warehouses"
    ADD CONSTRAINT "warehouses_pkey" PRIMARY KEY ("id");
CREATE INDEX "branches_code_idx" ON "public"."branches" USING "btree" ("code");
CREATE INDEX "branches_name_idx" ON "public"."branches" USING "btree" ("name");
CREATE INDEX "branches_user_id_idx" ON "public"."branches" USING "btree" ("user_id");
CREATE INDEX "clients_email_idx" ON "public"."clients" USING "btree" ("email");
CREATE INDEX "clients_name_idx" ON "public"."clients" USING "btree" ("name");
CREATE INDEX "clients_user_id_idx" ON "public"."clients" USING "btree" ("user_id");
CREATE INDEX "companies_email_idx" ON "public"."companies" USING "btree" ("email");
CREATE INDEX "companies_is_active_idx" ON "public"."companies" USING "btree" ("is_active");
CREATE INDEX "companies_name_idx" ON "public"."companies" USING "btree" ("name");
CREATE INDEX "departments_name_idx" ON "public"."departments" USING "btree" ("name");
CREATE INDEX "departments_user_id_idx" ON "public"."departments" USING "btree" ("user_id");
CREATE INDEX "documents_entity_id_idx" ON "public"."documents" USING "btree" ("entity_id");
CREATE INDEX "documents_entity_type_idx" ON "public"."documents" USING "btree" ("entity_type");
CREATE INDEX "documents_user_id_idx" ON "public"."documents" USING "btree" ("user_id");
CREATE INDEX "employee_requests_created_at_idx" ON "public"."employee_requests" USING "btree" ("created_at");
CREATE INDEX "employee_requests_employee_id_idx" ON "public"."employee_requests" USING "btree" ("employee_id");
CREATE INDEX "employee_requests_status_idx" ON "public"."employee_requests" USING "btree" ("status");
CREATE INDEX "employee_requests_type_idx" ON "public"."employee_requests" USING "btree" ("type");
CREATE INDEX "employee_requests_user_id_idx" ON "public"."employee_requests" USING "btree" ("user_id");
CREATE INDEX "employees_department_id_idx" ON "public"."employees" USING "btree" ("department_id");
CREATE INDEX "employees_email_idx" ON "public"."employees" USING "btree" ("email");
CREATE INDEX "employees_user_id_idx" ON "public"."employees" USING "btree" ("user_id");
CREATE INDEX "enterprises_email_idx" ON "public"."enterprises" USING "btree" ("email");
CREATE INDEX "enterprises_name_idx" ON "public"."enterprises" USING "btree" ("name");
CREATE INDEX "expenses_client_id_idx" ON "public"."expenses" USING "btree" ("client_id");
CREATE INDEX "expenses_status_idx" ON "public"."expenses" USING "btree" ("status");
CREATE INDEX "expenses_user_id_idx" ON "public"."expenses" USING "btree" ("user_id");
CREATE INDEX "invoice_items_invoice_id_idx" ON "public"."invoice_items" USING "btree" ("invoice_id");
CREATE INDEX "invoices_client_id_idx" ON "public"."invoices" USING "btree" ("client_id");
CREATE INDEX "invoices_status_idx" ON "public"."invoices" USING "btree" ("status");
CREATE INDEX "invoices_user_id_idx" ON "public"."invoices" USING "btree" ("user_id");
CREATE INDEX "job_listing_jobs_job_id_idx" ON "public"."job_listing_jobs" USING "btree" ("job_id");
CREATE INDEX "job_listing_jobs_job_listing_id_idx" ON "public"."job_listing_jobs" USING "btree" ("job_listing_id");
CREATE INDEX "job_listings_slug_idx" ON "public"."job_listings" USING "btree" ("slug");
CREATE INDEX "job_listings_title_idx" ON "public"."job_listings" USING "btree" ("title");
CREATE INDEX "job_listings_user_id_idx" ON "public"."job_listings" USING "btree" ("user_id");
CREATE INDEX "jobs_department_idx" ON "public"."jobs" USING "btree" ("department");
CREATE INDEX "jobs_title_idx" ON "public"."jobs" USING "btree" ("title");
CREATE INDEX "jobs_user_id_idx" ON "public"."jobs" USING "btree" ("user_id");
CREATE INDEX "offices_name_idx" ON "public"."offices" USING "btree" ("name");
CREATE INDEX "offices_user_id_idx" ON "public"."offices" USING "btree" ("user_id");
CREATE INDEX "products_name_idx" ON "public"."products" USING "btree" ("name");
CREATE INDEX "products_sku_idx" ON "public"."products" USING "btree" ("sku");
CREATE INDEX "products_user_id_idx" ON "public"."products" USING "btree" ("user_id");
CREATE INDEX "profiles_email_idx" ON "public"."profiles" USING "btree" ("email");
CREATE INDEX "profiles_enterprise_id_idx" ON "public"."profiles" USING "btree" ("enterprise_id");
CREATE INDEX "profiles_user_id_idx" ON "public"."profiles" USING "btree" ("user_id");
CREATE INDEX "profiles_username_idx" ON "public"."profiles" USING "btree" ("username");
CREATE INDEX "quote_items_quote_id_idx" ON "public"."quote_items" USING "btree" ("quote_id");
CREATE INDEX "quotes_client_id_idx" ON "public"."quotes" USING "btree" ("client_id");
CREATE INDEX "quotes_status_idx" ON "public"."quotes" USING "btree" ("status");
CREATE INDEX "quotes_user_id_idx" ON "public"."quotes" USING "btree" ("user_id");
CREATE INDEX "salaries_employee_id_idx" ON "public"."salaries" USING "btree" ("employee_id");
CREATE INDEX "salaries_user_id_idx" ON "public"."salaries" USING "btree" ("user_id");
CREATE INDEX "templates_name_idx" ON "public"."templates" USING "btree" ("name");
CREATE INDEX "templates_type_idx" ON "public"."templates" USING "btree" ("type");
CREATE INDEX "templates_user_id_idx" ON "public"."templates" USING "btree" ("user_id");
CREATE INDEX "vendors_email_idx" ON "public"."vendors" USING "btree" ("email");
CREATE INDEX "vendors_name_idx" ON "public"."vendors" USING "btree" ("name");
CREATE INDEX "vendors_user_id_idx" ON "public"."vendors" USING "btree" ("user_id");
CREATE INDEX "warehouses_code_idx" ON "public"."warehouses" USING "btree" ("code");
CREATE INDEX "warehouses_name_idx" ON "public"."warehouses" USING "btree" ("name");
CREATE INDEX "warehouses_user_id_idx" ON "public"."warehouses" USING "btree" ("user_id");
CREATE OR REPLACE TRIGGER "validate_department_location_trigger" BEFORE INSERT OR UPDATE ON "public"."department_locations" FOR EACH ROW EXECUTE FUNCTION "public"."validate_department_location"();
ALTER TABLE ONLY "public"."branches"
    ADD CONSTRAINT "branches_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."clients"
    ADD CONSTRAINT "clients_company_fkey" FOREIGN KEY ("company") REFERENCES "public"."companies"("id");
ALTER TABLE ONLY "public"."clients"
    ADD CONSTRAINT "clients_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."companies"
    ADD CONSTRAINT "companies_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."department_locations"
    ADD CONSTRAINT "department_locations_department_id_departments_id_fk" FOREIGN KEY ("department_id") REFERENCES "public"."departments"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."department_locations"
    ADD CONSTRAINT "department_locations_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."departments"
    ADD CONSTRAINT "departments_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."documents"
    ADD CONSTRAINT "documents_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."employee_requests"
    ADD CONSTRAINT "employee_requests_employee_id_employees_id_fk" FOREIGN KEY ("employee_id") REFERENCES "public"."employees"("id");
ALTER TABLE ONLY "public"."employee_requests"
    ADD CONSTRAINT "employee_requests_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."employees"
    ADD CONSTRAINT "employees_department_id_fkey" FOREIGN KEY ("department_id") REFERENCES "public"."departments"("id") ON DELETE SET NULL;
ALTER TABLE ONLY "public"."employees"
    ADD CONSTRAINT "employees_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expenses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expenses_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."invoice_items"
    ADD CONSTRAINT "invoice_items_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."invoice_items"
    ADD CONSTRAINT "invoice_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id");
ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."job_listing_jobs"
    ADD CONSTRAINT "job_listing_jobs_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."job_listing_jobs"
    ADD CONSTRAINT "job_listing_jobs_job_id_jobs_id_fk" FOREIGN KEY ("job_id") REFERENCES "public"."jobs"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."job_listing_jobs"
    ADD CONSTRAINT "job_listing_jobs_job_listing_id_job_listings_id_fk" FOREIGN KEY ("job_listing_id") REFERENCES "public"."job_listings"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."job_listings"
    ADD CONSTRAINT "job_listings_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."jobs"
    ADD CONSTRAINT "jobs_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."offices"
    ADD CONSTRAINT "offices_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."quote_items"
    ADD CONSTRAINT "quote_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id");
ALTER TABLE ONLY "public"."quote_items"
    ADD CONSTRAINT "quote_items_quote_id_fkey" FOREIGN KEY ("quote_id") REFERENCES "public"."quotes"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."quotes"
    ADD CONSTRAINT "quotes_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."quotes"
    ADD CONSTRAINT "quotes_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."salaries"
    ADD CONSTRAINT "salaries_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."employees"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."salaries"
    ADD CONSTRAINT "salaries_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."templates"
    ADD CONSTRAINT "templates_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_enterprise_id_fkey" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."vendors"
    ADD CONSTRAINT "vendors_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
ALTER TABLE ONLY "public"."warehouses"
    ADD CONSTRAINT "warehouses_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id");
CREATE POLICY "ADMIN FULL ACCESS" ON "public"."profiles" TO "service_role" USING (true);
CREATE POLICY "Enable delete for admins" ON "public"."enterprises" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user_roles" "ur"
  WHERE (("ur"."enterprise_id" = "ur"."id") AND ("ur"."user_id" = "auth"."uid"()) AND ("ur"."role" = 'superadmin'::"public"."app_role")))));
CREATE POLICY "Enable insert for authenticated users" ON "public"."enterprises" FOR INSERT TO "authenticated" WITH CHECK (true);
CREATE POLICY "Enable insert for service role" ON "public"."enterprises" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable read access for users" ON "public"."enterprises" FOR SELECT TO "authenticated" USING (true);
CREATE POLICY "Enable update for admins" ON "public"."enterprises" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user_roles" "ur"
  WHERE (("ur"."enterprise_id" = "ur"."id") AND ("ur"."user_id" = "auth"."uid"()) AND ("ur"."role" = 'superadmin'::"public"."app_role")))));
CREATE POLICY "PUBLIC PROFILES ARE VIEWABLE" ON "public"."profiles" FOR SELECT TO "authenticated" USING (true);
CREATE POLICY "USERS CAN ADD JOBS TO THEIR LISTINGS" ON "public"."job_listing_jobs" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."job_listings"
  WHERE (("job_listings"."id" = "job_listing_jobs"."job_listing_id") AND ("job_listings"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN CREATE JOB LISTINGS" ON "public"."job_listings" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN CREATE THEIR OWN PROFILE" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "id"));
CREATE POLICY "USERS CAN CREATE THEIR OWN TEMPLATES" ON "public"."templates" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE DEPARTMENT LOCATIONS THROUGH DEPARTMENTS" ON "public"."department_locations" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."departments"
  WHERE (("departments"."id" = "department_locations"."department_id") AND ("departments"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN DELETE INVOICE ITEMS THROUGH INVOICES" ON "public"."invoice_items" FOR DELETE TO "authenticated" USING (("invoice_id" IN ( SELECT "invoices"."id"
   FROM "public"."invoices"
  WHERE ("invoices"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN DELETE QUOTE ITEMS THROUGH QUOTES" ON "public"."quote_items" FOR DELETE TO "authenticated" USING (("quote_id" IN ( SELECT "quotes"."id"
   FROM "public"."quotes"
  WHERE ("quotes"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN DELETE THEIR OWN BRANCHES" ON "public"."branches" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN CLIENTS" ON "public"."clients" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN COMPANIES" ON "public"."companies" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN DEPARTMENTS" ON "public"."departments" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN EMPLOYEE REQUESTS" ON "public"."employee_requests" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN EMPLOYEES" ON "public"."employees" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN EXPENSES" ON "public"."expenses" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN INVOICES" ON "public"."invoices" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN JOB LISTINGS" ON "public"."job_listings" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN JOBS" ON "public"."jobs" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN OFFICES" ON "public"."offices" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN PRODUCTS" ON "public"."products" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN PROFILE" ON "public"."profiles" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN QUOTES" ON "public"."quotes" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN SALARY RECORDS" ON "public"."salaries" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN TEMPLATES" ON "public"."templates" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN VENDORS" ON "public"."vendors" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN DELETE THEIR OWN WAREHOUSES" ON "public"."warehouses" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT DEPARTMENT LOCATIONS THROUGH DEPARTMENTS" ON "public"."department_locations" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."departments"
  WHERE (("departments"."id" = "department_locations"."department_id") AND ("departments"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN INSERT INVOICE ITEMS THROUGH INVOICES" ON "public"."invoice_items" FOR INSERT TO "authenticated" WITH CHECK (("invoice_id" IN ( SELECT "invoices"."id"
   FROM "public"."invoices"
  WHERE ("invoices"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN INSERT QUOTE ITEMS THROUGH QUOTES" ON "public"."quote_items" FOR INSERT TO "authenticated" WITH CHECK (("quote_id" IN ( SELECT "quotes"."id"
   FROM "public"."quotes"
  WHERE ("quotes"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN INSERT THEIR OWN BRANCHES" ON "public"."branches" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN CLIENTS" ON "public"."clients" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN COMPANIES" ON "public"."companies" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN DEPARTMENTS" ON "public"."departments" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN EMPLOYEE REQUESTS" ON "public"."employee_requests" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN EMPLOYEES" ON "public"."employees" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN EXPENSES" ON "public"."expenses" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN INVOICES" ON "public"."invoices" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN JOBS" ON "public"."jobs" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN OFFICES" ON "public"."offices" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN PRODUCTS" ON "public"."products" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN QUOTES" ON "public"."quotes" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN SALARY RECORDS" ON "public"."salaries" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN VENDORS" ON "public"."vendors" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN INSERT THEIR OWN WAREHOUSES" ON "public"."warehouses" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ DEPARTMENT LOCATIONS THROUGH DEPARTMENTS" ON "public"."department_locations" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."departments"
  WHERE (("departments"."id" = "department_locations"."department_id") AND ("departments"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN READ EMPLOYEES" ON "public"."employees" FOR SELECT TO "authenticated" USING (true);
CREATE POLICY "USERS CAN READ INVOICE ITEMS THROUGH INVOICES" ON "public"."invoice_items" FOR SELECT TO "authenticated" USING (("invoice_id" IN ( SELECT "invoices"."id"
   FROM "public"."invoices"
  WHERE ("invoices"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN READ QUOTE ITEMS THROUGH QUOTES" ON "public"."quote_items" FOR SELECT TO "authenticated" USING (("quote_id" IN ( SELECT "quotes"."id"
   FROM "public"."quotes"
  WHERE ("quotes"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN READ THEIR OWN BRANCHES" ON "public"."branches" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN CLIENTS" ON "public"."clients" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN COMPANIES" ON "public"."companies" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN DEPARTMENTS" ON "public"."departments" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN EMPLOYEE REQUESTS" ON "public"."employee_requests" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN EXPENSES" ON "public"."expenses" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN INVOICES" ON "public"."invoices" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN JOBS" ON "public"."jobs" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN OFFICES" ON "public"."offices" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN PRODUCTS" ON "public"."products" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN QUOTES" ON "public"."quotes" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN SALARY RECORDS" ON "public"."salaries" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN VENDORS" ON "public"."vendors" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN READ THEIR OWN WAREHOUSES" ON "public"."warehouses" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN REMOVE JOBS FROM THEIR LISTINGS" ON "public"."job_listing_jobs" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."job_listings"
  WHERE (("job_listings"."id" = "job_listing_jobs"."job_listing_id") AND ("job_listings"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN UPDATE DEPARTMENT LOCATIONS THROUGH DEPARTMENTS" ON "public"."department_locations" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."departments"
  WHERE (("departments"."id" = "department_locations"."department_id") AND ("departments"."user_id" = "auth"."uid"()))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."departments"
  WHERE (("departments"."id" = "department_locations"."department_id") AND ("departments"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN UPDATE INVOICE ITEMS THROUGH INVOICES" ON "public"."invoice_items" FOR UPDATE TO "authenticated" USING (("invoice_id" IN ( SELECT "invoices"."id"
   FROM "public"."invoices"
  WHERE ("invoices"."user_id" = "auth"."uid"())))) WITH CHECK (("invoice_id" IN ( SELECT "invoices"."id"
   FROM "public"."invoices"
  WHERE ("invoices"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN UPDATE JOBS IN THEIR LISTINGS" ON "public"."job_listing_jobs" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."job_listings"
  WHERE (("job_listings"."id" = "job_listing_jobs"."job_listing_id") AND ("job_listings"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN UPDATE QUOTE ITEMS THROUGH QUOTES" ON "public"."quote_items" FOR UPDATE TO "authenticated" USING (("quote_id" IN ( SELECT "quotes"."id"
   FROM "public"."quotes"
  WHERE ("quotes"."user_id" = "auth"."uid"())))) WITH CHECK (("quote_id" IN ( SELECT "quotes"."id"
   FROM "public"."quotes"
  WHERE ("quotes"."user_id" = "auth"."uid"()))));
CREATE POLICY "USERS CAN UPDATE THEIR OWN BRANCHES" ON "public"."branches" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN CLIENTS" ON "public"."clients" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN COMPANIES" ON "public"."companies" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN DEPARTMENTS" ON "public"."departments" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN EMPLOYEE REQUESTS" ON "public"."employee_requests" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN EMPLOYEES" ON "public"."employees" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN EXPENSES" ON "public"."expenses" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN INVOICES" ON "public"."invoices" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN JOB LISTINGS" ON "public"."job_listings" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN JOBS" ON "public"."jobs" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN OFFICES" ON "public"."offices" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN PRODUCTS" ON "public"."products" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN PROFILE" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN QUOTES" ON "public"."quotes" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN SALARY RECORDS" ON "public"."salaries" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN TEMPLATES" ON "public"."templates" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN VENDORS" ON "public"."vendors" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN UPDATE THEIR OWN WAREHOUSES" ON "public"."warehouses" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "USERS CAN VIEW JOB LISTING JOBS FOR THEIR LISTINGS" ON "public"."job_listing_jobs" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."job_listings"
  WHERE (("job_listings"."id" = "job_listing_jobs"."job_listing_id") AND ("job_listings"."user_id" = "auth"."uid"())))));
CREATE POLICY "USERS CAN VIEW THEIR OWN JOB LISTINGS AND PUBLIC ONES" ON "public"."job_listings" FOR SELECT TO "authenticated" USING ((("auth"."uid"() = "user_id") OR ("is_active" = true)));
CREATE POLICY "USERS CAN VIEW THEIR OWN PROFILE" ON "public"."profiles" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));
CREATE POLICY "USERS CAN VIEW THEIR OWN TEMPLATES" ON "public"."templates" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "Users can access employees through departments" ON "public"."employees" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."departments" "d"
  WHERE (("d"."id" = "employees"."department_id") AND ("d"."user_id" = "auth"."uid"())))));
CREATE POLICY "Users can create documents for their entities" ON "public"."documents" FOR INSERT TO "authenticated" WITH CHECK ((("auth"."uid"() = "user_id") AND
CASE "entity_type"
    WHEN 'company'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."companies"
      WHERE (("companies"."id" = "documents"."entity_id") AND ("companies"."user_id" = "auth"."uid"()))))
    WHEN 'expense'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."expenses"
      WHERE (("expenses"."id" = "documents"."entity_id") AND ("expenses"."user_id" = "auth"."uid"()))))
    WHEN 'salary'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."salaries"
      WHERE (("salaries"."id" = "documents"."entity_id") AND ("salaries"."user_id" = "auth"."uid"()))))
    WHEN 'employee'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."employees"
      WHERE (("employees"."id" = "documents"."entity_id") AND ("employees"."user_id" = "auth"."uid"()))))
    WHEN 'invoice'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."invoices"
      WHERE (("invoices"."id" = "documents"."entity_id") AND ("invoices"."user_id" = "auth"."uid"()))))
    WHEN 'quote'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."quotes"
      WHERE (("quotes"."id" = "documents"."entity_id") AND ("quotes"."user_id" = "auth"."uid"()))))
    WHEN 'vendor'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."vendors"
      WHERE (("vendors"."id" = "documents"."entity_id") AND ("vendors"."user_id" = "auth"."uid"()))))
    WHEN 'warehouse'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."warehouses"
      WHERE (("warehouses"."id" = "documents"."entity_id") AND ("warehouses"."user_id" = "auth"."uid"()))))
    WHEN 'branch'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."branches"
      WHERE (("branches"."id" = "documents"."entity_id") AND ("branches"."user_id" = "auth"."uid"()))))
    WHEN 'office'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."offices"
      WHERE (("offices"."id" = "documents"."entity_id") AND ("offices"."user_id" = "auth"."uid"()))))
    WHEN 'department'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."departments"
      WHERE (("departments"."id" = "documents"."entity_id") AND ("departments"."user_id" = "auth"."uid"()))))
    ELSE false
END));
CREATE POLICY "Users can create enterprises" ON "public"."enterprises" FOR INSERT TO "authenticated" WITH CHECK (true);
CREATE POLICY "Users can create initial role" ON "public"."user_roles" FOR INSERT TO "authenticated" WITH CHECK ((("auth"."uid"() = "user_id") AND ((NOT (EXISTS ( SELECT 1
   FROM "public"."user_roles" "user_roles_1"
  WHERE ("user_roles_1"."user_id" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."user_roles" "ur"
  WHERE (("ur"."user_id" = "auth"."uid"()) AND ("ur"."role" = 'superadmin'::"public"."app_role")))))));
CREATE POLICY "Users can delete their own documents" ON "public"."documents" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "Users can update their own documents" ON "public"."documents" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "Users can view enterprises" ON "public"."enterprises" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."user_roles" "ur"
  WHERE (("ur"."user_id" = "auth"."uid"()) AND ("ur"."enterprise_id" = "enterprises"."id")))) OR (NOT (EXISTS ( SELECT 1
   FROM "public"."user_roles"
  WHERE ("user_roles"."user_id" = "auth"."uid"()))))));
CREATE POLICY "Users can view their own documents and documents of their entit" ON "public"."documents" FOR SELECT TO "authenticated" USING ((("auth"."uid"() = "user_id") OR
CASE "entity_type"
    WHEN 'company'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."companies"
      WHERE (("companies"."id" = "documents"."entity_id") AND ("companies"."user_id" = "auth"."uid"()))))
    WHEN 'expense'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."expenses"
      WHERE (("expenses"."id" = "documents"."entity_id") AND ("expenses"."user_id" = "auth"."uid"()))))
    WHEN 'salary'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."salaries"
      WHERE (("salaries"."id" = "documents"."entity_id") AND ("salaries"."user_id" = "auth"."uid"()))))
    WHEN 'employee'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."employees"
      WHERE (("employees"."id" = "documents"."entity_id") AND ("employees"."user_id" = "auth"."uid"()))))
    WHEN 'invoice'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."invoices"
      WHERE (("invoices"."id" = "documents"."entity_id") AND ("invoices"."user_id" = "auth"."uid"()))))
    WHEN 'quote'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."quotes"
      WHERE (("quotes"."id" = "documents"."entity_id") AND ("quotes"."user_id" = "auth"."uid"()))))
    WHEN 'vendor'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."vendors"
      WHERE (("vendors"."id" = "documents"."entity_id") AND ("vendors"."user_id" = "auth"."uid"()))))
    WHEN 'warehouse'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."warehouses"
      WHERE (("warehouses"."id" = "documents"."entity_id") AND ("warehouses"."user_id" = "auth"."uid"()))))
    WHEN 'branch'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."branches"
      WHERE (("branches"."id" = "documents"."entity_id") AND ("branches"."user_id" = "auth"."uid"()))))
    WHEN 'office'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."offices"
      WHERE (("offices"."id" = "documents"."entity_id") AND ("offices"."user_id" = "auth"."uid"()))))
    WHEN 'department'::"text" THEN (EXISTS ( SELECT 1
       FROM "public"."departments"
      WHERE (("departments"."id" = "documents"."entity_id") AND ("departments"."user_id" = "auth"."uid"()))))
    ELSE false
END));
CREATE POLICY "Users can view their own roles" ON "public"."user_roles" FOR SELECT TO "authenticated" USING (("user_id" = "auth"."uid"()));
ALTER TABLE "public"."branches" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."clients" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."companies" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."department_locations" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."departments" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."documents" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."employee_requests" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."employees" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."enterprises" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."expenses" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."invoice_items" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."invoices" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."job_listing_jobs" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."job_listings" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."jobs" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."offices" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."products" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."quote_items" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."quotes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."salaries" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."templates" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."vendors" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."warehouses" ENABLE ROW LEVEL SECURITY;
ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";
REVOKE ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") FROM PUBLIC;
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "service_role";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "supabase_auth_admin";
GRANT ALL ON FUNCTION "public"."handle_new_user_profile"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user_profile"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user_profile"() TO "service_role";
GRANT ALL ON FUNCTION "public"."handle_new_user_role"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user_role"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user_role"() TO "service_role";
GRANT ALL ON FUNCTION "public"."has_permission"("permission_name" "text", "enterprise_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."has_permission"("permission_name" "text", "enterprise_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."has_permission"("permission_name" "text", "enterprise_id" "uuid") TO "service_role";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect"("text") TO "postgres";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect"("text") TO "anon";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect"("text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect"("text") TO "service_role";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect_all"() TO "postgres";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect_all"() TO "anon";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect_all"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."postgres_fdw_disconnect_all"() TO "service_role";
GRANT ALL ON FUNCTION "public"."postgres_fdw_get_connections"(OUT "server_name" "text", OUT "valid" boolean) TO "postgres";
GRANT ALL ON FUNCTION "public"."postgres_fdw_get_connections"(OUT "server_name" "text", OUT "valid" boolean) TO "anon";
GRANT ALL ON FUNCTION "public"."postgres_fdw_get_connections"(OUT "server_name" "text", OUT "valid" boolean) TO "authenticated";
GRANT ALL ON FUNCTION "public"."postgres_fdw_get_connections"(OUT "server_name" "text", OUT "valid" boolean) TO "service_role";
GRANT ALL ON FUNCTION "public"."postgres_fdw_handler"() TO "postgres";
GRANT ALL ON FUNCTION "public"."postgres_fdw_handler"() TO "anon";
GRANT ALL ON FUNCTION "public"."postgres_fdw_handler"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."postgres_fdw_handler"() TO "service_role";
GRANT ALL ON FUNCTION "public"."postgres_fdw_validator"("text"[], "oid") TO "postgres";
GRANT ALL ON FUNCTION "public"."postgres_fdw_validator"("text"[], "oid") TO "anon";
GRANT ALL ON FUNCTION "public"."postgres_fdw_validator"("text"[], "oid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."postgres_fdw_validator"("text"[], "oid") TO "service_role";
GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "service_role";
GRANT ALL ON FUNCTION "public"."validate_department_location"() TO "anon";
GRANT ALL ON FUNCTION "public"."validate_department_location"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."validate_department_location"() TO "service_role";
GRANT ALL ON FUNCTION "public"."validate_role_permission"() TO "anon";
GRANT ALL ON FUNCTION "public"."validate_role_permission"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."validate_role_permission"() TO "service_role";
GRANT ALL ON FUNCTION "public"."validate_user_role"() TO "anon";
GRANT ALL ON FUNCTION "public"."validate_user_role"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."validate_user_role"() TO "service_role";
GRANT ALL ON TABLE "public"."branches" TO "anon";
GRANT ALL ON TABLE "public"."branches" TO "authenticated";
GRANT ALL ON TABLE "public"."branches" TO "service_role";
GRANT ALL ON TABLE "public"."clients" TO "anon";
GRANT ALL ON TABLE "public"."clients" TO "authenticated";
GRANT ALL ON TABLE "public"."clients" TO "service_role";
GRANT ALL ON TABLE "public"."companies" TO "anon";
GRANT ALL ON TABLE "public"."companies" TO "authenticated";
GRANT ALL ON TABLE "public"."companies" TO "service_role";
GRANT ALL ON TABLE "public"."department_locations" TO "anon";
GRANT ALL ON TABLE "public"."department_locations" TO "authenticated";
GRANT ALL ON TABLE "public"."department_locations" TO "service_role";
GRANT ALL ON TABLE "public"."departments" TO "anon";
GRANT ALL ON TABLE "public"."departments" TO "authenticated";
GRANT ALL ON TABLE "public"."departments" TO "service_role";
GRANT ALL ON TABLE "public"."documents" TO "anon";
GRANT ALL ON TABLE "public"."documents" TO "authenticated";
GRANT ALL ON TABLE "public"."documents" TO "service_role";
GRANT ALL ON TABLE "public"."employee_requests" TO "anon";
GRANT ALL ON TABLE "public"."employee_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."employee_requests" TO "service_role";
GRANT ALL ON TABLE "public"."employees" TO "anon";
GRANT ALL ON TABLE "public"."employees" TO "authenticated";
GRANT ALL ON TABLE "public"."employees" TO "service_role";
GRANT ALL ON TABLE "public"."enterprises" TO "anon";
GRANT ALL ON TABLE "public"."enterprises" TO "authenticated";
GRANT ALL ON TABLE "public"."enterprises" TO "service_role";
GRANT ALL ON TABLE "public"."expenses" TO "anon";
GRANT ALL ON TABLE "public"."expenses" TO "authenticated";
GRANT ALL ON TABLE "public"."expenses" TO "service_role";
GRANT ALL ON TABLE "public"."invoice_items" TO "anon";
GRANT ALL ON TABLE "public"."invoice_items" TO "authenticated";
GRANT ALL ON TABLE "public"."invoice_items" TO "service_role";
GRANT ALL ON TABLE "public"."invoices" TO "anon";
GRANT ALL ON TABLE "public"."invoices" TO "authenticated";
GRANT ALL ON TABLE "public"."invoices" TO "service_role";
GRANT ALL ON TABLE "public"."job_listing_jobs" TO "anon";
GRANT ALL ON TABLE "public"."job_listing_jobs" TO "authenticated";
GRANT ALL ON TABLE "public"."job_listing_jobs" TO "service_role";
GRANT ALL ON TABLE "public"."job_listings" TO "anon";
GRANT ALL ON TABLE "public"."job_listings" TO "authenticated";
GRANT ALL ON TABLE "public"."job_listings" TO "service_role";
GRANT ALL ON TABLE "public"."jobs" TO "anon";
GRANT ALL ON TABLE "public"."jobs" TO "authenticated";
GRANT ALL ON TABLE "public"."jobs" TO "service_role";
GRANT ALL ON TABLE "public"."offices" TO "anon";
GRANT ALL ON TABLE "public"."offices" TO "authenticated";
GRANT ALL ON TABLE "public"."offices" TO "service_role";
GRANT ALL ON TABLE "public"."products" TO "anon";
GRANT ALL ON TABLE "public"."products" TO "authenticated";
GRANT ALL ON TABLE "public"."products" TO "service_role";
GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";
GRANT ALL ON TABLE "public"."quote_items" TO "anon";
GRANT ALL ON TABLE "public"."quote_items" TO "authenticated";
GRANT ALL ON TABLE "public"."quote_items" TO "service_role";
GRANT ALL ON TABLE "public"."quotes" TO "anon";
GRANT ALL ON TABLE "public"."quotes" TO "authenticated";
GRANT ALL ON TABLE "public"."quotes" TO "service_role";
GRANT ALL ON TABLE "public"."role_permissions" TO "anon";
GRANT ALL ON TABLE "public"."role_permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."role_permissions" TO "service_role";
GRANT ALL ON TABLE "public"."salaries" TO "anon";
GRANT ALL ON TABLE "public"."salaries" TO "authenticated";
GRANT ALL ON TABLE "public"."salaries" TO "service_role";
GRANT ALL ON TABLE "public"."templates" TO "anon";
GRANT ALL ON TABLE "public"."templates" TO "authenticated";
GRANT ALL ON TABLE "public"."templates" TO "service_role";
GRANT ALL ON TABLE "public"."trigger_audit_log" TO "anon";
GRANT ALL ON TABLE "public"."trigger_audit_log" TO "authenticated";
GRANT ALL ON TABLE "public"."trigger_audit_log" TO "service_role";
GRANT ALL ON TABLE "public"."user_roles" TO "anon";
GRANT ALL ON TABLE "public"."user_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_roles" TO "service_role";
GRANT ALL ON TABLE "public"."vendors" TO "anon";
GRANT ALL ON TABLE "public"."vendors" TO "authenticated";
GRANT ALL ON TABLE "public"."vendors" TO "service_role";
GRANT ALL ON TABLE "public"."warehouses" TO "anon";
GRANT ALL ON TABLE "public"."warehouses" TO "authenticated";
GRANT ALL ON TABLE "public"."warehouses" TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
RESET ALL;
</file>

<file path="locales/ar.json">
{
  "General": {
    "sikka": "سِكَّة",
    "tanad": "تند",
    "dark": "داكن",
    "light": "فاتح",
    "language": "اللغة",
    "theme": "طابع الموقع",
    "next_number": "رقم تسلسلي",
    "random": "عشوائي",
    "soon": "قريباً",
    "active": "نشط",
    "inactive": "غير نشط",
    "archive": "أرشيف",
    "enterprises": "المؤسسات",
    "invalid_date": "تاريخ غير صالح",
    "add_enterprise": "إضافة مؤسسة",
    "view": "عرض",
    "actions": "العمليات",
    "duplicate": "تكرار",
    "successful_operation": "تمت العملية بنجاح",
    "error_operation": "حدث خطأ أثناء العملية",
    "loading_operation": "جاري العملية...",
    "unauthorized": "غير مصرح",
    "must_be_logged_in": "يجب عليك تسجيل الدخول لتنفيذ هذه العملية",
    "clear": "مسح",
    "close": "اغلاق",
    "switch_to_ltr": "الكتابة من اليمين إلى اليسار",
    "switch_to_rtl": "الكتابة من اليسار إلى اليمين",
    "search_country": "ابحث عن دولة",
    "no_country_found": "لا توجد دولة",
    "no_permission": "ليس لديك الصلاحية لتنفيذ هذه العملية",
    "no_permission_description": "يرجى الاتصال بالمدير للحصول على الصلاحية اللازمة",
    "no_results_found": "لا توجد نتائج",
    "quick_access": "الوصول السريع",
    "items_selected": "عناصر مختارة",
    "delete_selected": "حذف المختارة",
    "delete_all": "حذف الكل",
    "edit_selected": "تعديل المختارة",
    "view_selected": "عرض المختارة",
    "select_all": "اختر الكل",
    "deselect_all": "إلغاء الاختيار",
    "pick_date": "اختر التاريخ",
    "cards_view": "عرض البطاقات",
    "table_view": "عرض الجدول",
    "sort": "ترتيب",
    "sort_options": "خيارات الترتيب",
    "rule": "قاعدة",
    "add_another_rule": "إضافة قاعدة أخرى",
    "reset_all": "إعادة تعيين الكل",
    "apply_sort": "تطبيق الترتيب",
    "select_field": "اختر الحقل",
    "case_sensitive": "حساس لحالة الأحرف",
    "show_empty_values_first": "إظهار القيم الفارغة أولاً",
    "ascending": "تصاعدي",
    "descending": "تنازلي",
    "primary_sort": "الترتيب الأساسي",
    "secondary_sort": "الترتيب الثانوي",
    "tertiary_sort": "الترتيب الثالث",
    "sort_priority_hint": "القواعد الأعلى لها الأولوية",
    "remove_sort_rule": "إزالة قاعدة الترتيب",
    "case_sensitive_hint": "مطابقة حالة الأحرف بالضبط عند الترتيب",
    "empty_values_hint": "إظهار القيم الفارغة في البداية",
    "sort_by": "ترتيب بـ",
    "calendars": {
      "gregorian": "التقويم الميلادي",
      "hijri": "التقويم الهجري"
    },
    "languages": {
      "label": "تغيير اللغة",
      "ar": "العربية",
      "en": "English"
    },
    "filter": {
      "title": "فرز",
      "value": {
        "placeholder": "القيمة"
      }
    },
    "add_filter_condition": "إضافة قاعدة فرز",
    "apply_filters": "تطبيق الفرز",
    "saved_filters": "الفروز المحفوظة",
    "save_current_filter": "حفظ الفرز الحالي",
    "apply_filter": "تطبيق الفرز",
    "field": "الحقل",
    "operator": "المعامل",
    "operators": {
      "equals": "يساوي",
      "not_equals": "لا يساوي",
      "contains": "يحتوي",
      "not_contains": "لا يحتوي",
      "starts_with": "يبدأ بـ",
      "ends_with": "ينتهي بـ",
      "is_empty": "فارغ",
      "is_not_empty": "ليس فارغ"
    },
    "sidebar_search": "ابحث عن صفحة",
    "saving": "جاري الحفظ...",
    "cancel": "إلغاء",
    "save": "حفظ",
    "preview": "معاينة",
    "share": "مشاركة",
    "copy": "نسخ",
    "copied": "تم النسخ",
    "edit": "تعديل",
    "delete": "حذف",
    "send": "إرسال",
    "search": "بحث",
    "enable": "تفعيل",
    "disable": "تعطيل",
    "enabled": "مفعل",
    "disabled": "معطل",
    "favorite": "تفضيل",
    "get_started": "إبدأ الآن",
    "last-updated": "آخر تحديث",
    "privacy": "سياسة الخصوصية",
    "tos": "سياسة الإستخدام",
    "upgrade": "ترقية",
    "generate_qr_code": "توليد رمز QR",
    "download": "تحميل",
    "report": "إبلاغ عن بكلة",
    "country": "الدولة",
    "city": "المدينة",
    "mobile": "الموبايل",
    "desktop": "الكمبيوتر",
    "total": "المجموع",
    "no_results": "لا توجد نتائج",
    "lock": "حماية الرابط",
    "layout": "تصميم الرابط",
    "thumbnail": "صورة الرابط",
    "highlight": "إبراز الرابط",
    "submit": "إرسال",
    "coming_soon": "قريباً إن شاء الله",
    "rows_per_page": "النتائج في الصفحة",
    "select_number_of_results": "اختر عدد النتائج",
    "go_to_first_page": "إلى الصفحة الأولى",
    "go_to_previous_page": "إلى الصفحة السابقة",
    "go_to_next_page": "إلى الصفحة التالية",
    "go_to_last_page": "إلى الصفحة الأخيرة",
    "of": "من",
    "hold_to_drag": "اضغط مع الاستمرار للسحب وإعادة الترتيب",
    "months": {
      "january": "يناير",
      "february": "فبراير",
      "march": "مارس",
      "april": "أبريل",
      "may": "مايو",
      "june": "يونيو",
      "july": "يوليو",
      "august": "أغسطس",
      "september": "سبتمبر",
      "october": "أكتوبر",
      "november": "نوفمبر",
      "december": "ديسمبر"
    },
    "changes_saved": "تم حفظ التغييرات",
    "error_occurred": "حصل خطأ ما",
    "error_updating_avatar": "حصل خطأ اثناء تحديث الصورة الرمزية",
    "next": "التالي",
    "previous": "السابق",
    "done": "تم",
    "saved": "تم الحفظ",
    "update": "تحديث",
    "updating": "جاري التحديث...",
    "updated": "تم التحديث",
    "select": "اختر",
    "filter_options": "خيارات الفرز",
    "reset": "إعادة تعيين",
    "reload": "إعادة تحميل",
    "more": "المزيد",
    "add": "إضافة",
    "loading": "جاري التحميل...",
    "success": "تم بنجاح",
    "create": "إنشاء",
    "submit_report": "إرسال الإبلاغ",
    "error": {
      "title": "خطأ",
      "error_detected": "تم الكشف عن خطأ",
      "error_message": "رسالة الخطأ",
      "error_code": "كود الخطأ",
      "error_details": "تفاصيل الخطأ",
      "error_details_question": "ماذا كنت تحاول القيام به عندما قد يحدث هذا الخطأ؟",
      "submitting": "جاري الإرسال...",
      "submit_report": "إرسال الإبلاغ"
    },
    "report_issue": "إبلاغ عن خطأ",
    "report_issue_title": "إبلاغ عن خطأ",
    "report_issue_description": "مساعدتنا بتزويد تفاصيل إضافية عن ما قد يحدث",
    "report_issue_thank_you": "شكراً لك على إبلاغك",
    "report_issue_description_thank_you": "تم إبلاغ فريقنا وسيتم التحقق من هذا الخطأ في الميعاد القريب."
  },
  "Flags": {
    "timezone_soon": {
      "title": "قريباً",
      "description": "شغالين على ربط جميع الطوابع الزمنية بالمناطق الزمنية الأخرى"
    },
    "calendar_soon": {
      "title": "قريباً",
      "description": "شغالين على ربط جميع الأوقات بالتقويم الهجري"
    }
  },
  "SEO": {
    "landing": {
      "title": "العمود الفقري لتجارتك",
      "description": "رابط واحد يشمل جميع روابطك الأخرى من منصات التواصل الإجتماعي و من تطبيقات التوصيل و حتى طرق التواصل مثل الواتساب او الإتصال المباشر!",
      "author": "سكة لتقنية المعلومات",
      "keywords": "بكلة, رابط واحد, روابط, تواصل, تطبيق, تطبيقات, تطبيق التوصيل, الواتساب, الإتصال المباشر, التواصل الإجتماعي, منصات التواصل الإجتماعي, تطبيقات التوصيل, طرق التواصل, الواتساب, الإتصال المباشر, التواصل الإجتماعي, منصات التواصل الإجتماعي"
    },
    "directory": {
      "title": "إكتشف البكلات",
      "description": "تصفح وإكتشف صفحات البكلة العامة من مجتمعنا"
    },
    "my_puklas": {
      "title": "بكلاتي",
      "description": "إدارة جميع روابطك الأخرى"
    },
    "auth": {
      "title": "تسجيل الدخول إلى بكلة",
      "description": "تسجيل الدخول إلى بكلة لإدارة جميع روابطك الأخرى"
    },
    "billing": "الإشتراك",
    "slogan": "العمود الفقري لتجارتك",
    "index": {
      "title": "العمود الفقري لتجارتك",
      "description": "بكلة هو موقع يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "features": {
      "title": "مميزات بكلة",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "pricing": {
      "title": "الإشتراك",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "appeal": {
      "title": "إستئناف قرار",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "contact": {
      "title": "تواصل معنا",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "help": {
      "title": "المساعدة",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "report": {
      "title": "إبلاغ عن بكلة",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "report-ip": {
      "title": "إبلاغ عن بكلة",
      "description": "بكلة يسمح لك بإنشاء رابط واحد يحتوي على كل روابطك الأخرى. يمكنك إستخدامه في السيرة الذاتية أو السوشيال ميديا أو أي مكان آخر."
    },
    "theme": {
      "title": "تصميم البكلة",
      "description": "تصميم البكلة الخاصة بك لتعكس أسلوبك الشخصي أو علامتك التجارية."
    },
    "analytics": {
      "title": "تحليلات البكلة",
      "description": "تحليلات البكلة الخاصة بك لتعكس أسلوبك الشخصي أو علامتك التجارية."
    },
    "editor": "روابط {puklaName}",
    "settings": "إعدادات {puklaName}",
    "appearence": "تصميم {puklaName}"
  },
  "Landing": {
    "directory": "الدليل",
    "hero": {
      "title": "العمود الفقري لتجارتك",
      "subtitle": "رابط واحد يشمل جميع روابطك الأخرى من منصات التواصل الإجتماعي و من تطبيقات التوصيل و حتى طرق التواصل مثل الواتساب او الإتصال المباشر!",
      "primary-action": "إبدأ الآن"
    },
    "not-found": {
      "title": "الصفحة غير موجودة",
      "subtitle": "يبدو انك ذهبت إلى رابط غير موجود. الرجاء التحقق من الرابط "
    },
    "dashboard": "لوحة التحكم",
    "used-by": "بعض عملائنا",
    "get-started": "إبدأ الآن",
    "home": "الرئيسية",
    "pricing": "الأسعار",
    "solution": "الحلول",
    "features": "المزايا",
    "legal": "قانوني",
    "company": "المؤسسة",
    "privacy": "سياسة الخصوصية",
    "contact": "تواصل معنا",
    "about": "من نحن",
    "blog": "المدونة",
    "help": "المساعدة",
    "support": "الدعم",
    "tos": "سياسة الإستخدام",
    "resources": "الموارد",
    "cta": {
      "subtitle": "اجمع جميع روابطك في رابط واحد الآن",
      "title": "جاهز لإنشاء رابطك الشخصي؟",
      "action-1-text": "يلا نبدأ"
    },
    "footer": {
      "tagline": "العمود الفقري لتجارتك"
    },
    "feature-design": {
      "tiny-1": "لون الخلفية",
      "tiny-2": "لون الأزرار",
      "tiny-3": "ترتيب الأزرار",
      "tiny-4": "صورة الخلفية",
      "tiny-5": "زوايا الأزرار",
      "tiny-6": "والمزيد"
    },
    "feature-platforms": {
      "tiny-1": "التواصل الإجتماعي",
      "tiny-2": "متاجر التطبيقات",
      "tiny-3": "تطبيقات التوصيل",
      "tiny-4": "التطبيقات الإحترافية",
      "tiny-5": "المواقع الإلكترونية",
      "tiny-6": "والمزيد"
    },
    "feature-highlight-1": {
      "title": "تصميم الصفحة على كيفك",
      "subtitle": "تحكم في تصميم صفحتك بشكل كامل بالطريقة اللي تعجبك وبالأشكال والألوان اللي تحبها! أو تقدر تستخدم قوالب جاهزة"
    },
    "feature-highlight-2": {
      "title": "جميع المنصات اللي تحبها",
      "subtitle": "من منصات التواصل الإجتماعي و من تطبيقات التوصيل و حتى طرق التواصل مثل الواتساب او الإتصال المباشر!"
    },
    "waitlist": {
      "title": "انضم إلى قائمة الإنتظار",
      "subtitle": "كون جزءًا من أول منصة لإدارة روابط السيرة الذاتية",
      "placeholder": "أدخل بريدك الإلكتروني",
      "button": "إنضم إلى القائمة"
    }
  },
  "Features": {
    "title": "مزايا بكلة",
    "subtitle": "اكتشف عالمًا من الإمكانيات",
    "hero": {
      "title": "مزايا بكلة",
      "subtitle": "اكتشف عالمًا من الإمكانيات – من إدارة الروابط بسلاسة إلى المحتوى التفاعلي – كل ذلك في منصة متعددة الاستخدامات."
    },
    "feature-1": {
      "title": "تصميم قابل للتخصيص",
      "description": "ابتكر صفحة فريدة لروابط السيرة الذاتية تعكس أسلوبك. قم بالتخصيص باستخدام الثيمات، الألوان، وتخطيطات الصفحة لتتناسب مع علامتك التجارية أو ذوقك الشخصي."
    },
    "feature-2": {
      "title": "التكامل مع منصات التواصل الاجتماعي",
      "description": "قم بربط صفحتك على بكلة بجميع منصات التواصل الاجتماعي. رابط واحد لتوحيد حضورك على الإنترنت وتعزيز وصولك."
    },
    "feature-3": {
      "title": "تحسين محركات البحث (SEO)",
      "description": "عزز ظهور صفحتك مع ميزات متوافقة مع تحسين محركات البحث (SEO). حسّن ترتيبك في نتائج البحث واجذب المزيد من الزيارات العضوية."
    },
    "feature-4": {
      "title": "الأمان والخصوصية",
      "description": "أمان وخصوصية بياناتك هي من أولوياتنا القصوى. يستخدم بكلة بروتوكولات تشفير وأمان متقدمة للحفاظ على سلامة معلوماتك."
    },
    "feature-5": {
      "title": "الدعم والموارد",
      "description": "لديك أسئلة أو تحتاج إلى مساعدة؟ فريق الدعم لدينا ومكتبة الموارد متوفران لمساعدتك في كل خطوة من الطريق."
    },
    "feature-6": {
      "title": "استجابة الجوال",
      "description": "صفحتك على بكلة تظهر بشكل ممتاز على أي جهاز. استمتع بتصميم متجاوب يضمن تجربة سلسة لجمهورك، بغض النظر عن طريقة الوصول إلى صفحتك."
    },
    "feature-7": {
      "title": "التحليلات الفورية",
      "description": "تابع نجاحك بفضل التحليلات الفورية. افهم جمهورك بشكل أفضل من خلال الاطلاع على معلومات حول مشاهدات الصفحة، النقرات على الروابط، ومقاييس التفاعل."
    },
    "feature-8": {
      "title": "توليد رمز QR",
      "description": "ولد رموز QR لصفحتك على بكلة، مما يسهل على الجمهور غير المتصل بالإنترنت الوصول إلى محتواك عبر الإنترنت."
    },
    "feature-9": {
      "title": "التكامل مع التجارة الإلكترونية",
      "description": "بيع مباشرة لمنتجاتك أو خدماتك عبر صفحتك على بكلة بتكامل سلس مع منصات التجارة الإلكترونية."
    }
  },
  "Pricing": {
    "contact-sales": "تواصل معنا",
    "not-sure": "مو متأكد اي باقة تختار؟ <contactSales>تواصل معنا</contactSales>",
    "free": "مجاناً",
    "hero": {
      "title": "جاهز للإشتراك؟",
      "subtitle": "إختر الباقة المناسبة لتستفيد من المزايا المقدمة في كل باقة"
    },
    "billing-currency": {
      "sar": "ريال",
      "usd": "دولار"
    },
    "billing-cycle": {
      "monthly": "شهريا",
      "annually": "سنويا"
    },
    "faq": {
      "header": {
        "title": "الإسئلة الشائعة",
        "subtitle": "عندك كل الأسئلة, وعندنا الأجوبة"
      }
    },
    "plan-1": {
      "button-text": "إبدأ مجاناً",
      "title": "الباقة البرونزية",
      "subtitle": "",
      "features": {
        "feature-1": "صفحة بكلة خاصة فيك",
        "feature-2": "روابط لا محدودة",
        "feature-3": "10 ألوان لتصميم صفحتك",
        "feature-4": ""
      }
    },
    "plan-2": {
      "button-text": "إبدأ الآن",
      "title": "باقة الفضية",
      "subtitle": "",
      "features": {
        "feature-1": "صفحة بكلة خاصة فيك",
        "feature-2": "روابط لا محدودة",
        "feature-3": "تصميم مفتوح لا محدود",
        "feature-4": "إحصائيات الزيارات لمدة شهر"
      }
    },
    "plan-3": {
      "button-text": "إبدأ الآن",
      "title": "باقة الذهبية",
      "subtitle": "",
      "features": {
        "feature-1": "صفحة بكلة خاصة فيك",
        "feature-2": "روابط لا محدودة",
        "feature-3": "تصميم مفتوح لا محدود",
        "feature-4": "إستخدام أيقونة للروابط"
      }
    },
    "plan-4": {
      "button-text": "إبدأ الآن",
      "title": "باقة الألماسية",
      "subtitle": ""
    }
  },
  "FAQ": {
    "faq-1": {
      "question": "ما هو تطبيق بكلة؟",
      "answer": "بكلة هي أداة لإدارة جميع روابطك داخل رابط تساعدك على ربط جمهورك بكل محتواك عبر الإنترنت من خلال رابط واحد بسيط."
    },
    "faq-2": {
      "question": "كيف يمكنني إعداد صفحتي على بكلة؟",
      "answer": "قم بالتسجيل، أضف الروابط التي ترغب بها، وقم بتخصيص صفحتك لتتناسب مع أسلوبك، وستكون جاهزًا للانطلاق!"
    },
    "faq-3": {
      "question": "هل استخدام بكلة مجاني؟",
      "answer": "نعم، تقدم بكلة خطة مجانية للجميع و إيضا خطة أساسية مع ميزات إضافية للمستخدمين المتقدمين."
    },
    "faq-4": {
      "question": "هل يمكنني تخصيص تصميم صفحتي على بكلة؟",
      "answer": "نعم! يقدم بكلة مجموعة متنوعة من خيارات التخصيص لضمان أن تعكس صفحتك أسلوبك الشخصي أو علامتك التجارية."
    },
    "faq-5": {
      "question": "هل يمكنني ترقية أو إلغاء خطتي في أي وقت؟",
      "answer": "نعم، يمكنك ترقية أو تقليل مستوى أو إلغاء خطتك في أي وقت لتناسب احتياجاتك."
    },
    "faq-contact": {
      "question": "كيف يمكنني الاتصال بالدعم؟",
      "answer": "تستطيع التواصل معنا عن طريق <email>البريد الإلكتروني</email> او عن طريق <twitter>تويتر</twitter> او عن طريق <whatsapp>واتساب</whatsapp> أو عن طريق <phone>الهاتف</phone>"
    }
  },
  "ReportPage": {
    "page-title": "التبليغ عن مخالفة",
    "page-subtitle": "هل اكتشفت مشكلة غير قانونية أو غير أخلاقية في إحدى البكلات؟ الرجاء ملء النموذج التالي للتبليغ عنها.",
    "first-name": "الإسم الأول",
    "last-name": "إسم العائلة",
    "email": {
      "label": "البريد الإلكتروني",
      "required": "البريد الإلكتروني مطلوب",
      "invalid": "صيغة البريد الإلكتروني غير صحيح"
    },
    "pukla-link": {
      "label": "رابط البكلة",
      "required": "الرابط مطلوب"
    },
    "additional-comments": {
      "label": "ملاحظات إضافية تساعدنا على تحديد البلاغ",
      "required": "الملاحظة مطلوبة",
      "too-short": "الملاحظة قصيرة جدا"
    },
    "copyright-owner": {
      "label": "إسم صاحب حقوق النشر",
      "hint": "إذا كنت تقوم بملء هذا النموذج باعتبارك مالك حقوق الطبع والنشر، فسيكون  اسمك في هذه الخانة",
      "required": "إسم صاحب حقوق النشر مطلوب"
    },
    "relationship-copyright-owner": {
      "label": "علاقتي بصاحب حقوق النشر",
      "hint": "مثلا: انا صاحب حقوق النشر / أنا موظف لدى صاحب حقوق النشر / انا مستشار قانوني / انا وكيل معتمد",
      "required": "علاقتك بصاحب حقوق النشر مطلوبة"
    },
    "copyright-infringment": "إنتهاك حقوق نشر",
    "trademark-infringment": "إنتهاك علامة تجارية",
    "reason": {
      "label": "سبب البلاغ",
      "required": "هذا الخيار مطلوب"
    },
    "reporter-role": {
      "label": "ماهو أفضل خيار يصفك؟",
      "required": "هذا الخيار مطلوب"
    },
    "reporter-role-options": {
      "pukla_user": "مستخدم منصة بكلة",
      "non_pukla_user": "زائر ولست مستخدم لمنصة بكلة",
      "law_enforcement": "جهة حكومية",
      "regulatory_body": "هيئة التنظيمية"
    },
    "reporter-reason-options": {
      "spam": "رسائل إلكترونية مزعجة",
      "gambling": "المقامرة",
      "adultContent": "محتوى إباحي",
      "misinformation": "المعلومات المضللة",
      "electoralFraud": "تزوير انتخابي",
      "illegalGoodsAndServices": "سلع وخدمات غير قانونية",
      "hateSpeech": "التعبير الكراهي و العنصرية",
      "privacyImpersonationHarassment": "إنتهاك الخصوصية, إنتحال شخصية, التحرش الشخصي",
      "selfHarm": "إيذاء النفس",
      "fraud": "احتيال",
      "extremistContent": "محتوى إرهابي أو متطرف",
      "shockingOrViolentContent": "محتوى صادم أو عنيف",
      "childHarm": "أذى الأطفال"
    },
    "report-form": {
      "submitted": {
        "title": "تم إرسال بلاغك بنجاح",
        "subtitle": "شكرا لك لمعاونتك لنا على الحفاظ على بيئة آمنة لجميع مستخدمي بكلة. سنقوم بالنظر إلى بلاغك و سنتخذ الإجراء اللازم إن وجب"
      }
    },
    "report-ip": {
      "title": "الإبلاغ عن انتهاكات الملكية الفكرية",
      "subtitle": "هل هناك بكلة تنتهك حقوقك الفكرية أو علامتك التجارية؟ الرجاء ملء النموذج التالي "
    },
    "required-field": "هذه الخانه مطلوبة",
    "clear": "مسح",
    "signature": "التوقيع",
    "trademark-number": {
      "label": "رقم العلامة التجارية",
      "required": "رقم العلامة التجارية مطلوب"
    },
    "statement": {
      "good-faith": {
        "label": "أتعهد بنية حسنة أن استخدام المحتوى المحمي بحقوق النشر الذي أبلغت عنه غير مسموح به من قبل صاحب حقوق النشر، ممثلهم، أو القانون.",
        "required": "هذا الإقرار مطلوب"
      },
      "trademark-good-faith": {
        "label": "أتعهد بنية حسنة أن استخدام المحتوى المحمي للعلامة التجارية الذي أبلغت عنها غير مسموح به من قبل صاحب العلامة التجارية ممثلهم، أو القانون.",
        "required": "هذا الإقرار مطلوب"
      },
      "trademark-authorized": {
        "label": "أقر وأتعهد تحت طائلة الحنث باليمين أنني صاحب العلامة التجارية, أو مخول للتصرف نيابة عن صاحب حق النشر الحصري الذي يُزعم أنه تم انتهاكه.",
        "required": "هذا الإقرار مطلوب"
      },
      "trademark-no-lie": {
        "label": "أنا على دراية أن تقديم مطالبة كاذبة عمدًا بانتهاك العلامة التجارية قد يؤدي إلى المسؤولية القانونية تحت قانون حقوق المؤلف الرقمي للألفية.",
        "required": "هذا الإقرار مطلوب"
      },
      "authorized": {
        "label": "أقر وأتعهد تحت طائلة الحنث باليمين أنني صاحب حقوق النشر، أو مخول للتصرف نيابة عن صاحب حق النشر الحصري الذي يُزعم أنه تم انتهاكه.",
        "required": "هذا الإقرار مطلوب"
      },
      "correct-info": {
        "label": "أشهد أن كل المعلومات المقدمة في هذا الإشعار صحيحة.",
        "required": "هذا الإقرار مطلوب"
      },
      "my-info-shared": {
        "label": "أفهم أن تفاصيلي الشخصية، معلومات الاتصال، ومحتوى هذا التقرير سيتم مشاركتها مع المستخدم الذي أقوم بالإبلاغ عنه.",
        "required": "هذا الإقرار مطلوب"
      },
      "no-lie": {
        "label": "أنا على دراية أن تقديم مطالبة كاذبة عمدًا بانتهاك حقوق النشر قد يؤدي إلى المسؤولية القانونية تحت قانون حقوق المؤلف الرقمي للألفية.",
        "required": "هذا الإقرار مطلوب"
      }
    },
    "trademark-owner": {
      "label": "إسم صاحب العلامة التجارية",
      "hint": "إذا كنت تقوم بملء هذا النموذج باعتبارك مالك العلامة التجارية فسيكون  اسمك في هذه الخانة",
      "required": "إسم صاحب العلامة التجارية مطلوب"
    },
    "relationship-trademark-owner": {
      "label": "علاقتي بصاحب العلامة التجارية",
      "hint": "مثلا: انا صاحب العلامة التجارية / أنا موظف لدى صاحب العلامة التجارية / انا مستشار قانوني / انا وكيل معتمد",
      "required": "علاقتك بصاحب العلامة التجارية مطلوبة"
    },
    "trademark-name": {
      "label": "إسم العلامة التجارية",
      "required": "إسم العلامة التجارية مطلوب"
    },
    "trademark-industry": {
      "label": "مجال العلامة التجارية",
      "required": "مجال العلامة التجارية مطلوب (مثلا: الإعلام, التجارة الإلكترونية, إلخ)"
    },
    "trademark-country": {
      "label": "دولة تسجيل العلامة التجارية",
      "required": "إسم الدولة مطلوب"
    },
    "trademark-registration": {
      "label": "رقم تسجيل العلامة التجارية",
      "required": "رقم التسجيل مطلوب"
    },
    "pukla-link-to-report": "الرابط البكلة المراد التبليغ عنه",
    "address-1": {
      "label": "إسم الشارع",
      "required": "إسم الشارع مطلوب"
    },
    "address-2": {
      "label": "العنوان",
      "required": "العنوان مطلوب"
    },
    "city": {
      "label": "المدينة",
      "required": "إسم المدينة مطلوب"
    },
    "state": {
      "label": "المنطقة",
      "required": "إسم المنطقة مطلوب"
    },
    "zip": {
      "label": "الرمز البريدي",
      "required": "الرمز البريدي مطلوب"
    },
    "country": {
      "label": "الدولة",
      "required": "إسم الدولة مطلوب"
    },
    "phone": {
      "label": "رقم الجوال",
      "required": "رقم الجوال مطلوب"
    },
    "infringment-content": {
      "label": "المحتوى الذي تريد الإبلاغ عنه",
      "required": "هذا المحتوى مطلوب"
    }
  },
  "AppealPage": {
    "page-title": "إستئناف قرار",
    "page-subtitle": "هل تم حظر حسابك لدينا و تريد إستئناف القرار؟ الرجاء ملء النموذج التالي ليتم إعادة النظر إلى القرار.",
    "first-name": "الإسم الأول",
    "last-name": "إسم العائلة",
    "email": {
      "label": "البريد الإلكتروني",
      "required": "البريد الإلكتروني مطلوب",
      "invalid": "صيغة البريد الإلكتروني غير صحيح"
    },
    "pukla-link": {
      "label": "رابط البكلة",
      "required": "الرابط مطلوب"
    },
    "additional-comments": {
      "label": "ملاحظات إضافية تساعدنا على تحديد البلاغ",
      "required": "الملاحظة مطلوبة",
      "too-short": "الملاحظة قصيرة جدا"
    },
    "report-form": {
      "submitted": {
        "title": "تم إرسال طلب الإستئناف بنجاح",
        "subtitle": "شكرا لك على إرسال الطلب. سيتم إرسال طلب إستئناف القرار للإدارة لإعادة النظر "
      }
    },
    "appeal-form": {
      "submitted": {
        "title": "تم إرسال طلب الإستئناف بنجاح",
        "subtitle": "شكرا لك على إرسال الطلب. سيتم إرسال طلب إستئناف القرار للإدارة لإعادة النظر "
      }
    }
  },
  "ContactMethods": {
    "whatsapp": "واتساب",
    "twitter": "تويتر",
    "instagram": "انستغرام",
    "phone": "هاتف",
    "mail": "ايميل",
    "email": "البريد الإلكتروني",
    "the-whatsapp": "الواتساب",
    "contact-page": "صفحة التواصل"
  },
  "ContactPage": {
    "hero": {
      "title": "تواصل معنا",
      "subtitle": "في خاطرك شي؟ حياك أرسل لنا رسالة "
    },
    "contact-form": {
      "submitted": {
        "title": "تم إرسال رسالتك بنجاح 👍",
        "subtitle": "سوف يتم التواصل معك قريباً بإذن الله!",
        "contact-methods": "في الوقت الحاضر، تفضل بالتواصل معنا عبر قنوات أخرى"
      },
      "name": {
        "invalid": "الإسم قصير",
        "label": "إسمك",
        "placeholder": "أكتب إسمك هنا",
        "required": "الإسم مطلوب"
      },
      "email": {
        "invalid": "البريد الإلكتروني غير صحيح",
        "label": "البريد الإلكتروني",
        "placeholder": "example@sikka.io",
        "required": "البريد الإلكتروني مطلوب"
      },
      "message": {
        "invalid": "الرسالة قصيرة جدا",
        "label": "الرسالة",
        "placeholder": "إكتب رسالتك هنا",
        "required": "محتوى الرسالة مطلوب"
      }
    }
  },
  "Auth": {
    "user_already_exists": "المستخدم موجود بالفعل",
    "forgot_password": "هل نسيت كلمة المرور؟",
    "password_reset_email_sent": "تم إرسال بريد إلكتروني لإعادة تعيين كلمة المرور",
    "password_reset_successfully": "تم إعادة تعيين كلمة المرور بنجاح",
    "passwords_do_not_match": "كلمة المرور وتأكيد كلمة المرور غير متطابقين",
    "email_address_invalid": "عنوان البريد الإلكتروني غير صحيح",
    "user_not_found": "المستخدم غير موجود",
    "email_exists": "عنوان البريد الإلكتروني مستخدم بالفعل",
    "email_address_not_authorized": "عنوان البريد الإلكتروني غير مسموح به",
    "reset_password": "إعادة تعيين كلمة المرور",
    "go_back_to_sign_in": "العودة لتسجيل الدخول",
    "account_created_successfully": "تم إنشاء حسابك بنجاح",
    "failed_to_sign_in_with_google": "فشل تسجيل الدخول باستخدام Google",
    "sign_in": "تسجيل الدخول",
    "sign_up": "إنشاء حساب",
    "sign_out": "تسجيل الخروج",
    "email_address": "عنوان البريد الإلكتروني",
    "password": "كلمة المرور",
    "password_placeholder": "أدخل كلمة المرور",
    "confirm_password": "تأكيد كلمة المرور",
    "already_have_an_account": "لديك حساب بالفعل؟",
    "dont_have_an_account": "ليس لديك حساب؟",
    "sign_in_with_google": "تسجيل الدخول باستخدام Google",
    "sign_in_with_github": "تسجيل الدخول باستخدام GitHub",
    "create_your_account": "إنشاء حسابك",
    "sign_in_to_your_account": "تسجيل الدخول إلى حسابك",
    "welcome_back": "مرحبا بك مرة أخرى",
    "over_email_send_rate_limit": "لقد قمت بإرسال طلب إعادة تعيين كلمة المرور بشكل متكرر. يرجى المحاولة لاحقاً.",
    "invalid_credentials": "البريد الإلكتروني أو كلمة المرور غير صحيحة"
  },
  "MyPuklas": {
    "links": "الروابط",
    "items": "العناصر",
    "copy_link": "نسخ الرابط",
    "edit_links": "تعديل الروابط",
    "edit_pukla": "تعديل البكلة",
    "pukla_link": "رابط البكلة",
    "created": "تاريخ الإنشاء",
    "pukla_title_required": "العنوان مطلوب",
    "pukla_title_too_short": "العنوان قصير",
    "pukla_title_too_long": "العنوان طويل",
    "pukla_slug_required": "الرابط المخصص مطلوب",
    "pukla_slug_too_short": "الرابط المخصص قصير",
    "pukla_slug_too_long": "الرابط المخصص طويل",
    "pukla_slug_invalid": "الرابط المخصص غير صالح",
    "title": "البكلات",
    "pukla_description": "الوصف",
    "pukla_description_placeholder": "أدخل الوصف",
    "success_creating_pukla": "تم إنشاء البكلة بنجاح",
    "success_deleting_pukla": "تم حذف البكلة بنجاح",
    "success_fetching_puklas": "تم جلب البكلات بنجاح",
    "error_fetching_puklas": "فشل جلب البكلات",
    "error_deleting_pukla": "فشل حذف البكلة",
    "error_creating_pukla": "فشل إنشاء البكلة",
    "error_generating_slug": "فشل إنشاء الرابط المخصص",
    "error_checking_slug": "فشل التحقق من الرابط المخصص",
    "this_custom_slug_is_already_taken": "هذا الـرابط المخصص مأخوذ بالفعل",
    "pukla_description_required": "الوصف مطلوب",
    "pukla_deleted": "تم حذف البكلة بنجاح",
    "update_avatar": "تحديث الصورة الرمزية",
    "avatar_updated": "تم تحديث الصورة الرمزية بنجاح",
    "error_uploading_avatar": "فشل في رفع الصورة الرمزية",
    "error_updating_avatar": "فشل في تحديث الصورة الرمزية",
    "uploading": "جاري الرفع...",
    "choose_file": "اختر ملف",
    "delete_pukla": "حذف بكلة",
    "delete_pukla_description": "لا يمكن التراجع عن هذا الإجراء. للتأكيد، يرجى إدخال اسم البكلة. {pukla_name}",
    "delete_pukla_project_name": "بكلة",
    "delete_pukla_label": "أدخل اسم البكلة",
    "delete_pukla_placeholder": "أدخل اسم البكلة",
    "no_puklas_found": "لم يتم العثور على بكلات",
    "start_creating_a_pukla": "ابدأ في إنشاء بكلات لصفحتك الخاصة بك والمزيد.",
    "start_creating_short_links": "ابدأ في إنشاء روابط قصيرة لحملاتك التسويقية وبرامج الإحالة والمزيد.",
    "this_custom_slug_is_not_allowed": "هذا الرابط المخصص غير مسموح به",
    "custom_slug_can_only_contain_letters_numbers_and_hyphens": "يمكن أن يحتوي الرابط المخصص على أحرف وأرقام وشرطات فقط",
    "validation": {
      "title_required": "العنوان مطلوب",
      "slug_required": "الرابط المخصص مطلوب"
    },
    "pukla_created_successfully": "تم إنشاء البكلة بنجاح",
    "short_slug_pro_feature": "الروابط القصيرة (أقل من ٥ أحرف) متوفرة في الباقات الإحترافية",
    "short_slug_pro_feature_description": "قم بالترقية إلى الباقة الإحترافية لإنشاء روابط مخصصة أقصر من ٥ أحرف. يجب على المستخدمين المجانيين استخدام ٥ أحرف على الأقل.",
    "short_slug_pro_feature_description_5_characters": "قم بالترقية إلى الباقة الإحترافية لإنشاء روابط مخصصة أقصر من ٥ أحرف. يجب على المستخدمين المجانيين استخدام ٥ أحرف على الأقل.",
    "create_pukla": "إنشاء بكلة",
    "pukla_title": "عنوان البكلة",
    "pukla_title_placeholder": "أدخل عنوان البكلة",
    "pukla_bio": "وصف البكلة",
    "pukla_bio_placeholder": "أدخل وصف البكلة",
    "custom_slug_optional": "رابط مخصص (إختياري)",
    "custom_slug_placeholder": "أدخل الرابط المخصص",
    "create": "إنشاء",
    "is_discoverable": "جعل البكلة قابلة للإكتشاف",
    "is_discoverable_description": "السماح بعرض البكلة في <directoryLink>الدليل العام</directoryLink>"
  },
  "PuklaNotFound": {
    "oops_this_pukla_doesnt_exist_yet": "عفواً! هذا البكلة غير موجود بعد",
    "but_dont_worry_you_can_create_your_own_pukla_right_now": "لا تقلق! يمكنك إنشاء بكلة خاصة بك الآن!",
    "enter_your_long_url": "أدخل رابط طويل تريد تقصيره",
    "sign_up_for_free": "إنشاء حساب مجاني",
    "want_more_features": "تريد المزيد من الميزات؟",
    "terms_of_service": "شروط الخدمة",
    "privacy_policy": "سياسة الخصوصية",
    "by_using_our_service_you_agree_to_our": "باستخدام خدمتنا ، فأنت توافق على <terms>شروط الخدمة</terms> و <privacy_policy>سياسة الخصوصية</privacy_policy>"
  },
  "Editor": {
    "change_thumbnail": "تعديل إيقونة الرابط",
    "link_title_required": "عنوان الرابط مطلوب",
    "link_url_required": "الرابط مطلوب",
    "link_url_invalid": "الرابط غير صالح",
    "lock_link": {
      "password_protected": {
        "title": "محمي بكلمة مرور",
        "description": "يمكنك إضافة كلمة مرور للرابط لمنع الوصول إليه إلا بعد إدخال كلمة المرور الصحيحة",
        "invalid_password": "كلمة المرور غير صحيحة",
        "password_required": "كلمة المرور مطلوبة"
      },
      "requires_date_of_birth": {
        "title": "يتطلب الرابط تحديد التاريخ الميلادي",
        "description": "يمكنك إضافة إلزامية تحديد التاريخ الميلادي للرابط لمنع الوصول إليه إلا بعد تحديد التاريخ الميلادي الصحيح",
        "too_young": "أنت أصغر من الحد الأدنى للعمر المطلوب",
        "day_required": "اليوم مطلوب",
        "month_required": "الشهر مطلوب",
        "year_required": "السنة مطلوبة"
      },
      "min_age": {
        "label": "الحد الأدنى للعمر",
        "placeholder": "أدخل الحد الأدنى للعمر"
      }
    },
    "try_lazim": {
      "title": "رابط طويل؟",
      "description": "جرب منصة لازم لتقصير الروابط الطويلة",
      "go_to_lazim": "يلا نبدأ"
    },
    "delivery_apps": {
      "hungerstation": "هنجرستيشن",
      "jahez": "جاهز",
      "keeta": "كيتا",
      "toyou": "تويو",
      "careem": "كريم",
      "mrsool": "مرسول"
    },
    "link_types": {
      "link": "رابط",
      "header": "عنوان",
      "youtube": "فيديو",
      "delivery-apps": "تطبيقات التوصيل",
      "document": "مستند",
      "form": "إستبيان"
    },
    "thumbnail": {
      "choose_icon": "اختر أيقونة",
      "choose_image": "اختر صورة",
      "icon_position": "موقع الأيقونة",
      "position_start": "بداية النص",
      "position_end": "نهاية النص"
    },
    "remove_thumbnail": "إزالة الصورة",
    "failed_to_update_link": "فشل تحديث الصورة",
    "header-added-successfully": "تم إضافة الفاصل بنجاح",
    "failed-to-add-header": "فشل إضافة الفاصل",
    "header-updated-successfully": "تم تحديث الفاصل بنجاح",
    "failed-to-update-header": "فشل تحديث الفاصل",
    "link-added-successfully": "تم إضافة الرابط بنجاح",
    "failed-to-add-link": "فشل إضافة الرابط",
    "link_updated_successfully": "تم تحديث الرابط بنجاح",
    "failed-to-update-link": "فشل تحديث الرابط",
    "title": "الروابط",
    "link-status-updated-successfully": "تم تحديث حالة الرابط بنجاح",
    "link-failed-to-update-status": "فشل تحديث حالة الرابط",
    "header-status-updated-successfully": "تم تحديث حالة الفاصل بنجاح",
    "header-failed-to-update-status": "فشل تحديث حالة الفاصل",
    "confirm-delete-link": "تأكيد حذف الرابط",
    "confirm-delete-header": "تأكيد حذف الفاصل",
    "single_link_title": "عنوان الرابط",
    "single_link_url": "الرابط",
    "change-pukla": "تغيير البكلة",
    "select_a_pukla": "إختر بكلة",
    "success_deleting_link": "تم حذف الرابط بنجاح",
    "error_deleting_link": "فشل حذف الرابط",
    "error_deleting_header": "فشل حذف الفاصل",
    "success_deleting_header": "تم حذف الفاصل بنجاح",
    "order-updated-successfully": "تم ترتيب الروابط بنجاح",
    "select_pukla": "إختر بكلة",
    "description": "إدارة جميع روابطك الأخرى",
    "add-header": "فاصل جديد",
    "add-link": "رابط جديد",
    "add-new-link": "إضافة الرابط",
    "add-new-header": "إضافة فاصل جديد",
    "add-button": "زر جديد",
    "select_pukla_to_start_editing": "إختر بكلة للبدء في التعديل",
    "link": "رابط",
    "embed-video": "فيديو",
    "document": "مستند",
    "form": "إستبيان",
    "delivery-apps": "تطبيقات التوصيل",
    "no-items": "لم يتم العثور على عناصر",
    "header": "فاصل",
    "header-title": {
      "label": "عنوان الفاصل",
      "placeholder": "أدخل عنوان الفاصل"
    },
    "link-title": {
      "label": "العنوان",
      "placeholder": "عنوان الرابط"
    },
    "link-url": {
      "label": "الرابط",
      "placeholder": "https://example.com"
    },
    "no_items_found": "لم يتم العثور على عناصر",
    "change_layout": "تغيير التصميم",
    "default_layout": "افتراضي",
    "double_height_layout": "ارتفاع مضاعف",
    "half_width_layout": "نصف العرض",
    "save": "حفظ",
    "edit_pukla": "تعديل بكلة",
    "slug": "الرابط المختصر",
    "slug_already_taken": "هذا الرابط المختصر مستخدم بالفعل",
    "pukla_updated_successfully": "تم تحديث بكلة بنجاح",
    "square_layout": "مربع",
    "layout_updated_successfully": "تم تحديث التصميم بنجاح",
    "failed_to_update_layout": "فشل تحديث التصميم",
    "search_icons": "البحث عن الأيقونات..."
  },
  "Theme": {
    "title": "التصميم",
    "predefined_themes": "القوالب الجاهزة",
    "choose_theme": "إختر قالب جاهز لبكلتك",
    "update_theme": "تحديث القالب",
    "updating": "جاري التحديث...",
    "success_update": "تم تحديث المظهر بنجاح",
    "error_update": "فشل تحديث المظهر",
    "custom_theme": "تصميم خاص",
    "customize_colors": "إختر الألوان والتصميم اللي يناسبك",
    "preview": "معاينة",
    "background_color": "لون الخلفية",
    "text_color": "لون النص",
    "button_color": "لون الزر",
    "button_text_color": "لون نص الزر",
    "button_hover_color": "لون الزر عند التمرير",
    "button_border_color": "لون حدود الزر",
    "layouts": "التنسيقات",
    "choose_layout": "اختر عدد الأعمدة التي تريد عرض روابطك فيها",
    "column": "عمود",
    "columns": "أعمدة",
    "appearance_settings": "إعدادات المظهر",
    "choose_appearance_settings": "اختر إعدادات مظهر البكلة",
    "border_color": "لون حدود الأزرار",
    "border_radius": "تدوير الحواف",
    "square": "مربع",
    "slightly_rounded": "تدوير خفيف",
    "rounded": "مدور",
    "very_rounded": "تدوير كبير",
    "pill": "كبسولة",
    "choose_animation": "اختر نمط الحركة",
    "slide_up": "تنزلق للأعلى",
    "slide_down": "تنزلق للأسفل",
    "slide_left": "تنزلق لليسار",
    "slide_right": "تنزلق لليمين",
    "fade": "تضاء",
    "scale": "تكبير",
    "animation_settings": "إعدادات الحركة",
    "choose_animation_settings": "اختر إعدادات حركة ظهور الأزرار التي تريدها",
    "none": "بدون",
    "background_image": "صورة الخلفية",
    "upload_background": "رفع صورة الخلفية",
    "image_too_large": "يجب أن يكون حجم الصورة أقل من 5 ميجابايت",
    "invalid_file_type": "نوع ملف غير صالح. يرجى رفع صورة",
    "background_image_uploaded": "تم رفع صورة الخلفية بنجاح",
    "error_uploading_image": "خطأ في رفع الصورة. يرجى المحاولة مرة أخرى",
    "overlay_color": "لون الطبقة",
    "overlay_opacity": "شفافية الطبقة",
    "no_pukla_selected": "لم يتم إختيار أي بكلة",
    "avatar_border_radius": "تدوير حواف الصورة الرمزية",
    "select_highlight_animation": "اختر نمط الإبراز",
    "outline": "إطار",
    "border": "حدود",
    "platform": "المنصة",
    "url": "الرابط",
    "select_platform": "اختر المنصة",
    "add_social_link": "إضافة رابط",
    "save_social_links": "حفظ الروابط",
    "social_media_settings": "إعدادات وسائل التواصل الاجتماعي",
    "choose_social_media_settings": "أضف وأدر روابط وسائل التواصل الاجتماعي الخاصة بك",
    "update_settings": "تحديث الإعدادات"
  },
  "Analytics": {
    "title": "التحليلات",
    "description": "إدارة جميع تحليلاتك الأخرى",
    "select_pukla": "اختر بكلة",
    "select_pukla_to_view_analytics": "اختر بكلة لعرض التحليلات",
    "coming_soon": "التحليلات قادمة قريباً",
    "analytics_overview": "عرض التحليلات العامة",
    "analytics_overview_description": "عرض التحليلات العامة بالنسبة لبكلتك",
    "select_date_range": "اختر نطاق التاريخ"
  },
  "Billing": {
    "pro_plan": "الباقة الإحترافية",
    "only_for_enterprise_users": "لباقة المؤسسات فقط",
    "upgrade_to_enterprise_for_advanced_analytics": "قم بالترقية لباقة المؤسسات للوصول إلى التحليلات المتقدمة",
    "enterprise_plan": "باقة المؤسسات",
    "title": "الدفع",
    "description": "إدارة جميع طرق الدفع الخاصة بك",
    "upgrade_dialog": {
      "title": "ترقية إلى المستوى التالي",
      "description": "قم بترقية خطتك لإنشاء المزيد من البكلات",
      "unlimited_puklas": "إنشاء عدد لا محدود من البكلات",
      "custom_design_and_colors": "تصميم خاص وألوان مخصصة",
      "advanced_analytics": "تحليلات متقدمة ودعم بالبريد الإلكتروني"
    },
    "upgrade_now": "ترقية الآن"
  },
  "Account": {
    "title": "الحساب",
    "description": "إدارة جميع حساباتك الخاصة بك"
  },
  "Share": {
    "twitter": "شاركها على إكس (تويتر)",
    "snapchat": "شاركها على سنابشات",
    "linkedin": "شاركها على لينكد إن",
    "instagram": "شاركها على إنستقرام",
    "whatsapp": "شاركها على الواتساب",
    "facebook": "شاركها على فيسبوك",
    "mail": "شاركها على البريد الإلكتروني",
    "more-options": "خيارات أخرى",
    "shared_content": "لقيت بكلة وحبيت أشاركها, شوفها هنا https://puk.la/{puklaName}"
  },
  "Blog": {
    "title": "المدونة",
    "subtitle": "المدونة الخاصة بنا"
  },
  "Support": {
    "title": "الدعم",
    "subtitle": "الدعم الخاص بنا"
  },
  "Settings": {
    "title": "الإعدادات",
    "description": "إدارة إعدادات حسابك",
    "saved_successfully": "تم حفظ الإعدادات بنجاح",
    "error_saving": "فشل تحديث الإعدادات",
    "tabs": {
      "general": "عام",
      "appearance": "المظهر",
      "navigation": "التنقل",
      "preferences": "التفضيلات",
      "notifications": "الإشعارات",
      "billing": "الدفع"
    },
    "general": {
      "title": "الإعدادات العامة",
      "description": "إدارة تفاصيل حسابك وتفضيلاتك",
      "profile": {
        "title": "معلومات الملف الشخصي",
        "name": "الاسم",
        "email": "البريد الإلكتروني"
      },
      "regional": {
        "title": "الإعدادات الإقليمية",
        "language": "اللغة",
        "timezone": "المنطقة الزمنية"
      }
    },
    "appearance": {
      "title": "المظهر",
      "description": "تخصيص مظهر التطبيق",
      "theme": {
        "title": "المظهر",
        "dark_mode": "الوضع الداكن"
      },
      "density": {
        "title": "الكثافة",
        "interface_density": "كثافة الواجهة",
        "comfortable": "مريح",
        "compact": "مضغوط"
      }
    },
    "navigation": {
      "title": "التنقل",
      "description": "تخصيص قائمة التنقل"
    },
    "preferences": {
      "title": "التفضيلات",
      "description": "تعيين التفضيلات الافتراضية",
      "default": {
        "title": "الإعدادات الافتراضية",
        "currency": "العملة الافتراضية",
        "calendar": "التقويم الافتراضي"
      },
      "datetime": {
        "title": "تنسيق التاريخ والوقت",
        "date_format": "تنسيق التاريخ",
        "time_format": "تنسيق الوقت",
        "12h": "12 ساعة (ص/م)",
        "24h": "24 ساعة"
      }
    },
    "notifications": {
      "title": "الإشعارات",
      "description": "إدارة تفضيلات الإشعارات",
      "email": {
        "title": "إشعارات البريد الإلكتروني",
        "updates": "تحديثات المنتج",
        "marketing": "رسائل التسويق",
        "security": "تنبيهات الأمان"
      },
      "in_app": {
        "title": "الإشعارات داخل التطبيق",
        "mentions": "الإشارات",
        "comments": "التعليقات",
        "tasks": "مهام التعيين"
      }
    },
    "billing": {
      "title": "الدفع",
      "description": "إدارة معلومات الدفع والاشتراك",
      "current_plan": {
        "title": "الخطة الحالية",
        "change_plan": "تغيير الخطة"
      },
      "payment_method": {
        "title": "طريقة الدفع",
        "edit": "تعديل"
      },
      "billing_info": {
        "title": "معلومات الدفع",
        "name": "الاسم",
        "email": "البريد الإلكتروني",
        "address": "العنوان",
        "city": "المدينة"
      }
    }
  },
  "Feedback": {
    "give_feedback": "عندك ملاحظات؟",
    "feedback_placeholder": "أكتب ملاحظاتك هنا",
    "feedback_dialog_description": "إذا عندك إقتراح أو شكوى أو أي ملاحظات حول الخدمة، يمكنك إرسالها هنا",
    "submit_feedback": "إرسال الملاحظات",
    "submitting": "جاري الإرسال...",
    "feedback_submitted": "تم إرسال الملاحظات بنجاح",
    "thank_you_feedback": "شكرا لك على مساعدتنا في تحسين خدمتنا",
    "error_submitting_feedback": "فشل إرسال الملاحظات. الرجاء المحاولة مرة أخرى."
  },
  "Profile": {
    "general": "العامة",
    "security": "الأمان",
    "profile_updated_successfully": "تم تحديث الحساب بنجاح",
    "incorrect_current_password": "كلمة المرور الحالية غير صحيحة",
    "password_updated_successfully": "تم تحديث كلمة المرور بنجاح",
    "name": "الاسم",
    "email": "البريد الإلكتروني",
    "phone": "الهاتف",
    "current_password": "كلمة المرور الحالية",
    "new_password": "كلمة المرور الجديدة",
    "confirm_new_password": "تأكيد كلمة المرور الجديدة",
    "updating_password": "جاري تحديث كلمة المرور...",
    "change_password": "تغيير كلمة المرور",
    "saving_changes": "جاري حفظ التغييرات...",
    "save_changes": "حفظ التغييرات",
    "name_required": "الاسم مطلوب",
    "email_required": "البريد الإلكتروني مطلوب",
    "phone_required": "الهاتف مطلوب",
    "name_min_length": "الاسم يجب أن يكون أطول من 2 أحرف",
    "email_invalid": "البريد الإلكتروني غير صالح",
    "password_min_length": "كلمة المرور يجب أن يكون أطول من 6 أحرف",
    "current_password_required": "كلمة المرور الحالية مطلوبة",
    "confirm_new_password_required": "تأكيد كلمة المرور الجديدة مطلوب",
    "new_password_required": "كلمة المرور الجديدة مطلوبة",
    "passwords_do_not_match": "كلمة المرور وتأكيد كلمة المرور غير متطابقين"
  },
  "Country": {
    "afghanistan": "أفغانستان",
    "albania": "ألبانيا",
    "algeria": "الجزائر",
    "andorra": "أندورا",
    "angola": "أنغولا",
    "antigua_and_barbuda": "أنتيغوا وبربودا",
    "argentina": "الأرجنتين",
    "armenia": "أرمينيا",
    "australia": "أستراليا",
    "austria": "النمسا",
    "azerbaijan": "أذربيجان",
    "bahamas": "جزر البهاما",
    "bahrain": "البحرين",
    "bangladesh": "بنغلاديش",
    "barbados": "بربادوس",
    "belarus": "بيلاروسيا",
    "belgium": "بلجيكا",
    "belize": "بليز",
    "benin": "بنين",
    "bhutan": "بوتان",
    "bolivia": "بوليفيا",
    "bosnia_and_herzegovina": "البوسنة والهرسك",
    "botswana": "بوتسوانا",
    "brazil": "البرازيل",
    "brunei": "بروناي",
    "bulgaria": "بلغاريا",
    "burkina_faso": "بوركينا فاسو",
    "burundi": "بوروندي",
    "cambodia": "كمبوديا",
    "cameroon": "الكاميرون",
    "canada": "كندا",
    "cape_verde": "الرأس الأخضر",
    "central_african_republic": "جمهورية أفريقيا الوسطى",
    "chad": "تشاد",
    "chile": "تشيلي",
    "china": "الصين",
    "colombia": "كولومبيا",
    "comoros": "جزر القمر",
    "congo": "الكونغو",
    "costa_rica": "كوستاريكا",
    "croatia": "كرواتيا",
    "cuba": "كوبا",
    "cyprus": "قبرص",
    "czech_republic": "جمهورية التشيك",
    "denmark": "الدنمارك",
    "djibouti": "جيبوتي",
    "dominica": "دومينيكا",
    "dominican_republic": "جمهورية الدومينيكان",
    "east_timor": "تيمور الشرقية",
    "ecuador": "الإكوادور",
    "egypt": "مصر",
    "el_salvador": "السلفادور",
    "equatorial_guinea": "غينيا الاستوائية",
    "eritrea": "إريتريا",
    "estonia": "إستونيا",
    "ethiopia": "إثيوبيا",
    "fiji": "فيجي",
    "finland": "فنلندا",
    "france": "فرنسا",
    "gabon": "الغابون",
    "gambia": "غامبيا",
    "georgia": "جورجيا",
    "germany": "ألمانيا",
    "ghana": "غانا",
    "greece": "اليونان",
    "grenada": "غرينادا",
    "guatemala": "غواتيمالا",
    "guinea": "غينيا",
    "guinea_bissau": "غينيا بيساو",
    "guyana": "غيانا",
    "haiti": "هايتي",
    "honduras": "هندوراس",
    "hungary": "المجر",
    "iceland": "آيسلندا",
    "india": "الهند",
    "indonesia": "إندونيسيا",
    "iran": "إيران",
    "iraq": "العراق",
    "ireland": "أيرلندا",
    "israel": "إسرائيل",
    "italy": "إيطاليا",
    "ivory_coast": "ساحل العاج",
    "jamaica": "جامايكا",
    "japan": "اليابان",
    "jordan": "الأردن",
    "kazakhstan": "كازاخستان",
    "kenya": "كينيا",
    "kiribati": "كيريباتي",
    "kuwait": "الكويت",
    "kyrgyzstan": "قيرغيزستان",
    "laos": "لاوس",
    "latvia": "لاتفيا",
    "lebanon": "لبنان",
    "lesotho": "ليسوتو",
    "liberia": "ليبيريا",
    "libya": "ليبيا",
    "liechtenstein": "ليختنشتاين",
    "lithuania": "ليتوانيا",
    "luxembourg": "لوكسمبورغ",
    "madagascar": "مدغشقر",
    "malawi": "ملاوي",
    "malaysia": "ماليزيا",
    "maldives": "جزر المالديف",
    "mali": "مالي",
    "malta": "مالطا",
    "marshall_islands": "جزر مارشال",
    "mauritania": "موريتانيا",
    "mauritius": "موريشيوس",
    "mexico": "المكسيك",
    "micronesia": "ميكرونيزيا",
    "moldova": "مولدوفا",
    "monaco": "موناكو",
    "mongolia": "منغوليا",
    "montenegro": "الجبل الأسود",
    "morocco": "المغرب",
    "mozambique": "موزمبيق",
    "myanmar": "ميانمار",
    "namibia": "ناميبيا",
    "nauru": "ناورو",
    "nepal": "نيبال",
    "netherlands": "هولندا",
    "new_zealand": "نيوزيلندا",
    "nicaragua": "نيكاراغوا",
    "niger": "النيجر",
    "nigeria": "نيجيريا",
    "north_korea": "كوريا الشمالية",
    "north_macedonia": "مقدونيا الشمالية",
    "norway": "النرويج",
    "oman": "عمان",
    "pakistan": "باكستان",
    "palau": "بالاو",
    "palestine": "فلسطين",
    "panama": "بنما",
    "papua_new_guinea": "بابوا غينيا الجديدة",
    "paraguay": "باراغواي",
    "peru": "بيرو",
    "philippines": "الفلبين",
    "poland": "بولندا",
    "portugal": "البرتغال",
    "qatar": "قطر",
    "romania": "رومانيا",
    "russia": "روسيا",
    "rwanda": "رواندا",
    "saint_kitts_and_nevis": "سانت كيتس ونيفيس",
    "saint_lucia": "سانت لوسيا",
    "saint_vincent_and_the_grenadines": "سانت فنسنت وجزر غرينادين",
    "samoa": "ساموا",
    "san_marino": "سان مارينو",
    "sao_tome_and_principe": "ساو تومي وبرينسيبي",
    "saudi_arabia": "المملكة العربية السعودية",
    "senegal": "السنغال",
    "serbia": "صربيا",
    "seychelles": "سيشيل",
    "sierra_leone": "سيراليون",
    "singapore": "سنغافورة",
    "slovakia": "سلوفاكيا",
    "slovenia": "سلوفينيا",
    "solomon_islands": "جزر سليمان",
    "somalia": "الصومال",
    "south_africa": "جنوب أفريقيا",
    "south_korea": "كوريا الجنوبية",
    "south_sudan": "جنوب السودان",
    "spain": "إسبانيا",
    "sri_lanka": "سريلانكا",
    "sudan": "السودان",
    "suriname": "سورينام",
    "sweden": "السويد",
    "switzerland": "سويسرا",
    "syria": "سوريا",
    "taiwan": "تايوان",
    "tajikistan": "طاجيكستان",
    "tanzania": "تنزانيا",
    "thailand": "تايلاند",
    "togo": "توغو",
    "tonga": "تونغا",
    "trinidad_and_tobago": "ترينيداد وتوباغو",
    "tunisia": "تونس",
    "turkey": "تركيا",
    "turkmenistan": "تركمانستان",
    "tuvalu": "توفالو",
    "uganda": "أوغندا",
    "ukraine": "أوكرانيا",
    "united_arab_emirates": "الإمارات العربية المتحدة",
    "united_kingdom": "المملكة المتحدة",
    "united_states": "الولايات المتحدة الأمريكية",
    "uruguay": "أوروغواي",
    "uzbekistan": "أوزبكستان",
    "vanuatu": "فانواتو",
    "vatican_city": "الفاتيكان",
    "venezuela": "فنزويلا",
    "vietnam": "فيتنام",
    "yemen": "اليمن",
    "zambia": "زامبيا",
    "zimbabwe": "زيمبابوي"
  },
  "OnBoarding": {
    "title": "مرحباً بك في تند",
    "description": "أنشئ مؤسستك للبدء",
    "welcome_message": "قم بإعداد مؤسستك وابدأ في إدارة منظمتك بكفاءة.",
    "form": {
      "enterprise_name": {
        "label": "اسم المؤسسة",
        "placeholder": "أدخل اسم مؤسستك",
        "required": "اسم المؤسسة مطلوب"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أخبرنا عن مؤسستك"
      },
      "logo": {
        "label": "رابط الشعار",
        "placeholder": "أدخل رابط شعار مؤسستك"
      },
      "email": {
        "label": "البريد الإلكتروني للمؤسسة",
        "placeholder": "أدخل البريد الإلكتروني للمؤسسة",
        "invalid": "البريد الإلكتروني غير صالح"
      },
      "industry": {
        "label": "المجال",
        "placeholder": "اختر مجال عمل مؤسستك"
      },
      "size": {
        "label": "حجم المؤسسة",
        "placeholder": "اختر حجم مؤسستك"
      },
      "create_enterprise": "إنشاء المؤسسة"
    },
    "industry_options": {
      "technology": "التقنية",
      "healthcare": "الرعاية الصحية",
      "finance": "المالية",
      "education": "التعليم",
      "manufacturing": "التصنيع",
      "retail": "التجزئة",
      "other": "أخرى"
    },
    "size_options": {
      "1-10": "1-10 موظفين",
      "11-50": "11-50 موظف",
      "51-200": "51-200 موظف",
      "201-500": "201-500 موظف",
      "501-1000": "501-1000 موظف",
      "1000+": "أكثر من 1000 موظف"
    }
  },
  "OnBoardingForm": {
    "username": "اسم المستخدم",
    "title": "العنوان",
    "description": "الوصف",
    "avatar": "الصورة الرمزية",
    "create": "إنشاء بكلة",
    "link_title": "عنوان الرابط",
    "link_url": "رابط URL",
    "add_more_links": "إضافة رابط آخر",
    "save_links": "حفظ الروابط",
    "upload_image": "رفع الصورة"
  },
  "Directory": {
    "title": "إكتشف البكلات",
    "subtitle": "تصفح وإكتشف صفحات البكلة العامة من مجتمعنا",
    "search_placeholder": "ابحث عن طريق العنوان، الوصف، أو اسم المستخدم...",
    "no_puklas_found": "لم يتم العثور على بكلات",
    "no_puklas_found_description": "حاول تعديل البحث أو تحقق لاحقاً من البكلات الجديدة",
    "total_puklas": "تم العثور على {count} بكلة",
    "loading": "جاري تحميل البكلات..."
  },
  "Dashboard": {
    "title": "لوحة التحكم",
    "create_product": "إضافة منتج",
    "total_invoices": "إجمالي الفواتير",
    "pending": "معلقة",
    "total_products": "إجمالي المنتجات",
    "total_revenue": "إجمالي الإيرادات",
    "pending_invoices": "الفواتير المعلقة",
    "of_total": "% من الإجمالي",
    "recent_invoices": "الفواتير الأخيرة",
    "recent_invoices_list": "قريباً: قائمة الفواتير الأخيرة",
    "popular_products": "المنتجات الرائجة",
    "popular_products_list": "قريباً: قائمة المنتجات الرائجة",
    "create": "إنشاء",
    "select_create_option": "حدد خيارًا",
    "add_product": "إضافة منتج",
    "add_invoice": "إضافة فاتورة",
    "add_client": "إضافة عميل",
    "add_employee": "إضافة موظف",
    "add_warehouse": "إضافة مستودع"
  },
  "Help": {
    "title": "المساعدة",
    "hero": {
      "title": "صفحة المساعدة",
      "subtitle": "سنقوم بإضافة محتوى تعليمي قريبا إن شاء الله",
      "in-the-meantime": "في الوقت حالي, تفضل بالتواصل معنا إذا تحتاج مساعدة"
    },
    "contact": {
      "title": "تواصل معنا",
      "subtitle": "في خاطرك شي؟ حياك أرسل لنا رسالة "
    }
  },
  "Products": {
    "title": "المنتجات",
    "add_new": "منتج جديد",
    "search_products": "بحث عن منتجات",
    "product_details": "تفاصيل المنتج",
    "product_name": "اسم المنتج",
    "product_name_required": "اسم المنتج مطلوب",
    "enter_product_name": "أدخل اسم المنتج",
    "description": "الوصف",
    "enter_description": "أدخل وصف المنتج",
    "price": "السعر",
    "price_required": "السعر مطلوب",
    "stock_quantity": "الكمية المتوفرة",
    "stock_quantity_required": "الكمية المتوفرة مطلوبة",
    "sku": "رمز المنتج",
    "enter_sku": "أدخل رمز المنتج (اختياري)",
    "no_description": "لا يوجد وصف",
    "sku_label": "رمز المنتج: {value}",
    "stock_label": "متوفر: {value}",
    "create_product": "إنشاء منتج",
    "creating_product": "جاري الإنشاء...",
    "no_products": "لا توجد منتجات",
    "add_first_product": "أضف أول منتج",
    "form": {
      "name": {
        "label": "الاسم",
        "required": "الاسم مطلوب",
        "placeholder": "أدخل اسم المنتج"
      },
      "description": {
        "label": "الوصف",
        "required": "الوصف مطلوب",
        "placeholder": "أدخل وصف المنتج"
      },
      "price": {
        "label": "السعر",
        "required": "السعر مطلوب",
        "placeholder": "أدخل سعر المنتج"
      },
      "sku": {
        "label": "رمز المنتج",
        "required": "رمز المنتج مطلوب",
        "placeholder": "أدخل رمز المنتج (اختياري)"
      },
      "stock_quantity": {
        "label": "الكمية المتوفرة",
        "required": "الكمية المتوفرة مطلوبة",
        "placeholder": "أدخل الكمية المتوفرة"
      }
    },
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء المنتج بنجاح"
    },
    "error": {
      "title": "خطأ",
      "create": "فشل في إنشاء المنتج",
      "fetch": "فشل في جلب المنتجات",
      "delete_referenced": "لا يمكن حذف المنتجات",
      "delete_referenced_description": "لا يمكن حذف المنتجات التالية لأنها مستخدمة في عروض الأسعار: {products}. يرجى إزالتها من عروض الأسعار قبل الحذف.",
      "delete": "خطأ في حذف المنتجات"
    },
    "products": {
      "title": "المنتجات",
      "add_product": "إضافة منتج",
      "no_products": "لا توجد منتجات",
      "product": "المنتج",
      "quantity": "الكمية",
      "unit_price": "سعر الوحدة",
      "subtotal": "المجموع الفرعي",
      "select_product": "اختر منتج",
      "search_products": "بحث عن منتجات",
      "no_products_found": "لا توجد منتجات",
      "add_new_product": "منتج جديد",
      "product_description": "وصف المنتج",
      "name": "الاسم",
      "save_product": "حفظ المنتج"
    }
  },
  "Invoices": {
    "title": "الفواتير",
    "add_new": "فاتورة جديدة",
    "invoice_details": "تفاصيل الفاتورة",
    "invoice_number": "فاتورة #{number}",
    "enter_invoice_number": "أدخل رقم الفاتورة",
    "description": "الوصف",
    "enter_description": "أدخل وصف الفاتورة",
    "search_invoices": "بحث عن فواتير",
    "price": "السعر",
    "price_required": "السعر مطلوب",
    "stock_quantity": "كمية المخزون",
    "stock_quantity_required": "كمية المخزون مطلوبة",
    "sku": "رمز المنتج",
    "enter_sku": "أدخل رمز المنتج (اختياري)",
    "no_description": "لا يوجد وصف",
    "sku_label": "رمز المنتج: {value}",
    "stock_label": "المخزون: {value}",
    "create_invoice": "إنشاء فاتورة",
    "creating": "جاري الإنشاء...",
    "no_invoices_found": "لم يتم العثور على فواتير",
    "add_first_invoice": "أضف أول فاتورة",
    "client": "العميل",
    "select_client": "اختر عميل",
    "search_clients": "بحث عن عملاء...",
    "no_clients": "لا يوجد عملاء",
    "add_new_client": "عميل جديد",
    "amount": "المبلغ",
    "due_date": "تاريخ الاستحقاق",
    "select_status": "اختر حالة",
    "success": {
      "created": "تم إنشاء الفاتورة بنجاح",
      "updated": "تم تحديث الفاتورة بنجاح",
      "deleted": "تم حذف الفاتورة بنجاح",
      "duplicated": "تم تكرار الفاتورة بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الفاتورة...",
      "deleting": "جاري حذف الفاتورة..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الفاتورة",
      "updating": "حدث خطأ أثناء تحديث الفاتورة",
      "deleting": "حدث خطأ أثناء حذف الفاتورة",
      "duplicating": "حدث خطأ أثناء تكرار الفاتورة"
    },
    "status": {
      "title": "الحالة",
      "draft": "مسودة",
      "pending": "قيد الانتظار",
      "paid": "مدفوعة",
      "overdue": "متأخرة",
      "cancelled": "ملغاة"
    },
    "notes": "ملاحظات",
    "enter_notes": "أدخل أي ملاحظات إضافية",
    "client_added": "تمت إضافة العميل بنجاح",
    "submitting": "جاري الإرسال...",
    "invoice_hash": "فاتورة #{number}",
    "issue_date": "تاريخ الإصدار",
    "form": {
      "invoice_number": {
        "label": "رقم الفاتورة",
        "placeholder": "أدخل رقم الفاتورة"
      },
      "client": {
        "label": "العميل",
        "select_client": "اختر عميل",
        "search_clients": "بحث عن عملاء...",
        "no_clients": "لا يوجد عملاء",
        "add_new_client": "عميل جديد"
      },
      "issue_date": {
        "label": "تاريخ الإصدار",
        "placeholder": "اختر تاريخ الإصدار"
      },
      "due_date": {
        "label": "تاريخ الاستحقاق",
        "placeholder": "اختر تاريخ الاستحقاق"
      },
      "total": {
        "label": "المجموع"
      },
      "status": {
        "label": "الحالة",
        "placeholder": "اختر حالة",
        "draft": "مسودة",
        "pending": "قيد الانتظار",
        "paid": "مدفوعة",
        "overdue": "متأخرة",
        "cancelled": "ملغاة"
      },
      "subtotal": {
        "label": "المجموع الفرعي"
      },
      "tax_rate": {
        "label": "نسبة الضريبة"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل ملاحظاتك"
      }
    },
    "actions": {
      "preview": "معاينة"
    },
    "products": {
      "title": "المنتجات",
      "add_product": "إضافة منتج",
      "no_products": "لا توجد منتجات مضافة",
      "product": "المنتج",
      "quantity": "الكمية",
      "unit_price": "سعر الوحدة",
      "subtotal": "المجموع الفرعي",
      "select_product": "اختر منتج",
      "search_products": "بحث عن منتجات",
      "no_products_found": "لم يتم العثور على منتجات",
      "add_new_product": "منتج جديد",
      "product_description": "وصف المنتج"
    }
  },
  "Sales": {
    "title": "المبيعات",
    "add_new": "مبيعات جديدة",
    "sale_details": "تفاصيل البيع",
    "description": "الوصف",
    "description_required": "الوصف مطلوب",
    "enter_description": "أدخل وصف البيع",
    "amount": "المبلغ",
    "amount_required": "المبلغ مطلوب",
    "date": "التاريخ",
    "date_required": "التاريخ مطلوب",
    "status": {
      "title": "الحالة",
      "pending": "قيد الانتظار",
      "completed": "مكتمل",
      "cancelled": "ملغاة"
    },
    "select_status": "اختر حالة",
    "status_required": "الحالة مطلوبة",
    "notes": "ملاحظات",
    "enter_notes": "أدخل أي ملاحظات إضافية",
    "create_sale": "إنشاء مبيعات",
    "creating": "جاري الإنشاء...",
    "no_sales": "لا توجد مبيعات",
    "add_first_sale": "أضف أول بيع",
    "client": "العميل",
    "select_client": "اختر عميل",
    "search_clients": "بحث عن عملاء...",
    "no_clients": "لا يوجد عملاء",
    "add_new_client": "عميل جديد",
    "client_added": "تمت إضافة العميل بنجاح",
    "products": {
      "title": "المنتجات",
      "add_product": "إضافة منتج",
      "no_products": "لا توجد منتجات مضافة",
      "product": "المنتج",
      "quantity": "الكمية",
      "unit_price": "سعر الوحدة",
      "subtotal": "المجموع الفرعي",
      "select_product": "اختر منتج",
      "search_products": "بحث عن منتجات",
      "no_products_found": "لا توجد منتجات",
      "add_new_product": "منتج جديد",
      "product_description": "وصف المنتج"
    },
    "error": {
      "load_clients": "فشل في تحميل العملاء",
      "create": "فشل في إنشاء البيع",
      "fetch": "فشل في جلب المبيعات",
      "title": "خطأ"
    },
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء البيع بنجاح"
    },
    "submitting": "جاري الإرسال..."
  },
  "Quotes": {
    "title": "عروض الأسعار",
    "create_quote": "إنشاء عرض سعر",
    "add_new": "عرض سعر جديد",
    "back_to_list": "العودة إلى عروض الأسعار",
    "quote_details": "تفاصيل عرض السعر",
    "submitting": "جاري الإرسال...",
    "search_quotes": "البحث عن عروض الأسعار",
    "no_quotes_found": "لا يوجد عروض أسعار",
    "client": "العميل",
    "select_client": "اختر عميل",
    "search_clients": "البحث عن عملاء",
    "no_clients": "لم يتم العثور على عملاء",
    "add_new_client": "عميل جديد",
    "quote_number": "رقم عرض السعر",
    "enter_quote_number": "أدخل رقم عرض السعر",
    "subtotal": "المجموع الفرعي",
    "tax_rate": "نسبة الضريبة (%)",
    "issue_date": "تاريخ الإصدار",
    "expiry_date": "تاريخ انتهاء الصلاحية",
    "select_status": "اختر الحالة",
    "select_issue_date": "اختر تاريخ الإصدار",
    "select_expiry_date": "اختر تاريخ انتهاء الصلاحية",
    "tax": "الضريبة",
    "status": {
      "title": "الحالة",
      "draft": "مسودة",
      "sent": "تم الإرسال",
      "accepted": "مقبول",
      "rejected": "مرفوض",
      "expired": "منتهي الصلاحية"
    },
    "notes": "ملاحظات",
    "enter_notes": "أدخل الملاحظات",
    "form": {
      "quote_number": {
        "label": "رقم عرض السعر",
        "placeholder": "أدخل رقم عرض السعر"
      },
      "client": {
        "label": "العميل",
        "placeholder": "اختر عميل"
      },
      "expiry_date": {
        "label": "تاريخ انتهاء الصلاحية",
        "placeholder": "اختر تاريخ انتهاء الصلاحية"
      },
      "status": {
        "title": "الحالة",
        "label": "الحالة",
        "placeholder": "اختر الحالة",
        "draft": "مسودة",
        "sent": "تم الإرسال",
        "accepted": "مقبول",
        "rejected": "مرفوض",
        "expired": "منتهي الصلاحية"
      },
      "issue_date": {
        "label": "تاريخ الإصدار",
        "placeholder": "اختر تاريخ الإصدار"
      }
    },
    "products": {
      "title": "المنتجات",
      "product": "المنتج",
      "select_product": "اختر منتج",
      "search_products": "البحث عن منتجات",
      "no_products_found": "لم يتم العثور على منتجات",
      "add_new_product": "منتج جديد",
      "add_product": "إضافة منتج",
      "quantity": "الكمية",
      "unit_price": "سعر الوحدة",
      "subtotal": "المجموع الفرعي",
      "product_description": "وصف المنتج",
      "no_products": "لم يتم إضافة منتجات",
      "description": "الوصف"
    },
    "description": "الوصف",
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء عرض السعر بنجاح"
    },
    "error": {
      "title": "خطأ",
      "create": "فشل في إنشاء عرض السعر",
      "load_clients": "فشل في تحميل العملاء"
    },
    "tax_amount": "مبلغ الضريبة",
    "total": "الإجمالي",
    "validation": {
      "client_required": "العميل مطلوب",
      "quote_number_required": "رقم عرض السعر مطلوب",
      "issue_date_required": "تاريخ الإصدار مطلوب",
      "expiry_date_required": "تاريخ الانتهاء مطلوب",
      "status_required": "الحالة مطلوبة",
      "subtotal_positive": "المجموع الفرعي يجب أن يكون رقماً موجباً",
      "tax_rate_positive": "نسبة الضريبة يجب أن تكون رقماً موجباً",
      "items_required": "يجب إضافة منتج واحد على الأقل",
      "item_description_required": "الوصف مطلوب",
      "item_quantity_required": "الكمية مطلوبة",
      "item_quantity_positive": "الكمية يجب أن تكون رقماً موجباً",
      "item_price_required": "السعر مطلوب",
      "item_price_positive": "السعر يجب أن يكون رقماً موجباً",
      "item_description_or_product": "يجب اختيار منتج أو إدخال وصف لكل عنصر"
    }
  },
  "EmployeeRequests": {
    "title": "طلبات الموظفين",
    "description": "طلبات الموظفين",
    "add_new": "طلب موظف جديد",
    "no_employee_requests_found": "لا توجد طلبات موظفين",
    "search_requests": "بحث عن طلبات الموظفين...",
    "form": {
      "validation": {
        "title_required": "العنوان مطلوب",
        "type_required": "النوع مطلوب",
        "employee_required": "الموظف مطلوب",
        "description_required": "الوصف مطلوب",
        "start_date_required": "تاريخ البدء مطلوب",
        "end_date_required": "تاريخ الانتهاء مطلوب",
        "amount_required": "المبلغ مطلوب",
        "amount_positive": "المبلغ يجب أن يكون رقماً موجباً"
      },
      "title": {
        "label": "العنوان",
        "placeholder": "أدخل عنوان الطلب",
        "required": "العنوان مطلوب"
      },
      "type": {
        "label": "النوع",
        "placeholder": "اختر نوع الطلب",
        "leave": "إجازة",
        "expense": "مصروفات",
        "document": "وثيقة",
        "other": "أخرى"
      },
      "employee": {
        "label": "الموظف",
        "placeholder": "اختر الموظف",
        "required": "الموظف مطلوب",
        "no_employees": "لا يوجد موظفين"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أدخل وصف الطلب",
        "required": "الوصف مطلوب"
      },
      "date_range": {
        "label": "الفترة الزمنية",
        "start": "تاريخ البدء",
        "end": "تاريخ الانتهاء"
      },
      "amount": {
        "label": "المبلغ",
        "placeholder": "أدخل المبلغ",
        "required": "المبلغ مطلوب"
      },
      "attachments": {
        "label": "المرفقات",
        "add": "إضافة مرفق",
        "remove": "إزالة"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل أي ملاحظات إضافية",
        "required": "الملاحظات مطلوبة"
      },
      "status": {
        "label": "الحالة",
        "pending": "قيد الانتظار",
        "approved": "تمت الموافقة",
        "rejected": "مرفوض"
      }
    },
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء طلب الموظف بنجاح"
    },
    "error": {
      "title": "خطأ",
      "create": "فشل في إنشاء طلب الموظف"
    }
  },
  "Clients": {
    "title": "العملاء",
    "add_new": "عميل جديد",
    "create_client": "إضافة عميل",
    "back_to_list": "الرجوع للقائمة",
    "client_details": "تفاصيل العميل",
    "search_clients": "بحث عن عملاء...",
    "no_clients_found": "لا توجد عملاء",
    "form": {
      "validation": {
        "name_required": "الاسم مطلوب",
        "email_required": "البريد الإلكتروني مطلوب",
        "email_invalid": "البريد الإلكتروني غير صالح",
        "phone_required": "رقم الهاتف مطلوب",
        "address_required": "العنوان مطلوب",
        "city_required": "المدينة مطلوبة",
        "state_required": "المنطقة مطلوبة",
        "zip_code_required": "الرمز البريدي مطلوب"
      },
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم العميل"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني للعميل"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم الهاتف"
      },
      "company": {
        "label": "الشركة",
        "placeholder": "اختر أو أضف شركة",
        "search_placeholder": "ابحث عن الشركات...",
        "no_companies": "لم يتم العثور على شركات"
      },
      "address": {
        "label": "العنوان",
        "placeholder": "أدخل العنوان"
      },
      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل أي ملاحظات إضافية"
      }
    },
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء العميل بنجاح",
      "updated": "تم تحديث العميل بنجاح",
      "deleted": "تم حذف العميل بنجاح",
      "duplicated": "تم تكرار العميل بنجاح"
    },
    "error": {
      "create": "فشل في إنشاء العميل",
      "load_clients": "فشل في تحميل العملاء",
      "update": "فشل في تحديث العميل",
      "delete": "فشل في حذف العميل",
      "duplicate": "فشل في تكرار العميل"
    },
    "loading": {
      "creating": "جاري إنشاء العميل...",
      "updating": "جاري تحديث العميل...",
      "deleting": "جاري حذف العميل...",
      "duplicating": "جاري تكرار العميل..."
    }
  },
  "Warehouses": {
    "title": "المستودعات",
    "add_new": "مستودع جديد",
    "warehouse_details": "تفاصيل المستودع",
    "search_warehouses": "بحث عن مستودعات...",
    "name": "الاسم",
    "name_required": "اسم المستودع مطلوب",
    "enter_name": "أدخل اسم المستودع",
    "code": "الرمز",
    "code_required": "رمز المستودع مطلوب",
    "enter_code": "أدخل رمز المستودع",
    "address": "العنوان",
    "enter_address": "أدخل عنوان المستودع",
    "city": "المدينة",
    "enter_city": "أدخل المدينة",
    "state": "المنطقة/الولاية",
    "enter_state": "أدخل المنطقة/الولاية",
    "zip_code": "الرمز البريدي",
    "enter_zip_code": "أدخل الرمز البريدي",
    "status": {
      "title": "الحالة",
      "active": "نشط",
      "inactive": "غير نشط"
    },
    "select_status": "اختر حالة",
    "status_required": "الحالة مطلوبة",
    "notes": "ملاحظات",
    "enter_notes": "أدخل أي ملاحظات إضافية",
    "create_warehouse": "إنشاء مستودع",
    "creating": "جاري الإنشاء...",
    "no_warehouses": "لا توجد مستودعات",
    "add_first_warehouse": "أضف أول مستودع",

    "submitting": "جاري الإرسال...",
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم المستودع",
        "required": "الاسم مطلوب"
      },
      "code": {
        "label": "الرمز",
        "placeholder": "أدخل رمز المستودع",
        "required": "الرمز مطلوب"
      },
      "address": {
        "label": "عنوان المستودع",
        "placeholder": "أدخل عنوان المستودع",
        "required": "عنوان المستودع مطلوب"
      },
      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة",
        "required": "المدينة مطلوبة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة",
        "required": "المنطقة مطلوبة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي",
        "required": "الرمز البريدي مطلوب"
      },
      "capacity": {
        "label": "السعة",
        "placeholder": "أدخل سعة المستودع"
      },
      "is_active": {
        "label": "نشط"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل الملاحظات"
      },
      "create_button": "إنشاء مستودع",
      "update_button": "تحديث المستودع"
    },
    "success": {
      "created": "تم إنشاء المستودع بنجاح",
      "updated": "تم تحديث المستودع بنجاح",
      "deleted": "تم حذف المستودع بنجاح",
      "duplicated": "تم تكرار المستودع بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار المستودع...",
      "deleting": "جاري حذف المستودع..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء المستودع",
      "updating": "حدث خطأ أثناء تحديث المستودع",
      "deleting": "حدث خطأ أثناء حذف المستودع",
      "duplicating": "حدث خطأ أثناء تكرار المستودع"
    }
  },
  "Branches": {
    "title": "الفروع",
    "add_new": "فرع جديد",
    "branch_details": "تفاصيل الفرع",
    "create_branch": "إنشاء فرع",
    "no_branches_found": "لا توجد فروع",
    "search_branches": "بحث عن فروع...",
    "manager": "المدير",
    "edit": "تعديل الفرع",
    "status": {
      "active": "نشط",
      "inactive": "غير نشط"
    },
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم الفرع",
        "required": "الاسم مطلوب"
      },
      "code": {
        "label": "الرمز",
        "placeholder": "أدخل رمز الفرع",
        "required": "الرمز مطلوب"
      },
      "address": {
        "label": "عنوان الفرع",
        "placeholder": "أدخل عنوان الفرع",
        "required": "عنوان الفرع مطلوب"
      },
      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة",
        "required": "المدينة مطلوبة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة",
        "required": "المنطقة مطلوبة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي",
        "required": "الرمز البريدي مطلوب"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم الهاتف"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني",
        "invalid": "البريد الإلكتروني غير صالح"
      },
      "manager": {
        "label": "المدير",
        "placeholder": "أدخل اسم المدير"
      },
      "is_active": {
        "label": "الحالة النشطة"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل ملاحظات"
      },
      "update_button": "تحديث الفرع",
      "create_button": "إنشاء فرع"
    },
    "success": {
      "created": "تم إنشاء الفرع بنجاح",
      "updated": "تم تحديث الفرع بنجاح",
      "deleted": "تم حذف الفرع بنجاح",
      "duplicated": "تم تكرار الفرع بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الفرع...",
      "deleting": "جاري حذف الفرع..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الفرع",
      "updating": "حدث خطأ أثناء تحديث الفرع",
      "deleting": "حدث خطأ أثناء حذف الفرع",
      "duplicating": "حدث خطأ أثناء تكرار الفرع"
    }
  },
  "Vendors": {
    "title": "الموردين",
    "add_new": "مورد جديد",
    "back_to_list": "الرجوع للقائمة",
    "vendor_details": "تفاصيل المورد",
    "no_vendors": "لا يوجد موردين",
    "search_vendors": "بحث عن موردين...",
    "add_first_vendor": "أضف أول مورد",
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل الاسم",
        "required": "الاسم مطلوب"
      },
      "company": {
        "label": "الشركة",
        "placeholder": "أدخل اسم الشركة"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني",
        "required": "البريد الإلكتروني مطلوب",
        "invalid": "البريد الإلكتروني غير صالح"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم الهاتف",
        "required": "رقم الهاتف مطلوب"
      },
      "address": {
        "label": "عنوان المورد",
        "placeholder": "أدخل عنوان المورد",
        "required": "عنوان المورد مطلوب"
      },
      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة",
        "required": "المدينة مطلوبة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة",
        "required": "المنطقة مطلوبة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي",
        "required": "الرمز البريدي مطلوب"
      },
      "products": {
        "label": "المنتجات/الخدمات",
        "placeholder": "أدخل المنتجات أو الخدمات"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل ملاحظات"
      }
    },
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء المورد بنجاح",
      "updated": "تم تحديث المورد بنجاح",
      "deleted": "تم حذف المورد بنجاح",
      "duplicated": "تم تكرار المورد بنجاح"
    },
    "error": {
      "create": "فشل في إنشاء المورد",
      "load_vendors": "فشل في تحميل الموردين",
      "update": "فشل في تحديث المورد",
      "delete": "فشل في حذف المورد",
      "duplicate": "فشل في تكرار المورد"
    },
    "loading": {
      "creating": "جاري إنشاء المورد...",
      "updating": "جاري تحديث المورد...",
      "deleting": "جاري حذف المورد...",
      "duplicating": "جاري تكرار المورد..."
    }
  },
  "Attendance": {
    "title": "الحضور",
    "today": "حضور اليوم",
    "check_in": "تسجيل الدخول",
    "check_out": "تسجيل الخروج",
    "total_hours": "إجمالي الساعات",
    "history": "سجل الحضور",
    "date": "التاريخ",
    "employee": "الموظف",
    "status": {
      "present": "حاضر",
      "absent": "غائب",
      "late": "متأخر",
      "half_day": "نصف يوم",
      "on_leave": "في إجازة"
    },
    "report": {
      "title": "تقرير الحضور",
      "generate": "إنشاء تقرير",
      "daily": "تقرير يومي",
      "weekly": "تقرير أسبوعي",
      "monthly": "تقرير شهري"
    },
    "filter": {
      "all": "جميع الموظفين",
      "department": "تصفية حسب القسم",
      "date_range": "الفترة الزمنية"
    },
    "no_records": "لا توجد سجلات حضور",
    "messages": {
      "check_in_success": "تم تسجيل الدخول بنجاح",
      "check_out_success": "تم تسجيل الخروج بنجاح",
      "already_checked_in": "تم تسجيل الدخول بالفعل اليوم",
      "not_checked_in": "لم يتم تسجيل الدخول بعد",
      "error": "حدث خطأ أثناء معالجة طلبك"
    }
  },
  "Users": {
    "title": "المستخدمون",
    "add_new": "مستخدم جديد",
    "user_details": "تفاصيل المستخدم",
    "login_details": "تفاصيل تسجيل الدخول",
    "personal_info": "المعلومات الشخصية",
    "permissions": "الصلاحيات",
    "no_users": "لا يوجد مستخدمين",
    "active_users": "المستخدمون النشطون",
    "inactive_users": "المستخدمون غير النشطين",
    "search_placeholder": "بحث عن مستخدمين...",
    "add_dialog": {
      "title": "مستخدم جديد",
      "description": "املأ التفاصيل لإنشاء مستخدم جديد. سينتمي إلى نفس المؤسسة."
    },
    "permissions_popover": "الصلاحيات",
    "created_at_never": "أبدًا",
    "actions": {
      "open_menu": "فتح القائمة",
      "edit": "تعديل المستخدم",
      "delete": "حذف المستخدم",
      "activate": "تفعيل المستخدم",
      "deactivate": "تعطيل المستخدم",
      "reset_password": "إعادة تعيين كلمة المرور"
    },
    "edit_dialog": {
      "title": "تعديل المستخدم",
      "description": "قم بإجراء تغييرات على ملف تعريف المستخدم هنا.",
      "email_label": "البريد الإلكتروني",
      "role_label": "الدور",
      "select_role_placeholder": "اختر الدور",
      "save_button": "حفظ التغييرات"
    },
    "delete_dialog": {
      "title": "حذف المستخدم",
      "description": "هل أنت متأكد أنك تريد حذف هذا المستخدم؟ لا يمكن التراجع عن هذا الإجراء.",
      "user_prefix": "المستخدم: ",
      "no_email": "لا يوجد بريد إلكتروني",
      "delete_button": "حذف"
    },
    "toast": {
      "success": {
        "updated": "تم تحديث المستخدم",
        "updated_description": "تم تحديث معلومات المستخدم بنجاح.",
        "deleted": "تم حذف المستخدم",
        "deleted_description": "تم حذف المستخدم بنجاح."
      },
      "error": {
        "update_failed": "فشل تحديث معلومات المستخدم.",
        "update_failed_description": "فشل تحديث معلومات المستخدم.",
        "delete_failed": "فشل حذف المستخدم.",
        "delete_failed_description": "فشل حذف المستخدم."
      }
    },
    "form": {
      "first_name": {
        "label": "الاسم الأول",
        "placeholder": "أدخل الاسم الأول",
        "required": "الاسم الأول مطلوب"
      },
      "last_name": {
        "label": "الاسم الأخير",
        "placeholder": "أدخل الاسم الأخير",
        "required": "الاسم الأخير مطلوب"
      },
      "name": {
        "label": "الاسم الكامل",
        "placeholder": "أدخل الاسم الكامل",
        "required": "الاسم الكامل مطلوب"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني",
        "required": "البريد الإلكتروني مطلوب",
        "invalid": "البريد الإلكتروني غير صالح"
      },
      "password": {
        "label": "كلمة المرور",
        "placeholder": "أدخل كلمة المرور",
        "required": "كلمة المرور مطلوبة",
        "min_length": "يجب أن تكون كلمة المرور 8 أحرف على الأقل",
        "confirm": "تأكيد كلمة المرور",
        "confirm_placeholder": "تأكيد كلمة المرور",
        "mismatch": "كلمات المرور غير متطابقة"
      },
      "role": {
        "label": "الدور",
        "placeholder": "اختر دورًا",
        "required": "الدور مطلوب",
        "admin": "مدير النظام",
        "manager": "مدير",
        "employee": "موظف",
        "user": "مستخدم عادي",
        "search_placeholder": "بحث عن دور..."
      },
      "status": {
        "label": "الحالة",
        "active": "نشط",
        "inactive": "غير نشط",
        "suspended": "معلق"
      },
      "phone": {
        "label": "رقم الهاتف",
        "placeholder": "أدخل رقم الهاتف"
      },
      "department": {
        "label": "القسم",
        "placeholder": "اختر القسم"
      },
      "avatar": {
        "label": "الصورة الشخصية",
        "upload": "رفع صورة",
        "remove": "إزالة الصورة"
      },
      "permissions": {
        "label": "الصلاحيات",
        "placeholder": "اختر الصلاحيات"
      },
      "created_at": {
        "label": "تاريخ الإنشاء"
      },
      "updated_at": {
        "label": "تاريخ التحديث"
      }
    },
    "messages": {
      "creating": "جاري إنشاء المستخدم...",
      "create": "إنشاء المستخدم",
      "created": "تم إنشاء المستخدم بنجاح",
      "updated": "تم تحديث المستخدم بنجاح",
      "deleted": "تم حذف المستخدم بنجاح",
      "error": "حدث خطأ أثناء معالجة طلبك"
    },
    "success": {
      "created": "تم إنشاء المستخدم بنجاح",
      "updated": "تم تحديث المستخدم بنجاح",
      "deleted": "تم حذف المستخدم بنجاح"
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء المستخدم",
      "updating": "حدث خطأ أثناء تحديث المستخدم",
      "deleting": "حدث خطأ أثناء حذف المستخدم"
    }
  },
  "Locations": {
    "title": "المواقع",
    "types": {
      "office": "مكتب",
      "branch": "فرع",
      "warehouse": "مخزن"
    }
  },
  "Salaries": {
    "title": "الرواتب",
    "add_new": "راتب جديد",
    "create_salary": "إضافة راتب",
    "edit_salary": "تعديل الراتب",
    "delete_salary": "حذف الراتب",
    "search_salaries": "البحث في الرواتب...",
    "confirm_delete": "هل أنت متأكد من حذف هذا الراتب؟",
    "no_salaries_found": "لم يتم العثور على رواتب",
    "salary_details": "تفاصيل الراتب",
    "success": {
      "title": "تم بنجاح",
      "deleted": "تم حذف الراتب بنجاح"
    },
    "error": {
      "title": "خطأ",
      "delete": "فشل في حذف الراتب"
    },
    "messages": {
      "success_deleted": "تم حذف الراتب بنجاح",
      "error_delete": "فشل في حذف الراتب",
      "error_not_authenticated": "يجب تسجيل الدخول لإنشاء راتب",
      "success_created": "تم إنشاء الراتب بنجاح"
    },
    "table": {
      "employee_name": "اسم الموظف",
      "gross_amount": "المبلغ الإجمالي",
      "net_amount": "المبلغ الصافي",
      "payment_date": "تاريخ الدفع",
      "pay_period_start": "بداية فترة الدفع",
      "pay_period_end": "نهاية فترة الدفع",
      "actions": "الإجراءات"
    },
    "form": {
      "employee_name": {
        "label": "اسم الموظف",
        "placeholder": "أدخل اسم الموظف",
        "required": "اسم الموظف مطلوب"
      },
      "gross_amount": {
        "label": "المبلغ الإجمالي",
        "placeholder": "أدخل المبلغ الإجمالي",
        "required": "المبلغ الإجمالي مطلوب"
      },
      "net_amount": {
        "label": "المبلغ الصافي",
        "placeholder": "أدخل المبلغ الصافي",
        "required": "المبلغ الصافي مطلوب"
      },
      "payment_date": {
        "label": "تاريخ الدفع",
        "required": "تاريخ الدفع مطلوب",
        "placeholder": "اختر تاريخ الدفع"
      },
      "pay_period_start": {
        "label": "بداية فترة الدفع",
        "required": "تاريخ بداية فترة الدفع مطلوب",
        "placeholder": "اختر تاريخ بداية فترة الدفع"
      },
      "pay_period_end": {
        "label": "نهاية فترة الدفع",
        "required": "تاريخ نهاية فترة الدفع مطلوب",
        "placeholder": "اختر تاريخ نهاية فترة الدفع"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل أي ملاحظات إضافية"
      }
    }
  },
  "Administration": {
    "title": "الإدارة"
  },
  "Accounting": {
    "title": "المحاسبة"
  },
  "HumanResources": {
    "title": "الموارد البشرية"
  },
  "Jobs": {
    "title": "الوظائف",
    "create_job": "إنشاء وظيفة",
    "add_job": "إضافة وظيفة",
    "edit_job": "تعديل الوظيفة",
    "job_details": "تفاصيل الوظيفة",
    "add_new": "وظيفة جديدة",
    "add_new_listing": "صفحة توظيف جديدة",
    "listing_details": "تفاصيل صفحة توظيف",
    "back_to_list": "العودة إلى القائمة",
    "no_jobs_found": "لم يتم العثور على وظائف",
    "failed_to_fetch_jobs": "فشل في جلب الوظائف",
    "search_jobs": "البحث في الوظائف...",
    "form": {
      "title": {
        "label": "عنوان الوظيفة",
        "placeholder": "أدخل عنوان الوظيفة",
        "required": "عنوان الوظيفة مطلوب"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أدخل وصف الوظيفة"
      },
      "requirements": {
        "label": "المتطلبات",
        "placeholder": "أدخل متطلبات الوظيفة"
      },
      "location": {
        "label": "الموقع",
        "placeholder": "أدخل موقع الوظيفة"
      },
      "department": {
        "label": "القسم",
        "placeholder": "أدخل القسم",
        "required": "القسم مطلوب"
      },
      "type": {
        "label": "نوع الوظيفة",
        "placeholder": "اختر نوع الوظيفة",
        "full_time": "دوام كامل",
        "part_time": "دوام جزئي",
        "contract": "عقد",
        "internship": "تدريب",
        "temporary": "مؤقت",
        "required": "نوع الوظيفة مطلوب"
      },
      "salary": {
        "label": "الراتب",
        "placeholder": "أدخل الراتب",
        "required": "الراتب مطلوب"
      },
      "status": {
        "label": "الحالة",
        "placeholder": "اختر الحالة"
      },
      "start_date": {
        "label": "تاريخ البدء",
        "placeholder": "أدخل تاريخ البدء"
      },
      "end_date": {
        "label": "تاريخ الانتهاء",
        "placeholder": "أدخل تاريخ الانتهاء"
      },
      "is_active": {
        "label": "هل هذه الوظيفة نشطة؟"
      },
      "created_at": {
        "label": "تاريخ الإنشاء"
      },
      "updated_at": {
        "label": "تاريخ التحديث"
      }
    },
    "success": {
      "created": "تم إنشاء الوظيفة بنجاح",
      "updated": "تم تحديث الوظيفة بنجاح",
      "deleted": "تم حذف الوظيفة بنجاح",
      "duplicated": "تم تكرار الوظيفة بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الوظيفة...",
      "deleting": "جاري حذف الوظيفة..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الوظيفة",
      "updating": "حدث خطأ أثناء تحديث الوظيفة",
      "deleting": "حدث خطأ أثناء حذف الوظيفة",
      "duplicating": "حدث خطأ أثناء تكرار الوظيفة"
    }
  },
  "JobListings": {
    "title": "صفحات التوظيف",
    "create_listing": "إنشاء صفحة توظيف",
    "add_new_listing": "صفحة توظيف جديدة",
    "search_listings": "البحث في صفحات التوظيف...",
    "listing_details": "تفاصيل صفحة التوظيف",
    "messages": {
      "auth_required": "يجب تسجيل الدخول لإنشاء إعلان وظيفي",
      "listing_created": "تم إنشاء إعلان الوظيفة بنجاح",
      "error": "حدث خطأ أثناء إنشاء إعلان الوظيفة",
      "items_deleted": "تم حذف إعلانات الوظائف بنجاح",
      "delete_error": "حدث خطأ أثناء حذف إعلانات الوظائف"
    },
    "status": {
      "title": "الحالة",
      "active": "نشط",
      "inactive": "غير نشط"
    },
    "form": {
      "title": {
        "label": "عنوان الإعلان",
        "placeholder": "أدخل عنوان الإعلان"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أدخل وصف الإعلان"
      },
      "jobs": {
        "label": "الوظائف",
        "placeholder": "اختر الوظائف"
      },
      "is_active": {
        "label": "هل هذا الإعلان نشط؟",
        "placeholder": "أدخل إذا كان الإعلان نشطًا أم لا"
      },
      "status": {
        "label": "الحالة",
        "placeholder": "اختر الحالة"
      },
      "created_at": {
        "label": "تاريخ الإنشاء"
      }
    }
  },
  "Expenses": {
    "title": "المصروفات",
    "description": "إدارة وتتبع المصروفات",
    "add_new": "مصروف جديد",
    "search_expenses": "البحث في المصروفات",
    "no_expenses_found": "لم يتم العثور على مصروفات",
    "confirm_delete_title": "تأكيد حذف المصروفات",
    "confirm_delete": "هل أنت متأكد من حذف {count} مصروف؟",
    "success": {
      "title": "تم بنجاح",
      "created": "تم إنشاء المصروف بنجاح",
      "updated": "تم تحديث المصروف بنجاح",
      "deleted": "تم حذف المصروف بنجاح",
      "duplicated": "تم تكرار المصروف بنجاح"
    },
    "error": {
      "create": "فشل في إنشاء المصروف",
      "load_expenses": "فشل في تحميل المصروفات",
      "update": "فشل في تحديث المصروف",
      "delete": "فشل في حذف المصروف",
      "duplicate": "فشل في تكرار المصروف"
    },
    "loading": {
      "creating": "جاري إنشاء المصروف...",
      "updating": "جاري تحديث المصروف...",
      "deleting": "جاري حذف المصروف...",
      "duplicating": "جاري تكرار المصروف..."
    },
    "form": {
      "expense_number": {
        "label": "رقم المصروف",
        "placeholder": "أدخل رقم المصروف",
        "required": "رقم المصروف مطلوب"
      },
      "issue_date": {
        "label": "تاريخ الإصدار",
        "placeholder": "اختر تاريخ الإصدار",
        "required": "تاريخ الإصدار مطلوب"
      },
      "due_date": {
        "label": "تاريخ الاستحقاق",
        "placeholder": "اختر تاريخ الاستحقاق",
        "required": "تاريخ الاستحقاق مطلوب"
      },
      "amount": {
        "label": "المبلغ",
        "placeholder": "أدخل المبلغ",
        "required": "المبلغ مطلوب"
      },
      "category": {
        "label": "الفئة",
        "placeholder": "اختر الفئة",
        "required": "الفئة مطلوبة"
      },
      "client": {
        "label": "العميل",
        "placeholder": "اختر العميل"
      },
      "status": {
        "label": "الحالة",
        "placeholder": "اختر الحالة",
        "pending": "معلق",
        "paid": "مدفوع",
        "overdue": "متأخر"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل ملاحظات إضافية"
      }
    }
  },
  "Applicants": {
    "title": "المتقدمين",
    "add_new": "متقدم جديد",
    "applicant_details": "تفاصيل المتقدم",
    "back_to_list": "العودة إلى القائمة",
    "no_applicants": "لم يتم العثور على متقدمين",
    "form": {
      "name": {
        "label": "الاسم الكامل",
        "placeholder": "أدخل الاسم الكامل",
        "required": "الاسم الكامل مطلوب"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل عنوان البريد الإلكتروني",
        "required": "البريد الإلكتروني مطلوب",
        "invalid": "عنوان البريد الإلكتروني غير صالح"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم الهاتف",
        "required": "رقم الهاتف مطلوب"
      },
      "position": {
        "label": "الوظيفة المتقدم لها",
        "placeholder": "أدخل الوظيفة",
        "required": "الوظيفة مطلوبة"
      },
      "resume": {
        "label": "السيرة الذاتية",
        "placeholder": "رفع السيرة الذاتية",
        "required": "السيرة الذاتية مطلوبة"
      },
      "cover_letter": {
        "label": "خطاب التقديم",
        "placeholder": "أدخل خطاب التقديم"
      },
      "experience": {
        "label": "سنوات الخبرة",
        "placeholder": "أدخل سنوات الخبرة"
      },
      "education": {
        "label": "التعليم",
        "placeholder": "أدخل تفاصيل التعليم"
      },
      "skills": {
        "label": "المهارات",
        "placeholder": "أدخل المهارات"
      },
      "availability": {
        "label": "التوفر",
        "placeholder": "أدخل التوفر"
      },
      "references": {
        "label": "المراجع",
        "placeholder": "أدخل المراجع"
      },
      "notes": {
        "label": "ملاحظات إضافية",
        "placeholder": "أدخل ملاحظات إضافية"
      }
    },
    "status": {
      "new": "جديد",
      "reviewing": "قيد المراجعة",
      "interviewed": "تمت المقابلة",
      "offered": "تم تقديم عرض",
      "hired": "تم التعيين",
      "rejected": "مرفوض"
    },
    "actions": {
      "view": "عرض التفاصيل",
      "edit": "تعديل",
      "delete": "حذف",
      "change_status": "تغيير الحالة"
    },
    "messages": {
      "creating": "جاري إنشاء المتقدم...",
      "create": "إنشاء متقدم",
      "created": "تم إنشاء المتقدم بنجاح",
      "updated": "تم تحديث المتقدم بنجاح",
      "deleted": "تم حذف المتقدم بنجاح",
      "error": "حدث خطأ أثناء معالجة طلبك"
    }
  },
  "Recruitment": {
    "title": "التوظيف"
  },
  "Leave": {
    "title": "الإجازات"
  },
  "Employees": {
    "title": "الموظفين",
    "add_new": "موظف جديد",
    "add_employee": "إضافة موظف",
    "search_employees": "بحث عن موظفين",
    "cancel": "إلغاء",
    "employee_details": "تفاصيل الموظف",
    "edit": "تعديل الموظف",
    "back_to_list": "الرجوع للقائمة",
    "allEmployees": "جميع الموظفين",
    "success": {
      "created": "تم إنشاء الموظف بنجاح",
      "updated": "تم تحديث الموظف بنجاح",
      "deleted": "تم حذف الموظف بنجاح",
      "duplicated": "تم تكرار الموظف بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الموظف...",
      "deleting": "جاري حذف الموظف..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الموظف",
      "updating": "حدث خطأ أثناء تحديث الموظف",
      "deleting": "حدث خطأ أثناء حذف الموظف",
      "duplicating": "حدث خطأ أثناء تكرار الموظف"
    },
    "form": {
      "first_name": {
        "label": "الاسم الأول",
        "placeholder": "أدخل الاسم الأول",
        "required": "الاسم الأول مطلوب"
      },
      "last_name": {
        "label": "اسم العائلة",
        "placeholder": "أدخل اسم العائلة",
        "required": "اسم العائلة مطلوب"
      },
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل الاسم",
        "required": "الاسم مطلوب"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني",
        "required": "البريد الإلكتروني مطلوب",
        "invalid": "البريد الإلكتروني غير صالح",
        "duplicate": "البريد الإلكتروني مستخدم من قبل موظف آخر"
      },
      "phone": {
        "label": "رقم الهاتف",
        "placeholder": "أدخل رقم الهاتف",
        "required": "رقم الهاتف مطلوب"
      },
      "position": {
        "label": "المنصب",
        "placeholder": "أدخل المنصب",
        "required": "المنصب مطلوب"
      },
      "department": {
        "label": "القسم",
        "placeholder": "أدخل القسم",
        "required": "القسم مطلوب"
      },
      "hire_date": {
        "label": "تاريخ التعيين",
        "placeholder": "أدخل تاريخ التعيين",
        "required": "تاريخ التعيين مطلوب"
      },
      "salary": {
        "label": "الراتب",
        "placeholder": "أدخل الراتب",
        "required": "الراتب مطلوب"
      },
      "is_active": {
        "label": "الحالة النشطة"
      },
      "status": {
        "label": "الحالة",
        "active": "نشط",
        "inactive": "غير نشط",
        "on_leave": "في إجازة"
      },
      "address": {
        "label": "العنوان",
        "placeholder": "أدخل العنوان"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل ملاحظات"
      }
    }
  },
  "Contacts": {
    "title": "جهات الاتصال",
    "all": "جميع جهات الاتصال",
    "add_new": "جهة إتصال جديدة",
    "name": "الاسم",
    "email": "البريد الإلكتروني",
    "phone": "الهاتف",
    "address": "العنوان"
  },
  "Forms": {
    "description": {
      "label": "الوصف",
      "placeholder": "أدخل الوصف"
    },
    "created_at": {
      "label": "تاريخ الإنشاء",
      "placeholder": "أدخل تاريخ الإنشاء"
    },
    "updated_at": {
      "label": "تاريخ التحديث",
      "placeholder": "أدخل تاريخ التحديث"
    }
  },
  "Companies": {
    "title": "الشركات",
    "add_new": "إضافة شركة",
    "company_details": "تفاصيل الشركة",
    "create_company": "إنشاء شركة",
    "creating_company": "جاري إنشاء الشركة...",
    "edit_company": "تعديل الشركة",
    "search_companies": "بحث عن شركات",
    "back_to_list": "العودة للقائمة",
    "no_companies_found": "لم يتم العثور على شركات",
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم الشركة"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "fulan@example.com"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم هاتف الشركة"
      },
      "website": {
        "label": "الموقع الإلكتروني",
        "placeholder": "https://www.example.com"
      },
      "address": {
        "label": "عنوان الشركة",
        "placeholder": "أدخل عنوان الشركة"
      },
      "short_address": {
        "label": "العنوان الوطني المختصر",
        "placeholder": "أدخل رمز مكون من ٤ أحرف و ٤ أرقام",
        "explainer": {
          "title": "جلب العنوان",
          "description": "استخدم قاعدة بيانات البريد السعودي لجلب تفاصيل العنوان"
        }
      },
      "building_number": {
        "label": "رقم المبنى",
        "placeholder": "أدخل رقم المبنى"
      },
      "street_name": {
        "label": "اسم الشارع",
        "placeholder": "أدخل اسم الشارع"
      },
      "additional_number": {
        "label": "الرقم الإضافي",
        "placeholder": "أدخل الرقم الإضافي"
      },
      "region": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة"
      },

      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة"
      },
      "country": {
        "label": "الدولة",
        "placeholder": "أدخل الدولة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي"
      },
      "industry": {
        "label": "المجال",
        "placeholder": "أدخل مجال الشركة"
      },
      "size": {
        "label": "حجم الشركة",
        "placeholder": "أدخل حجم الشركة"
      },
      "notes": {
        "label": "ملاحظات",
        "placeholder": "أدخل الملاحظات"
      },
      "is_active": {
        "label": "حالة النشاط"
      },
      "validation": {
        "name_required": "اسم الشركة مطلوب",
        "email_required": "البريد الإلكتروني مطلوب",
        "email_invalid": "البريد الإلكتروني غير صالح"
      },
      "created_at": {
        "label": "تاريخ الإنشاء"
      },
      "updated_at": {
        "label": "تاريخ التحديث"
      }
    },
    "success": {
      "created": "تم إنشاء الشركة بنجاح",
      "updated": "تم تحديث الشركة بنجاح",
      "deleted": "تم حذف الشركة بنجاح",
      "duplicated": "تم تكرار الشركة بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الشركة...",
      "deleting": "جاري حذف الشركة..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الشركة",
      "updating": "حدث خطأ أثناء تحديث الشركة",
      "deleting": "حدث خطأ أثناء حذف الشركة",
      "duplicating": "حدث خطأ أثناء تكرار الشركة"
    }
  },
  "Navigation": {
    "main": "التنقل الرئيسي",
    "resources": "الموارد",
    "organization": "المؤسسة"
  },
  "Offices": {
    "title": "المكاتب",
    "add_new": "مكتب جديد",
    "office_details": "تفاصيل المكتب",
    "back_to_list": "العودة إلى القائمة",
    "no_offices": "لم يتم العثور على مكاتب",
    "search_offices": "بحث عن المكاتب",

    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم المكتب",
        "required": "الاسم مطلوب"
      },
      "code": {
        "label": "الكود",
        "placeholder": "أدخل الكود",
        "required": "الكود مطلوب"
      },
      "address": {
        "label": "عنوان المكتب",
        "placeholder": "أدخل عنوان المكتب",
        "required": "عنوان المكتب مطلوب"
      },
      "city": {
        "label": "المدينة",
        "placeholder": "أدخل المدينة",
        "required": "المدينة مطلوبة"
      },
      "state": {
        "label": "المنطقة",
        "placeholder": "أدخل المنطقة",
        "required": "المنطقة مطلوبة"
      },
      "zip_code": {
        "label": "الرمز البريدي",
        "placeholder": "أدخل الرمز البريدي",
        "required": "الرمز البريدي مطلوب"
      },
      "phone": {
        "label": "الهاتف",
        "placeholder": "أدخل رقم الهاتف"
      },
      "email": {
        "label": "البريد الإلكتروني",
        "placeholder": "أدخل البريد الإلكتروني",
        "invalid": "صيغة البريد الإلكتروني غير صحيحة"
      },
      "is_active": {
        "label": "حالة النشاط"
      }
    },
    "messages": {
      "creating": "جاري إنشاء المكتب...",
      "create": "إنشاء مكتب",
      "created": "تم إنشاء المكتب بنجاح",
      "updated": "تم تحديث المكتب بنجاح",
      "deleted": "تم حذف المكتب بنجاح",
      "error": "حدث خطأ أثناء معالجة طلبك"
    },
    "success": {
      "created": "تم إنشاء المكتب بنجاح",
      "updated": "تم تحديث المكتب بنجاح",
      "deleted": "تم حذف المكتب بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار المكتب...",
      "deleting": "جاري حذف المكتب..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء المكتب",
      "updating": "حدث خطأ أثناء تحديث المكتب",
      "deleting": "حدث خطأ أثناء حذف المكتب"
    }
  },
  "Departments": {
    "title": "الإدارات",
    "add_new": "إدارة جديدة",
    "search_departments": "بحث عن الإدارات",
    "department_details": "تفاصيل الإدارة",
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم القسم",
        "required": "الاسم مطلوب"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أدخل وصف القسم"
      },
      "locations": {
        "label": "المواقع",
        "placeholder": "أدخل المواقع",
        "required": "المواقع مطلوبة",
        "noLocations": "لا يوجد مواقع",
        "multipleLocations": "{count, plural, =0 {بدون موقع} =1 {موقع واحد} other {# مواقع}}"
      },
      "validation": {
        "name_required": "الاسم مطلوب",
        "description_required": "الوصف مطلوب",
        "locations_required": "يجب اختيار موقع واحد على الأقل"
      },
      "updated_at": {
        "label": "تاريخ التحديث",
        "placeholder": "أدخل تاريخ التحديث"
      },
      "created_at": {
        "label": "تاريخ الإنشاء",
        "placeholder": "أدخل تاريخ الإنشاء"
      }
    },
    "success": {
      "created": "تم إنشاء الإدارة بنجاح",
      "updated": "تم تحديث الإدارة بنجاح",
      "deleted": "تم حذف الإدارة بنجاح",
      "duplicated": "تم تكرار الإدارة بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار الإدارة...",
      "deleting": "جاري حذف الإدارة..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الإدارة",
      "updating": "حدث خطأ أثناء تحديث الإدارة",
      "deleting": "حدث خطأ أثناء حذف الإدارة",
      "duplicating": "حدث خطأ أثناء تكرار الإدارة"
    }
  },
  "Storage": {
    "title": "المخزن"
  },
  "Purchases": {
    "title": "المشتريات",
    "add_new": "مشترية جديدة",
    "search_purchases": "بحث عن المشتريات",
    "purchase_details": "تفاصيل المشترية",
    "form": {},
    "success": {
      "created": "تم إنشاء المشترية بنجاح",
      "updated": "تم تحديث المشترية بنجاح",
      "deleted": "تم حذف المشترية بنجاح",
      "duplicated": "تم تكرار المشترية بنجاح"
    },
    "loading": {
      "duplicating": "جاري تكرار المشترية...",
      "deleting": "جاري حذف المشترية..."
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء المشترية",
      "updating": "حدث خطأ أثناء تحديث المشترية",
      "deleting": "حدث خطأ أثناء حذف المشترية",
      "duplicating": "حدث خطأ أثناء تكرار المشترية"
    }
  },
  "Employee_requests": {
    "title": "طلبات الموظفين"
  },
  "Job_listings": {
    "title": "صفحات الوظائف"
  },
  "Roles": {
    "title": "الأدوار",
    "your_role": "دورك",
    "create_role": "إنشاء دور جديد",
    "add_new": "دور جديد",
    "search_roles": "بحث عن الدور",
    "role_details": "تفاصيل الدور",
    "no_permissions": "لا يوجد صلاحيات",
    "permissions": {
      "title": "الصلاحيات",
      "description": "الصلاحيات المتاحة للدور",
      "read": "القراءة",
      "create": "إنشاء",
      "update": "تحديث",
      "delete": "حذف",
      "duplicate": "تكرار",
      "view": "عرض",
      "manage": "إدارة",
      "approve": "موافقة",
      "process": "معالجة",
      "report": "تقرير",
      "configure": "تكوين",
      "manage_users": "إدارة المستخدمين",
      "invite": "دعوة",
      "export": "تصدير",
      "import": "استيراد",
      "print": "طباعة",
      "send": "إرسال",
      "receive": "استلام",
      "assign": "تعيين",
      "unassign": "إلغاء التعيين",
      "edit": "تعديل"
    },
    "form": {
      "name": {
        "label": "الاسم",
        "placeholder": "أدخل اسم الدور",
        "required": "الاسم مطلوب",
        "format": "يجب أن يحتوي اسم الدور على أحرف صغيرة وأرقام وشرطات سفلية فقط"
      },
      "description": {
        "label": "الوصف",
        "placeholder": "أدخل وصف الدور",
        "required": "الوصف مطلوب"
      },
      "permissions": {
        "label": "الصلاحيات"
      }
    },
    "predefined": {
      "system": "نظام",
      "superadmin": {
        "title": "مدير النظام",
        "description": "مدير النظام لديه جميع الصلاحيات للتحكم في النظام والمستخدمين"
      },
      "admin": {
        "title": "مدير المؤسسة",
        "description": "مدير المؤسسة لديه جميع الصلاحيات للتحكم في المؤسسة والمستخدمين"
      },
      "employee": {
        "title": "موظف",
        "description": "الموظف لديه صلاحيات الوصول إلى البيانات الخاصة به"
      },
      "human_resources": {
        "title": "مسؤول الموارد البشرية",
        "description": "موظف الموارد البشرية لديه صلاحيات الوصول إلى البيانات الخاصة بالموارد البشرية"
      },
      "accounting": {
        "title": "مسؤول المحاسبة",
        "description": "موظف المحاسبة لديه صلاحيات الوصول إلى البيانات الخاصة بالمحاسبة"
      }
    },
    "roles": {
      "superadmin": "مدير النظام",
      "admin": "مدير المؤسسة",
      "employee": "موظف",
      "hr": "موظف الموارد البشرية",
      "accounting": "موظف المحاسبة"
    },
    "messages": {
      "creating": "جاري إنشاء الدور...",
      "create": "إنشاء الدور",
      "created": "تم إنشاء الدور بنجاح",
      "updated": "تم تحديث الدور بنجاح",
      "deleted": "تم حذف الدور بنجاح",
      "error": "حدث خطأ أثناء معالجة طلبك"
    },
    "success": {
      "created": "تم إنشاء الدور بنجاح",
      "updated": "تم تحديث الدور بنجاح",
      "deleted": "تم حذف الدور بنجاح"
    },
    "error": {
      "creating": "حدث خطأ أثناء إنشاء الدور",
      "updating": "حدث خطأ أثناء تحديث الدور",
      "deleting": "حدث خطأ أثناء حذف الدور"
    }
  }
}
</file>

<file path="locales/en.json">
{
  "General": {
    "sikka": "Sikka",
    "language": "Language",
    "delete": "Delete",
    "edit": "Edit",
    "share": "Share",
    "save": "Save",
    "add": "Add",
    "unauthorized": "Unauthorized",
    "must_be_logged_in": "You must be logged in to perform this action",
    "sidebar_search": "Search for a page",
    "saving": "Saving...",
    "saved": "Saved",
    "invalid_date": "Invalid Date",
    "update": "Update",
    "updating": "Updating...",
    "updated": "Updated",
    "select": "Select",
    "search": "Search",
    "filter_options": "Filter Options",

    "filter": {
      "title": "Filter",
      "value": {
        "placeholder": "Value"
      }
    },
    "switch_to_ltr": "Switch to LTR",
    "switch_to_rtl": "Switch to RTL",
    "search_country": "Search Country",
    "no_country_found": "No country found",
    "apply_filters": "Apply Filter",
    "save_current_filter": "Save Current Filter",
    "apply_filter": "Apply Filter",

    "saved_filters": "Saved Filters",
    "field": "Field",
    "operator": "Operator",
    "add_filter_condition": "Add filter condition",
    "operators": {
      "equals": "Equals",
      "contains": "Contains",
      "startsWith": "Starts with",
      "endsWith": "Ends with",
      "isEmpty": "Is empty",
      "isNotEmpty": "Is not empty",
      "greaterThan": "Greater than",
      "lessThan": "Less than",
      "between": "Between",
      "before": "Before",
      "after": "After"
    },
    "reset": "Reset",
    "reload": "Reload",
    "more": "More",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "tanad": "Tanad",
    "dark": "Dark",
    "light": "Light",
    "soon": "Coming Soon",
    "active": "Active",
    "inactive": "Inactive",
    "successful_operation": "Successful Operation",
    "error_operation": "Error Operation",
    "clear": "Clear",
    "close": "Close",
    "no_results_found": "No results found",
    "quick_access": "Quick Access",
    "select_all": "Select All",
    "deselect_all": "Deselect All",
    "items_selected": "Items Selected",
    "delete_selected": "Delete Selected",
    "delete_all": "Delete All",
    "edit_selected": "Edit Selected",
    "view_selected": "View Selected",
    "view_all": "View All",
    "cards_view": "Cards View",
    "table_view": "Table View",
    "sort": "Sort",
    "sort_options": "Sort Options",
    "rule": "Rule",
    "add_another_rule": "Add Another Rule",
    "reset_all": "Reset All",
    "apply_sort": "Apply Sort",
    "select_field": "Select Field",
    "case_sensitive": "Case Sensitive",
    "show_empty_values_first": "Show Empty Values First",
    "ascending": "Ascending",
    "descending": "Descending",
    "primary_sort": "Primary Sort",
    "secondary_sort": "Secondary Sort",
    "tertiary_sort": "Tertiary Sort",
    "sort_priority_hint": "Higher rules take priority",
    "remove_sort_rule": "Remove Sort Rule",
    "case_sensitive_hint": "Match exact letter case when sorting",
    "empty_values_hint": "Show null and empty values at the beginning",
    "calendars": {
      "gregorian": "Gregorian",
      "hijri": "Hijri"
    },
    "languages": {
      "label": "Change Language",
      "ar": "العربية",
      "en": "English"
    },
    "copy": "Copy",
    "copied": "Copied",
    "send": "Send",
    "enable": "Enable",
    "disable": "Disable",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "favorite": "Favorite",
    "get_started": "Get Started",
    "last-updated": "Last Updated",
    "privacy": "Privacy Policy",
    "tos": "Terms of Service",
    "upgrade": "Upgrade",
    "generate_qr_code": "Generate QR Code",
    "download": "Download",
    "report": "Report Pukla",
    "country": "Country",
    "city": "City",
    "mobile": "Mobile",
    "desktop": "Desktop",
    "total": "Total",
    "no_results": "No results",
    "lock": "Lock Link",
    "layout": "Link Layout",
    "thumbnail": "Link Thumbnail",
    "highlight": "Highlight Link",
    "submit": "Submit",
    "coming_soon": "Coming soon...",
    "rows_per_page": "Rows per page",
    "select_number_of_results": "Select number of results",
    "go_to_first_page": "Go to first page",
    "go_to_previous_page": "Go to previous page",
    "go_to_next_page": "Go to next page",
    "go_to_last_page": "Go to last page",
    "of": "of",
    "hold_to_drag": "Hold to drag and reorder",
    "months": {
      "january": "January",
      "february": "February",
      "march": "March",
      "april": "April",
      "may": "May",
      "june": "June",
      "july": "July",
      "august": "August",
      "september": "September",
      "october": "October",
      "november": "November",
      "december": "December"
    },
    "changes_saved": "Changes saved",
    "error_occurred": "Error occurred",
    "error_updating_avatar": "Error while updating avatar",
    "next": "Next",
    "previous": "Previous",
    "done": "Done",
    "loading": "Loading...",
    "success": "Success",
    "create": "Create",
    "submit_report": "Submit report",
    "error": {
      "title": "Error",
      "error_detected": "Error Detected",
      "error_message": "Error Message",
      "error_code": "Error Code",
      "error_details": "Error Details",
      "error_details_question": "What were you trying to do when this error occurred?",
      "submitting": "Submitting...",
      "submit_report": "Submit report"
    },
    "report_issue": "Report Issue",
    "report_issue_title": "Report Issue",
    "report_issue_description": "Help us improve by providing additional details about what happened.",
    "report_issue_thank_you": "Thank you for your report",
    "report_issue_description_thank_you": "Our team has been notified and will investigate this issue promptly."
  },
  "Flags": {
    "timezone_soon": {
      "title": "Coming Soon",
      "description": "We are working on connecting all timestamps to other timezones"
    },
    "calendar_soon": {
      "title": "Coming Soon",
      "description": "We are working on connecting all timestamps to other calendars"
    }
  },
  "SEO": {
    "landing": {
      "title": "The backbone of your business",
      "description": "One link that includes all your other links from social media platforms, delivery apps, and even communication methods like WhatsApp or direct calls!",
      "author": "Sikka Software",
      "keywords": "pukla, one link, links, communication, app, apps, delivery app, whatsapp, direct call, social media, social media platforms, delivery apps, communication methods, whatsapp, direct call, social media, social media platforms"
    },
    "directory": {
      "title": "Discover Puklas",
      "description": "Explore and discover public Pukla pages from our community"
    },
    "my_puklas": {
      "title": "My Puklas",
      "description": "Manage all your other links"
    },
    "auth": {
      "title": "Sign in to Pukla",
      "description": "Sign in to Pukla to manage all your other links"
    },
    "billing": "Subscription",
    "slogan": "The backbone of your business",
    "index": {
      "title": "The backbone of your business",
      "description": "Pukla is a website that allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "features": {
      "title": "Pukla Features",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "pricing": {
      "title": "Subscription",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "appeal": {
      "title": "Appeal Decision",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "contact": {
      "title": "Contact Us",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "help": {
      "title": "Help",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "report": {
      "title": "Report Pukla",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "report-ip": {
      "title": "Report Pukla",
      "description": "Pukla allows you to create one link containing all your other links. You can use it in your resume, social media, or anywhere else."
    },
    "theme": {
      "title": "Pukla Theme",
      "description": "Design your Pukla to reflect your personal style or brand."
    },
    "analytics": {
      "title": "Pukla Analytics",
      "description": "Analytics for your Pukla to reflect your personal style or brand."
    },
    "editor": "Links {puklaName}",
    "settings": "Settings {puklaName}",
    "appearence": "Design {puklaName}"
  },
  "Landing": {
    "directory": "Directory",
    "hero": {
      "title": "The backbone of your business",
      "subtitle": "One link that includes all your other links from social media platforms, delivery apps, and even communication methods like WhatsApp or direct calls!",
      "primary-action": "Get Started"
    },
    "not-found": {
      "title": "Page Not Found",
      "subtitle": "Looks like you went to a non-existent link. Please check the link"
    },
    "dashboard": "Dashboard",
    "used-by": "Our Clients",
    "get-started": "Get Started",
    "home": "Home",
    "pricing": "Pricing",
    "features": "Features",
    "legal": "Legal",
    "company": "Company",
    "privacy": "Privacy Policy",
    "contact": "Contact Us",
    "about": "About Us",
    "blog": "Blog",
    "help": "Help",
    "support": "Support",
    "tos": "Terms of Service",
    "resources": "Resources",
    "cta": {
      "subtitle": "Gather all your links in one link now",
      "title": "Ready to create your personal link?",
      "action-1-text": "Let's Start"
    },
    "footer": {
      "tagline": "The backbone of your business"
    },
    "feature-design": {
      "tiny-1": "Background Color",
      "tiny-2": "Button Color",
      "tiny-3": "Button Order",
      "tiny-4": "Background Image",
      "tiny-5": "Button Corners",
      "tiny-6": "And More"
    },
    "feature-platforms": {
      "tiny-1": "Social Media",
      "tiny-2": "App Stores",
      "tiny-3": "Delivery Apps",
      "tiny-4": "Professional Apps",
      "tiny-5": "Websites",
      "tiny-6": "And More"
    },
    "feature-highlight-1": {
      "title": "Design Your Page Your Way",
      "subtitle": "Take full control of your page design in the way you like with the shapes and colors you love! Or you can use ready-made templates"
    },
    "feature-highlight-2": {
      "title": "All Your Favorite Platforms",
      "subtitle": "From social media platforms to delivery apps and even communication methods like WhatsApp or direct calls!"
    },
    "waitlist": {
      "title": "Join Our Product Launch Waitlist",
      "subtitle": "Be part of something truly extraordinary. Join thousands of others already gaining early access to our revolutionary new product.",
      "placeholder": "Enter your email",
      "button": "Get Notified"
    }
  },

  "Dashboard": {
    "title": "Dashboard",
    "meta_description": "Administrative dashboard showing key business metrics and statistics",
    "meta_title": "Dashboard | Admin Portal",
    "create_product": "Add Product",
    "total_invoices": "Total Invoices",
    "pending": "Pending",
    "total_products": "Total Products",
    "total_revenue": "Total Revenue",
    "pending_invoices": "Pending Invoices",
    "of_total": "% of Total",
    "recent_invoices": "Recent Invoices",
    "recent_invoices_list": "Coming Soon: Recent Invoices List",
    "popular_products": "Popular Products",
    "popular_products_list": "Coming Soon: Popular Products List",
    "create": "Create",
    "select_create_option": "Select an Option",
    "add_product": "Add Product",
    "add_invoice": "Add Invoice",
    "add_client": "Add Client",
    "add_employee": "Add Employee",
    "add_warehouse": "Add Warehouse"
  },
  "Features": {
    "title": "Pukla Features",
    "subtitle": "Discover a world of possibilities",
    "hero": {
      "title": "Pukla Features",
      "subtitle": "Discover a world of possibilities - from seamless link management to interactive content - all in one versatile platform."
    },
    "feature-1": {
      "title": "Customizable Design",
      "description": "Create a unique bio link page that reflects your style. Customize with themes, colors, and page layouts to match your brand or personal taste."
    },
    "feature-2": {
      "title": "Social Media Integration",
      "description": "Connect your Pukla page with all social media platforms. One link to unify your online presence and boost your reach."
    },
    "feature-3": {
      "title": "Search Engine Optimization (SEO)",
      "description": "Boost your page visibility with SEO-friendly features. Improve your search rankings and attract more organic visits."
    },
    "feature-4": {
      "title": "Security and Privacy",
      "description": "Your data security and privacy are our top priorities. Pukla uses advanced encryption and security protocols to keep your information safe."
    },
    "feature-5": {
      "title": "Support and Resources",
      "description": "Have questions or need help? Our support team and resource library are available to assist you every step of the way."
    },
    "feature-6": {
      "title": "Mobile Responsiveness",
      "description": "Your Pukla page looks great on any device. Enjoy a responsive design that ensures a seamless experience for your audience, regardless of how they access your page."
    },
    "feature-7": {
      "title": "Real-time Analytics",
      "description": "Track your success with real-time analytics. Better understand your audience through insights on page views, link clicks, and engagement metrics."
    },
    "feature-8": {
      "title": "QR Code Generation",
      "description": "Generate QR codes for your Pukla page, making it easy for offline audiences to access your online content."
    },
    "feature-9": {
      "title": "E-commerce Integration",
      "description": "Sell your products or services directly through your Pukla page with seamless e-commerce platform integration."
    }
  },
  "Pricing": {
    "contact-sales": "Contact Us",
    "not-sure": "Not sure which plan to choose? <contactSales>Contact us</contactSales>",
    "free": "Free",
    "hero": {
      "title": "Ready to Subscribe?",
      "subtitle": "Choose the right plan to take advantage of the features offered in each package"
    },
    "billing-currency": {
      "sar": "SAR",
      "usd": "USD"
    },
    "billing-cycle": {
      "monthly": "Monthly",
      "annually": "Annually"
    },
    "faq": {
      "header": {
        "title": "Frequently Asked Questions",
        "subtitle": "You have all the questions, we have the answers"
      }
    },
    "plan-1": {
      "button-text": "Start Free",
      "title": "Bronze Plan",
      "subtitle": "",
      "features": {
        "feature-1": "Your own Pukla page",
        "feature-2": "Unlimited links",
        "feature-3": "10 colors to design your page",
        "feature-4": ""
      }
    },
    "plan-2": {
      "button-text": "Start Now",
      "title": "Silver Plan",
      "subtitle": "",
      "features": {
        "feature-1": "Your own Pukla page",
        "feature-2": "Unlimited links",
        "feature-3": "Unlimited open design",
        "feature-4": "One month of visit statistics"
      }
    },
    "plan-3": {
      "button-text": "Start Now",
      "title": "Gold Plan",
      "subtitle": "",
      "features": {
        "feature-1": "Your own Pukla page",
        "feature-2": "Unlimited links",
        "feature-3": "Unlimited open design",
        "feature-4": "Use icons for links"
      }
    },
    "plan-4": {
      "button-text": "Start Now",
      "title": "Diamond Plan",
      "subtitle": ""
    }
  },
  "FAQ": {
    "faq-1": {
      "question": "What is Pukla?",
      "answer": "Pukla is a link management tool that helps you connect your audience with all your online content through one simple link."
    },
    "faq-2": {
      "question": "How can I set up my Pukla page?",
      "answer": "Sign up, add the links you want, customize your page to match your style, and you're ready to go!"
    },
    "faq-3": {
      "question": "Is Pukla free to use?",
      "answer": "Yes, Pukla offers a free plan for everyone and also a basic plan with additional features for advanced users."
    },
    "faq-4": {
      "question": "Can I customize the design of my Pukla page?",
      "answer": "Yes! Pukla offers a variety of customization options to ensure your page reflects your personal style or brand."
    },
    "faq-5": {
      "question": "Can I upgrade or cancel my plan at any time?",
      "answer": "Yes, you can upgrade, downgrade, or cancel your plan at any time to suit your needs."
    },
    "faq-contact": {
      "question": "How can I contact support?",
      "answer": "You can contact us via <email>email</email>, <twitter>Twitter</twitter>, <whatsapp>WhatsApp</whatsapp>, or <phone>phone</phone>"
    }
  },
  "Help": {
    "hero": {
      "title": "Help Page",
      "subtitle": "We will be adding educational content soon",
      "in-the-meantime": "In the meantime, feel free to contact us if you need help"
    },
    "contact": {
      "title": "Contact Us",
      "subtitle": "Have something in mind? Send us a message"
    }
  },
  "ReportPage": {
    "page-title": "Report a Violation",
    "page-subtitle": "Have you discovered an illegal or unethical issue in one of the Puklas? Please fill out the following form to report it.",
    "first-name": "First Name",
    "last-name": "Last Name",
    "email": {
      "label": "Email",
      "required": "Email is required",
      "invalid": "Invalid email format"
    },
    "pukla-link": {
      "label": "Pukla Link",
      "required": "Link is required"
    },
    "additional-comments": {
      "label": "Additional comments to help us identify the report",
      "required": "Comment is required",
      "too-short": "Comment is too short"
    },
    "copyright-owner": {
      "label": "Copyright Owner Name",
      "hint": "If you are filling out this form as the copyright owner, your name will be in this field",
      "required": "Copyright owner name is required"
    },
    "relationship-copyright-owner": {
      "label": "My relationship to the copyright owner",
      "hint": "For example: I am the copyright owner / I am an employee of the copyright owner / I am legal counsel / I am an authorized agent",
      "required": "Your relationship to the copyright owner is required"
    },
    "copyright-infringment": "Copyright Infringement",
    "trademark-infringment": "Trademark Infringement",
    "reason": {
      "label": "Reason for Report",
      "required": "This option is required"
    },
    "reporter-role": {
      "label": "Which option best describes you?",
      "required": "This option is required"
    },
    "reporter-role-options": {
      "pukla_user": "Pukla platform user",
      "non_pukla_user": "Visitor and not a Pukla platform user",
      "law_enforcement": "Government entity",
      "regulatory_body": "Regulatory body"
    },
    "reporter-reason-options": {
      "spam": "Spam",
      "gambling": "Gambling",
      "adultContent": "Adult Content",
      "misinformation": "Misinformation",
      "electoralFraud": "Electoral Fraud",
      "illegalGoodsAndServices": "Illegal Goods and Services",
      "hateSpeech": "Hate Speech and Racism",
      "privacyImpersonationHarassment": "Privacy Violation, Impersonation, Personal Harassment",
      "selfHarm": "Self-Harm",
      "fraud": "Fraud",
      "extremistContent": "Terrorist or Extremist Content",
      "shockingOrViolentContent": "Shocking or Violent Content",
      "childHarm": "Child Harm"
    },
    "report-form": {
      "submitted": {
        "title": "Your report has been submitted successfully",
        "subtitle": "Thank you for helping us maintain a safe environment for all Pukla users. We will review your report and take necessary action if required"
      }
    },
    "report-ip": {
      "title": "Report Intellectual Property Violations",
      "subtitle": "Is there a Pukla that violates your intellectual property or trademark? Please fill out the following form"
    },
    "required-field": "This field is required",
    "clear": "Clear",
    "signature": "Signature",
    "trademark-number": {
      "label": "Trademark Number",
      "required": "Trademark number is required"
    },
    "statement": {
      "good-faith": {
        "label": "I have a good faith belief that use of the copyrighted content I am reporting is not authorized by the copyright owner, their agent, or the law.",
        "required": "This declaration is required"
      },
      "trademark-good-faith": {
        "label": "I have a good faith belief that use of the trademark content I am reporting is not authorized by the trademark owner, their agent, or the law.",
        "required": "This declaration is required"
      },
      "trademark-authorized": {
        "label": "I swear under penalty of perjury that I am the trademark owner, or authorized to act on behalf of the owner of an exclusive right that is allegedly infringed.",
        "required": "This declaration is required"
      },
      "trademark-no-lie": {
        "label": "I acknowledge that knowingly submitting a false trademark infringement claim may result in liability under the Digital Millennium Copyright Act.",
        "required": "This declaration is required"
      },
      "authorized": {
        "label": "I swear under penalty of perjury that I am the copyright owner, or authorized to act on behalf of the owner of an exclusive right that is allegedly infringed.",
        "required": "This declaration is required"
      },
      "correct-info": {
        "label": "I certify that all information provided in this notice is accurate.",
        "required": "This declaration is required"
      },
      "my-info-shared": {
        "label": "I understand that my personal details, contact information, and the content of this report will be shared with the user I am reporting.",
        "required": "This declaration is required"
      },
      "no-lie": {
        "label": "I acknowledge that knowingly submitting a false copyright infringement claim may result in liability under the Digital Millennium Copyright Act.",
        "required": "This declaration is required"
      }
    },
    "trademark-owner": {
      "label": "Trademark Owner Name",
      "hint": "If you are filling out this form as the trademark owner, your name will be in this field",
      "required": "Trademark owner name is required"
    },
    "relationship-trademark-owner": {
      "label": "My relationship to the trademark owner",
      "hint": "For example: I am the trademark owner / I am an employee of the trademark owner / I am legal counsel / I am an authorized agent",
      "required": "Your relationship to the trademark owner is required"
    },
    "trademark-name": {
      "label": "Trademark Name",
      "required": "Trademark name is required"
    },
    "trademark-industry": {
      "label": "Trademark Industry",
      "required": "Trademark industry is required (e.g.: Media, E-commerce, etc)"
    },
    "trademark-country": {
      "label": "Country of Trademark Registration",
      "required": "Country name is required"
    },
    "trademark-registration": {
      "label": "Trademark Registration Number",
      "required": "Registration number is required"
    },
    "pukla-link-to-report": "Pukla link to report",
    "address-1": {
      "label": "Street Name",
      "required": "Street name is required"
    },
    "address-2": {
      "label": "Address",
      "required": "Address is required"
    },
    "city": {
      "label": "City",
      "required": "City name is required"
    },
    "state": {
      "label": "State",
      "required": "State name is required"
    },
    "zip": {
      "label": "ZIP Code",
      "required": "ZIP code is required"
    },
    "country": {
      "label": "Country",
      "required": "Country name is required"
    },
    "phone": {
      "label": "Phone Number",
      "required": "Phone number is required"
    },
    "infringment-content": {
      "label": "Content you want to report",
      "required": "This content is required"
    }
  },
  "AppealPage": {
    "page-title": "Appeal Decision",
    "page-subtitle": "Has your account been blocked and you want to appeal the decision? Please fill out the following form for the decision to be reconsidered.",
    "first-name": "First Name",
    "last-name": "Last Name",
    "email": {
      "label": "Email",
      "required": "Email is required",
      "invalid": "Invalid email format"
    },
    "pukla-link": {
      "label": "Pukla Link",
      "required": "Link is required"
    },
    "additional-comments": {
      "label": "Additional comments to help us identify the report",
      "required": "Comment is required",
      "too-short": "Comment is too short"
    },
    "report-form": {
      "submitted": {
        "title": "Appeal request submitted successfully",
        "subtitle": "Thank you for submitting the request. The appeal request will be sent to management for review"
      }
    },
    "appeal-form": {
      "submitted": {
        "title": "Appeal request submitted successfully",
        "subtitle": "Thank you for submitting the request. The appeal request will be sent to management for review"
      }
    }
  },
  "ContactMethods": {
    "whatsapp": "WhatsApp",
    "twitter": "Twitter",
    "instagram": "Instagram",
    "phone": "Phone",
    "mail": "Mail",
    "email": "Email",
    "the-whatsapp": "WhatsApp",
    "contact-page": "Contact Page"
  },
  "ContactPage": {
    "hero": {
      "title": "Contact Us",
      "subtitle": "Have something in mind? Send us a message"
    },
    "contact-form": {
      "submitted": {
        "title": "Your message has been sent successfully 👍",
        "subtitle": "We will get back to you soon!",
        "contact-methods": "In the meantime, feel free to contact us through other channels"
      },
      "name": {
        "invalid": "Name is too short",
        "label": "Your Name",
        "placeholder": "Enter your name here",
        "required": "Name is required"
      },
      "email": {
        "invalid": "Invalid email",
        "label": "Email",
        "placeholder": "example@sikka.io",
        "required": "Email is required"
      },
      "message": {
        "invalid": "Message is too short",
        "label": "Message",
        "placeholder": "Write your message here",
        "required": "Message content is required"
      }
    }
  },
  "Auth": {
    "user_already_exists": "User already exists",
    "forgot_password": "Forgot password?",
    "password_reset_email_sent": "Password reset email has been sent",
    "password_reset_successfully": "Password has been reset successfully",
    "passwords_do_not_match": "Passwords do not match",
    "email_address_invalid": "Invalid email address",
    "user_not_found": "User not found",
    "email_exists": "Email address already exists",
    "email_address_not_authorized": "Email address not authorized",
    "reset_password": "Reset Password",
    "go_back_to_sign_in": "Back to Sign In",
    "account_created_successfully": "Your account has been created successfully",
    "failed_to_sign_in_with_google": "Failed to sign in with Google",
    "sign_in": "Sign In",
    "sign_up": "Sign Up",
    "sign_out": "Sign Out",
    "email_address": "Email Address",
    "password": "Password",
    "password_placeholder": "Enter your password",
    "confirm_password": "Confirm Password",
    "already_have_an_account": "Already have an account?",
    "dont_have_an_account": "Don't have an account?",
    "sign_in_with_google": "Sign in with Google",
    "sign_in_with_github": "Sign in with GitHub",
    "create_your_account": "Create your account",
    "sign_in_to_your_account": "Sign in to your account",
    "welcome_back": "Welcome back",
    "over_email_send_rate_limit": "You have sent too many password reset requests. Please try again later.",
    "invalid_credentials": "Invalid email or password"
  },
  "MyPuklas": {
    "links": "Links",
    "items": "Items",
    "copy_link": "Copy Link",
    "edit_links": "Edit Links",
    "edit_pukla": "Edit Pukla",
    "pukla_link": "Pukla Link",
    "created": "Created Date",
    "pukla_title_required": "Title is required",
    "pukla_title_too_short": "Title is too short",
    "pukla_title_too_long": "Title is too long",
    "pukla_slug_required": "Custom link is required",
    "pukla_slug_too_short": "Custom link is too short",
    "pukla_slug_too_long": "Custom link is too long",
    "pukla_slug_invalid": "Invalid custom link",
    "title": "Puklas",
    "create_pukla": "Create Pukla",
    "pukla_title": "Pukla Title",
    "pukla_title_placeholder": "Enter your pukla title",
    "pukla_bio": "Pukla Bio",
    "pukla_bio_placeholder": "Enter your pukla bio",
    "pukla_description": "Description",
    "pukla_description_placeholder": "Enter description",
    "success_creating_pukla": "Pukla created successfully",
    "success_deleting_pukla": "Pukla deleted successfully",
    "success_fetching_puklas": "Puklas fetched successfully",
    "error_fetching_puklas": "Failed to fetch Puklas",
    "error_deleting_pukla": "Failed to delete Pukla",
    "error_creating_pukla": "Failed to create Pukla",
    "error_generating_slug": "Failed to generate custom link",
    "error_checking_slug": "Failed to check custom link",
    "this_custom_slug_is_already_taken": "This custom link is already taken",
    "create": "Create",
    "pukla_description_required": "Description is required",
    "pukla_deleted": "Pukla deleted successfully",
    "update_avatar": "Update Avatar",
    "avatar_updated": "Avatar updated successfully",
    "error_uploading_avatar": "Failed to upload avatar",
    "error_updating_avatar": "Failed to update avatar",
    "uploading": "Uploading...",
    "choose_file": "Choose File",
    "delete_pukla": "Delete Pukla",
    "delete_pukla_description": "This action cannot be undone. To confirm, please enter the Pukla name. {pukla_name}",
    "delete_pukla_project_name": "Pukla",
    "delete_pukla_label": "Enter Pukla name",
    "delete_pukla_placeholder": "Enter Pukla name",
    "no_puklas_found": "No Puklas found",
    "start_creating_a_pukla": "Start creating Puklas for your own page and more.",
    "start_creating_short_links": "Start creating short links for your marketing campaigns, referral programs and more.",
    "this_custom_slug_is_not_allowed": "This custom link is not allowed",
    "custom_slug_optional": "Custom Slug (Optional)",
    "custom_slug_placeholder": "Enter your custom slug",
    "custom_slug_can_only_contain_letters_numbers_and_hyphens": "Custom link can only contain letters, numbers and hyphens",
    "validation": {
      "title_required": "Title is required",
      "slug_required": "Custom link is required"
    },
    "pukla_created_successfully": "Pukla created successfully",
    "short_slug_pro_feature": "Short links (less than 5 characters) are a pro feature",
    "short_slug_pro_feature_description": "Upgrade to Pro to create shorter custom links (1-4 characters). Free users must use at least 5 characters.",
    "short_slug_pro_feature_description_5_characters": "Upgrade to Pro to create shorter custom links (1-4 characters). Free users must use at least 5 characters.",
    "is_discoverable": "Make this Pukla discoverable",
    "is_discoverable_description": "Allow your Pukla to be listed in the public directory"
  },
  "PuklaNotFound": {
    "oops_this_pukla_doesnt_exist_yet": "Oops! This Pukla doesn't exist yet",
    "but_dont_worry_you_can_create_your_own_pukla_right_now": "Don't worry! You can create your own Pukla right now!",
    "enter_your_long_url": "Enter a long URL you want to shorten",
    "sign_up_for_free": "Sign up for free",
    "want_more_features": "Want more features?",
    "terms_of_service": "Terms of Service",
    "privacy_policy": "Privacy Policy",
    "by_using_our_service_you_agree_to_our": "By using our service, you agree to our <terms>Terms of Service</terms> and <privacy_policy>Privacy Policy</privacy_policy>"
  },
  "Editor": {
    "remove_thumbnail": "Remove Thumbnail",
    "failed_to_update_link": "Failed to update link",
    "link_title_required": "Link title is required",
    "link_url_required": "Link URL is required",
    "link_url_invalid": "Please enter a valid URL",
    "lock_link": {
      "password_protected": {
        "title": "Password Protected",
        "description": "You can add a password to the link to prevent access until the correct password is entered",
        "invalid_password": "Invalid password",
        "password_required": "Password is required"
      },
      "requires_date_of_birth": {
        "title": "Link requires date of birth",
        "description": "You can add a date of birth requirement to prevent access until the correct date of birth is entered",
        "too_young": "You are younger than the minimum required age",
        "day_required": "Day is required",
        "month_required": "Month is required",
        "year_required": "Year is required"
      },
      "min_age": {
        "label": "Minimum Age",
        "placeholder": "Enter minimum age"
      }
    },
    "try_lazim": {
      "title": "Long URL?",
      "description": "Try Lazim platform to shorten long URLs",
      "go_to_lazim": "Let's Start"
    },
    "delivery_apps": {
      "hungerstation": "Hungerstation",
      "jahez": "Jahez",
      "keeta": "Keeta",
      "toyou": "ToYou",
      "careem": "Careem",
      "mrsool": "Mrsool"
    },
    "link_types": {
      "link": "Link",
      "header": "Header",
      "youtube": "Video",
      "delivery-apps": "Delivery Apps",
      "document": "Document",
      "form": "Form"
    },
    "thumbnail": {
      "choose_icon": "Choose Icon",
      "choose_image": "Choose Image",
      "icon_position": "Icon Position",
      "position_start": "Start of Text",
      "position_end": "End of Text"
    },
    "header-added-successfully": "Header added successfully",
    "failed-to-add-header": "Failed to add header",
    "header-updated-successfully": "Header updated successfully",
    "failed-to-update-header": "Failed to update header",
    "link-added-successfully": "Link added successfully",
    "failed-to-add-link": "Failed to add link",
    "link_updated_successfully": "Link updated successfully",
    "failed-to-update-link": "Failed to update link",
    "title": "Links",
    "link-status-updated-successfully": "Link status updated successfully",
    "link-failed-to-update-status": "Failed to update link status",
    "header-status-updated-successfully": "Header status updated successfully",
    "header-failed-to-update-status": "Failed to update header status",
    "confirm-delete-link": "Confirm delete link",
    "confirm-delete-header": "Confirm delete header",
    "single_link_title": "Link title",
    "single_link_url": "Link",
    "change-pukla": "Change Pukla",
    "select_a_pukla": "Select a Pukla",
    "success_deleting_link": "Link deleted successfully",
    "error_deleting_link": "Failed to delete link",
    "error_deleting_header": "Failed to delete header",
    "success_deleting_header": "Header deleted successfully",
    "order-updated-successfully": "Links ordered successfully",
    "select_pukla": "Select Pukla",
    "description": "Manage all your other links",
    "add-header": "New Header",
    "add-link": "New Link",
    "add-new-link": "Add Link",
    "add-new-header": "Add New Header",
    "add-button": "New Button",
    "select_pukla_to_start_editing": "Select a Pukla to start editing",
    "link": "Link",
    "embed-video": "Video",
    "document": "Document",
    "form": "Form",
    "delivery-apps": "Delivery Apps",
    "no-items": "No items found",
    "header": "Header",
    "header-title": {
      "label": "Header Title",
      "placeholder": "Enter header title"
    },
    "link-title": {
      "label": "Title",
      "placeholder": "Link title"
    },
    "link-url": {
      "label": "Link",
      "placeholder": "https://example.com"
    },
    "no_items_found": "No items found",
    "change_layout": "Change Layout",
    "change_thumbnail": "Change Thumbnail",
    "save": "Save",
    "edit_pukla": "Edit Pukla",
    "slug": "Short Link",
    "slug_already_taken": "This short link is already taken",
    "pukla_updated_successfully": "Pukla updated successfully",
    "default_layout": "Default",
    "double_height_layout": "Double Height",
    "half_width_layout": "Half Width",
    "square_layout": "Square",
    "layout_updated_successfully": "Layout updated successfully",
    "failed_to_update_layout": "Failed to update layout",
    "search_icons": "Search icons..."
  },
  "Theme": {
    "title": "Design",
    "predefined_themes": "Predefined Themes",
    "choose_theme": "Choose a theme for your Pukla",
    "update_theme": "Update Theme",
    "updating": "Updating...",
    "success_update": "Theme updated successfully",
    "error_update": "Failed to update theme",
    "custom_theme": "Custom Theme",
    "customize_colors": "Choose colors and design that suit you",
    "preview": "Preview",
    "background_color": "Background Color",
    "text_color": "Text Color",
    "button_color": "Button Color",
    "button_text_color": "Button Text Color",
    "button_hover_color": "Button Hover Color",
    "button_border_color": "Button Border Color",
    "layouts": "Layouts",
    "choose_layout": "Choose how many columns you want to display your links in",
    "column": "Column",
    "columns": "Columns",
    "appearance_settings": "Appearance Settings",
    "choose_appearance_settings": "Choose appearance settings for your Pukla",
    "border_color": "Border Color",
    "border_radius": "Border Radius",
    "square": "Square",
    "slightly_rounded": "Slightly Rounded",
    "rounded": "Rounded",
    "very_rounded": "Very Rounded",
    "pill": "Pill",
    "choose_animation": "Choose animation style",
    "slide_up": "Slide Up",
    "slide_down": "Slide Down",
    "slide_left": "Slide Left",
    "slide_right": "Slide Right",
    "fade": "Fade",
    "scale": "Scale",
    "animation_settings": "Animation Settings",
    "choose_animation_settings": "Choose animation settings for your buttons",
    "none": "None",
    "background_image": "Background Image",
    "upload_background": "Upload Background",
    "image_too_large": "Image must be less than 5MB",
    "invalid_file_type": "Invalid file type. Please upload an image",
    "background_image_uploaded": "Background image uploaded successfully",
    "error_uploading_image": "Error uploading image. Please try again",
    "overlay_color": "Overlay Color",
    "overlay_opacity": "Overlay Opacity",
    "no_pukla_selected": "No Pukla selected",
    "avatar_border_radius": "Avatar Border Radius",
    "select_highlight_animation": "Select Highlight Animation",
    "outline": "Outline",
    "border": "Border",
    "platform": "Platform",
    "url": "URL",
    "select_platform": "Select platform",
    "add_social_link": "Add Social Link",
    "save_social_links": "Save Social Links",
    "social_media_settings": "Social Media Settings",
    "choose_social_media_settings": "Add and manage your social media links",
    "update_settings": "Update Settings"
  },
  "Analytics": {
    "title": "Analytics",
    "description": "Manage all your other analytics",
    "select_pukla": "Select a Pukla",
    "select_pukla_to_view_analytics": "Select a Pukla to view analytics",
    "coming_soon": "Analytics coming soon",
    "analytics_overview": "Analytics Overview",
    "analytics_overview_description": "View general analytics for your Pukla",
    "select_date_range": "Pick a date range"
  },
  "Billing": {
    "pro_plan": "Pro Plan",
    "only_for_enterprise_users": "For Enterprise Users Only",
    "upgrade_to_enterprise_for_advanced_analytics": "Upgrade to Enterprise plan to access advanced analytics",
    "enterprise_plan": "Enterprise Plan",
    "title": "Billing",
    "description": "Manage all your payment methods",
    "upgrade_dialog": {
      "title": "Upgrade to Next Level",
      "description": "Upgrade your plan to create more Puklas",
      "unlimited_puklas": "Create unlimited Puklas",
      "custom_design_and_colors": "Custom design and colors",
      "advanced_analytics": "Advanced analytics and email support"
    },
    "upgrade_now": "Upgrade Now"
  },
  "Account": {
    "title": "Account",
    "description": "Manage all your accounts"
  },
  "Share": {
    "twitter": "Share on X (Twitter)",
    "snapchat": "Share on Snapchat",
    "linkedin": "Share on LinkedIn",
    "instagram": "Share on Instagram",
    "whatsapp": "Share on WhatsApp",
    "facebook": "Share on Facebook",
    "mail": "Share via Email",
    "more-options": "More Options",
    "shared_content": "Found a Pukla I wanted to share, check it out here https://puk.la/{puklaName}"
  },
  "Blog": {
    "title": "Blog",
    "subtitle": "Our Blog"
  },
  "Support": {
    "title": "Support",
    "subtitle": "Our Support"
  },
  "Settings": {
    "title": "Settings",
    "description": "Manage your account settings",
    "saved_successfully": "Settings saved successfully",
    "error_saving": "Failed to save settings",
    "tabs": {
      "general": "General",
      "appearance": "Appearance",
      "navigation": "Navigation",
      "preferences": "Preferences",
      "notifications": "Notifications",
      "billing": "Billing"
    },
    "general": {
      "title": "General Settings",
      "description": "Manage your account details and preferences",
      "profile": {
        "title": "Profile Information",
        "name": "Name",
        "email": "Email"
      },
      "regional": {
        "title": "Regional Settings",
        "language": "Language",
        "timezone": "Timezone"
      }
    },
    "appearance": {
      "title": "Appearance",
      "description": "Customize how the application looks",
      "theme": {
        "title": "Theme",
        "dark_mode": "Dark Mode"
      },
      "density": {
        "title": "Density",
        "interface_density": "Interface Density",
        "comfortable": "Comfortable",
        "compact": "Compact"
      }
    },
    "navigation": {
      "title": "Navigation",
      "description": "Customize your navigation menu"
    },
    "preferences": {
      "title": "Preferences",
      "description": "Set your default preferences",
      "default": {
        "title": "Default Settings",
        "currency": "Default Currency",
        "calendar": "Default Calendar"
      },
      "datetime": {
        "title": "Date & Time Format",
        "date_format": "Date Format",
        "time_format": "Time Format",
        "12h": "12-hour (AM/PM)",
        "24h": "24-hour"
      }
    },
    "notifications": {
      "title": "Notifications",
      "description": "Manage your notification preferences",
      "email": {
        "title": "Email Notifications",
        "updates": "Product updates",
        "marketing": "Marketing emails",
        "security": "Security alerts"
      },
      "in_app": {
        "title": "In-App Notifications",
        "mentions": "Mentions",
        "comments": "Comments",
        "tasks": "Task assignments"
      }
    },
    "billing": {
      "title": "Billing",
      "description": "Manage your billing information and subscription",
      "current_plan": {
        "title": "Current Plan",
        "change_plan": "Change Plan"
      },
      "payment_method": {
        "title": "Payment Method",
        "edit": "Edit"
      },
      "billing_info": {
        "title": "Billing Information",
        "name": "Name",
        "email": "Email",
        "address": "Address",
        "city": "City"
      }
    }
  },
  "Feedback": {
    "give_feedback": "Got feedback?",
    "feedback_placeholder": "Write your feedback here",
    "feedback_dialog_description": "If you have any suggestions, complaints or feedback about the service, you can send them here",
    "submit_feedback": "Submit feedback",
    "submitting": "Submitting...",
    "feedback_submitted": "Feedback submitted successfully",
    "thank_you_feedback": "Thank you for helping us improve our service",
    "error_submitting_feedback": "Failed to submit feedback. Please try again."
  },
  "Country": {
    "afghanistan": "Afghanistan",
    "albania": "Albania",
    "algeria": "Algeria",
    "andorra": "Andorra",
    "angola": "Angola",
    "antigua_and_barbuda": "Antigua and Barbuda",
    "argentina": "Argentina",
    "armenia": "Armenia",
    "australia": "Australia",
    "austria": "Austria",
    "azerbaijan": "Azerbaijan",
    "bahamas": "Bahamas",
    "bahrain": "Bahrain",
    "bangladesh": "Bangladesh",
    "barbados": "Barbados",
    "belarus": "Belarus",
    "belgium": "Belgium",
    "belize": "Belize",
    "benin": "Benin",
    "bhutan": "Bhutan",
    "bolivia": "Bolivia",
    "bosnia_and_herzegovina": "Bosnia and Herzegovina",
    "botswana": "Botswana",
    "brazil": "Brazil",
    "brunei": "Brunei",
    "bulgaria": "Bulgaria",
    "burkina_faso": "Burkina Faso",
    "burundi": "Burundi",
    "cambodia": "Cambodia",
    "cameroon": "Cameroon",
    "canada": "Canada",
    "cape_verde": "Cape Verde",
    "central_african_republic": "Central African Republic",
    "chad": "Chad",
    "chile": "Chile",
    "china": "China",
    "colombia": "Colombia",
    "comoros": "Comoros",
    "congo": "Congo",
    "costa_rica": "Costa Rica",
    "croatia": "Croatia",
    "cuba": "Cuba",
    "cyprus": "Cyprus",
    "czech_republic": "Czech Republic",
    "denmark": "Denmark",
    "djibouti": "Djibouti",
    "dominica": "Dominica",
    "dominican_republic": "Dominican Republic",
    "east_timor": "East Timor",
    "ecuador": "Ecuador",
    "egypt": "Egypt",
    "el_salvador": "El Salvador",
    "equatorial_guinea": "Equatorial Guinea",
    "eritrea": "Eritrea",
    "estonia": "Estonia",
    "ethiopia": "Ethiopia",
    "fiji": "Fiji",
    "finland": "Finland",
    "france": "France",
    "gabon": "Gabon",
    "gambia": "Gambia",
    "georgia": "Georgia",
    "germany": "Germany",
    "ghana": "Ghana",
    "greece": "Greece",
    "grenada": "Grenada",
    "guatemala": "Guatemala",
    "guinea": "Guinea",
    "guinea_bissau": "Guinea-Bissau",
    "guyana": "Guyana",
    "haiti": "Haiti",
    "honduras": "Honduras",
    "hungary": "Hungary",
    "iceland": "Iceland",
    "india": "India",
    "indonesia": "Indonesia",
    "iran": "Iran",
    "iraq": "Iraq",
    "ireland": "Ireland",
    "israel": "Israel",
    "italy": "Italy",
    "ivory_coast": "Ivory Coast",
    "jamaica": "Jamaica",
    "japan": "Japan",
    "jordan": "Jordan",
    "kazakhstan": "Kazakhstan",
    "kenya": "Kenya",
    "kiribati": "Kiribati",
    "kuwait": "Kuwait",
    "kyrgyzstan": "Kyrgyzstan",
    "laos": "Laos",
    "latvia": "Latvia",
    "lebanon": "Lebanon",
    "lesotho": "Lesotho",
    "liberia": "Liberia",
    "libya": "Libya",
    "liechtenstein": "Liechtenstein",
    "lithuania": "Lithuania",
    "luxembourg": "Luxembourg",
    "madagascar": "Madagascar",
    "malawi": "Malawi",
    "malaysia": "Malaysia",
    "maldives": "Maldives",
    "mali": "Mali",
    "malta": "Malta",
    "marshall_islands": "Marshall Islands",
    "mauritania": "Mauritania",
    "mauritius": "Mauritius",
    "mexico": "Mexico",
    "micronesia": "Micronesia",
    "moldova": "Moldova",
    "monaco": "Monaco",
    "mongolia": "Mongolia",
    "montenegro": "Montenegro",
    "morocco": "Morocco",
    "mozambique": "Mozambique",
    "myanmar": "Myanmar",
    "namibia": "Namibia",
    "nauru": "Nauru",
    "nepal": "Nepal",
    "netherlands": "Netherlands",
    "new_zealand": "New Zealand",
    "nicaragua": "Nicaragua",
    "niger": "Niger",
    "nigeria": "Nigeria",
    "north_korea": "North Korea",
    "north_macedonia": "North Macedonia",
    "norway": "Norway",
    "oman": "Oman",
    "pakistan": "Pakistan",
    "palau": "Palau",
    "palestine": "Palestine",
    "panama": "Panama",
    "papua_new_guinea": "Papua New Guinea",
    "paraguay": "Paraguay",
    "peru": "Peru",
    "philippines": "Philippines",
    "poland": "Poland",
    "portugal": "Portugal",
    "qatar": "Qatar",
    "romania": "Romania",
    "russia": "Russia",
    "rwanda": "Rwanda",
    "saint_kitts_and_nevis": "Saint Kitts and Nevis",
    "saint_lucia": "Saint Lucia",
    "saint_vincent_and_the_grenadines": "Saint Vincent and the Grenadines",
    "samoa": "Samoa",
    "san_marino": "San Marino",
    "sao_tome_and_principe": "Sao Tome and Principe",
    "saudi_arabia": "Saudi Arabia",
    "senegal": "Senegal",
    "serbia": "Serbia",
    "seychelles": "Seychelles",
    "sierra_leone": "Sierra Leone",
    "singapore": "Singapore",
    "slovakia": "Slovakia",
    "slovenia": "Slovenia",
    "solomon_islands": "Solomon Islands",
    "somalia": "Somalia",
    "south_africa": "South Africa",
    "south_korea": "South Korea",
    "south_sudan": "South Sudan",
    "spain": "Spain",
    "sri_lanka": "Sri Lanka",
    "sudan": "Sudan",
    "suriname": "Suriname",
    "sweden": "Sweden",
    "switzerland": "Switzerland",
    "syria": "Syria",
    "taiwan": "Taiwan",
    "tajikistan": "Tajikistan",
    "tanzania": "Tanzania",
    "thailand": "Thailand",
    "togo": "Togo",
    "tonga": "Tonga",
    "trinidad_and_tobago": "Trinidad and Tobago",
    "tunisia": "Tunisia",
    "turkey": "Turkey",
    "turkmenistan": "Turkmenistan",
    "tuvalu": "Tuvalu",
    "uganda": "Uganda",
    "ukraine": "Ukraine",
    "united_arab_emirates": "United Arab Emirates",
    "united_kingdom": "United Kingdom",
    "united_states": "United States",
    "uruguay": "Uruguay",
    "uzbekistan": "Uzbekistan",
    "vanuatu": "Vanuatu",
    "vatican_city": "Vatican City",
    "venezuela": "Venezuela",
    "vietnam": "Vietnam",
    "yemen": "Yemen",
    "zambia": "Zambia",
    "zimbabwe": "Zimbabwe"
  },
  "OnBoarding": {
    "title": "Welcome to Tanad",
    "description": "Create your enterprise to get started",
    "welcome_message": "Set up your enterprise and start managing your organization efficiently.",
    "form": {
      "enterprise_name": {
        "label": "Enterprise Name",
        "placeholder": "Enter your enterprise name",
        "required": "Enterprise name is required"
      },
      "description": {
        "label": "Description",
        "placeholder": "Tell us about your enterprise"
      },
      "logo": {
        "label": "Logo URL",
        "placeholder": "Enter your enterprise logo URL"
      },
      "email": {
        "label": "Enterprise Email",
        "placeholder": "Enter enterprise email",
        "invalid": "Invalid email"
      },
      "industry": {
        "label": "Industry",
        "placeholder": "Select your enterprise industry"
      },
      "size": {
        "label": "Enterprise Size",
        "placeholder": "Select your enterprise size"
      },
      "create_enterprise": "Create Enterprise"
    },
    "industry_options": {
      "technology": "Technology",
      "healthcare": "Healthcare",
      "finance": "Finance",
      "education": "Education",
      "manufacturing": "Manufacturing",
      "retail": "Retail",
      "other": "Other"
    },
    "size_options": {
      "1-10": "1-10 employees",
      "11-50": "11-50 employees",
      "51-200": "51-200 employees",
      "201-500": "201-500 employees",
      "501-1000": "501-1000 employees",
      "1000+": "1000+ employees"
    }
  },
  "OnBoardingForm": {
    "username": "Username",
    "title": "Title",
    "description": "Description",
    "avatar": "Profile Picture",
    "create": "Create Pukla",
    "link_title": "Link Title",
    "link_url": "Link URL",
    "add_more_links": "Add Another Link",
    "save_links": "Save Links",
    "upload_image": "Upload Image"
  },
  "Directory": {
    "title": "Discover Puklas",
    "subtitle": "Explore and discover public Pukla pages from our community",
    "search_placeholder": "Search by title, bio, or username...",
    "no_puklas_found": "No Puklas found",
    "no_puklas_found_description": "Try adjusting your search or check back later for new Puklas",
    "total_puklas": "{count} Puklas found",
    "loading": "Loading Puklas..."
  },
  "Products": {
    "title": "Products",
    "add_new": "Add New Product",
    "search_products": "Search Products",
    "product_details": "Product Details",
    "product_name": "Product Name",
    "product_name_required": "Product name is required",
    "enter_product_name": "Enter product name",
    "description": "Description",
    "enter_description": "Enter product description",
    "price": "Price",
    "price_required": "Price is required",
    "stock_quantity": "Stock Quantity",
    "stock_quantity_required": "Stock quantity is required",
    "sku": "SKU",
    "enter_sku": "Enter SKU (optional)",
    "no_description": "No description",
    "sku_label": "SKU: {value}",
    "stock_label": "Available: {value}",
    "create_product": "Create Product",
    "creating_product": "Creating...",
    "no_products": "No products",
    "add_first_product": "Add your first product",
    "form": {
      "name": {
        "label": "Name",
        "required": "Name is required",
        "placeholder": "Enter product name"
      },
      "description": {
        "label": "Description",
        "required": "Description is required",
        "placeholder": "Enter product description"
      },
      "price": {
        "label": "Price",
        "required": "Price is required",
        "placeholder": "Enter product price"
      },
      "sku": {
        "label": "SKU",
        "required": "SKU is required",
        "placeholder": "Enter SKU (optional)"
      },
      "stock_quantity": {
        "label": "Stock Quantity",
        "required": "Stock quantity is required",
        "placeholder": "Enter stock quantity"
      }
    },
    "error": {
      "delete_referenced": "Cannot delete products",
      "delete_referenced_description": "The following products cannot be deleted because they are used in quotes: {products}. Please remove them from quotes before deleting.",
      "delete": "Error deleting products"
    }
  },
  "Invoices": {
    "title": "Invoices",
    "add_new": "Add New Invoice",
    "invoice_details": "Invoice Details",
    "invoice_number": "Invoice #{number}",
    "enter_invoice_number": "Enter invoice number",
    "description": "Description",
    "enter_description": "Enter invoice description",
    "price": "Price",
    "price_required": "Price is required",
    "stock_quantity": "Stock Quantity",
    "stock_quantity_required": "Stock quantity is required",
    "sku": "SKU",
    "enter_sku": "Enter SKU (optional)",
    "no_description": "No description",
    "sku_label": "SKU: {value}",
    "stock_label": "In Stock: {value}",
    "create_invoice": "Create Invoice",
    "creating": "Creating...",
    "no_invoices_found": "No invoices found",
    "add_first_invoice": "Add your first invoice",
    "client": "Client",
    "select_client": "Select a client",
    "search_clients": "Search clients...",
    "no_clients": "No clients found",
    "add_new_client": "Add New Client",
    "amount": "Amount",
    "due_date": "Due Date",
    "select_status": "Select a status",
    "status": {
      "title": "Status",
      "draft": "Draft",
      "pending": "Pending",
      "paid": "Paid",
      "overdue": "Overdue",
      "cancelled": "Cancelled"
    },
    "notes": "Notes",
    "enter_notes": "Enter any additional notes",
    "client_added": "Client added successfully",
    "error": {
      "load_clients": "Failed to load clients",
      "create": "Failed to create invoice",
      "fetch": "Failed to fetch invoices",
      "title": "Error"
    },
    "success": {
      "title": "Success",
      "created": "Invoice created successfully"
    },
    "submitting": "Submitting...",
    "invoice_hash": "Invoice #{number}",
    "issue_date": "Issue Date",
    "form": {
      "invoice_number": {
        "label": "Invoice #"
      },
      "client": {
        "label": "Client"
      },
      "issue_date": {
        "label": "Issue Date"
      },
      "due_date": {
        "label": "Due Date"
      },
      "total": {
        "label": "Total"
      },
      "status": {
        "label": "Status"
      }
    },
    "actions": {
      "preview": "Preview"
    },
    "products": {
      "title": "Products",
      "add_product": "Add Product",
      "no_products": "No products added",
      "product": "Product",
      "quantity": "Quantity",
      "unit_price": "Unit Price",
      "subtotal": "Subtotal",
      "select_product": "Select product",
      "search_products": "Search products",
      "no_products_found": "No products found",
      "add_new_product": "Add new product",
      "product_description": "Product description"
    }
  },
  "Clients": {
    "title": "Clients",
    "add_new": "Add New Client",
    "add_client": "Add Client",
    "back_to_list": "Back to List",
    "client_details": "Client Details",
    "form": {
      "validation": {
        "name_required": "Name is required",
        "email_required": "Email is required",
        "email_invalid": "Invalid email address",
        "phone_required": "Phone number is required",
        "address_required": "Address is required",
        "city_required": "City is required",
        "state_required": "State is required",
        "zip_code_required": "ZIP code is required"
      },
      "name": {
        "label": "Name",
        "placeholder": "Enter client name"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter client email"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number"
      },
      "company": {
        "label": "Company",
        "placeholder": "Select or add a company",
        "search_placeholder": "Search companies...",
        "no_companies": "No companies found"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter address"
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city"
      },
      "state": {
        "label": "State",
        "placeholder": "Enter state"
      },
      "zip_code": {
        "label": "ZIP Code",
        "placeholder": "Enter ZIP code"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter any additional notes"
      }
    },
    "messages": {
      "creating": "Creating client...",
      "create": "Create Client"
    },
    "success": {
      "title": "Success",
      "created": "Client created successfully"
    },
    "error": {
      "title": "Error",
      "create": "An error occurred while creating the client",
      "not_authenticated": "You must be logged in to create a client"
    }
  },
  "Vendors": {
    "title": "Vendors",
    "add_new": "Add New Vendor",
    "search_vendors": "Search vendors",
    "no_vendors": "No vendors found",
    "error": {
      "loading": "Failed to load vendors",
      "create": "Failed to create vendor",
      "update": "Failed to update vendor",
      "delete": "Failed to delete vendor"
    },
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter vendor name",
        "validation": {
          "required": "Name is required"
        }
      },
      "company": {
        "label": "Company",
        "placeholder": "Enter company name"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "validation": {
          "required": "Email is required",
          "invalid": "Invalid email address"
        }
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number",
        "validation": {
          "required": "Phone number is required"
        }
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter street address",
        "validation": {
          "required": "Address is required"
        }
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city",
        "validation": {
          "required": "City is required"
        }
      },
      "state": {
        "label": "State",
        "placeholder": "Enter state",
        "validation": {
          "required": "State is required"
        }
      },
      "zip_code": {
        "label": "ZIP Code",
        "placeholder": "Enter ZIP code",
        "validation": {
          "required": "ZIP code is required"
        }
      },
      "products": {
        "label": "Products",
        "placeholder": "Enter products/services"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter any additional notes"
      }
    },
    "messages": {
      "creating": "Creating vendor...",
      "create": "Create Vendor",
      "success_created": "Vendor created successfully"
    }
  },
  "Sales": {
    "title": "Sales"
  },
  "Quotes": {
    "title": "Quotes",
    "create_quote": "Create Quote",
    "add_new": "Add New Quote",
    "back_to_list": "Back to Quotes",
    "quote_details": "Quote Details",
    "submitting": "Submitting...",
    "search_quotes": "Search quotes",
    "no_quotes_found": "No quotes found",
    "client": "Client",
    "select_client": "Select client",
    "search_clients": "Search clients",
    "no_clients": "No clients found",
    "add_new_client": "Add new client",
    "quote_number": "Quote Number",
    "enter_quote_number": "Enter quote number",
    "subtotal": "Subtotal",
    "tax_rate": "Tax Rate (%)",
    "issue_date": "Issue Date",
    "expiry_date": "Expiry Date",
    "select_status": "Select status",
    "select_issue_date": "Select issue date",
    "select_expiry_date": "Select expiry date",
    "tax": "Tax",
    "status": {
      "title": "Status",
      "draft": "Draft",
      "sent": "Sent",
      "accepted": "Accepted",
      "rejected": "Rejected",
      "expired": "Expired"
    },
    "notes": "Notes",
    "enter_notes": "Enter notes",
    "form": {
      "quote_number": {
        "label": "Quote Number",
        "placeholder": "Enter quote number"
      },
      "client": {
        "label": "Client",
        "placeholder": "Select client"
      },
      "expiry_date": {
        "label": "Expiry Date",
        "placeholder": "Select expiry date"
      },
      "status": {
        "title": "Status",
        "label": "Status",
        "placeholder": "Select status",
        "draft": "Draft",
        "sent": "Sent",
        "accepted": "Accepted",
        "rejected": "Rejected",
        "expired": "Expired"
      },
      "issue_date": {
        "label": "Issue Date",
        "placeholder": "Select issue date"
      }
    },
    "products": {
      "title": "Products",
      "product": "Product",
      "select_product": "Select product",
      "search_products": "Search products",
      "no_products_found": "No products found",
      "add_new_product": "Add new product",
      "add_product": "Add product",
      "quantity": "Quantity",
      "unit_price": "Unit Price",
      "subtotal": "Subtotal",
      "product_description": "Product Description",
      "no_products": "No products added",
      "description": "Description"
    },
    "description": "Description",
    "success": {
      "title": "Success",
      "created": "Quote created successfully"
    },
    "error": {
      "title": "Error",
      "create": "Failed to create quote",
      "load_clients": "Failed to load clients"
    },
    "tax_amount": "Tax Amount",
    "total": "Total",
    "validation": {
      "client_required": "Client is required",
      "quote_number_required": "Quote number is required",
      "issue_date_required": "Issue date is required",
      "expiry_date_required": "Expiry date is required",
      "status_required": "Status is required",
      "subtotal_positive": "Subtotal must be a positive number",
      "tax_rate_positive": "Tax rate must be a positive number",
      "items_required": "At least one product must be added",
      "item_description_required": "Description is required",
      "item_quantity_required": "Quantity is required",
      "item_quantity_positive": "Quantity must be a positive number",
      "item_price_required": "Price is required",
      "item_price_positive": "Price must be a positive number",
      "item_description_or_product": "Either a product or description must be selected for each item"
    }
  },
  "Salaries": {
    "title": "Salaries",
    "create_salary": "Create Salary",
    "add_new": "Add New Salary",
    "edit_salary": "Edit Salary",
    "delete_salary": "Delete Salary",
    "search_salaries": "Search salaries...",
    "confirm_delete": "Are you sure you want to delete this salary?",
    "no_salaries_found": "No salaries found",
    "salary_details": "Salary Details",
    "success": {
      "title": "Success",
      "deleted": "Salary deleted successfully"
    },
    "error": {
      "title": "Error",
      "delete": "Failed to delete salary",
      "error_not_authenticated": "You must be logged in to create a salary"
    },
    "messages": {
      "success_deleted": "Salary deleted successfully",
      "error_delete": "Failed to delete salary",
      "success_created": "Salary created successfully"
    },
    "table": {
      "employee_name": "Employee Name",
      "gross_amount": "Gross Amount",
      "net_amount": "Net Amount",
      "payment_date": "Payment Date",
      "pay_period_start": "Pay Period Start",
      "pay_period_end": "Pay Period End",
      "actions": "Actions"
    },
    "form": {
      "employee_name": {
        "label": "Employee Name",
        "placeholder": "Enter employee name",
        "required": "Employee name is required"
      },
      "gross_amount": {
        "label": "Gross Amount",
        "placeholder": "Enter gross amount",
        "required": "Gross amount is required"
      },
      "net_amount": {
        "label": "Net Amount",
        "placeholder": "Enter net amount",
        "required": "Net amount is required"
      },
      "payment_date": {
        "label": "Payment Date",
        "required": "Payment date is required",
        "placeholder": "Select payment date"
      },
      "pay_period_start": {
        "label": "Pay Period Start",
        "required": "Pay period start date is required",
        "placeholder": "Select pay period start date"
      },
      "pay_period_end": {
        "label": "Pay Period End",
        "required": "Pay period end date is required",
        "placeholder": "Select pay period end date"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter any additional notes"
      }
    }
  },
  "HumanResources": {
    "title": "Human Resources"
  },
  "Administration": {
    "title": "Administration"
  },
  "Accounting": {
    "title": "Accounting"
  },
  "Jobs": {
    "title": "Jobs",
    "create_job": "Create Job",
    "add_job": "Add Job",
    "edit_job": "Edit Job",
    "job_details": "Job Details",
    "add_new": "Add New Job",
    "add_new_listing": "Add New Job Listing",
    "listing_details": "Job Listing Details",
    "back_to_list": "Back to List",
    "no_jobs_found": "No jobs found",
    "failed_to_fetch_jobs": "Failed to fetch jobs",
    "search_jobs": "Search jobs...",
    "messages": {
      "creating_job": "Creating job...",
      "create_job": "Create Job",
      "created": "Job created successfully",
      "updated": "Job updated successfully",
      "deleted": "Job deleted successfully",
      "error": "An error occurred while processing your request",
      "job_created": "Job created successfully"
    },
    "form": {
      "title": {
        "label": "Job Title",
        "placeholder": "Enter job title",
        "required": "Job title is required"
      },
      "description": {
        "label": "Description",
        "placeholder": "Enter job description"
      },
      "requirements": {
        "label": "Requirements",
        "placeholder": "Enter job requirements"
      },
      "location": {
        "label": "Location",
        "placeholder": "Enter job location"
      },
      "department": {
        "label": "Department",
        "placeholder": "Enter department"
      },
      "type": {
        "label": "Job Type",
        "placeholder": "Select job type",
        "full_time": "Full-time",
        "part_time": "Part-time",
        "contract": "Contract",
        "internship": "Internship",
        "temporary": "Temporary"
      },
      "salary": {
        "label": "Salary",
        "placeholder": "Enter salary"
      },
      "position": {
        "label": "Position",
        "placeholder": "Enter position"
      },
      "status": {
        "label": "Status",
        "placeholder": "Select status"
      },
      "start_date": {
        "label": "Start Date"
      },
      "end_date": {
        "label": "End Date"
      },
      "is_active": {
        "label": "Is this job active?"
      },
      "created_at": {
        "label": "Created Date"
      },
      "updated_at": {
        "label": "Updated Date"
      }
    }
  },
  "JobListings": {
    "title": "Job Listings",
    "create_listing": "Create Listing",
    "add_new_listing": "Add New Listing",
    "search_listings": "Search listings...",
    "listing_details": "Listing Details",
    "messages": {
      "auth_required": "You must be logged in to create a job listing",
      "listing_created": "Job listing created successfully",
      "error": "An error occurred while creating the job listing",
      "items_deleted": "Job listings deleted successfully",
      "delete_error": "An error occurred while deleting job listings"
    },
    "status": {
      "title": "Status",
      "active": "Active",
      "inactive": "Inactive"
    },
    "form": {
      "title": {
        "label": "Listing Title",
        "placeholder": "Enter listing title"
      },
      "description": {
        "label": "Description",
        "placeholder": "Enter listing description"
      },
      "jobs": {
        "label": "Jobs",
        "placeholder": "Select jobs"
      },
      "is_active": {
        "label": "Is this listing active?",
        "placeholder": "Enter whether the listing is active or not"
      },
      "status": {
        "label": "Status",
        "placeholder": "Select status"
      },
      "created_at": {
        "label": "Created Date"
      }
    }
  },
  "Expenses": {
    "title": "Expenses",
    "description": "Manage and track expenses",
    "add_new": "Add New Expense",
    "search_expenses": "Search expenses",
    "no_expenses_found": "No expenses found",
    "confirm_delete_title": "Confirm Delete Expenses",
    "confirm_delete": "Are you sure you want to delete {count} expense(s)?",
    "success": {
      "created": "Expense created successfully"
    },
    "error": {
      "creating": "Error creating expense",
      "bulk_delete": "Error deleting expenses"
    },
    "form": {
      "expense_number": {
        "label": "Expense Number",
        "placeholder": "Enter expense number",
        "required": "Expense number is required"
      },
      "issue_date": {
        "label": "Issue Date",
        "placeholder": "Select issue date",
        "required": "Issue date is required"
      },
      "due_date": {
        "label": "Due Date",
        "placeholder": "Select due date",
        "required": "Due date is required"
      },
      "amount": {
        "label": "Amount",
        "placeholder": "Enter amount",
        "required": "Amount is required"
      },
      "category": {
        "label": "Category",
        "placeholder": "Select category",
        "required": "Category is required"
      },
      "client": {
        "label": "Client",
        "placeholder": "Select client"
      },
      "status": {
        "label": "Status",
        "placeholder": "Select status",
        "pending": "Pending",
        "paid": "Paid",
        "overdue": "Overdue"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter additional notes"
      }
    }
  },
  "Leave": {
    "title": "Leave"
  },
  "Holidays": {
    "title": "Holidays"
  },
  "Reports": {
    "title": "Reports"
  },
  "Requests": {
    "title": "Requests"
  },
  "EmployeeRequests": {
    "title": "Employee Requests",
    "description": "Employee Requests",
    "add_new": "Add New Employee Request",
    "no_employee_requests_found": "No employee requests found",
    "search_requests": "Search employee requests...",
    "form": {
      "validation": {
        "title_required": "Title is required",
        "type_required": "Type is required",
        "employee_required": "Employee is required",
        "description_required": "Description is required",
        "start_date_required": "Start date is required",
        "end_date_required": "End date is required",
        "amount_required": "Amount is required",
        "amount_positive": "Amount must be a positive number"
      },
      "title": {
        "label": "Title",
        "placeholder": "Enter request title",
        "required": "Title is required"
      },
      "type": {
        "label": "Type",
        "placeholder": "Select request type",
        "leave": "Leave",
        "expense": "Expense",
        "document": "Document",
        "other": "Other"
      },
      "employee": {
        "label": "Employee",
        "placeholder": "Select employee",
        "required": "Employee is required",
        "no_employees": "No employees found"
      },
      "description": {
        "label": "Description",
        "placeholder": "Enter request description",
        "required": "Description is required"
      },
      "date_range": {
        "label": "Date Range",
        "start": "Start Date",
        "end": "End Date"
      },
      "amount": {
        "label": "Amount",
        "placeholder": "Enter amount",
        "required": "Amount is required"
      },
      "attachments": {
        "label": "Attachments",
        "add": "Add Attachment",
        "remove": "Remove"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter any additional notes",
        "required": "Notes are required"
      },
      "status": {
        "label": "Status",
        "pending": "Pending",
        "approved": "Approved",
        "rejected": "Rejected"
      }
    }
  },
  "Applicants": {
    "title": "Applicants",
    "add_new": "Add New Applicant",
    "applicant_details": "Applicant Details",
    "back_to_list": "Back to List",
    "no_applicants": "No applicants found",
    "form": {
      "name": {
        "label": "Full Name",
        "placeholder": "Enter full name",
        "required": "Full name is required"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "required": "Email is required",
        "invalid": "Invalid email address"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number",
        "required": "Phone number is required"
      },
      "position": {
        "label": "Position Applied For",
        "placeholder": "Enter position",
        "required": "Position is required"
      },
      "resume": {
        "label": "Resume/CV",
        "placeholder": "Upload resume/CV",
        "required": "Resume/CV is required"
      },
      "cover_letter": {
        "label": "Cover Letter",
        "placeholder": "Enter cover letter"
      },
      "experience": {
        "label": "Years of Experience",
        "placeholder": "Enter years of experience"
      },
      "education": {
        "label": "Education",
        "placeholder": "Enter education details"
      },
      "skills": {
        "label": "Skills",
        "placeholder": "Enter skills"
      },
      "availability": {
        "label": "Availability",
        "placeholder": "Enter availability"
      },
      "references": {
        "label": "References",
        "placeholder": "Enter references"
      },
      "notes": {
        "label": "Additional Notes",
        "placeholder": "Enter additional notes"
      }
    },
    "status": {
      "new": "New",
      "reviewing": "Reviewing",
      "interviewed": "Interviewed",
      "offered": "Offered",
      "hired": "Hired",
      "rejected": "Rejected"
    },
    "actions": {
      "view": "View Details",
      "edit": "Edit",
      "delete": "Delete",
      "change_status": "Change Status"
    },
    "messages": {
      "creating": "Creating applicant...",
      "create": "Create Applicant",
      "created": "Applicant created successfully",
      "updated": "Applicant updated successfully",
      "deleted": "Applicant deleted successfully",
      "error": "An error occurred while processing your request"
    }
  },
  "Attendance": {
    "title": "Attendance",
    "today": "Today's Attendance",
    "check_in": "Check In",
    "check_out": "Check Out",
    "total_hours": "Total Hours",
    "history": "Attendance History",
    "date": "Date",
    "employee": "Employee",
    "status": {
      "present": "Present",
      "absent": "Absent",
      "late": "Late",
      "half_day": "Half Day",
      "on_leave": "On Leave"
    },
    "report": {
      "title": "Attendance Report",
      "generate": "Generate Report",
      "daily": "Daily Report",
      "weekly": "Weekly Report",
      "monthly": "Monthly Report"
    },
    "filter": {
      "all": "All Employees",
      "department": "Filter by Department",
      "date_range": "Date Range"
    },
    "no_records": "No attendance records found",
    "messages": {
      "check_in_success": "Checked in successfully",
      "check_out_success": "Checked out successfully",
      "already_checked_in": "Already checked in today",
      "not_checked_in": "Not checked in yet",
      "error": "An error occurred while processing your request"
    }
  },
  "Users": {
    "title": "Users",
    "add_new": "Add New User",
    "user_details": "User Details",
    "login_details": "Login Details",
    "personal_info": "Personal Information",
    "permissions": "Permissions & Roles",
    "no_users": "No users found",
    "active_users": "Active Users",
    "inactive_users": "Inactive Users",
    "search_placeholder": "Search users...",
    "add_dialog": {
      "title": "Add New User",
      "description": "Fill in the details to create a new user. They will belong to the same enterprise."
    },
    "table": {
      "head": {
        "email": "Email",
        "role": "Role",
        "permissions": "Permissions",
        "created_at": "Created At",
        "actions": "Actions"
      },
      "no_users": "No users found.",
      "permissions_popover": "Permissions",
      "created_at_never": "Never"
    },
    "actions": {
      "open_menu": "Open menu",
      "edit": "Edit User",
      "delete": "Delete User",
      "activate": "Activate User",
      "deactivate": "Deactivate User",
      "reset_password": "Reset Password"
    },
    "edit_dialog": {
      "title": "Edit User",
      "description": "Make changes to the user's profile here.",
      "email_label": "Email",
      "role_label": "Role",
      "select_role_placeholder": "Select role",
      "save_button": "Save changes"
    },
    "delete_dialog": {
      "title": "Delete User",
      "description": "Are you sure you want to delete this user? This action cannot be undone.",
      "user_prefix": "User: ",
      "no_email": "No email",
      "delete_button": "Delete"
    },
    "toast": {
      "success": {
        "updated": "User updated",
        "updated_description": "User information has been updated successfully.",
        "deleted": "User deleted",
        "deleted_description": "User has been deleted successfully."
      },
      "error": {
        "update_failed": "Failed to update user information.",
        "update_failed_description": "Failed to update user information.",
        "delete_failed": "Failed to delete user.",
        "delete_failed_description": "Failed to delete user."
      }
    },
    "form": {
      "name": {
        "label": "Full Name",
        "placeholder": "Enter full name",
        "required": "Full name is required"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "required": "Email is required"
      },
      "password": {
        "label": "Password",
        "placeholder": "Enter password",
        "required": "Password is required"
      },
      "role": {
        "label": "Role",
        "placeholder": "Select a role",
        "required": "Role is required"
      },
      "status": {
        "label": "Status",
        "placeholder": "Select status"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number"
      },
      "department": {
        "label": "Department",
        "placeholder": "Select department"
      },
      "avatar": {
        "label": "Profile Picture",
        "upload": "Upload Image",
        "remove": "Remove Image"
      }
    }
  },
  "Warehouses": {
    "title": "Warehouses",
    "add_new": "Add New Warehouse",
    "warehouse_details": "Warehouse Details",
    "create_warehouse": "Create Warehouse",
    "no_warehouses_found": "No warehouses found",
    "search_warehouses": "Search warehouses...",
    "capacity": "Capacity",
    "manager": "Manager",
    "edit": "Edit Warehouse",
    "status": {
      "active": "Active",
      "inactive": "Inactive"
    },
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter warehouse name",
        "required": "Name is required"
      },
      "code": {
        "label": "Code",
        "placeholder": "Enter warehouse code",
        "required": "Code is required"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter address",
        "required": "Address is required"
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city",
        "required": "City is required"
      },
      "state": {
        "label": "State",
        "placeholder": "Enter state",
        "required": "State is required"
      },
      "zip_code": {
        "label": "ZIP Code",
        "placeholder": "Enter ZIP code",
        "required": "ZIP code is required"
      },
      "capacity": {
        "label": "Capacity",
        "placeholder": "Enter warehouse capacity"
      },
      "is_active": {
        "label": "Active"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter notes"
      },
      "create_button": "Create Warehouse",
      "update_button": "Update Warehouse"
    },
    "messages": {
      "error_fetch": "Failed to fetch warehouse",
      "error_save": "Failed to save warehouse",
      "success_updated": "Warehouse updated successfully",
      "success_created": "Warehouse created successfully"
    },
    "errorLoadingWarehouses": "Error loading warehouses"
  },
  "Branches": {
    "title": "Branches",
    "add_new": "Add New Branch",
    "branch_details": "Branch Details",
    "create_branch": "Create Branch",
    "no_branches_found": "No branches found",
    "search_branches": "Search branches...",
    "manager": "Manager",
    "edit": "Edit Branch",
    "status": {
      "active": "Active",
      "inactive": "Inactive"
    },
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter branch name",
        "required": "Name is required"
      },
      "code": {
        "label": "Code",
        "placeholder": "Enter branch code",
        "required": "Code is required"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter address",
        "required": "Address is required"
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city",
        "required": "City is required"
      },
      "state": {
        "label": "State",
        "placeholder": "Enter state",
        "required": "State is required"
      },
      "zip_code": {
        "label": "ZIP Code",
        "placeholder": "Enter ZIP code",
        "required": "ZIP code is required"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "invalid": "Invalid email format"
      },
      "manager": {
        "label": "Manager",
        "placeholder": "Enter manager name"
      },
      "is_active": {
        "label": "Active Status"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter notes"
      },
      "update_button": "Update Branch",
      "create_button": "Create Branch"
    },
    "messages": {
      "error_fetch": "Failed to fetch branch",
      "error_save": "Failed to save branch",
      "success_updated": "Branch updated successfully",
      "success_created": "Branch created successfully"
    }
  },
  "Locations": {
    "title": "Locations",
    "types": {
      "office": "Office",
      "branch": "Branch",
      "warehouse": "Warehouse"
    }
  },
  "Recruitment": {
    "title": "Recruitment"
  },
  "Employees": {
    "title": "Employees",
    "add_new": "Add New Employee",
    "add_employee": "Add Employee",
    "employee_details": "Employee Details",
    "edit": "Edit Employee",
    "back_to_list": "Back to List",
    "allEmployees": "All Employees",
    "search_employees": "Search employees...",
    "no_employees": "No employees found",
    "add_first_employee": "Add your first employee",
    "email_label": "Email: {value}",
    "phone_label": "Phone: {value}",
    "department_label": "Department: {value}",
    "form": {
      "first_name": {
        "label": "First Name",
        "placeholder": "Enter first name",
        "required": "First name is required"
      },
      "last_name": {
        "label": "Last Name",
        "placeholder": "Enter last name",
        "required": "Last name is required"
      },
      "name": {
        "label": "Full Name",
        "placeholder": "Enter full name",
        "required": "Full name is required"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "required": "Email is required",
        "invalid": "Invalid email address",
        "duplicate": "Email address is already in use"
      },
      "phone": {
        "label": "Phone Number",
        "placeholder": "Enter phone number",
        "required": "Phone number is required"
      },
      "position": {
        "label": "Position",
        "placeholder": "Enter position",
        "required": "Position is required"
      },
      "department": {
        "label": "Department",
        "placeholder": "Enter department",
        "required": "Department is required"
      },
      "hire_date": {
        "label": "Hire Date",
        "placeholder": "Enter hire date",
        "required": "Hire date is required"
      },
      "salary": {
        "label": "Salary",
        "placeholder": "Enter salary",
        "required": "Salary is required"
      },
      "is_active": {
        "label": "Active Status"
      },
      "status": {
        "label": "Status",
        "active": "Active",
        "inactive": "Inactive",
        "on_leave": "On Leave"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter address"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter notes"
      }
    },
    "messages": {
      "creating": "Creating employee...",
      "create": "Create Employee",
      "create_employee": "Create Employee",
      "created": "Employee created successfully",
      "updated": "Employee updated successfully",
      "deleted": "Employee deleted successfully",
      "error": "An error occurred while processing your request"
    },
    "success": {
      "created": "Employee created successfully"
    },
    "error": {
      "create": "Failed to create employee"
    }
  },
  "Contacts": {
    "title": "Contacts",
    "all": "All Contacts",
    "add_new": "Add New Contact",
    "name": "Name",
    "email": "Email",
    "phone": "Phone",
    "address": "Address"
  },
  "Companies": {
    "title": "Companies",
    "add_new": "Add Company",
    "company_details": "Company Details",
    "create_company": "Create Company",
    "creating_company": "Creating company...",
    "edit_company": "Edit Company",
    "search_companies": "Search companies",
    "back_to_list": "Back to List",
    "no_companies_found": "No companies found",
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter company name"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter company email"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter company phone number"
      },
      "website": {
        "label": "Website",
        "placeholder": "Enter company website"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter company address"
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city"
      },
      "state": {
        "label": "State/Region",
        "placeholder": "Enter state/region"
      },
      "zip_code": {
        "label": "Zip Code",
        "placeholder": "Enter zip code"
      },
      "industry": {
        "label": "Industry",
        "placeholder": "Enter company industry"
      },
      "size": {
        "label": "Company Size",
        "placeholder": "Enter company size"
      },
      "notes": {
        "label": "Notes",
        "placeholder": "Enter notes"
      },
      "is_active": {
        "label": "Active Status"
      },
      "validation": {
        "name_required": "Company name is required",
        "email_required": "Email is required",
        "email_invalid": "Email is invalid"
      },
      "created_at": {
        "label": "Created At"
      },
      "updated_at": {
        "label": "Updated At"
      }
    },
    "success": {
      "created": "Company created successfully",
      "updated": "Company updated successfully",
      "deleted": "Company deleted successfully",
      "duplicated": "Company duplicated successfully"
    },
    "loading": {
      "duplicating": "Duplicating company...",
      "deleting": "Deleting company..."
    },
    "error": {
      "creating": "An error occurred while creating the company",
      "updating": "An error occurred while updating the company",
      "deleting": "An error occurred while deleting the company",
      "duplicating": "An error occurred while duplicating the company"
    }
  },
  "Navigation": {
    "main": "Main Navigation",
    "resources": "Resources",
    "organization": "Organization"
  },
  "Offices": {
    "title": "Offices",
    "add_new": "Add New Office",
    "office_details": "Office Details",
    "back_to_list": "Back to List",
    "no_offices": "No offices found",
    "table": {
      "name": "Name",
      "address": "Address",
      "phone": "Phone",
      "email": "Email",
      "status": "Status"
    },
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter office name",
        "required": "Name is required"
      },
      "address": {
        "label": "Address",
        "placeholder": "Enter address",
        "required": "Address is required"
      },
      "city": {
        "label": "City",
        "placeholder": "Enter city",
        "required": "City is required"
      },
      "state": {
        "label": "State",
        "placeholder": "Enter state",
        "required": "State is required"
      },
      "zip_code": {
        "label": "Zip Code",
        "placeholder": "Enter zip code",
        "required": "Zip code is required"
      },
      "phone": {
        "label": "Phone",
        "placeholder": "Enter phone number"
      },
      "email": {
        "label": "Email",
        "placeholder": "Enter email address",
        "invalid": "Invalid email format"
      },
      "is_active": {
        "label": "Status"
      }
    },
    "messages": {
      "creating": "Creating office...",
      "create": "Create Office",
      "created": "Office created successfully",
      "updated": "Office updated successfully",
      "deleted": "Office deleted successfully",
      "error": "An error occurred while processing your request"
    },
    "success": {
      "created": "Office created successfully",
      "updated": "Office updated successfully",
      "deleted": "Office deleted successfully"
    },
    "error": {
      "creating": "An error occurred while creating the office",
      "updating": "An error occurred while updating the office",
      "deleting": "An error occurred while deleting the office"
    }
  },
  "Departments": {
    "title": "Departments",
    "add_new": "Add New Department",
    "search_departments": "Search departments",
    "department_details": "Department Details",
    "form": {
      "name": {
        "label": "Name",
        "placeholder": "Enter name",
        "required": "Name is required"
      },
      "description": {
        "label": "Description",
        "placeholder": "Enter description"
      },
      "validation": {
        "name_required": "Name is required",
        "locations_required": "At least one location is required"
      },
      "updated_at": {
        "label": "Updated At",
        "placeholder": "Enter updated at"
      },
      "created_at": {
        "label": "Created At",
        "placeholder": "Enter created at"
      }
    },
    "table": {
      "name": "Name",
      "description": "Description",
      "locations": "Locations",
      "created_at": "Created At",
      "updated_at": "Updated At"
    },
    "success": {
      "created": "Department created successfully",
      "updated": "Department updated successfully"
    },
    "error": {
      "creating": "An error occurred while creating the department",
      "updating": "An error occurred while updating the department"
    }
  }
}
</file>

<file path="public/assets/pukla-logo-symbol-purple.svg">
<?xml version="1.0" encoding="UTF-8"?><svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.58 512"><path d="M306.38,476.31c0-19.71-15.98-35.69-35.69-35.69H94.44c-12.72,0-23.07-10.34-23.07-23.06V121.85s186.58,186.58,186.58,186.58h-90.08c-19.71,0-35.69,15.98-35.69,35.69,0,19.71,15.98,35.69,35.69,35.69h176.24c2.35,0,4.69-.24,7-.7,1.03-.21,1.98-.59,2.98-.88,1.24-.36,2.48-.65,3.69-1.14,1.15-.48,2.2-1.14,3.29-1.73.95-.52,1.94-.94,2.86-1.55,1.82-1.22,3.5-2.61,5.06-4.13.12-.12.26-.19.38-.31.15-.15.24-.33.39-.48,1.48-1.53,2.85-3.17,4.04-4.94.68-1.02,1.17-2.13,1.74-3.2.52-.98,1.12-1.9,1.54-2.93.57-1.36.91-2.77,1.3-4.18.23-.83.56-1.62.73-2.48.47-2.34.71-4.72.71-7.1v-176.18c0-19.71-15.98-35.69-35.69-35.69-19.71,0-35.69,15.98-35.69,35.69v90.09S121.86,71.38,121.86,71.38h295.7c12.71,0,23.06,10.34,23.06,23.06v176.25c0,19.71,15.98,35.69,35.69,35.69,19.71,0,35.69-15.98,35.69-35.69V94.44C512,42.36,469.64,0,417.56,0H94.44C42.36,0,0,42.36,0,94.44v323.12c0,52.07,42.36,94.44,94.44,94.44h176.25c19.71,0,35.69-15.98,35.69-35.69Z" style="fill:#240045;"/><path d="M420.13,447.98c0,25.53,20.7,46.22,46.22,46.22,25.53,0,46.22-20.69,46.22-46.22,0-25.53-20.69-46.22-46.22-46.22-25.53,0-46.22,20.69-46.22,46.22Z" style="fill:#240045;"/></svg>
</file>

<file path="public/icons/browserconfig.xml">
<?xml version="1.0" encoding="utf-8"?>
<browserconfig><msapplication><tile><square70x70logo src="/ms-icon-70x70.png"/><square150x150logo src="/ms-icon-150x150.png"/><square310x310logo src="/ms-icon-310x310.png"/><TileColor>#ffffff</TileColor></tile></msapplication></browserconfig>
</file>

<file path="public/icons/manifest.json">
{
 "name": "App",
 "icons": [
  {
   "src": "\/android-icon-36x36.png",
   "sizes": "36x36",
   "type": "image\/png",
   "density": "0.75"
  },
  {
   "src": "\/android-icon-48x48.png",
   "sizes": "48x48",
   "type": "image\/png",
   "density": "1.0"
  },
  {
   "src": "\/android-icon-72x72.png",
   "sizes": "72x72",
   "type": "image\/png",
   "density": "1.5"
  },
  {
   "src": "\/android-icon-96x96.png",
   "sizes": "96x96",
   "type": "image\/png",
   "density": "2.0"
  },
  {
   "src": "\/android-icon-144x144.png",
   "sizes": "144x144",
   "type": "image\/png",
   "density": "3.0"
  },
  {
   "src": "\/android-icon-192x192.png",
   "sizes": "192x192",
   "type": "image\/png",
   "density": "4.0"
  }
 ]
}
</file>

<file path="scripts/migrations/001_fix_clients_company_fk.sql">
-- Drop generated columns first
ALTER TABLE "quotes" DROP COLUMN IF EXISTS "tax_amount";
ALTER TABLE "quotes" DROP COLUMN IF EXISTS "total";
ALTER TABLE "invoices" DROP COLUMN IF EXISTS "tax_amount";
ALTER TABLE "invoices" DROP COLUMN IF EXISTS "total";
-- Drop foreign key constraint
ALTER TABLE "clients" DROP CONSTRAINT IF EXISTS "clients_company_fkey";
-- Update company column to UUID
UPDATE "clients" SET company = NULL WHERE company IS NOT NULL;
ALTER TABLE "clients" ALTER COLUMN company TYPE uuid USING NULL;
-- Re-add foreign key constraint
ALTER TABLE "clients" ADD CONSTRAINT "clients_company_fkey" 
    FOREIGN KEY (company) REFERENCES companies(id);
-- Re-add generated columns
ALTER TABLE "quotes" ADD COLUMN "tax_amount" numeric GENERATED ALWAYS AS (
    CASE 
        WHEN tax_rate IS NULL THEN 0
        ELSE ROUND((subtotal * tax_rate), 2)
    END
) STORED;
ALTER TABLE "quotes" ADD COLUMN "total" numeric GENERATED ALWAYS AS (
    CASE 
        WHEN tax_rate IS NULL THEN subtotal
        ELSE ROUND((subtotal * (1 + tax_rate)), 2)
    END
) STORED;
ALTER TABLE "invoices" ADD COLUMN "tax_amount" numeric GENERATED ALWAYS AS (
    CASE 
        WHEN tax_rate IS NULL THEN 0
        ELSE ROUND((subtotal * tax_rate), 2)
    END
) STORED;
ALTER TABLE "invoices" ADD COLUMN "total" numeric GENERATED ALWAYS AS (
    CASE 
        WHEN tax_rate IS NULL THEN subtotal
        ELSE ROUND((subtotal * (1 + tax_rate)), 2)
    END
) STORED;
</file>

<file path="scripts/apply-policies.ts">
import { config } from "dotenv";
import { readFileSync } from "fs";
import { resolve } from "path";
import postgres from "postgres";
// Load environment variables
config({ path: ".env" });
async function applyPolicies() {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL is not set in environment variables");
  }
  // Create a Postgres client
  const sql = postgres(connectionString, { max: 1 });
  try {
    console.log("Connecting to database...");
    // Read the SQL file from src/db directory
    const sqlFilePath = resolve(__dirname, "../src/db/archive/policies.sql");
    const sqlContent = readFileSync(sqlFilePath, "utf8");
    // Split the SQL content by semicolons and filter out empty statements
    const statements = sqlContent
      .split(";")
      .map((statement) => statement.trim())
      .filter((statement) => statement.length > 0);
    console.log(`Found ${statements.length} SQL statements to execute`);
    // First drop existing policies to avoid conflicts
    console.log("Dropping existing policies...");
    await sql.unsafe(`
      DO $$
      DECLARE
        pol record;
      BEGIN
        FOR pol IN
          SELECT policyname, tablename
          FROM pg_policies
          WHERE schemaname = 'public'
        LOOP
          EXECUTE format('DROP POLICY IF EXISTS %I ON %I', pol.policyname, pol.tablename);
        END LOOP;
      END $$;
    `);
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      try {
        await sql.unsafe(statement);
        console.log(`Policy statement executed ${i + 1}/${statements.length}`);
      } catch (error) {
        console.error(`❌ Error executing statement ${i + 1}: ${statement}`);
        console.error(error);
        // Continue with next statement despite errors
      }
    }
    console.log("Policy application completed");
  } catch (error) {
    console.error("Error applying policies:", error);
    process.exit(1);
  } finally {
    // Close the database connection
    await sql.end();
  }
}
// Run the function
applyPolicies().catch(console.error);
</file>

<file path="scripts/apply-rbac.ts">
import { config } from "dotenv";
import { readFileSync } from "fs";
import { resolve } from "path";
import postgres from "postgres";
// Load environment variables
config({ path: ".env" });
async function applyRBAC() {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL is not set in environment variables");
  }
  // Create a Postgres client
  const sql = postgres(connectionString, { max: 1 });
  try {
    console.log("Connecting to database...");
    // Read the SQL file from src/db directory
    const sqlFilePath = resolve(__dirname, "../src/db/rbac.sql");
    const sqlContent = readFileSync(sqlFilePath, "utf8");
    // Split the SQL content into statements, being careful with PL/pgSQL blocks
    const statements: string[] = [];
    let currentStatement = "";
    let inPlpgsqlBlock = false;
    let dollarQuoteLevel = 0;
    for (const line of sqlContent.split("\n")) {
      const trimmedLine = line.trim();
      // Check for dollar-quoted string start/end
      if (trimmedLine.includes("$$")) {
        const matches = trimmedLine.match(/\$\$/g) || [];
        dollarQuoteLevel += matches.length;
        if (dollarQuoteLevel % 2 === 0) {
          inPlpgsqlBlock = false;
        } else {
          inPlpgsqlBlock = true;
        }
      }
      currentStatement += line + "\n";
      // If we're not in a PL/pgSQL block and we see a semicolon, split the statement
      if (!inPlpgsqlBlock && trimmedLine.endsWith(";")) {
        statements.push(currentStatement.trim());
        currentStatement = "";
      }
    }
    // Add any remaining statement
    if (currentStatement.trim()) {
      statements.push(currentStatement.trim());
    }
    console.log(`Found ${statements.length} SQL statements to execute`);
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      try {
        await sql.unsafe(statement);
        console.log(`✅ RBAC statement executed ${i + 1}/${statements.length}`);
      } catch (error) {
        console.error(`❌ Error executing statement ${i + 1}:`);
        console.error(statement);
        console.error(error);
        // Continue with next statement despite errors
      }
    }
    console.log("RBAC application completed");
  } catch (error) {
    console.error("Error applying RBAC:", error);
    process.exit(1);
  } finally {
    // Close the database connection
    await sql.end();
  }
}
// Run the function
applyRBAC().catch(console.error);
</file>

<file path="scripts/apply-triggers.ts">
import { config } from "dotenv";
import { readFileSync } from "fs";
import { resolve } from "path";
import postgres from "postgres";
// Load environment variables
config({ path: ".env" });
async function applyTriggers() {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL is not set in environment variables");
  }
  // Create a Postgres client
  const sql = postgres(connectionString, { max: 1 });
  try {
    console.log("Connecting to database...");
    // Read the SQL file from src/db directory
    const sqlFilePath = resolve(__dirname, "../src/db/triggers.sql");
    const sqlContent = readFileSync(sqlFilePath, "utf8");
    // Split the SQL content into statements, being careful with PL/pgSQL blocks
    const statements: string[] = [];
    let currentStatement = "";
    let inPlpgsqlBlock = false;
    let dollarQuoteLevel = 0;
    for (const line of sqlContent.split("\n")) {
      const trimmedLine = line.trim();
      // Check for dollar-quoted string start/end
      if (trimmedLine.includes("$$")) {
        const matches = trimmedLine.match(/\$\$/g) || [];
        dollarQuoteLevel += matches.length;
        if (dollarQuoteLevel % 2 === 0) {
          inPlpgsqlBlock = false;
        } else {
          inPlpgsqlBlock = true;
        }
      }
      currentStatement += line + "\n";
      // If we're not in a PL/pgSQL block and we see a semicolon, split the statement
      if (!inPlpgsqlBlock && trimmedLine.endsWith(";")) {
        statements.push(currentStatement.trim());
        currentStatement = "";
      }
    }
    // Add any remaining statement
    if (currentStatement.trim()) {
      statements.push(currentStatement.trim());
    }
    console.log(`Found ${statements.length} SQL statements to execute`);
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      try {
        await sql.unsafe(statement);
        console.log(`✅ Trigger statement executed ${i + 1}/${statements.length}`);
      } catch (error) {
        console.error(`Error executing statement ${i + 1}:`);
        console.error(statement);
        console.error(error);
        // Continue with next statement despite errors
      }
    }
    console.log("Trigger application completed");
  } catch (error) {
    console.error("Error applying triggers:", error);
    process.exit(1);
  } finally {
    // Close the database connection
    await sql.end();
  }
}
// Run the function
applyTriggers().catch(console.error);
</file>

<file path="scripts/apply-types.ts">
import { config } from "dotenv";
import { readFileSync } from "fs";
import { resolve } from "path";
import postgres from "postgres";
// Load environment variables
config({ path: ".env" });
async function applyTypes() {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL is not set in environment variables");
  }
  // Create a Postgres client
  const sql = postgres(connectionString, { max: 1 });
  try {
    console.log("Connecting to database...");
    // Read the SQL file from src/db directory
    const sqlFilePath = resolve(__dirname, "../src/db/types.sql");
    const sqlContent = readFileSync(sqlFilePath, "utf8");
    // Split the SQL content into statements, being careful with PL/pgSQL blocks
    const statements: string[] = [];
    let currentStatement = "";
    let inPlpgsqlBlock = false;
    let dollarQuoteLevel = 0;
    for (const line of sqlContent.split("\n")) {
      const trimmedLine = line.trim();
      // Check for dollar-quoted string start/end
      if (trimmedLine.includes("$$")) {
        const matches = trimmedLine.match(/\$\$/g) || [];
        dollarQuoteLevel += matches.length;
        if (dollarQuoteLevel % 2 === 0) {
          inPlpgsqlBlock = false;
        } else {
          inPlpgsqlBlock = true;
        }
      }
      currentStatement += line + "\n";
      // If we're not in a PL/pgSQL block and we see a semicolon, split the statement
      if (!inPlpgsqlBlock && trimmedLine.endsWith(";")) {
        statements.push(currentStatement.trim());
        currentStatement = "";
      }
    }
    // Add any remaining statement
    if (currentStatement.trim()) {
      statements.push(currentStatement.trim());
    }
    console.log(`Found ${statements.length} SQL statements to execute`);
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      try {
        await sql.unsafe(statement);
        console.log(`✅ Type statement executed ${i + 1}/${statements.length}`);
      } catch (error) {
        console.error(`❌ Error executing statement ${i + 1}:`);
        console.error(statement);
        console.error(error);
        // Continue with next statement despite errors
      }
    }
    console.log("Type application completed");
  } catch (error) {
    console.error("Error applying types:", error);
    process.exit(1);
  } finally {
    // Close the database connection
    await sql.end();
  }
}
// Run the function
applyTypes().catch(console.error);
</file>

<file path="scripts/generate-migration.ts">
import { exec } from "child_process";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
dotenv.config();
async function runCommand(command: string): Promise<string> {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        console.error(`stderr: ${stderr}`);
        reject(error);
        return;
      }
      resolve(stdout);
    });
  });
}
async function main() {
  console.log("Starting migration generation...");
  try {
    // Generate the migration files
    console.log("Generating migration...");
    const output = await runCommand("npx drizzle-kit generate");
    console.log(output);
    console.log("Migration files generated successfully");
    // Update the schema.ts file in drizzle directory with the content from src/db/schema.ts
    console.log("Updating drizzle/schema.ts with current schema...");
    const schemaContent = fs.readFileSync(path.join(process.cwd(), "src/db/schema.ts"), "utf8");
    fs.writeFileSync(path.join(process.cwd(), "drizzle/schema.ts"), schemaContent, "utf8");
    console.log("Schema file updated");
    console.log("Migration generation complete");
  } catch (error) {
    console.error("Failed to generate migration:", error);
    process.exit(1);
  }
}
main().catch((error) => {
  console.error("Unexpected error:", error);
  process.exit(1);
});
</file>

<file path="scripts/list-tables.ts">
import * as dotenv from "dotenv";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
dotenv.config();
async function main() {
  console.log("Listing all tables in the database...");
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL environment variable is not set");
  }
  // Connect to the database
  console.log("Connecting to database...");
  const client = postgres(connectionString);
  const db = drizzle(client);
  try {
    // Query all tables in the public schema
    console.log("Tables in public schema:");
    const publicTables = await client.unsafe(`
      SELECT tablename
      FROM pg_catalog.pg_tables
      WHERE schemaname = 'public'
      ORDER BY tablename;
    `);
    console.log(publicTables);
    // Query all tables in the auth schema
    console.log("\nTables in auth schema:");
    const authTables = await client.unsafe(`
      SELECT tablename
      FROM pg_catalog.pg_tables
      WHERE schemaname = 'auth'
      ORDER BY tablename;
    `);
    console.log(authTables);
  } catch (error) {
    console.error("Error listing tables:", error);
    process.exit(1);
  } finally {
    await client.end();
  }
}
main().catch((error) => {
  console.error("Unexpected error:", error);
  process.exit(1);
});
</file>

<file path="scripts/setup-new.ts">
import { exec as execCallback } from "child_process";
import * as dotenv from "dotenv";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "../src/db/schema";
dotenv.config();
async function main() {
  console.log("Setting up new database...");
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL environment variable is not set");
  }
  // Connect to the database
  console.log("Connecting to database...");
  const client = postgres(connectionString);
  const db = drizzle(client);
  try {
    console.log("Creating required extensions if they do not exist...");
    // Create the uuid-ossp extension if it doesn't exist
    await client.unsafe('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";');
    console.log("Running push to create all tables...");
    // Instead of running the push command, manually create the schema
    await client.unsafe("CREATE SCHEMA IF NOT EXISTS auth;");
    // List all tables in the schema
    const tables = Object.entries(schema)
      .filter(([key, value]) => typeof value === "object" && value !== null)
      .map(([key, value]) => ({ name: key, table: value }));
    console.log(`Found ${tables.length} tables in schema`);
    // Attempt to create each table
    for (const tableInfo of tables) {
      try {
        // Create the enums first if they exist
        if (tableInfo.name.includes("InAuth")) {
          console.log(`Creating enum: ${tableInfo.name}`);
          try {
            const result = await client.unsafe(
              `SELECT * FROM pg_type WHERE typname = '${tableInfo.name.toLowerCase()}'`,
            );
            if (result.length === 0) {
              // Enum doesn't exist, create it
              console.log(`Enum doesn't exist, creating: ${tableInfo.name}`);
            }
          } catch (err) {
            console.log(`Error checking enum: ${err}`);
          }
        }
      } catch (error) {
        console.log(`Error with table ${tableInfo.name}: ${error}`);
      }
    }
    // Use drizzle-kit push as a last resort
    console.log("Using drizzle-kit push to create remaining tables...");
    await client.unsafe("COMMIT;"); // End any existing transaction
    await new Promise<void>((resolve, reject) => {
      execCallback(
        "npx drizzle-kit push",
        (error: Error | null, stdout: string, stderr: string) => {
          if (error) {
            console.warn(`Warning: ${error.message}`);
            console.warn(`stderr: ${stderr}`);
            // Don't reject as we want to continue
          }
          console.log(stdout);
          resolve();
        },
      );
    });
    console.log("Database setup complete");
  } catch (error) {
    console.error("Setup failed:", error);
    process.exit(1);
  } finally {
    await client.end();
  }
}
main().catch((error) => {
  console.error("Unexpected error:", error);
  process.exit(1);
});
</file>

<file path="scripts/sync.ts">
import { exec } from "child_process";
import * as dotenv from "dotenv";
dotenv.config();
async function runCommand(command: string): Promise<string> {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        console.error(`stderr: ${stderr}`);
        reject(error);
        return;
      }
      resolve(stdout);
    });
  });
}
async function main() {
  console.log("Starting database sync...");
  try {
    // Use drizzle-kit push to sync the schema to the database
    console.log("Pushing schema to database...");
    const output = await runCommand("npx drizzle-kit push");
    console.log(output);
    console.log("Database sync complete");
  } catch (error) {
    console.error("Sync failed:", error);
    process.exit(1);
  }
}
main().catch((error) => {
  console.error("Unexpected error:", error);
  process.exit(1);
});
</file>

<file path="src/components/app/AnalyticsTable.tsx">
import { useId, useState } from "react";
import { useTranslations } from "next-intl";
import {
  ColumnDef,
  PaginationState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import {
  ChevronDown,
  ChevronFirst,
  ChevronLast,
  ChevronLeft,
  ChevronRight,
  ChevronUp,
} from "lucide-react";
import { Button } from "@/ui/button";
import { Label } from "@/ui/label";
import { Pagination, PaginationContent, PaginationItem } from "@/ui/pagination";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/ui/table";
import { cn } from "@/lib/utils";
interface AnalyticsData {
  country: string;
  city: string;
  mobile: number;
  desktop: number;
  total: number;
}
export default function AnalyticsTable({
  data = [],
  className,
  hidePagination = false,
  fake = false,
}: {
  data: AnalyticsData[];
  className?: string;
  hidePagination?: boolean;
  fake?: boolean;
}) {
  const t = useTranslations();
  const columns: ColumnDef<AnalyticsData>[] = [
    {
      header: t("General.country"),
      accessorKey: "country",
      cell: ({ row }) => <div className="font-medium">{row.getValue("country")}</div>,
      size: 180,
    },
    {
      header: t("General.city"),
      accessorKey: "city",
      size: 200,
    },
    {
      header: t("General.mobile"),
      accessorKey: "mobile",
      cell: ({ row }) => <div className="text-right">{row.getValue("mobile")}</div>,
      size: 120,
    },
    {
      header: t("General.desktop"),
      accessorKey: "desktop",
      cell: ({ row }) => <div className="text-right">{row.getValue("desktop")}</div>,
      size: 120,
    },
    {
      header: t("General.total"),
      accessorKey: "total",
      cell: ({ row }) => <div className="text-right">{row.getValue("total")}</div>,
      size: 120,
    },
  ];
  const id = useId();
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 5,
  });
  const [sorting, setSorting] = useState<SortingState>([
    {
      id: "country",
      desc: false,
    },
  ]);
  const table = useReactTable({
    data: data || [],
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onSortingChange: setSorting,
    enableSortingRemoval: false,
    getPaginationRowModel: getPaginationRowModel(),
    onPaginationChange: setPagination,
    state: {
      sorting,
      pagination,
    },
  });
  return (
    <div className={cn("space-y-4", className)}>
      <div
        className={cn(
          "border-border bg-background overflow-hidden rounded-lg border",
          fake ? "h-full" : "",
        )}
      >
        <Table className="table-auto">
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow
                key={headerGroup.id}
                className="*:border-border hover:bg-transparent [&>:not(:last-child)]:border-e"
              >
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead
                      key={header.id}
                      style={{ width: `${header.getSize()}px` }}
                      className="h-11"
                    >
                      {header.isPlaceholder ? null : header.column.getCanSort() ? (
                        <div
                          className={cn(
                            header.column.getCanSort() &&
                              "flex h-full cursor-pointer items-center justify-between gap-2 select-none",
                          )}
                          onClick={header.column.getToggleSortingHandler()}
                          onKeyDown={(e) => {
                            // Enhanced keyboard handling for sorting
                            if (
                              header.column.getCanSort() &&
                              (e.key === "Enter" || e.key === " ")
                            ) {
                              e.preventDefault();
                              header.column.getToggleSortingHandler()?.(e);
                            }
                          }}
                          tabIndex={header.column.getCanSort() ? 0 : undefined}
                        >
                          {flexRender(header.column.columnDef.header, header.getContext())}
                          {{
                            asc: (
                              <ChevronUp
                                className="shrink-0 opacity-60"
                                size={16}
                                strokeWidth={2}
                                aria-hidden="true"
                              />
                            ),
                            desc: (
                              <ChevronDown
                                className="shrink-0 opacity-60"
                                size={16}
                                strokeWidth={2}
                                aria-hidden="true"
                              />
                            ),
                          }[header.column.getIsSorted() as string] ?? null}
                        </div>
                      ) : (
                        flexRender(header.column.columnDef.header, header.getContext())
                      )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  className="*:border-border hover:bg-transparent [&>:not(:last-child)]:border-e"
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  {t("General.no_results")}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      {hidePagination ? null : (
        <div className="flex items-center justify-between gap-8">
          {/* Results per page */}
          <div className="flex items-center gap-3">
            <Label htmlFor={id} className="max-sm:sr-only">
              {t("General.rows_per_page")}
            </Label>
            <Select
              value={table.getState().pagination.pageSize.toString()}
              onValueChange={(value) => {
                table.setPageSize(Number(value));
              }}
            >
              <SelectTrigger id={id} className="w-fit whitespace-nowrap">
                <SelectValue placeholder={t("General.select_number_of_results")} />
              </SelectTrigger>
              <SelectContent className="[&_*[role=option]]:ps-2 [&_*[role=option]]:pe-8 [&_*[role=option]>span]:start-auto [&_*[role=option]>span]:end-2">
                {[5, 10, 25, 50].map((pageSize) => (
                  <SelectItem key={pageSize} value={pageSize.toString()}>
                    {pageSize}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          {/* Page number information */}
          <div className="text-muted-foreground flex grow justify-end text-sm whitespace-nowrap">
            <p className="text-muted-foreground text-sm whitespace-nowrap" aria-live="polite">
              <span className="text-foreground">
                {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1}-
                {Math.min(
                  Math.max(
                    table.getState().pagination.pageIndex * table.getState().pagination.pageSize +
                      table.getState().pagination.pageSize,
                    0,
                  ),
                  table.getRowCount(),
                )}
              </span>{" "}
              {t("General.of")}{" "}
              <span className="text-foreground">{table.getRowCount().toString()}</span>
            </p>
          </div>
          {/* Pagination buttons */}
          <div>
            <Pagination>
              <PaginationContent>
                {/* First page button */}
                <PaginationItem>
                  <Button
                    size="icon"
                    variant="outline"
                    className="disabled:pointer-events-none disabled:opacity-50"
                    onClick={() => table.firstPage()}
                    disabled={!table.getCanPreviousPage()}
                    aria-label={t("General.go_to_first_page")}
                  >
                    <ChevronFirst
                      size={16}
                      strokeWidth={2}
                      aria-hidden="true"
                      className="rtl:rotate-180"
                    />
                  </Button>
                </PaginationItem>
                {/* Previous page button */}
                <PaginationItem>
                  <Button
                    size="icon"
                    variant="outline"
                    className="disabled:pointer-events-none disabled:opacity-50"
                    onClick={() => table.previousPage()}
                    disabled={!table.getCanPreviousPage()}
                    aria-label={t("General.go_to_previous_page")}
                  >
                    <ChevronLeft
                      size={16}
                      strokeWidth={2}
                      aria-hidden="true"
                      className="rtl:rotate-180"
                    />
                  </Button>
                </PaginationItem>
                {/* Next page button */}
                <PaginationItem>
                  <Button
                    size="icon"
                    variant="outline"
                    className="disabled:pointer-events-none disabled:opacity-50"
                    onClick={() => table.nextPage()}
                    disabled={!table.getCanNextPage()}
                    aria-label={t("General.go_to_next_page")}
                  >
                    <ChevronRight
                      size={16}
                      strokeWidth={2}
                      aria-hidden="true"
                      className="rtl:rotate-180"
                    />
                  </Button>
                </PaginationItem>
                {/* Last page button */}
                <PaginationItem>
                  <Button
                    size="icon"
                    variant="outline"
                    className="disabled:pointer-events-none disabled:opacity-50"
                    onClick={() => table.lastPage()}
                    disabled={!table.getCanNextPage()}
                    aria-label={t("General.go_to_last_page")}
                  >
                    <ChevronLast
                      size={16}
                      strokeWidth={2}
                      aria-hidden="true"
                      className="rtl:rotate-180"
                    />
                  </Button>
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/app/FeedbackDialog.tsx">
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
// UI
import {
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import { Textarea } from "@/ui/textarea";
import useUserStore from "@/stores/use-user-store";
import { createClient } from "@/utils/supabase/component";
interface FeedbackDialogProps {
  onOpenChange?: (open: boolean) => void;
}
export function FeedbackDialog({ onOpenChange }: FeedbackDialogProps) {
  const t = useTranslations();
  const lang = useLocale();
  const [feedback, setFeedback] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { user } = useUserStore();
  const supabase = createClient();
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!feedback.trim()) return;
    setIsSubmitting(true);
    try {
      const { error } = await supabase.from("feedback").insert([
        {
          user_id: user?.id,
          email: user?.email,
          message: feedback.trim(),
        },
      ]);
      if (error) throw error;
      toast.success(t("Feedback.feedback_submitted"), {
        description: t("Feedback.thank_you_feedback"),
      });
      setFeedback("");
      onOpenChange?.(false);
    } catch (error) {
      console.error(error);
      toast.error(t("General.error"), {
        description: t("Feedback.error_submitting_feedback"),
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <DialogContent dir={lang === "ar" ? "rtl" : "ltr"}>
      <DialogHeader>
        <DialogTitle>{t("Feedback.give_feedback")}</DialogTitle>
        <DialogDescription>{t("Feedback.feedback_dialog_description")}</DialogDescription>
      </DialogHeader>
      <form onSubmit={handleSubmit} className="space-y-4">
        <Textarea
          placeholder={t("Feedback.feedback_placeholder")}
          value={feedback}
          onChange={(e) => setFeedback(e.target.value)}
          className="min-h-[150px]"
          required
        />
        <Button
          type="submit"
          className="plausible-event-name=feedback_sent w-full"
          disabled={isSubmitting}
        >
          {isSubmitting ? t("Feedback.submitting") : t("Feedback.submit_feedback")}
        </Button>
      </form>
    </DialogContent>
  );
}
</file>

<file path="src/components/app/LazimAd.tsx">
import { X } from "lucide-react";
import { useTranslations } from "next-intl";
import Image from "next/image";
import { useTheme } from "next-themes";
import Link from "next/link";
import { useMainStore } from "@/hooks/main.store";
import { Button } from "@/ui/button";
import { Card, CardContent } from "@/ui/card";
export default function LazimAd() {
  const t = useTranslations();
  const { urlTooLong, setUrlTooLong } = useMainStore();
  const { theme } = useTheme();
  if (!urlTooLong) return null;
  return (
    <Card className="fixed border pt-4 transition-all bottom-4 left-4 z-[200] bg-white dark:bg-gray-800 rounded-lg shadow-lg p- max-w-md animate-in slide-in-from-bottom">
      {/* <CardHeader>
        <CardTitle>{t("Editor.try_lazim.title")}</CardTitle>
      </CardHeader> */}
      <CardContent className="p-2">
        <button
          onClick={() => setUrlTooLong(false)}
          className="absolute top-4 end-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          aria-label="Close"
        >
          <X size={15} />
        </button>
        <div className="flex flex-col gap-2 mb-4 px-2">
          <h3 className="text-lg font-semibold">
            {t("Editor.try_lazim.title")}
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-300">
            {t("Editor.try_lazim.description")}
          </p>
        </div>
        <Image
          src={`/assets/lazim-${theme === "dark" ? "white" : "black"}.png`}
          alt="Lazim Ad"
          className="w-full max-w-[200px] h-auto mx-auto"
          width={512}
          height={512}
        />
        <Link
          href="https://laz.im"
          target="_blank"
          className="w-full max-w-[200px] h-auto mx-auto"
        >
          <Button className="w-full mt-4">
            {t("Editor.try_lazim.go_to_lazim")}
          </Button>
        </Link>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/app/new-role-dialog.tsx">
"use client";
import { Plus, MoreVertical, Edit, Trash, Shield, Lock, Search } from "lucide-react";
import { useState, useMemo, useCallback } from "react";
import React from "react";
import { toast } from "sonner";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/ui/accordion";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/ui/alert-dialog";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/ui/card";
import { Checkbox } from "@/ui/checkbox";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { ScrollArea } from "@/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Textarea } from "@/ui/textarea";
import { Permission } from "@/types/rbac";
import { useRoles, useCreateRole, useUpdateRole, useDeleteRole } from "@/role/role.hooks";
import { RoleWithPermissions, RoleUpdateData } from "@/role/role.type";
import { app_permission } from "@/db/schema";
import useUserStore from "@/stores/use-user-store";
const ACTION_DISPLAY_NAMES: Record<string, string> = {
  create: "Create",
  read: "View",
  update: "Edit",
  delete: "Delete",
  export: "Export",
  duplicate: "Duplicate",
  invite: "Invite",
  assign: "Assign",
};
// Helper function to generate permissions list (moved from old usePermissions hook)
const generatePermissionsList = (): Permission[] => {
  const permissions = app_permission.enumValues.map((permission: string) => {
    const [category, action] = permission.split(".");
    const displayName = ACTION_DISPLAY_NAMES[action] || action;
    const formattedCategory = category
      .split("_")
      .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
    return {
      id: permission,
      name: `${displayName} ${formattedCategory}`,
      description: `Permission to ${action} ${formattedCategory.toLowerCase()}`,
      category: formattedCategory,
    };
  });
  const groupedPermissions = permissions.reduce(
    (acc: Record<string, Permission[]>, permission: Permission) => {
      if (!acc[permission.category]) {
        acc[permission.category] = [];
      }
      acc[permission.category].push(permission);
      return acc;
    },
    {},
  );
  const sortedPermissions = Object.values(groupedPermissions)
    .flat()
    .sort((a: Permission, b: Permission) => {
      const categoryCompare = a.category.localeCompare(b.category);
      if (categoryCompare !== 0) return categoryCompare;
      const actionOrder = [
        "create",
        "read",
        "update",
        "delete",
        "export",
        "duplicate",
        "invite",
        "assign",
      ];
      const aAction = a.id.split(".")[1];
      const bAction = b.id.split(".")[1];
      return actionOrder.indexOf(aAction) - actionOrder.indexOf(bAction);
    });
  return sortedPermissions;
};
// Add this new component before the main RolesList component
const PermissionsSection = React.memo(function PermissionsSection({
  permissionsByCategory,
  selectedPermissions,
  onPermissionChange,
  onCategoryToggle,
  isDisabled = false,
}: {
  permissionsByCategory: Record<string, Permission[]>;
  selectedPermissions: string[];
  onPermissionChange: (permissionId: string) => void;
  onCategoryToggle: (category: string) => void;
  isDisabled?: boolean;
}) {
  const areAllPermissionsSelected = useCallback(
    (category: string) => {
      const categoryPermissions = permissionsByCategory[category] || [];
      return categoryPermissions.every((p: Permission) => selectedPermissions.includes(p.id));
    },
    [permissionsByCategory, selectedPermissions],
  );
  const countPermissionsByCategory = useCallback(
    (category: string) => {
      const categoryPermissions = permissionsByCategory[category] || [];
      return categoryPermissions.filter((p: Permission) => selectedPermissions.includes(p.id))
        .length;
    },
    [permissionsByCategory, selectedPermissions],
  );
  return (
    <Card>
      <CardContent className="p-4">
        <ScrollArea className="h-[300px] pe-4">
          <Accordion type="multiple" className="w-full">
            {Object.entries(permissionsByCategory).map(([category, categoryPermissions]) => (
              <AccordionItem key={category} value={category}>
                <AccordionTrigger className="py-2">
                  <div className="flex w-full items-center justify-between pe-4">
                    <span>{category}</span>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={areAllPermissionsSelected(category)}
                        onCheckedChange={() => onCategoryToggle(category)}
                        onClick={(e) => e.stopPropagation()}
                        disabled={isDisabled}
                      />
                      <span className="text-muted-foreground text-xs">
                        {countPermissionsByCategory(category)}/{categoryPermissions.length}
                      </span>
                    </div>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-2 ps-4 pt-2">
                    {categoryPermissions.map((permission: Permission) => (
                      <div key={permission.id} className="flex items-start space-x-2">
                        <Checkbox
                          id={`permission-${permission.id}`}
                          checked={selectedPermissions.includes(permission.id)}
                          onCheckedChange={() => onPermissionChange(permission.id)}
                          disabled={isDisabled}
                        />
                        <div className="space-y-1">
                          <Label htmlFor={`permission-${permission.id}`} className="font-medium">
                            {permission.name}
                          </Label>
                          <p className="text-muted-foreground text-sm">{permission.description}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </ScrollArea>
      </CardContent>
    </Card>
  );
});
export default function RolesList() {
  const [searchQuery, setSearchQuery] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedRole, setSelectedRole] = useState<RoleWithPermissions | null>(null);
  const [newRole, setNewRole] = useState<Partial<RoleWithPermissions>>({
    name: "",
    description: "",
    permissions: [],
    is_system: false,
  });
  const { enterprise } = useUserStore(); // Get enterprise from store
  // Generate permissions list
  const permissions = useMemo(() => generatePermissionsList(), []);
  const isLoadingPermissions = false; // Placeholder, as it's now synchronous
  // Fetch data using hooks
  const { data: roles = [], isLoading: isLoadingRoles } = useRoles();
  const createRole = useCreateRole();
  const updateRole = useUpdateRole();
  const deleteRole = useDeleteRole();
  // Group permissions by category
  const permissionsByCategory = useMemo(() => {
    return permissions.reduce(
      (acc: Record<string, Permission[]>, permission: Permission) => {
        if (!acc[permission.category]) {
          acc[permission.category] = [];
        }
        acc[permission.category].push(permission);
        return acc;
      },
      {} as Record<string, Permission[]>,
    );
  }, [permissions]);
  // Filter roles based on search query
  const filteredRoles = roles.filter(
    (role: RoleWithPermissions) =>
      role.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (role.description && role.description.toLowerCase().includes(searchQuery.toLowerCase())),
  );
  // Handle opening edit dialog
  const handleEditRole = (role: RoleWithPermissions) => {
    setSelectedRole(role);
    setNewRole({
      name: role.name,
      description: role.description,
      permissions: [...role.permissions],
    });
    setIsEditDialogOpen(true);
  };
  // Handle opening delete dialog
  const openDeleteDialog = (role: RoleWithPermissions) => {
    setSelectedRole(role);
    setIsDeleteDialogOpen(true);
  };
  // Create new role
  const handleCreateRole = async () => {
    if (!newRole.name) {
      toast.error("Role name cannot be empty.");
      return;
    }
    if (!enterprise?.id) {
      toast.error("Cannot create role: No enterprise selected.");
      return;
    }
    // Validate role name format (lowercase, numbers, underscores)
    if (!/^[a-z0-9_]+$/.test(newRole.name)) {
      toast.error("Role name must contain only lowercase letters, numbers, and underscores.");
      return;
    }
    try {
      await createRole.mutateAsync({
        name: newRole.name,
        description: newRole.description || "",
        permissions: newRole.permissions || [],
        enterprise_id: enterprise.id,
      });
      // Reset form and close dialog
      setNewRole({
        name: "",
        description: "",
        permissions: [],
        is_system: false,
      });
      setIsCreateDialogOpen(false);
    } catch (error) {
      console.error("Error creating role:", error);
    }
  };
  // Update role
  const handleUpdateRole = async () => {
    if (!selectedRole || !newRole.name) return;
    // Prepare update data according to RoleUpdateData structure
    const updateData: RoleUpdateData = {
      name: newRole.name,
      description: newRole.description || undefined,
      permissions: newRole.permissions || [],
    };
    try {
      await updateRole.mutateAsync({
        id: selectedRole.id,
        data: updateData,
      });
      setIsEditDialogOpen(false);
    } catch (error) {
      console.error("Error updating role:", error);
    }
  };
  // Delete role
  const handleDeleteRole = async () => {
    if (!selectedRole) return;
    try {
      await deleteRole.mutateAsync(selectedRole.id);
      setIsDeleteDialogOpen(false);
    } catch (error) {
      console.error("Error deleting role:", error);
    }
  };
  // Toggle permission selection
  const togglePermission = (permissionId: string, currentPermissions: string[]) => {
    // Ensure currentPermissions is an array
    const permissionsArray = Array.isArray(currentPermissions) ? currentPermissions : [];
    if (permissionsArray.includes(permissionId)) {
      return permissionsArray.filter((id) => id !== permissionId);
    } else {
      return [...permissionsArray, permissionId];
    }
  };
  // Toggle all permissions in a category
  const toggleCategoryPermissions = (category: string, currentPermissions: string[]) => {
    const categoryPermissions = permissionsByCategory[category] || [];
    const categoryPermissionIds = categoryPermissions.map((p: Permission) => p.id);
    const permissionsArray = Array.isArray(currentPermissions) ? currentPermissions : [];
    // Check if *all* permissions in this category are currently selected
    const allSelected = categoryPermissionIds.every((id) => permissionsArray.includes(id));
    if (allSelected) {
      // Remove all permissions in this category
      return permissionsArray.filter((id) => !categoryPermissionIds.includes(id));
    } else {
      // Add all permissions in this category (only those not already present)
      const permissionsToAdd = categoryPermissionIds.filter((id) => !permissionsArray.includes(id));
      return [...permissionsArray, ...permissionsToAdd];
    }
  };
  // Helper function to count permissions in a category
  const countPermissionsInCategory = (rolePermissions: string[], category: string) => {
    const permissionsArray = Array.isArray(rolePermissions) ? rolePermissions : [];
    const categoryPermissionIds = (permissionsByCategory[category] || []).map(
      (p: Permission) => p.id,
    );
    return permissionsArray.filter((id) => categoryPermissionIds.includes(id)).length;
  };
  // Add this constant at the top of the component
  const AVAILABLE_ROLES = [
    { value: "admin", label: "Admin" },
    { value: "accounting", label: "Accounting" },
    { value: "hr", label: "HR" },
  ];
  return (
    <div className="space-y-6">
      Permissions length: {permissions.length}
      <div className="flex items-center justify-between">
        <div className="relative w-full max-w-sm">
          <Search className="text-muted-foreground absolute top-2.5 left-2.5 h-4 w-4" />
          <Input
            type="search"
            placeholder="Search roles..."
            className="ps-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <Button onClick={() => setIsCreateDialogOpen(true)}>
          <Plus className="me-2 h-4 w-4" /> Add Role
        </Button>
      </div>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {filteredRoles.map((role: RoleWithPermissions) => (
          <Card key={role.id} className="overflow-hidden">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="flex items-center">
                    {role.name}
                    {role.is_system && (
                      <Badge variant="secondary" className="ms-2 px-1.5">
                        <Lock className="me-1 h-3 w-3" />
                        System
                      </Badge>
                    )}
                  </CardTitle>
                  <CardDescription className="mt-1">{role.description}</CardDescription>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="icon">
                      <MoreVertical className="h-4 w-4" />
                      <span className="sr-only">Menu</span>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={() => handleEditRole(role)}>
                      <Edit className="me-2 h-4 w-4" />
                      Edit Role
                    </DropdownMenuItem>
                    {!role.is_system && (
                      <DropdownMenuItem
                        onClick={() => openDeleteDialog(role)}
                        className="text-red-600 focus:text-red-600"
                      >
                        <Trash className="me-2 h-4 w-4" />
                        Delete Role
                      </DropdownMenuItem>
                    )}
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="space-y-2">
                <div className="flex items-center text-sm">
                  <Shield className="text-muted-foreground me-2 h-4 w-4" />
                  <span className="text-muted-foreground">
                    {role.permissions?.length} permissions
                  </span>
                </div>
                <div className="flex flex-wrap gap-1.5">
                  {Object.keys(permissionsByCategory).map(
                    (category) =>
                      role.permissions?.some(
                        (p_id: string) =>
                          permissions.find((perm: Permission) => perm.id === p_id)?.category ===
                          category,
                      ) && (
                        <Badge key={category} variant="outline" className="text-xs">
                          {category}: {countPermissionsInCategory(role.permissions, category)}/
                          {permissionsByCategory[category].length}
                        </Badge>
                      ),
                  )}
                </div>
              </div>
            </CardContent>
            <CardFooter className="pt-1">
              <Button
                variant="outline"
                size="sm"
                className="w-full"
                onClick={() => handleEditRole(role)}
              >
                View Permissions
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
      {/* Create Role Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New Role</DialogTitle>
            <DialogDescription>
              Define a new role and assign permissions to control what users with this role can do.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-6 py-4">
            <div className="grid gap-3">
              <Label htmlFor="name">Role Name</Label>
              <div className="flex gap-2">
                <Select
                  value={newRole.name}
                  onValueChange={(value) => setNewRole({ ...newRole, name: value })}
                >
                  <SelectTrigger className="w-[200px]">
                    <SelectValue placeholder="Select predefined role" />
                  </SelectTrigger>
                  <SelectContent>
                    {AVAILABLE_ROLES.map((role) => (
                      <SelectItem key={role.value} value={role.value}>
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <div className="relative flex-1">
                  <Input
                    id="name"
                    placeholder="Or enter custom role name (lowercase, numbers, underscores only)"
                    value={newRole.name || ""}
                    onChange={(e) => setNewRole({ ...newRole, name: e.target.value })}
                    className="ps-2"
                  />
                  {newRole.name && !/^[a-z0-9_]+$/.test(newRole.name) && (
                    <p className="mt-1 text-xs text-red-500">
                      Role name must contain only lowercase letters, numbers, and underscores
                    </p>
                  )}
                </div>
              </div>
            </div>
            <div className="grid gap-3">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="Describe what this role is for..."
                value={newRole.description || ""}
                onChange={(e) => setNewRole({ ...newRole, description: e.target.value })}
              />
            </div>
            <div className="grid gap-3">
              <Label>Permissions</Label>
              <PermissionsSection
                permissionsByCategory={permissionsByCategory}
                selectedPermissions={newRole.permissions || []}
                onPermissionChange={(permissionId) => {
                  setNewRole({
                    ...newRole,
                    permissions: togglePermission(permissionId, newRole.permissions || []),
                  });
                }}
                onCategoryToggle={(category) => {
                  setNewRole({
                    ...newRole,
                    permissions: toggleCategoryPermissions(category, newRole.permissions || []),
                  });
                }}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleCreateRole}>Create Role</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      {/* Edit Role Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Edit Role: {selectedRole?.name}</DialogTitle>
            <DialogDescription>Modify role details and permissions.</DialogDescription>
          </DialogHeader>
          <div className="grid gap-6 py-4">
            <div className="grid gap-3">
              <Label htmlFor="edit-name">Role Name</Label>
              <Input
                id="edit-name"
                placeholder="e.g., Content Manager"
                value={newRole.name || ""}
                onChange={(e) => setNewRole({ ...newRole, name: e.target.value })}
                disabled={selectedRole?.is_system}
              />
              {selectedRole?.is_system && (
                <p className="text-muted-foreground text-xs">
                  System role names cannot be changed.
                </p>
              )}
            </div>
            <div className="grid gap-3">
              <Label htmlFor="edit-description">Description</Label>
              <Textarea
                id="edit-description"
                placeholder="Describe what this role is for..."
                value={newRole.description || ""}
                onChange={(e) => setNewRole({ ...newRole, description: e.target.value })}
                disabled={selectedRole?.is_system}
              />
            </div>
            <div className="grid gap-3">
              <Label>Permissions</Label>
              <PermissionsSection
                permissionsByCategory={permissionsByCategory}
                selectedPermissions={newRole.permissions || []}
                onPermissionChange={(permissionId) => {
                  setNewRole((prev) => ({
                    ...prev,
                    permissions: togglePermission(permissionId, prev.permissions || []),
                  }));
                }}
                onCategoryToggle={(category) => {
                  setNewRole((prev) => ({
                    ...prev,
                    permissions: toggleCategoryPermissions(category, prev.permissions || []),
                  }));
                }}
                isDisabled={selectedRole?.is_system}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUpdateRole}>Save Changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      {/* Delete Role Confirmation Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete the role &quot;{selectedRole?.name}&quot;. This action
              cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteRole} className="bg-red-600 hover:bg-red-700">
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      {/* Empty state */}
      {filteredRoles.length === 0 && (
        <div className="py-10 text-center">
          <div className="bg-muted mb-4 inline-flex h-12 w-12 items-center justify-center rounded-full">
            <Shield className="text-muted-foreground h-6 w-6" />
          </div>
          <h3 className="text-lg font-medium">No roles found</h3>
          <p className="text-muted-foreground mt-2 mb-4">
            {searchQuery ? "Try a different search term." : "Get started by creating a new role."}
          </p>
          {!searchQuery && (
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="me-2 h-4 w-4" /> Add Role
            </Button>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/app/NoPuklaFound.tsx">
"use client";
import { useEffect, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { useTheme } from "next-themes";
import { useTranslations, useLocale } from "next-intl";
// UI
import { Button } from "@/ui/button";
// Components
import ThemeSwitcher from "@/ui/theme-switcher";
import LanguageSwitcher from "@/ui/language-switcher";
export default function NoPuklaFound() {
  const t = useTranslations("PuklaNotFound");
  const lang = useLocale();
  const { resolvedTheme } = useTheme();
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  const logoSrc = `/assets/pukla-logo-full-${
    !isMounted || resolvedTheme === "dark" ? "green" : "purple"
  }${lang === "en" ? "-en" : ""}.png`;
  if (!isMounted) {
    return null;
  }
  return (
    <div
      dir={lang === "ar" ? "rtl" : "ltr"}
      className="flex items-center flex-col gap-2 justify-center min-h-screen bg-background max-w-[90%] mx-auto"
    >
      <div className="bg-background p-8 rounded-lg border max-w-md w-full mx-4">
        <div className="text-center justify-center items-center flex flex-col mb-8">
          <Link href="/">
            <Image
              src={logoSrc}
              alt="logo"
              className="mb-4 w-auto h-[30px]"
              width={300}
              height={300}
            />
          </Link>
          <h1 className="text-2xl font-bold mb-2 text-foreground">
            {t("oops_this_pukla_doesnt_exist_yet")}
          </h1>
          <p className="text-muted-foreground">
            {t("but_dont_worry_you_can_create_your_own_pukla_right_now")}
          </p>
        </div>
        <div className="mt-8 text-center">
          <Button asChild variant="outline">
            <Link href="/dashboard">{t("sign_up_for_free")}</Link>
          </Button>
        </div>
        <p className="mt-8 text-xs text-center text-muted-foreground">
          {t.rich("by_using_our_service_you_agree_to_our", {
            terms: (chunks) => (
              <Link href="/terms" className="underline">
                {chunks}
              </Link>
            ),
            privacy_policy: (chunks) => (
              <Link href="/privacy" className="underline">
                {chunks}
              </Link>
            ),
          })}
        </p>
      </div>
      <div className="flex w-full max-w-md  flex-row justify-between items-center gap-2">
        <ThemeSwitcher />
        <LanguageSwitcher />
      </div>
    </div>
  );
}
</file>

<file path="src/components/app/NoPuklas.tsx">
import { useTranslations } from "next-intl";
// UI
import { Card, CardHeader, CardTitle, CardContent } from "@/ui/card";
import { Button } from "@/ui/button";
const NoPuklas = ({ onCreate }: { onCreate: () => void }) => {
  const t = useTranslations();
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-center">
          {t("MyPuklas.no_puklas_found")}
        </CardTitle>
      </CardHeader>
      <CardContent className="text-center flex flex-col justify-center items-center gap-4">
        <div className="flex flex-col gap-4">
          <p className="text-sm text-gray-500">
            {t("MyPuklas.start_creating_a_pukla")}
          </p>
        </div>
        <Button className="w-fit" onClick={onCreate}>
          {t("MyPuklas.create_pukla")}
        </Button>
      </CardContent>
    </Card>
  );
};
export default NoPuklas;
</file>

<file path="src/components/app/OnboardingDialog.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { Sparkles, Loader2, Trash, ArrowDown } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { QRCodeSVG } from "qrcode.react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import AdjustableDialog from "@/ui/adjustable-dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/ui/avatar";
// UI
import { Button } from "@/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/ui/form";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { Pukla } from "@/lib/types";
import { useMainStore } from "@/hooks/main.store";
import useUserStore from "@/stores/use-user-store";
// import { checkExistingSlug } from "@/lib/operations";
import { createClient } from "@/utils/supabase/component";
interface OnboardingDialogProps {
  onClose?: () => void;
}
export function OnboardingDialog({ onClose }: OnboardingDialogProps) {
  const supabase = createClient();
  const t = useTranslations();
  const router = useRouter();
  const { user } = useUserStore();
  const { setPuklas, setSelectedPukla } = useMainStore();
  const [isOpen, setIsOpen] = useState(true);
  const [createdPukla, setCreatedPukla] = useState<Pukla | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isGeneratingSlug, setIsGeneratingSlug] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [showScrollIndicator, setShowScrollIndicator] = useState(false);
  const formSchema = z.object({
    slug: z
      .string()
      .min(1, t("MyPuklas.pukla_slug_required"))
      .regex(
        /^[a-zA-Z0-9-]+$/,
        t("MyPuklas.custom_slug_can_only_contain_letters_numbers_and_hyphens"),
      ),
    title: z
      .string()
      .min(1, t("MyPuklas.pukla_title_required"))
      .min(3, t("MyPuklas.pukla_title_too_short"))
      .max(50, t("MyPuklas.pukla_title_too_long")),
    bio: z
      .string()
      .optional()
      .transform((val) => val || ""),
    avatar_url: z
      .string()
      .optional()
      .transform((val) => val || ""),
  });
  const linksSchema = z.object({
    links: z.array(
      z.object({
        title: z.string().min(1, t("Editor.link_title_required")),
        url: z
          .string()
          .min(1, t("Editor.link_url_required"))
          .refine((val) => {
            try {
              new URL(`https://${val}`);
              return true;
            } catch {
              return false;
            }
          }, t("Editor.link_url_invalid")),
      }),
    ),
  });
  type FormValues = z.input<typeof formSchema>;
  type LinksFormValues = z.input<typeof linksSchema>;
  const form = useForm<FormValues>({
    mode: "onChange",
    resolver: zodResolver(formSchema),
    defaultValues: {
      slug: "",
      title: "",
      bio: "",
      avatar_url: "",
    },
  });
  const linksForm = useForm<LinksFormValues>({
    mode: "onChange",
    resolver: zodResolver(linksSchema),
    defaultValues: {
      links: [{ title: "", url: "" }],
    },
  });
  const handleClose = () => {
    setIsOpen(false);
    onClose?.();
  };
  const generateSlug = async () => {
    setIsGeneratingSlug(true);
    try {
      let isUnique = false;
      let slug = "";
      while (!isUnique) {
        // Generate a random slug
        slug = Math.random().toString(36).substring(2, 8);
        // Check if the slug exists in the database
        // const existingSlug = await checkExistingSlug(slug);
        // if (!existingSlug) {
        //   isUnique = true;
        // }
      }
      form.setValue("slug", slug);
    } catch (error) {
      console.error(error);
      toast.error(t("MyPuklas.error_generating_slug"));
    } finally {
      setIsGeneratingSlug(false);
    }
  };
  const handleNext = async (step: number) => {
    if (step === 0) {
      const isValid = await form.trigger();
      if (!isValid) return false;
      // Check if slug exists
      const values = form.getValues();
      if (values.slug) {
        // const existingSlug = await checkExistingSlug(values.slug);
        // if (existingSlug) {
        //   form.setError("slug", {
        //     type: "manual",
        //     message: t("MyPuklas.this_custom_slug_is_already_taken"),
        //   });
        //   return false;
        // }
      }
      return true;
    }
    if (step === 1) {
      const isValid = await linksForm.trigger();
      if (!isValid) return false;
      // Create pukla and links before moving to step 3
      setIsSubmitting(true);
      try {
        // First upload avatar if exists
        let avatarPath = "";
        if (avatarFile) {
          let fileName = `${user?.id}-${Date.now()}.${avatarFile.name.split(".").pop()}`;
          const { data: uploadData, error: uploadError } = await supabase.storage
            .from("pukla_avatars")
            .upload(fileName, avatarFile);
          if (uploadError) throw uploadError;
          const {
            data: { publicUrl },
          } = await supabase.storage.from("pukla_avatars").getPublicUrl(fileName);
          avatarPath = publicUrl;
        }
        // Then create the pukla
        const values = form.getValues();
        const { data: newPukla, error: puklaError } = await supabase
          .from("puklas")
          .insert({
            user_id: user?.id,
            slug: values.slug.toLowerCase() || (await generateSlug()),
            title: values.title,
            bio: values.bio,
            avatar_url: avatarPath,
            theme: {
              primary_color: "#000000",
              background_color: "#ffffff",
              text_color: "#000000",
              link_color: "#000000",
              button_color: "#000000",
              button_text_color: "#ffffff",
              button_hover_color: "#000000",
              button_border_color: "#000000",
              theme_name: "default",
              border_color: "#000000",
              border_radius: "5px",
            },
            settings: {
              icons_position: "top",
              default_lang: "en",
              languages: ["en"],
              langauge_switcher: false,
              hide_avatar: false,
              hide_watermark: false,
              hide_title: false,
              hide_bio: false,
              animation: "none",
            },
          })
          .select()
          .single();
        if (puklaError) throw puklaError;
        // Then create the links
        const linkValues = linksForm.getValues();
        const { error: linksError } = await supabase.from("pukla_links").insert(
          linkValues.links.map((link, index) => ({
            pukla_id: newPukla.id,
            title: link.title,
            url: "https://" + link.url,
            position: index,
            is_draft: false,
            is_enabled: true,
            is_favorite: false,
            is_expanded: false,
            item_type: "link",
          })),
        );
        if (linksError) throw linksError;
        const puklaWithType = newPukla as Pukla;
        const updatedPuklas = [...useMainStore.getState().puklas, puklaWithType];
        setPuklas(updatedPuklas);
        setSelectedPukla(puklaWithType);
        setCreatedPukla(puklaWithType);
        setCurrentStep(step + 1);
        return true;
      } catch (error) {
        console.error(error);
        toast.error(t("MyPuklas.error_creating_pukla"));
        return false;
      } finally {
        setIsSubmitting(false);
      }
    }
    if (step === 2) {
      setCurrentStep(step + 1);
      return true;
    }
    if (step === 3) {
      handleClose();
      return true;
    }
    return true;
  };
  // Function to check if content is scrollable
  const checkScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const target = e.currentTarget;
    const isScrollable = target.scrollHeight > target.clientHeight;
    const isScrolledToBottom =
      Math.abs(target.scrollHeight - target.clientHeight - target.scrollTop) < 1;
    setShowScrollIndicator(isScrollable && !isScrolledToBottom);
  };
  const onboardingItems = [
    {
      id: "step1",
      content: (
        <Form {...form}>
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="slug"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("MyPuklas.custom_slug_optional")}</FormLabel>
                  <div className="relative" dir="ltr">
                    <span className="border-input bg-background text-muted-foreground absolute inline-flex h-full items-center rounded-s-lg border px-3 text-sm">
                      https://puk.la/
                    </span>
                    <FormControl>
                      <Input
                        {...field}
                        className="w-full ps-32"
                        placeholder={t("MyPuklas.custom_slug_placeholder")}
                        onChange={(e) => {
                          field.onChange(e);
                          form.trigger("slug");
                        }}
                      />
                    </FormControl>
                    <button
                      type="button"
                      className="absolute end-2 top-1/2 -translate-y-1/2"
                      onClick={async () => {
                        await generateSlug();
                        form.trigger("slug");
                      }}
                    >
                      {isGeneratingSlug ? (
                        <Loader2 className="text-muted-foreground size-4 animate-spin" />
                      ) : (
                        <Sparkles className="text-muted-foreground size-4" />
                      )}
                    </button>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("MyPuklas.pukla_title")}</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("MyPuklas.pukla_title_placeholder")}
                      {...field}
                      onChange={(e) => {
                        field.onChange(e);
                        form.trigger("title");
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="bio"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("MyPuklas.pukla_bio")}</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder={t("MyPuklas.pukla_bio_placeholder")}
                      {...field}
                      onChange={(e) => {
                        field.onChange(e);
                        form.trigger("bio");
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="avatar_url"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("OnBoardingForm.avatar")}</FormLabel>
                  <FormControl>
                    <>
                      <Input
                        id="avatar-image-upload"
                        type="file"
                        accept="image/*"
                        className="hidden"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            setAvatarFile(file);
                            field.onChange(file.name); // Just store the filename temporarily
                          }
                        }}
                      />
                      <Button
                        variant="outline"
                        className="w-full"
                        onClick={() => document.getElementById("avatar-image-upload")?.click()}
                      >
                        {t("OnBoardingForm.upload_image")}
                      </Button>
                    </>
                  </FormControl>
                  {avatarFile && (
                    <Avatar>
                      <AvatarImage src={URL.createObjectURL(avatarFile)} />
                      <AvatarFallback>Avatar</AvatarFallback>
                    </Avatar>
                  )}
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </Form>
      ),
    },
    {
      id: "step2",
      content: (
        <Form {...linksForm}>
          <div className="relative">
            <div
              className="mb-2 max-h-[60vh] space-y-4 overflow-y-auto scroll-smooth rounded-lg border p-2"
              onScroll={checkScroll}
              ref={(el) => {
                // Check initial scroll state
                if (el) {
                  const isScrollable = el.scrollHeight > el.clientHeight;
                  const isScrolledToBottom =
                    Math.abs(el.scrollHeight - el.clientHeight - el.scrollTop) < 1;
                  setShowScrollIndicator(isScrollable && !isScrolledToBottom);
                }
              }}
            >
              {linksForm.watch("links").map((_, index) => (
                <div key={index} className="relative space-y-2 rounded-lg border p-4">
                  <FormField
                    control={linksForm.control}
                    name={`links.${index}.title`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("OnBoardingForm.link_title")}</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={linksForm.control}
                    name={`links.${index}.url`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("OnBoardingForm.link_url")}</FormLabel>
                        <FormControl dir="ltr">
                          <div className="flex rounded-md shadow-xs">
                            <span className="border-input bg-background text-muted-foreground -z-10 inline-flex items-center rounded-s-md border px-3 pe-1 text-sm">
                              https://
                            </span>
                            <Input
                              className="rounded-s-none ps-1 shadow-none"
                              type="text"
                              {...field}
                              onChange={(e) => {
                                // Remove https:// if user pastes full URL
                                const value = e.target.value.replace(/^https?:\/\//, "");
                                field.onChange(value);
                                linksForm.trigger(`links.${index}.url`);
                              }}
                            />
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {linksForm.watch("links").length > 1 && (
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant="outline"
                        size="icon_sm"
                        className="end-0"
                        onClick={() => {
                          const currentLinks = linksForm.watch("links");
                          linksForm.setValue(
                            "links",
                            currentLinks.filter((_, i) => i !== index),
                          );
                        }}
                      >
                        <Trash className="size-4" />
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        size="icon_sm"
                        className="end-0"
                        disabled={index === linksForm.watch("links").length - 1}
                        onClick={() => {
                          const currentLinks = linksForm.watch("links");
                          const newLinks = [...currentLinks];
                          [newLinks[index], newLinks[index + 1]] = [
                            newLinks[index + 1],
                            newLinks[index],
                          ];
                          linksForm.setValue("links", newLinks);
                        }}
                      >
                        <ArrowDown className="size-4" />
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        size="icon_sm"
                        className="end-0"
                        disabled={index === 0}
                        onClick={() => {
                          const currentLinks = linksForm.watch("links");
                          const newLinks = [...currentLinks];
                          [newLinks[index], newLinks[index - 1]] = [
                            newLinks[index - 1],
                            newLinks[index],
                          ];
                          linksForm.setValue("links", newLinks);
                        }}
                      >
                        <ArrowDown className="size-4 rotate-180" />
                      </Button>
                    </div>
                  )}
                </div>
              ))}
            </div>
            {showScrollIndicator && (
              <div className="from-background pointer-events-none absolute right-0 bottom-0 left-0 h-8 rounded-b-lg bg-gradient-to-t to-transparent" />
            )}
          </div>
          <Button
            type="button"
            variant="outline"
            className="w-full"
            onClick={() =>
              linksForm.setValue("links", [...linksForm.watch("links"), { title: "", url: "" }])
            }
          >
            {t("OnBoardingForm.add_more_links")}
          </Button>
        </Form>
      ),
    },
    {
      id: "step3",
      content: (
        <div className="space-y-4 text-center">
          <h2 className="text-2xl font-bold">{t("OnBoarding.congratulations")}</h2>
          <p>{t("OnBoarding.pukla_created")}</p>
          <div className="flex justify-center">
            {createdPukla && (
              <QRCodeSVG
                value={`${process.env.NEXT_PUBLIC_APP_URL}/${createdPukla.slug}`}
                size={200}
                level="L"
                className="rounded-lg p-2 dark:bg-white"
              />
            )}
          </div>
        </div>
      ),
    },
    {
      id: "step4",
      content: (
        <div className="space-y-4 text-center">
          <h2 className="text-xl font-semibold">{t("OnBoarding.next_steps")}</h2>
          <p>{t("OnBoarding.editor_info")}</p>
          <p>{t("OnBoarding.theme_info")}</p>
          <div className="flex justify-center gap-2">
            <Button onClick={() => router.push("/editor")}>{t("OnBoarding.go_to_editor")}</Button>
            <Button variant="outline" onClick={() => router.push("/theme")}>
              {t("OnBoarding.go_to_theme")}
            </Button>
          </div>
        </div>
      ),
    },
  ];
  return (
    <AdjustableDialog
      items={onboardingItems}
      isOpen={isOpen}
      onOpenChange={handleClose}
      title={t("OnBoarding.title")}
      onNext={handleNext}
      hidePreviousButton={currentStep > 1}
    />
  );
}
</file>

<file path="src/components/app/ProtectedRoute.tsx">
import { useRouter } from "next/router";
import { useEffect } from "react";
import useUserStore from "@/stores/use-user-store";
interface ProtectedRouteProps {
  children: React.ReactNode;
}
const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const user = useUserStore((state) => state.user);
  const loading = useUserStore((state) => state.loading);
  const router = useRouter();
  useEffect(() => {
    if (!user && !loading) {
      router.replace("/auth");
    }
  }, [user, router, loading]);
  return <>{children}</>;
};
export default ProtectedRoute;
</file>

<file path="src/components/app/QrCodeDialog.tsx">
import React from "react";
import { useTranslations, useLocale } from "next-intl";
import { QRCodeSVG } from "qrcode.react";
import { Download } from "lucide-react";
import { useBreakpoint } from "@/hooks/use-breakpoint";
// UI
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/ui/sheet";
import { Button } from "@/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/ui/select";
type QrCodeDialogProps = {
  slug?: string;
  openDialog: boolean;
  setOpenDialog: (open: boolean) => void;
};
export const QrCodeDialog: React.FC<QrCodeDialogProps> = ({
  slug,
  openDialog,
  setOpenDialog,
}) => {
  const t = useTranslations();
  const lang = useLocale();
  const size = useBreakpoint();
  const qrRef = React.useRef<HTMLDivElement>(null);
  const [downloadType, setDownloadType] = React.useState<"svg" | "png">("svg");
  const puklaUrl = `${process.env.NEXT_PUBLIC_APP_URL}/${slug}`;
  const downloadQR = () => {
    if (!qrRef.current) return;
    if (downloadType === "svg") {
      // Get the SVG element
      const svg = qrRef.current.querySelector("svg");
      if (!svg) return;
      // Create a clone of the SVG element
      const svgClone = svg.cloneNode(true) as SVGElement;
      // Add required SVG attributes
      svgClone.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      svgClone.setAttribute("version", "1.1");
      // Create the SVG blob
      const svgData = new XMLSerializer().serializeToString(svgClone);
      const svgBlob = new Blob([svgData], {
        type: "image/svg+xml;charset=utf-8",
      });
      const svgUrl = URL.createObjectURL(svgBlob);
      // Download the SVG
      const downloadLink = document.createElement("a");
      downloadLink.href = svgUrl;
      downloadLink.download = `pukla-qr-${slug}.svg`;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
      URL.revokeObjectURL(svgUrl);
    } else {
      // For PNG, we'll create a canvas from the SVG
      const svg = qrRef.current.querySelector("svg");
      if (!svg) return;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) return;
      // Set canvas size (double the SVG size for better quality)
      canvas.width = 400;
      canvas.height = 400;
      // Create an image from the SVG
      const img = new Image();
      const svgData = new XMLSerializer().serializeToString(svg);
      const svgBlob = new Blob([svgData], {
        type: "image/svg+xml;charset=utf-8",
      });
      const svgUrl = URL.createObjectURL(svgBlob);
      img.onload = () => {
        // Fill white background
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        // Draw the image
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        // Create download link
        const pngUrl = canvas.toDataURL("image/png");
        const downloadLink = document.createElement("a");
        downloadLink.href = pngUrl;
        downloadLink.download = `pukla-qr-${slug}.png`;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        URL.revokeObjectURL(svgUrl);
      };
      img.src = svgUrl;
    }
  };
  const DialogComponent = size > 600 ? Dialog : Sheet;
  const DialogContentComponent = size > 600 ? DialogContent : SheetContent;
  const DialogHeaderComponent = size > 600 ? DialogHeader : SheetHeader;
  const DialogTitleComponent = size > 600 ? DialogTitle : SheetTitle;
  return (
    <DialogComponent open={openDialog} onOpenChange={setOpenDialog}>
      <DialogContentComponent
        side={size <= 600 ? "bottom" : undefined}
        className={size <= 600 ? "w-full" : "w-fit"}
        dir={lang === "ar" ? "rtl" : "ltr"}
      >
        <DialogHeaderComponent className={size <= 600 ? "mb-4" : ""}>
          <DialogTitleComponent>
            {t("General.generate_qr_code")}
          </DialogTitleComponent>
        </DialogHeaderComponent>
        <div className="flex flex-col items-center gap-6 py-0">
          <div ref={qrRef} className="bg-white p-4 rounded-lg">
            <QRCodeSVG
              value={puklaUrl}
              size={200}
              level="H"
              imageSettings={{
                src: "/assets/pukla-logo-symbol-purple.svg",
                x: undefined,
                y: undefined,
                height: 20,
                width: 20,
                excavate: true,
              }}
            />
          </div>
          <div className="flex flex-row items-center gap-2 w-full max-w-[230px]">
            <Select
              value={downloadType}
              onValueChange={(value: "svg" | "png") => setDownloadType(value)}
            >
              <SelectTrigger className="min-w-[80px] w-full">
                <SelectValue placeholder="Format" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="svg">SVG</SelectItem>
                <SelectItem value="png">PNG</SelectItem>
              </SelectContent>
            </Select>
            <Button onClick={downloadQR} variant="default" className="w-full">
              <Download className="h-4 w-4" />
              {t("General.download")}
            </Button>
          </div>
        </div>
      </DialogContentComponent>
    </DialogComponent>
  );
};
</file>

<file path="src/components/app/SetupRedirect.tsx">
type SetupLinkRedirectProps = {
  title?: string;
};
const SetupLinkRedirect = (props: SetupLinkRedirectProps) => {
  return (
    <div className="flex flex-col gap-4">
      <div>Redirecting link to what?</div>
      <div>Choose a link you'd to redirect to</div>
    </div>
  );
};
export default SetupLinkRedirect;
</file>

<file path="src/components/app/ShareDialog.tsx">
import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/ui/sheet";
import { SharingStage } from "@/components/app/SharingStage";
import { useBreakpoint } from "@/hooks/use-breakpoint";
type ShareDialogType = {
  slug?: any;
  id?: any;
  theme?: "light" | "dark";
  noPukla?: boolean;
  openDialog?: any;
  setOpenDialog?: any;
};
export const ShareDialog: React.FC<ShareDialogType> = ({
  openDialog,
  setOpenDialog,
  ...props
}) => {
  const size = useBreakpoint();
  if (size > 600) {
    return (
      <Dialog open={openDialog} onOpenChange={() => setOpenDialog(false)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>@{props.slug}</DialogTitle>
          </DialogHeader>
          <SharingStage puklaName={props.slug} />
        </DialogContent>
      </Dialog>
    );
  } else {
    return (
      <Sheet open={openDialog} onOpenChange={() => setOpenDialog(false)}>
        <SheetContent
          side="bottom"
          className="md:hawa-inset-x-[300px] hawa-rounded-t hawa-border"
        >
          <SheetHeader className="mb-4">
            <SheetTitle>@{props.slug}</SheetTitle>
          </SheetHeader>
          <SharingStage puklaName={props.slug} />
        </SheetContent>
      </Sheet>
    );
  }
};
</file>

<file path="src/components/app/ShareViaPlatformButton.tsx">
import React from "react";
import { ChevronRight } from "lucide-react";
import { useLocale } from "next-intl";
type ShareViaPlatformButtonType = {
  handleClick?: () => void;
  title?: string;
};
export const ShareViaPlatformButton: React.FC<ShareViaPlatformButtonType> = (
  props,
) => {
  const lang = useLocale();
  return (
    <div
      onClick={props.handleClick}
      className="flex cursor-pointer flex-row justify-between rounded p-4 transition-all hover:bg-gray-100"
    >
      <span>{props.title}</span>
      <ChevronRight className={lang === "ar" ? "rotate-180" : ""} />
    </div>
  );
};
</file>

<file path="src/components/app/SharingStage.tsx">
import { ChevronRight } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import { Button } from "@/ui/button";
export const SharingStage = (props: { puklaName: string }) => {
  const t = useTranslations();
  const lang = useLocale();
  const translationActionText = t("Share.shared_content", {
    puklaName: props.puklaName,
  });
  const twitterLink = `https://twitter.com/intent/tweet?text=${encodeURIComponent(
    translationActionText
  )}`;
  const linkedinLink = `https://www.linkedin.com/sharing/share-offsite/?url=https://puk.la/${props.puklaName}`;
  const facebookLink = `https://www.facebook.com/sharer.php?u=https://puk.la/${props.puklaName}`;
  const snapchatLink = `https://www.snapchat.com/scan?attachmentUrl=https://puk.la/${props.puklaName}`;
  const whatsappLink = `https://api.whatsapp.com/send/?text=${encodeURIComponent(
    translationActionText
  )}`;
  const mailLink = `mailto:?subject=Check%20out%20my%20Pukla!&body=${encodeURIComponent(
    translationActionText
  )}`;
  return (
    <div className="flex flex-col gap-2" dir={lang === "ar" ? "rtl" : "ltr"}>
      <ShareViaPlatformButton
        title={t("Share.twitter")}
        handleClick={() => window.open(twitterLink, "_blank")}
      />
      <ShareViaPlatformButton
        title={t("Share.snapchat")}
        handleClick={() =>
          window.open(snapchatLink, "SnapchatShare", "width=600,height=600")
        }
      />
      <ShareViaPlatformButton
        title={t("Share.whatsapp")}
        handleClick={() => window.open(whatsappLink, "_blank")}
      />
      <ShareViaPlatformButton
        title={t("Share.mail")}
        handleClick={() => window.open(mailLink, "_blank")}
      />
      <ShareViaPlatformButton
        title={t("Share.linkedin")}
        handleClick={() => window.open(linkedinLink, "_blank")}
      />
      <ShareViaPlatformButton
        title={t("Share.facebook")}
        handleClick={() => window.open(facebookLink, "_blank")}
      />
      {/* <ShareViaPlatformButton title={t("share-via.instagram")} /> */}
      <ShareViaPlatformButton
        title={t("Share.more-options")}
        handleClick={() => {
          if (navigator.share) {
            navigator
              .share({
                title: "Pukla",
                text: "Here's my updated Pukla",
                url: `${
                  process.env.NEXT_PUBLIC_PUKLA_PORTAL || "https://puk.la"
                }/${props.puklaName}`,
              })
              .then(() => console.log("Successful share"))
              .catch((error) => console.log("Error sharing:", error));
          } else {
            console.log("Web Share API is not supported in your browser.");
          }
        }}
      />
    </div>
  );
};
const ShareViaPlatformButton = (props: {
  handleClick?: () => void;
  title?: string;
}) => {
  const lang = useLocale();
  return (
    <Button
      onClick={props.handleClick}
      variant="ghost"
      autoFocus={false}
      className="text-start min-h-10 h-12 flex flex-row justify-between"
    >
      <span>{props.title}</span>{" "}
      <ChevronRight className={lang === "ar" ? "rotate-180" : ""} />
    </Button>
  );
};
</file>

<file path="src/components/app/SingleThemeThumbnail.tsx">
import React from "react";
import { useTranslations } from "next-intl";
import { Lock } from "lucide-react";
import { cn } from "@/lib/utils";
import { PuklaThemeProps } from "@/lib/types";
interface SingleThemeThumbnailProps {
  colors: PuklaThemeProps;
  isSelected: boolean;
  onSelect: () => void;
  sample_text?: string;
  locked?: boolean;
}
export function SingleThemeThumbnail({
  colors,
  isSelected,
  onSelect,
  sample_text,
  locked,
}: SingleThemeThumbnailProps) {
  const t = useTranslations();
  return (
    <button
      onClick={onSelect}
      className={cn(
        "group relative w-full rounded-lg border-2 transition-all duration-200 overflow-hidden",
        isSelected
          ? "ring-2 ring-primary border-transparent"
          : "hover:border-primary/50 border-transparent",
        locked ? "opacity-80" : "cursor-pointer",
      )}
    >
      {locked && (
        <div className="absolute end-2 top-2 z-20 flex items-center justify-center gap-2 rounded bg-black/75 p-1 px-2 text-sm text-white">
          <Lock className="w-4" /> <span>{t("General.upgrade")}</span>
        </div>
      )}
      <div
        className={cn(
          "p-4 space-y-3 transition-transform",
          isSelected && "scale-[0.95] ",
        )}
        style={{
          backgroundColor: colors.background_color,
        }}
      >
        <div className="w-12 h-12 mx-auto rounded-full bg-gray-300" />
        <div
          className="text-sm font-medium text-center truncate"
          style={{ color: colors.text_color }}
        >
          {sample_text}
        </div>
        <div className="space-y-2">
          {[1, 2, 3].map((i) => (
            <div
              key={i}
              className="h-8 rounded-md w-full transition-colors"
              style={{
                backgroundColor: colors.button_color,
                border: `1px solid ${colors.button_border_color || colors.button_color}`,
              }}
            />
          ))}
        </div>
      </div>
    </button>
  );
}
</file>

<file path="src/components/app/SocialPlatformsSection.tsx">
import { useTranslations } from "next-intl";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Plus, Trash2 } from "lucide-react";
import React from "react";
// UI
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/ui/select";
import { Input } from "@/ui/input";
import { Button } from "@/ui/button";
import { socialLinkOptions } from "@/ui/social-platforms";
// Define the form schema
const socialLinkSchema = z.object({
  platform: z.string().min(1, "Platform is required"),
  url: z.string().url("Please enter a valid URL"),
});
const formSchema = z.object({
  socials_position: z.enum(["top", "bottom"]),
  socialLinks: z.array(socialLinkSchema).max(6),
});
type FormValues = z.infer<typeof formSchema>;
interface SocialPlatformsSectionProps {
  initialLinks?: { platform: string; url: string }[];
  initialPosition?: "top" | "bottom";
  onUpdate: (data: { socialLinks: { platform: string; url: string }[]; socials_position: "top" | "bottom" }) => void;
  isPending?: boolean;
}
export interface SocialPlatformsSectionRef {
  submit: () => Promise<void>;
}
const SocialPlatformsSection = React.forwardRef<
  SocialPlatformsSectionRef,
  SocialPlatformsSectionProps
>(({ initialLinks = [], initialPosition = "top", onUpdate, isPending = false }, ref) => {
  const t = useTranslations();
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      socials_position: initialPosition,
      socialLinks: initialLinks.length > 0 ? initialLinks : [],
    },
  });
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "socialLinks",
  });
  // Update parent component when initialLinks or initialPosition change
  React.useEffect(() => {
    form.reset({
      socials_position: initialPosition,
      socialLinks: initialLinks,
    });
  }, [initialLinks, initialPosition, form]);
  // Expose the submit handler to parent through ref
  React.useImperativeHandle(
    ref,
    () => ({
      submit: () => {
        return form.handleSubmit((data) => {
          onUpdate({
            socialLinks: data.socialLinks,
            socials_position: data.socials_position,
          });
        })();
      },
    }),
    [form, onUpdate]
  );
  return (
    <Form {...form}>
      <form className="space-y-4 p-2">
        <div className="space-y-4">
          {/* Socials Position */}
          <FormField
            control={form.control}
            name="socials_position"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                <div className="space-y-0.5">
                  <FormLabel className="text-base text-primary">
                    {t("Settings.socials_position_title")}
                  </FormLabel>
                  <FormDescription>
                    {t("Settings.socials_position_description")}
                  </FormDescription>
                </div>
                <FormControl>
                  <Select
                    value={field.value}
                    onValueChange={field.onChange}
                    disabled={isPending}
                  >
                    <SelectTrigger className="w-[180px] select-none">
                      <SelectValue
                        placeholder={t("Settings.socials_position_title")}
                      />
                    </SelectTrigger>
                    <SelectContent className="select-none">
                      <SelectItem value="top">
                        {t("Settings.socials_position.top")}
                      </SelectItem>
                      <SelectItem value="bottom">
                        {t("Settings.socials_position.bottom")}
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          {fields.map((field, index) => (
            <div
              key={field.id}
              className="flex flex-col sm:flex-row gap-2 items-start sm:items-end"
            >
              <FormField
                control={form.control}
                name={`socialLinks.${index}.platform`}
                render={({ field }) => (
                  <FormItem className="flex-1">
                    <FormLabel>{t("Theme.platform")}</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue
                            placeholder={t("Theme.select_platform")}
                          />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {socialLinkOptions.map((option) => (
                          <SelectItem
                            key={option.platform}
                            value={option.platform}
                          >
                            <div className="flex items-center gap-2 py-2">
                              {option.icon}
                              {option.label}
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`socialLinks.${index}.url`}
                render={({ field }) => (
                  <FormItem className="flex-[2]">
                    <FormLabel>{t("Theme.url")}</FormLabel>
                    <FormControl>
                      <Input
                        dir="ltr"
                        placeholder={
                          socialLinkOptions.find(
                            (opt) =>
                              opt.platform ===
                              form.watch(`socialLinks.${index}.platform`)
                          )?.placeholder || "https://"
                        }
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="button"
                variant="destructive"
                size="icon"
                onClick={() => remove(index)}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          ))}
        </div>
        {fields.length < 6 && (
          <Button
            type="button"
            variant="outline"
            className="w-full"
            onClick={() => append({ platform: "", url: "" })}
          >
            <Plus className="me-2 h-4 w-4" />
            {t("Theme.add_social_link")}
          </Button>
        )}
      </form>
    </Form>
  );
});
SocialPlatformsSection.displayName = "SocialPlatformsSection";
export default SocialPlatformsSection;
</file>

<file path="src/components/app/TemplateEditor.tsx">
import { useState } from "react";
import { Printer, Save } from "lucide-react";
import { Button } from "@/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/ui/tabs";
import { Textarea } from "@/ui/textarea";
interface TemplateEditorProps {
  template: {
    id: string;
    name: string;
    type: "invoice" | "quote";
    content: any;
  };
  onSave?: (template_id: string, content: string) => void;
}
export default function TemplateEditor({ template, onSave }: TemplateEditorProps) {
  const [editedContent, setEditedContent] = useState(JSON.stringify(template.content, null, 2));
  const [activeTab, setActiveTab] = useState("preview");
  const handleSave = () => {
    if (onSave) {
      try {
        // Validate JSON before saving
        JSON.parse(editedContent);
        onSave(template.id, editedContent);
      } catch (error) {
        console.error("Invalid JSON:", error);
      }
    }
  };
  const handlePrint = () => {
    window.print();
  };
  const renderPreview = () => {
    try {
      const content = JSON.parse(editedContent);
      return (
        <div className="min-h-[600px] rounded-lg bg-white p-8 shadow print:p-0 print:shadow-none">
          <div className="mx-auto max-w-3xl">
            {/* Header */}
            <div className="mb-8 flex items-start justify-between print:mb-12">
              <div>
                <h1 className="text-3xl font-bold">{template.name}</h1>
                <div className="mt-2">
                  <span className="inline-block rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-800 print:bg-gray-50">
                    {template.type.charAt(0).toUpperCase() + template.type.slice(1)}
                  </span>
                </div>
              </div>
              {content.logo && (
                <img src={content.logo} alt="Company Logo" className="h-16 w-auto object-contain" />
              )}
            </div>
            {/* Company Details */}
            {content.company && (
              <div className="mb-8 print:mb-12">
                <h2 className="mb-2 text-lg font-semibold">Company Details</h2>
                <div className="text-gray-600">
                  <p>{content.company.name}</p>
                  <p>{content.company.address}</p>
                  <p>{content.company.contact}</p>
                </div>
              </div>
            )}
            {/* Client Details */}
            {content.client && (
              <div className="mb-8 print:mb-12">
                <h2 className="mb-2 text-lg font-semibold">Client Details</h2>
                <div className="text-gray-600">
                  <p>{content.client.name}</p>
                  <p>{content.client.address}</p>
                  <p>{content.client.contact}</p>
                </div>
              </div>
            )}
            {/* Items */}
            {content.items && content.items.length > 0 && (
              <div className="mb-8 print:mb-12">
                <h2 className="mb-4 text-lg font-semibold">Items</h2>
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="py-2 text-left">Description</th>
                      <th className="py-2 text-right">Quantity</th>
                      <th className="py-2 text-right">Price</th>
                      <th className="py-2 text-right">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {content.items.map((item: any, index: number) => (
                      <tr key={index} className="border-b">
                        <td className="py-2">{item.description}</td>
                        <td className="py-2 text-right">{item.quantity}</td>
                        <td className="py-2 text-right">${item.price}</td>
                        <td className="py-2 text-right">${item.quantity * item.price}</td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot>
                    <tr>
                      <td colSpan={3} className="py-4 text-right font-semibold">
                        Total:
                      </td>
                      <td className="py-4 text-right font-semibold">
                        $
                        {content.items.reduce(
                          (sum: number, item: any) => sum + item.quantity * item.price,
                          0,
                        )}
                      </td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
            {/* Notes */}
            {content.notes && (
              <div className="mb-8 print:mb-12">
                <h2 className="mb-2 text-lg font-semibold">Notes</h2>
                <p className="whitespace-pre-line text-gray-600">{content.notes}</p>
              </div>
            )}
            {/* Terms */}
            {content.terms && (
              <div className="border-t pt-4 text-sm text-gray-500">
                <h3 className="mb-1 font-semibold">Terms & Conditions</h3>
                <p className="whitespace-pre-line">{content.terms}</p>
              </div>
            )}
          </div>
        </div>
      );
    } catch (error) {
      return (
        <div className="rounded-lg bg-red-50 p-4 text-red-600">
          Invalid JSON format. Please check your template content.
        </div>
      );
    }
  };
  return (
    <div className="flex h-full flex-col">
      <div className="mb-4 flex items-center justify-between print:hidden">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList>
            <TabsTrigger value="preview">Preview</TabsTrigger>
            <TabsTrigger value="edit">Edit</TabsTrigger>
          </TabsList>
          <div className="absolute top-0 right-0 flex gap-2">
            <Button onClick={handlePrint} variant="outline" className="gap-2">
              <Printer className="h-4 w-4" />
              Print
            </Button>
            <Button onClick={handleSave} className="gap-2">
              <Save className="h-4 w-4" />
              Save Changes
            </Button>
          </div>
          <TabsContent value="preview" className="mt-4">
            {renderPreview()}
          </TabsContent>
          <TabsContent value="edit" className="mt-4">
            <Textarea
              value={editedContent}
              onChange={(e) => setEditedContent(e.target.value)}
              className="min-h-[600px] font-mono"
              placeholder="Enter template content in JSON format"
            />
          </TabsContent>
        </Tabs>
      </div>
      <style jsx global>{`
        @media print {
          body * {
            visibility: hidden;
          }
          .print\\:shadow-none {
            box-shadow: none !important;
          }
          #preview-content,
          #preview-content * {
            visibility: visible;
          }
          #preview-content {
            position: absolute;
            left: 0;
            top: 0;
          }
        }
      `}</style>
    </div>
  );
}
</file>

<file path="src/components/app/TemplateViewer.tsx">
import { useState } from "react";
import { Edit2 } from "lucide-react";
import { Button } from "@/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/ui/dialog";
interface TemplateViewerProps {
  template_id: string;
  pdfUrl: string;
  onEdit?: (template_id: string) => void;
}
export default function TemplateViewer({ template_id, pdfUrl, onEdit }: TemplateViewerProps) {
  const [isOpen, setIsOpen] = useState(false);
  const handleEdit = () => {
    if (onEdit) {
      onEdit(template_id);
    }
  };
  return (
    <>
      <Button variant="outline" onClick={() => setIsOpen(true)}>
        View PDF
      </Button>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="h-[80vh] max-w-6xl">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <span>Template Preview</span>
              <Button variant="outline" size="icon" onClick={handleEdit}>
                <Edit2 className="h-4 w-4" />
              </Button>
            </DialogTitle>
          </DialogHeader>
          <div className="h-full min-h-[60vh] w-full flex-1">
            <iframe
              src={`https://mozilla.github.io/pdf.js/web/viewer.html?file=${encodeURIComponent(pdfUrl)}`}
              className="h-full w-full rounded-lg border"
              title="PDF Viewer"
            />
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
</file>

<file path="src/components/app/UpdateAvatarDialog.tsx">
import { Upload } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import React from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
// UI
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/ui/dialog";
import { createClient } from "@/utils/supabase/component";
type UpdateAvatarDialogProps = {
  openDialog: boolean;
  setOpenDialog: (open: boolean) => void;
  puklaId: string;
  onAvatarUpdate: (url: string) => void;
};
export const UpdateAvatarDialog: React.FC<UpdateAvatarDialogProps> = ({
  openDialog,
  setOpenDialog,
  puklaId,
  onAvatarUpdate,
}) => {
  const supabase = createClient();
  const t = useTranslations();
  const lang = useLocale();
  const [uploading, setUploading] = React.useState(false);
  const fileInputRef = React.useRef<HTMLInputElement>(null);
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    try {
      setUploading(true);
      // Upload file to Supabase storage
      const fileExt = file.name.split(".").pop();
      const fileName = `${puklaId}-${Date.now()}.${fileExt}`;
      const { data, error } = await supabase.storage.from("pukla_avatars").upload(fileName, file);
      if (error) throw error;
      // Get public URL
      const {
        data: { publicUrl },
      } = supabase.storage.from("pukla_avatars").getPublicUrl(fileName);
      onAvatarUpdate(publicUrl);
      setOpenDialog(false);
      toast.success(t("MyPuklas.avatar_updated"));
    } catch (error) {
      console.error("Error uploading avatar:", error);
      toast.error(t("MyPuklas.error_uploading_avatar"));
    } finally {
      setUploading(false);
    }
  };
  return (
    <Dialog open={openDialog} onOpenChange={setOpenDialog}>
      <DialogContent className="sm:max-w-md" dir={lang === "ar" ? "rtl" : "ltr"}>
        <DialogHeader>
          <DialogTitle>{t("MyPuklas.update_avatar")}</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col items-center gap-4">
          <input
            type="file"
            ref={fileInputRef}
            className="hidden"
            accept="image/*"
            onChange={handleFileUpload}
          />
          <Button
            onClick={() => fileInputRef.current?.click()}
            disabled={uploading}
            className="w-full"
          >
            <Upload className="me-2 h-4 w-4" />
            {uploading ? t("MyPuklas.uploading") : t("MyPuklas.choose_file")}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};
</file>

<file path="src/components/app/UpgradeDialog.tsx">
import { Check, Zap } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
//  UI
import {
  DialogTitle,
  DialogHeader,
  DialogContent,
  Dialog,
  DialogDescription,
  DialogFooter,
} from "@/ui/dialog";
import { Button } from "@/ui/button";
type UpgradeDialogProps = {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onUpgrade: () => void;
};
const UpgradeDialog = ({
  open,
  onOpenChange,
  onUpgrade,
}: UpgradeDialogProps) => {
  const t = useTranslations();
  const lang = useLocale();
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent
        className="sm:max-w-[425px]"
        dir={lang === "ar" ? "rtl" : "ltr"}
      >
        <DialogHeader>
          <DialogTitle>{t("Billing.upgrade_dialog.title")}</DialogTitle>
          <DialogDescription>
            {t("Billing.upgrade_dialog.description")}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-[25px_1fr] items-start gap-2 text-sm">
            <Check className="h-5 w-5 text-primary" />
            <span>{t("Billing.upgrade_dialog.unlimited_puklas")}</span>
          </div>
          <div className="grid grid-cols-[25px_1fr] items-start gap-2 text-sm">
            <Check className="h-5 w-5 text-primary" />
            <span>{t("Billing.upgrade_dialog.custom_design_and_colors")}</span>
          </div>
          <div className="grid grid-cols-[25px_1fr] items-start gap-2 text-sm">
            <Check className="h-5 w-5 text-primary" />
            <span>{t("Billing.upgrade_dialog.advanced_analytics")}</span>
          </div>
        </div>
        <DialogFooter>
          <Button type="submit" onClick={onUpgrade}>
            <Zap className="me-2 h-4 w-4" />
            {t("Billing.upgrade_now")}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
export default UpgradeDialog;
</file>

<file path="src/components/forms/address-form-section.tsx">
import { MapPin } from "lucide-react";
import { useTranslations } from "next-intl";
import type { Control } from "react-hook-form";
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Badge } from "@/components/ui/badge";
import IconButton from "@/components/ui/icon-button";
import NumberInput from "@/components/ui/number-input";
import { Separator } from "@/components/ui/separator";
// Define the shape of the form values this section expects
// Adjust this based on the actual full form schema if needed
interface AddressFormValues {
  short_address?: string;
  building_number?: string;
  street_name?: string;
  city?: string;
  region?: string;
  country?: string;
  zip_code?: string;
  additional_number?: string;
}
interface AddressFormSectionProps {
  control: Control<any>; // Use Control<AddressFormValues> or Control<any>
  isLoading?: boolean;
  title: string;
}
export function AddressFormSection({ control, isLoading = false, title }: AddressFormSectionProps) {
  const t = useTranslations();
  return (
    <div>
      <div className="bg-muted top-0 z-10 flex !min-h-12 items-center justify-between gap-4 border-y border-b px-2">
        <h2 className="ms-2 text-xl font-bold">{title}</h2>
      </div>
      <div className="mx-auto grid max-w-2xl grid-cols-1 gap-4 p-4 md:grid-cols-2">
        <FormField
          control={control}
          name="short_address"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.short_address.label")}</FormLabel>
              <FormControl>
                <div className="relative">
                  <Input
                    disabled={isLoading}
                    placeholder={t("Companies.form.short_address.placeholder")}
                    {...field}
                    value={field.value || ""} // Ensure controlled component
                  />
                  <IconButton
                    size="icon_sm"
                    buttonType="button"
                    contentClassName="flex flex-col gap-1 max-w-40"
                    onClick={(e) => e.preventDefault()}
                    icon={<MapPin className="size-6" />}
                    label={
                      <div className="relative">
                        <Badge className="absolute -end-4 -top-2 rounded-sm rounded-e-none !rounded-t-none bg-blue-200 p-1 px-2 text-[10px] text-black dark:bg-blue-800 dark:text-white">
                          {t("General.soon")}
                        </Badge>
                        <p className="text-sm font-medium">
                          {t("Companies.form.short_address.explainer.title")}
                        </p>
                        <p className="text-muted-foreground text-xs">
                          {t("Companies.form.short_address.explainer.description")}
                        </p>
                      </div>
                    }
                    className="absolute end-0.5 top-0.5"
                  />
                </div>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="building_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.building_number.label")}</FormLabel>
              <FormControl>
                <Input
                  disabled={isLoading}
                  placeholder={t("Companies.form.building_number.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="street_name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.street_name.label")}</FormLabel>
              <FormControl>
                <Input
                  disabled={isLoading}
                  placeholder={t("Companies.form.street_name.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="city"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.city.label")}</FormLabel>
              <FormControl>
                <Input
                  disabled={isLoading}
                  placeholder={t("Companies.form.city.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="region"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.region.label")}</FormLabel>
              <FormControl>
                <Input
                  disabled={isLoading}
                  placeholder={t("Companies.form.region.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="country"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.country.label")}</FormLabel>
              <FormControl>
                <Input
                  disabled={isLoading}
                  placeholder={t("Companies.form.country.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="zip_code"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.zip_code.label")}</FormLabel>
              <FormControl>
                <NumberInput
                  disabled={isLoading}
                  placeholder={t("Companies.form.zip_code.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="additional_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Companies.form.additional_number.label")}</FormLabel>
              <FormControl>
                <NumberInput
                  disabled={isLoading}
                  placeholder={t("Companies.form.additional_number.placeholder")}
                  {...field}
                  value={field.value || ""} // Ensure controlled component
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    </div>
  );
}
</file>

<file path="src/components/forms/address-schema.ts">
import * as z from "zod";
/**
 * Creates a reusable Zod schema for address fields.
 * @param t The translation function (e.g., from next-intl).
 * @returns A Zod object shape for address validation.
 */
export const createAddressSchema = (t: (key: string) => string) =>
  z.object({
    short_address: z.string().optional(),
    building_number: z.string().optional(),
    street_name: z.string().optional(),
    city: z.string().optional(),
    region: z.string().optional(),
    country: z.string().optional(),
    zip_code: z.string().optional(),
    additional_number: z.string().optional(),
  });
// You can also export the inferred type if needed elsewhere
export type AddressSchemaValues = z.infer<ReturnType<typeof createAddressSchema>>;
</file>

<file path="src/components/landing/AsymmetricalFeatureSection.tsx">
import { Button } from "@/ui/button";
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
import { cn } from "@/lib/utils";
type AsymmetricalFeatureSectionProps = {
  superTitle?: string;
  title?: string;
  subtitle?: string;
  buttonText?: string;
  hideButton?: boolean;
  side?: "right" | "left";
  children?: any;
  additionalContent?: any;
};
const AsymmetricalFeatureSection = (props: AsymmetricalFeatureSectionProps) => {
  return (
    <div className="flex h-full min-h-[500px] justify-center border-y">
      <div
        className={cn(
          "flex h-full min-h-[500px] w-full max-w-5xl flex-col items-center justify-between self-center px-8 py-20 lg:px-8",
          {
            "md:flex-row": props.side === "right",
            "md:flex-row-reverse": props.side === "left",
          },
        )}
      >
        <div className="flex w-full max-w-lg flex-col justify-center gap-4">
          <CustomMotionDiv delay={0.2} className="text-sm font-bold">
            {props.superTitle}
          </CustomMotionDiv>
          <CustomMotionDiv
            delay={0.4}
            className="text-center text-5xl leading-normal font-extrabold md:text-start"
          >
            {props.title}
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.6} className="text-center text-lg md:text-start">
            {props.subtitle}
          </CustomMotionDiv>
          {!props.hideButton && (
            <CustomMotionDiv delay={0.8} className="text-sm">
              <Button aria-label={props.buttonText} className="w-fit">
                {props.buttonText}
              </Button>
            </CustomMotionDiv>
          )}
          {props.additionalContent && (
            <CustomMotionDiv
              delay={1}
              className="flex flex-col items-center justify-center md:items-start"
            >
              {props.additionalContent}
            </CustomMotionDiv>
          )}
        </div>
        {props.children}
      </div>
    </div>
  );
};
export default AsymmetricalFeatureSection;
</file>

<file path="src/components/landing/BottomCTA.tsx">
import Link from "next/link";
import { Button } from "@/ui/button";
type BottomCTAProps = {
  title: string;
  subtitle: string;
  primaryActionText: string;
  primaryActionSlug: string;
  secondaryActionText?: string;
  secondaryActionSlug?: string;
};
const BottomCTA = (props: BottomCTAProps) => (
  <div className="flex w-full flex-col items-center justify-center gap-10 border-t p-10 md:p-24">
    <div className="text-center text-2xl font-bold">{props.title}</div>
    <div className="text-center">{props.subtitle}</div>
    <div className="flex flex-row gap-6">
      <Link href={props.primaryActionSlug}>
        <Button aria-label={props.primaryActionText}>
          {props.primaryActionText}
        </Button>
      </Link>
      {props.secondaryActionText && (
        <Link href={props.secondaryActionSlug || ""}>
          <Button variant={"outline"} aria-label={props.secondaryActionText}>
            {props.secondaryActionText}
          </Button>
        </Link>
      )}
    </div>
  </div>
);
export default BottomCTA;
</file>

<file path="src/components/landing/ContactForm.tsx">
import React from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Resolver } from "react-hook-form";
// UI
import { Button } from "@/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/ui/card";
import { Input } from "@/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/ui/form";
import { Textarea } from "@/ui/textarea";
// Utils
import { cn } from "@/lib/utils";
// Types
import { TextInputType } from "@/lib/types";
type ContactFormData = { name: string; email: string; message: string } & {
  [key: string]: string;
};
type CustomField = {
  label: string;
  type: "text" | "number" | "select";
  name: string;
  placeholder?: string;
  options?: {
    label: string;
    value: string;
  }[];
};
type ContactFormProps = {
  cardless?: boolean;
  formId?: string;
  formAutoComplete?: "on" | "off";
  clearOnSubmit?: boolean;
  size?: "sm" | "default";
  onSubmit: (e: ContactFormData) => void;
  customFields?: CustomField[];
  showSuccess?: boolean;
  classNames?: {
    submitButton?: string;
    container?: string;
  };
  texts?: {
    submit: string;
    name: TextInputType;
    email: TextInputType;
    message: TextInputType;
    success?: {
      title?: string;
      description?: string;
    };
  };
};
export const ContactForm: React.FC<ContactFormProps> = ({
  cardless,
  size = "default",
  texts,
  formId,
  formAutoComplete = "off",
  onSubmit,
  customFields,
  classNames,
  clearOnSubmit = true,
  ...props
}) => {
  const customFieldsSchema = z.object({
    ...customFields?.reduce(
      (acc: { [key: string]: z.ZodType<any, any> }, curr: CustomField) => {
        switch (curr.type) {
          case "text":
            acc[curr.name] = z.string().optional().default("");
            break;
          case "number":
            acc[curr.name] = z.string().optional().default("");
            break;
          case "select":
            acc[curr.name] = z.string().optional().default("");
            break;
          default:
            break;
        }
        return acc;
      },
      {}
    ),
  });
  const contactFormSchema = z.object({
    name: z
      .string({ required_error: texts?.name.required || "Name is required" })
      .min(1, texts?.name.required || "Name is required")
      .default(""),
    email: z
      .string({ required_error: texts?.email?.required || "Email is required" })
      .min(1, { message: texts?.email?.required || "Email is required" })
      .email({ message: texts?.email?.invalid || "Invalid email" })
      .default(""),
    message: z
      .string({
        required_error: texts?.message.required || "Message is required",
      })
      .min(10, texts?.message.invalid || "Message is too short")
      .default(""),
  });
  const customFieldsDefaultValues = customFields?.reduce(
    (acc: { [key: string]: any }, curr: CustomField) => {
      acc[curr.name] = "";
      return acc;
    },
    {}
  );
  const MainSchema = contactFormSchema.merge(customFieldsSchema);
  const form = useForm<ContactFormData>({
    mode: "all",
    resolver: zodResolver(MainSchema) as unknown as Resolver<ContactFormData>,
    defaultValues: {
      name: "",
      email: "",
      message: "",
      ...customFieldsDefaultValues,
    },
  });
  const SubmitForm = async (data: ContactFormData) => {
    const isValid = await form.trigger();
    if (!isValid) {
      return;
    }
    if (onSubmit) {
      onSubmit(data);
      if (clearOnSubmit) {
        form.reset();
      }
    } else {
      console.log("Form is submitted but onSubmit prop is missing");
    }
  };
  return (
    <Card
      className={cn(
        "w-full",
        cardless && "border-none bg-transparent shadow-none drop-shadow-none",
        classNames?.container
      )}
      style={cardless ? { boxShadow: "none" } : undefined}
    >
      <CardContent
        //   headless
        className={cn(cardless ? "!p-0" : "", "pt-6")}
      >
        {props.showSuccess ? (
          <CardHeader>
            <CardTitle>{texts?.success?.title || "Message Sent! 🎉"}</CardTitle>
            <CardDescription>
              {texts?.success?.description ||
                "Thank you for your submission, we will get back to you as soon as possible."}
            </CardDescription>
          </CardHeader>
        ) : (
          <Form {...form}>
            <form
              noValidate
              onSubmit={form.handleSubmit(SubmitForm)}
              className="space-y-2"
              id={formId}
              autoComplete={formAutoComplete}
            >
              <div
                className={cn("flex items-start justify-start gap-2", {
                  "flex-row": size === "default",
                  "flex-col": size === "sm",
                })}
              >
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormLabel>{texts?.name.label}</FormLabel>
                      <FormControl>
                        <Input
                          placeholder={texts?.name.placeholder}
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormLabel>{texts?.email.label}</FormLabel>
                      <FormControl>
                        <Input
                          placeholder={texts?.email.placeholder}
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <FormField
                control={form.control}
                name="message"
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel>{texts?.message.label}</FormLabel>
                    <FormControl>
                      <Textarea
                        className="min-h-40 h-ful"
                        placeholder={texts?.message.placeholder}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="submit"
                className={cn("w-full", classNames?.submitButton)}
              >
                {texts?.submit || "Submit"}
              </Button>
            </form>
          </Form>
        )}
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/components/landing/CustomMotionDiv.tsx">
import React, { useEffect, useRef, useState } from "react";
import { motion, useInView, MotionProps } from "motion/react";
type CustomMotionDivProps = MotionProps &
  React.HTMLAttributes<HTMLDivElement> & {
    delay?: number;
  };
const CustomMotionDiv: React.FC<CustomMotionDivProps> = ({
  children,
  delay = 0,
  ...props
}: CustomMotionDivProps) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true });
  const [isVisible, setIsVisible] = useState(false);
  useEffect(() => {
    if (isInView) {
      setIsVisible(true);
    }
  }, [isInView]);
  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 20 }}
      animate={isVisible ? { opacity: 1, y: 0 } : {}}
      transition={{
        delay,
        ease: [0.22, 0.61, 0.36, 1],
        ...props.transition
      }}
      className={props.className}
    >
      {children}
    </motion.div>
  );
};
export default CustomMotionDiv;
</file>

<file path="src/components/landing/CustomPageMeta.tsx">
import React from "react";
import { useTranslations } from "next-intl";
import Head from "next/head";
interface MetaProps {
  title?: string;
  description?: string;
  keywords?: string;
  author?: string;
}
const CustomPageMeta: React.FC<MetaProps> = ({ title, description, keywords, author }) => {
  const t = useTranslations();
  const defaultTitle = t("SEO.landing.title");
  const defaultDescription = t("SEO.landing.description");
  const defaultKeywords = t("SEO.landing.keywords");
  const defaultAuthor = t("SEO.landing.author");
  return (
    <Head>
      <title>{`${t("General.tanad")} | ${title || defaultTitle}`}</title>
      <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      <meta charSet="utf-8" />
      <meta name="description" content={description || defaultDescription} />
      {keywords && <meta name="keywords" content={keywords || defaultKeywords} />}
      {author && <meta name="author" content={author || defaultAuthor} />}
    </Head>
  );
};
export default CustomPageMeta;
</file>

<file path="src/components/landing/departments-features.tsx">
import { Button } from "@/ui/button";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { Tabs, TabsList, TabsTrigger, TabsContent, TabsContents } from "@/ui/tabs";
export const DepartmentsFeatures = () => {
  return (
    <Tabs defaultValue="account" className="bg-muted mx-auto rounded-lg mb-24">
      <TabsList className="gap-4">
        <TabsTrigger value="invoicing">Invoicing</TabsTrigger>
        <TabsTrigger value="crm">CRM</TabsTrigger>
        <TabsTrigger value="accounting">Accounting</TabsTrigger>
        <TabsTrigger value="inventory">Inventory</TabsTrigger>
        <TabsTrigger value="human-resources">Human Resources</TabsTrigger>
        <TabsTrigger value="administration">Administration</TabsTrigger>
      </TabsList>
      <TabsContents className="bg-background mx-1 -mt-2 mb-1 h-full rounded-sm">
        <TabsContent value="invoicing" className="space-y-6 p-6">
          <p className="text-muted-foreground text-sm">
            Make changes to your account here. Click save when you&apos;re done.
          </p>
          <div className="space-y-3">
            <div className="space-y-1">
              <Label htmlFor="name">Name</Label>
              <Input id="name" defaultValue="Pedro Duarte" />
            </div>
            <div className="space-y-1">
              <Label htmlFor="username">Username</Label>
              <Input id="username" defaultValue="@peduarte" />
            </div>
          </div>
          <Button>Save changes</Button>
        </TabsContent>
        <TabsContent value="crm" className="space-y-6 p-6">
          <p className="text-muted-foreground text-sm">
            Change your password here. After saving, you&apos;ll be logged out.
          </p>
          <div className="space-y-3">
            <div className="space-y-1">
              <Label htmlFor="current">Current password</Label>
              <Input id="current" type="password" />
            </div>
            <div className="space-y-1">
              <Label htmlFor="new">New password</Label>
              <Input id="new" type="password" />
            </div>
            <div className="space-y-1">
              <Label htmlFor="confirm">Confirm password</Label>
              <Input id="confirm" type="password" />
            </div>
          </div>
          <Button>Save password</Button>
        </TabsContent>
      </TabsContents>
    </Tabs>
  );
};
</file>

<file path="src/components/landing/FakeChart.tsx">
"use client";
import { Bar, BarChart, CartesianGrid, XAxis } from "recharts";
import { ChartConfig, ChartContainer } from "@/ui/chart";
const chartData = [
  { month: "January", desktop: 186, mobile: 80 },
  { month: "February", desktop: 305, mobile: 200 },
  { month: "March", desktop: 237, mobile: 120 },
  { month: "April", desktop: 73, mobile: 190 },
  { month: "May", desktop: 209, mobile: 130 },
  { month: "June", desktop: 214, mobile: 140 },
];
const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "var(--chart-1)",
  },
  mobile: {
    label: "Mobile",
    color: "var(--chart-2)",
  },
} satisfies ChartConfig;
export function FakeChart() {
  return (
    <ChartContainer config={chartConfig}>
      <BarChart accessibilityLayer data={chartData}>
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="month"
          tickLine={false}
          tickMargin={10}
          axisLine={false}
          tickFormatter={(value) => value.slice(0, 3)}
        />
        <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
        <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
      </BarChart>
    </ChartContainer>
  );
}
</file>

<file path="src/components/landing/FeatureCard.tsx">
import React from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/ui/card";
import { Chip } from "@/ui/chip";
import { cn } from "@/lib/utils";
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
type FeatureCardProps = React.HTMLAttributes<HTMLDivElement> & {
  icon?: React.ReactNode;
  index?: any;
  subtitle?: string;
  clickable?: boolean;
  soon?: boolean;
  soonText?: string;
};
const FeatureCard: React.FC<FeatureCardProps> = ({ id, index, ...props }) => {
  return (
    <CustomMotionDiv transition={{ delay: 0.1 * index }} className="w-full">
      <Card
        id={id}
        className={cn(
          "w-full bg-background h-full overflow-clip",
          props.className,
        )}
        // clickable={props.clickable}
      >
        <CardHeader className="relative">
          {props.soon && (
            <div className="absolute end-4 top-4">
              <Chip label={props.soonText || ""} />
            </div>
          )}
          <CustomMotionDiv transition={{ delay: 0.1 }}>
            {props.icon}
          </CustomMotionDiv>
          <CustomMotionDiv transition={{ delay: 0.2 }}>
            <CardTitle>{props.title}</CardTitle>
          </CustomMotionDiv>
          <CustomMotionDiv transition={{ delay: 0.3 }}>
            <CardDescription>{props.subtitle}</CardDescription>
          </CustomMotionDiv>
        </CardHeader>
      </Card>
    </CustomMotionDiv>
  );
};
export default FeatureCard;
</file>

<file path="src/components/landing/features-section.tsx">
import {
  ArrowUpRight,
  Cloud,
  DollarSign,
  Heart,
  HeartHandshake,
  HelpCircle,
  Terminal,
} from "lucide-react";
import { cn } from "@/lib/utils";
export function FeaturesSection() {
  const features = [
    {
      title: "Built for developers",
      description: "Built for engineers, developers, dreamers, thinkers and doers.",
      icon: <Terminal />,
    },
    {
      title: "Ease of use",
      description: "It's as easy as using an Apple, and as expensive as buying one.",
      icon: <ArrowUpRight />,
    },
    {
      title: "Pricing like no other",
      description: "Our prices are best in the market. No cap, no lock, no credit card required.",
      icon: <DollarSign />,
    },
    {
      title: "100% Uptime guarantee",
      description: "We just cannot be taken down by anyone.",
      icon: <Cloud />,
    },
    {
      title: "Multi-tenant Architecture",
      description: "You can simply share passwords instead of buying new seats",
      icon: <ArrowUpRight />,
    },
    {
      title: "24/7 Customer Support",
      description: "We are available a 100% of the time. Atleast our AI Agents are.",
      icon: <HelpCircle />,
    },
    {
      title: "Money back guarantee",
      description: "If you donot like EveryAI, we will convince you to like us.",
      icon: <ArrowUpRight />,
    },
    {
      title: "And everything else",
      description: "I just ran out of copy ideas. Accept my sincere apologies",
      icon: <Heart />,
    },
  ];
  return (
    <div className="relative z-10 mx-auto grid max-w-7xl grid-cols-1 py-10 md:grid-cols-2 lg:grid-cols-4">
      {features.map((feature, index) => (
        <Feature key={feature.title} {...feature} index={index} />
      ))}
    </div>
  );
}
const Feature = ({
  title,
  description,
  icon,
  index,
}: {
  title: string;
  description: string;
  icon: React.ReactNode;
  index: number;
}) => {
  return (
    <div
      className={cn(
        "group/feature relative flex flex-col py-10 lg:border-r dark:border-neutral-800",
        (index === 0 || index === 4) && "lg:border-l dark:border-neutral-800",
        index < 4 && "lg:border-b dark:border-neutral-800",
      )}
    >
      {index < 4 && (
        <div className="pointer-events-none absolute inset-0 h-full w-full bg-gradient-to-t from-neutral-100 to-transparent opacity-0 transition duration-200 group-hover/feature:opacity-100 dark:from-neutral-800" />
      )}
      {index >= 4 && (
        <div className="pointer-events-none absolute inset-0 h-full w-full bg-gradient-to-b from-neutral-100 to-transparent opacity-0 transition duration-200 group-hover/feature:opacity-100 dark:from-neutral-800" />
      )}
      <div className="relative z-10 mb-4 px-10 text-neutral-600 dark:text-neutral-400">{icon}</div>
      <div className="relative z-10 mb-2 px-10 text-lg font-bold">
        <div className="absolute inset-y-0 left-0 h-6 w-1 origin-center rounded-tr-full rounded-br-full bg-neutral-300 transition-all duration-200 group-hover/feature:h-8 group-hover/feature:bg-blue-500 dark:bg-neutral-700" />
        <span className="inline-block text-neutral-800 transition duration-200 group-hover/feature:translate-x-2 dark:text-neutral-100">
          {title}
        </span>
      </div>
      <p className="relative z-10 max-w-xs px-10 text-sm text-neutral-600 dark:text-neutral-300">
        {description}
      </p>
    </div>
  );
};
</file>

<file path="src/components/landing/Features.tsx">
import { useTranslations } from "next-intl";
import {
  BarChart3,
  Sparkle,
  Paintbrush,
  MonitorSmartphone,
} from "lucide-react";
import { BentoCard, BentoGrid } from "@/ui/bento-grid";
import { FakeChart } from "@/components/landing/FakeChart";
import { Marquee } from "@/ui/marquee";
import ThumbnailImage from "@/components/landing/ThumbnailImage";
import {
  cn,
  appIcons1,
  appIcons2,
  appIcons3,
  appIcons4,
  thumbnails,
} from "@/lib/utils";
export default function Features() {
  const t = useTranslations();
  const features = [
    {
      name: t("Landing.feature-highlight-1.title"),
      description: t("Landing.feature-highlight-1.subtitle"),
      icon: Paintbrush,
      className: "col-span-2 md:col-span-2 lg:col-span-2",
      cta: t("General.get_started"),
      goto: "/dashboard",
      background: (
        <Marquee
          dir="ltr"
          pauseOnHover={false}
          className="absolute top-10 [--duration:20s] [mask-image:linear-gradient(to_top,transparent_30%,#000_100%)] "
        >
          {thumbnails.map((thumb, i) => {
            return (
              <ThumbnailImage
                skeletonClassname="absolute start-0 top-0 z-50 h-[258px] w-[150px]"
                key={i}
                src={thumb}
                width={150}
                height={258}
                priority={i < 4}
                imageClassname="h-[258px] w-[150px] object-cover"
                alt={`Thumbnail ${i}`}
              />
            );
          })}
        </Marquee>
      ),
    },
    {
      name: t("Landing.feature-highlight-2.title"),
      description: t("Landing.feature-highlight-2.subtitle"),
      icon: Sparkle,
      className: "col-span-2 md:col-span-2 lg:col-span-2",
      cta: t("General.get_started"),
      background: (
        <div
          dir="ltr"
          className="flex  absolute top-0 flex-col gap-0 [mask-image:linear-gradient(to_top,transparent_10%,#000_100%)]"
        >
          <Marquee pauseOnHover={false}>
            {appIcons1.map((thumb, i) => {
              return (
                <ThumbnailImage
                  key={i}
                  height={40}
                  width={40}
                  alt={`Thumbnail ${i}`}
                  imageClassname="contrast-0 h-10 w-10 object-contain"
                  src={`https://sikka-images.s3.ap-southeast-1.amazonaws.com/platforms/logo-${thumb.name}.png`}
                />
              );
            })}
          </Marquee>
          <Marquee reverse pauseOnHover={false}>
            {appIcons2.map((thumb, i) => {
              return (
                <ThumbnailImage
                  key={i}
                  height={40}
                  width={thumb.size === "square" ? 40 : 40}
                  imageClassname="contrast-0 h-10 w-10 object-contain"
                  src={`https://sikka-images.s3.ap-southeast-1.amazonaws.com/platforms/logo-${thumb.name}.png`}
                  alt={`Thumbnail ${i}`}
                />
              );
            })}
          </Marquee>
          <Marquee pauseOnHover={false} className="[--duration:30s]">
            {appIcons3.map((thumb, i) => {
              return (
                <ThumbnailImage
                  imageClassname="contrast-0 h-10 w-auto"
                  key={i}
                  height={50}
                  width={70}
                  src={`https://sikka-images.s3.ap-southeast-1.amazonaws.com/platforms/logo-${thumb.name}.png`}
                  alt={`Thumbnail ${i}`}
                />
              );
            })}
          </Marquee>
          <Marquee reverse pauseOnHover={false} className="[--duration:30s]">
            {appIcons4.map((thumb, i) => {
              return (
                <ThumbnailImage
                  imageClassname="contrast-0 h-10 w-auto"
                  key={i}
                  height={50}
                  width={70}
                  src={`https://sikka-images.s3.ap-southeast-1.amazonaws.com/platforms/logo-${thumb.name}.png`}
                  alt={`Thumbnail ${i}`}
                />
              );
            })}
          </Marquee>
        </div>
      ),
      goto: "/dashboard",
    },
    {
      name: t("Features.feature-6.title"),
      description: t("Features.feature-6.description"),
      icon: MonitorSmartphone,
      className: "col-span-2 md:col-span-2 lg:col-span-2",
      cta: t("General.get_started"),
      goto: "/dashboard",
    },
    {
      name: t("Features.feature-7.title"),
      description: t("Features.feature-7.description"),
      icon: BarChart3,
      className: "col-span-2 md:col-span-2 lg:col-span-2",
      cta: t("General.get_started"),
      background: (
        <div className="h-[300px] w-full absolute top-10 [--duration:20s] [mask-image:linear-gradient(to_top,transparent_40%,#000_100%)]">
          <FakeChart />
        </div>
      ),
      goto: "/analytics",
    },
  ];
  return (
    <div className="relative py-24 pt-0 sm:py-32 bg-background" id="features">
      <div className="mx-auto max-w-7xl px-6 lg:px-8 z-[100]">
        <div className="mx-auto max-w-2xl text-center">
          <h2 className="text-base font-semibold leading-7 text-primary">
            {t("Features.title")}
          </h2>
          <p className="mt-2 text-3xl font-bold tracking-tight text-primary sm:text-4xl">
            {t("Features.subtitle")}
          </p>
        </div>
        <div className="mx-auto mt-16 sm:mt-20 lg:mt-24 lg:max-w-4xl">
          <BentoGrid className="lg:grid-rows-2 md:grid-cols-4 grid-cols-1">
            {features.map((feature) => (
              <BentoCard
                className={cn(
                  feature.className,
                  "z-10 dark:!border-white/20 min-h-[350px] ",
                )}
                cta={feature.cta}
                href={feature.goto}
                background={feature.background}
                key={feature.name}
                name={feature.name}
                description={feature.description}
                Icon={feature.icon}
              />
            ))}
          </BentoGrid>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/landing/FloatingPuklas.tsx">
import { motion, useScroll, useSpring, useTransform } from "motion/react";
import { useMediaQuery } from "@/hooks/use-media-query";
const FloatingPuklas = () => {
  const { scrollYProgress } = useScroll();
  const scrollMotionSpring = useSpring(scrollYProgress, {
    stiffness: 100,
    bounce: 0,
    mass: 0.1,
    duration: 0.25,
  });
  const isDesktop = useMediaQuery("(min-width: 768px)");
  const centerYPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [isDesktop ? 100 : -100, -300],
  );
  const innerYPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [isDesktop ? 100 : -100, 300],
  );
  const outerYPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [isDesktop ? 100 : -100, 500],
  );
  // Different X positions for mobile and desktop
  const leftInnerXPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? -900 : -500],
  );
  const leftOuterXPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? -1800 : -1000],
  );
  const rightInnerXPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? 900 : 500],
  );
  const rightOuterXPosition = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? 1800 : 1000],
  );
  const boxWidth = isDesktop ? 400 : 200;
  const boxHeight = isDesktop ? 800 : 400;
  const floatingImageClassName =
    "absolute drop-shadow-2xl object-cover rounded-xl";
  // Add rotation transforms
  const leftOuterRotation = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? -30 : -20],
  );
  const leftInnerRotation = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? -15 : -10],
  );
  const rightInnerRotation = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? 15 : 10],
  );
  const rightOuterRotation = useTransform(
    scrollMotionSpring,
    [0, 1],
    [0, isDesktop ? 30 : 20],
  );
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5, delay: 0.5 }}
      className="w-full h-full relative flex justify-center items-center min-h-[800px] overflow-hidden"
    >
      {/* Left outer box */}
      <motion.img
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        src="/assets/had_hero_mockup.png"
        className={floatingImageClassName}
        style={{
          willChange: "transform",
          y: outerYPosition,
          x: leftOuterXPosition,
          width: boxWidth,
          height: boxHeight,
          rotate: leftOuterRotation,
        }}
      />
      {/* Left inner box */}
      <motion.img
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        src="/assets/surub_hero_mockup.png"
        className={floatingImageClassName}
        style={{
          willChange: "transform",
          y: innerYPosition,
          x: leftInnerXPosition,
          width: boxWidth,
          height: boxHeight,
          rotate: leftInnerRotation,
        }}
      />
      {/* Right outer box */}
      <motion.img
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        src="/assets/aburito_hero_mockup.png"
        className={floatingImageClassName}
        style={{
          willChange: "transform",
          y: outerYPosition,
          x: rightOuterXPosition,
          width: boxWidth,
          height: boxHeight,
          rotate: rightOuterRotation,
        }}
      />
      {/* Right inner box */}
      <motion.img
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        src="/assets/sikka_hero_mockup.png"
        className={floatingImageClassName}
        style={{
          willChange: "transform",
          y: innerYPosition,
          x: rightInnerXPosition,
          width: boxWidth,
          height: boxHeight,
          rotate: rightInnerRotation,
        }}
      />
      {/* Center box */}
      <motion.img
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        src="/assets/pukla_hero_mockup.png"
        className={floatingImageClassName}
        style={{
          willChange: "transform",
          y: centerYPosition,
          width: boxWidth,
          height: boxHeight,
        }}
      />
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        className="absolute top-0 bottom-0 w-full h-full bg-background [mask-image:linear-gradient(to_bottom,transparent_10%,#000_100%)]"
      />
    </motion.div>
  );
};
export default FloatingPuklas;
</file>

<file path="src/components/landing/Footer.tsx">
import { useTranslations, useLocale } from "next-intl";
import { useTheme } from "next-themes";
import getConfig from "next/config";
import Image from "next/image";
import Link from "next/link";
import { useState, useEffect } from "react";
// Components
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
import SocialIcons from "@/components/landing/SocialIcons";
// Utils
import { cn } from "@/lib/utils";
import settings from "../../../landing.config";
type LangType = "ar" | "en";
type FooterLinksSectionProps = {
  key?: any;
  title?: string;
  links?: FooterLinkProps[];
};
type FooterLinkProps = {
  label?: string;
  href?: string;
};
export default function Footer(props: any) {
  const t = useTranslations("Landing");
  const lang = useLocale();
  const { resolvedTheme } = useTheme();
  const { type: logoType } = settings.logoSettings;
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  const logoSrc = `https://sikka-images.s3.ap-southeast-1.amazonaws.com/products/tanad/tanad_full_logo_${
    !isMounted || resolvedTheme === "dark" ? "white" : "black"
  }${lang === "en" ? "_en" : "_ar"}.png`;
  if (!isMounted) {
    return null; // or a loading skeleton
  }
  return (
    <div className="bg-background z-50 flex w-full flex-col items-center border-t p-0 pt-12">
      <div className="flex w-full flex-col md:flex-row">
        <div className="flex flex-col items-center p-10 pt-2 md:items-start">
          <CustomMotionDiv>
            <Link href={"/"} className="flex w-fit justify-center md:justify-start">
              <div className="flex flex-row items-center justify-center gap-2">
                <Image
                  height={512}
                  width={512}
                  loading="lazy"
                  className={"h-10 w-auto"}
                  alt={`${settings.projectName.en} Logo`}
                  src={logoSrc}
                />
                {logoType !== "full" && settings.logoSettings.showText && (
                  <div className="flex h-full items-center justify-center text-center text-2xl font-bold">
                    {settings.projectName[lang as LangType]}
                  </div>
                )}
              </div>
            </Link>
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.1}>
            <div className="text-muted-foreground w-full pt-4 text-center text-sm md:text-start xl:whitespace-nowrap">
              {t("footer.tagline")}
            </div>
          </CustomMotionDiv>
          <div className="flex w-full flex-row justify-center gap-4 ps-0 pt-4 md:justify-start">
            <SocialIcons {...settings.contact} phone={""} />
          </div>
        </div>
        <div className="flex w-full flex-row flex-wrap items-start justify-start gap-0 md:justify-end lg:flex-nowrap">
          {settings.footerLinks?.map((footerLink: any, i) => (
            <FooterLinksSection {...footerLink} key={i} />
          ))}
        </div>
      </div>
      <Copyrights />
    </div>
  );
}
const FooterLinksSection = (props: FooterLinksSectionProps) => {
  const t = useTranslations("Landing");
  return (
    <div className="flex-grow p-6 text-center md:w-full md:max-w-xs md:flex-grow-0 md:text-start">
      {props.title && <div className="mb-4 font-bold">{t(`${props.title}`)}</div>}
      <div className="text-muted-foreground flex flex-col items-center gap-2 text-sm md:items-start">
        {props.links?.map((link, i) => (
          <Link key={i} href={link.href || ""} className="w-fit">
            <div className="cursor-pointer transition-all hover:text-black hover:dark:text-white">
              {t(`${link.label}`)}
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
};
const Copyrights = () => {
  const t = useTranslations("General");
  const { publicRuntimeConfig } = getConfig();
  const version = publicRuntimeConfig?.version;
  return (
    <div className="bg-background flex w-full flex-col items-center justify-center p-4 px-6">
      <div className="text-muted-foreground flex w-full flex-row justify-between text-xs">
        <a href="https://sikka.sa">
          {t("sikka")} © {new Date().getFullYear()}
        </a>
        <div>v{version}</div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/landing/HeroSection.tsx">
import { motion } from "motion/react";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { Button } from "@/ui/button";
// Components
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
const HeroSection = (props: any) => {
  const t = useTranslations("Landing");
  const parentVariant = {
    hidden: { opacity: 0 },
    show: { opacity: 1, transition: { staggerChildren: 0.3 } },
  };
  return (
    <motion.div
      className="flex flex-col items-center justify-center"
      variants={parentVariant}
      initial="hidden"
      animate="show"
    >
      <CustomMotionDiv
        className={
          "hero-text w-full text-center text-[40px] leading-normal font-bold md:text-[70px]"
        }
      >
        {props.title}
      </CustomMotionDiv>
      <CustomMotionDiv delay={0.2} className="mt-8 max-w-5xl text-center md:text-[28px]">
        {props.subtitle}
      </CustomMotionDiv>
      {props.withAction && (
        <motion.div variants={parentVariant} className="mt-6 flex flex-col gap-2 md:flex-row">
          <CustomMotionDiv delay={0.4}>
            <Link href={props.actionPath}>
              <Button aria-label={t("hero.primary-action")} className="w-full">
                <span className="text-lg">{t("hero.primary-action")}</span>
              </Button>
            </Link>
          </CustomMotionDiv>
        </motion.div>
      )}
    </motion.div>
  );
};
export default HeroSection;
</file>

<file path="src/components/landing/MobileNavMenuItem.tsx">
import React, { MouseEventHandler } from "react";
import { MotionProps, motion } from "motion/react";
import Link from "next/link";
// UI
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/ui/accordion";
type CustomMotionDivProps = MotionProps &
  React.HTMLAttributes<HTMLDivElement> & {
    trigger?: any;
    index?: number;
    path?: string;
    handleClick?: MouseEventHandler<HTMLAnchorElement>;
    item?: any;
  };
const MobileNavMenuItem: React.FC<CustomMotionDivProps> = (props) => {
  if (props.item.content) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 70 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        transition={{
          duration: 0.4,
          delay: 0.1 * (props.index || 0),
          ease: [0.22, 0.61, 0.36, 1],
        }}
        {...props}
      >
        <Accordion collapsible type="single">
          <AccordionItem value="1">
            <AccordionTrigger
              // unstyled hideArrow
              className="w-full text-start"
            >
              <div className="cursor-pointer rounded p-6 text-3xl font-bold transition-all  hover:bg-primary/10">
                {props.trigger}
              </div>
            </AccordionTrigger>
            <AccordionContent>
              <div className="flex flex-col gap-2 ">
                {props.item.subitems.map((s: any, i: number) => (
                  <div
                    key={i}
                    className="flex cursor-pointer flex-row items-center gap-2 rounded px-4 transition-all hover:bg-primary/10"
                  >
                    <div className="h-[1px] w-[10px] bg-primary"></div>
                    <div className="p-2 text-lg">{s}</div>
                  </div>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </motion.div>
    );
  } else {
    return (
      <Link href={props.path || "/"} onClick={props.handleClick}>
        <motion.div
          initial={{ opacity: 0, y: 70 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          transition={{
            duration: 0.4,
            delay: 0.1 * (props.index || 0),
            ease: [0.22, 0.61, 0.36, 1],
          }}
          {...props}
        >
          <div className="cursor-pointer rounded p-6 text-3xl font-bold transition-all hover:bg-primary/10">
            {props.trigger}
          </div>
        </motion.div>
      </Link>
    );
  }
};
export default MobileNavMenuItem;
</file>

<file path="src/components/landing/Navbar.tsx">
"use client";
import { Menu, X } from "lucide-react";
import { useTranslations } from "next-intl";
import { useTheme } from "next-themes";
import Image from "next/image";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import { Button } from "@/ui/button";
import { cn } from "@/lib/utils";
import LanguageSwitcher from "../ui/language-switcher";
import ThemeSwitcher from "../ui/theme-switcher";
const menuItems = [
  { name: "Landing.features", href: "#link" },
  { name: "Landing.solution", href: "#link" },
  { name: "Landing.pricing", href: "#link" },
  { name: "Landing.about", href: "#link" },
];
const Navigation = () => {
  const t = useTranslations();
  const [menuState, setMenuState] = React.useState(false);
  const { resolvedTheme } = useTheme();
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  const logoSrc = `https://sikka-images.s3.ap-southeast-1.amazonaws.com/products/tanad/tanad_symbol_${
    !isMounted || resolvedTheme === "dark" ? "white" : "black"
  }.png`;
  return (
    <header>
      <nav
        data-state={menuState && "active"}
        className={cn(
          "group bg-background/50 fixed z-20 w-full border-b backdrop-blur-3xl transition-colors duration-150",
        )}
      >
        <div className="mx-auto max-w-5xl px-6 transition-all duration-300">
          <div className="relative flex flex-wrap items-center justify-between gap-6 py-3 lg:gap-0 lg:py-4">
            <div className="flex w-full items-center justify-between gap-12 lg:w-auto">
              <Link href="/" aria-label="home" className="flex items-center space-x-2">
                <Image
                  loading="lazy"
                  width={512}
                  height={512}
                  src={logoSrc}
                  className="aspect-auto h-[30px] w-auto"
                  alt="Tanad Logo"
                />
              </Link>
              <button
                onClick={() => setMenuState(!menuState)}
                aria-label={menuState == true ? "Close Menu" : "Open Menu"}
                className="relative z-20 -m-2.5 -mr-4 block cursor-pointer p-2.5 lg:hidden"
              >
                <Menu className="m-auto size-6 duration-200 group-data-[state=active]:scale-0 group-data-[state=active]:rotate-180 group-data-[state=active]:opacity-0" />
                <X className="absolute inset-0 m-auto size-6 scale-0 -rotate-180 opacity-0 duration-200 group-data-[state=active]:scale-100 group-data-[state=active]:rotate-0 group-data-[state=active]:opacity-100" />
              </button>
              <div className="hidden lg:block">
                <ul className="flex gap-8 text-sm">
                  {menuItems.map((item, index) => (
                    <li key={index}>
                      <Link
                        href={item.href}
                        className="text-muted-foreground hover:text-accent-foreground block duration-150"
                      >
                        <span>{t(item.name)}</span>
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            <div className="bg-background mb-6 hidden w-full flex-wrap items-center justify-end space-y-8 rounded-3xl border p-6 shadow-2xl shadow-zinc-300/20 group-data-[state=active]:block md:flex-nowrap lg:m-0 lg:flex lg:w-fit lg:gap-6 lg:space-y-0 lg:border-transparent lg:bg-transparent lg:p-0 lg:shadow-none lg:group-data-[state=active]:flex dark:shadow-none dark:lg:bg-transparent">
              <div className="lg:hidden">
                <ul className="space-y-6 text-base">
                  {menuItems.map((item, index) => (
                    <li key={index}>
                      <Link
                        href={item.href}
                        className="text-muted-foreground hover:text-accent-foreground block duration-150"
                      >
                        <span>{t(item.name)}</span>
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="flex w-full flex-col space-y-3 sm:flex-row sm:gap-2 sm:space-y-0 md:w-fit">
                <Button asChild variant="outline" size="sm">
                  <Link href="/auth">
                    <span>{t("Auth.sign_in")}</span>
                  </Link>
                </Button>
                <Button asChild size="sm">
                  <Link href="/auth#signup">
                    <span>{t("Auth.sign_up")}</span>
                  </Link>
                </Button>
                <ThemeSwitcher />
                <LanguageSwitcher />
              </div>
            </div>
          </div>
        </div>
      </nav>
    </header>
  );
};
const Logo = ({ className }: { className?: string }) => {
  return (
    <svg
      viewBox="0 0 78 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("h-5 w-auto", className)}
    >
      <path
        d="M3 0H5V18H3V0ZM13 0H15V18H13V0ZM18 3V5H0V3H18ZM0 15V13H18V15H0Z"
        fill="url(#logo-gradient)"
      />
      <path
        d="M27.06 7.054V12.239C27.06 12.5903 27.1393 12.8453 27.298 13.004C27.468 13.1513 27.7513 13.225 28.148 13.225H29.338V14.84H27.808C26.9353 14.84 26.2667 14.636 25.802 14.228C25.3373 13.82 25.105 13.157 25.105 12.239V7.054H24V5.473H25.105V3.144H27.06V5.473H29.338V7.054H27.06ZM30.4782 10.114C30.4782 9.17333 30.6709 8.34033 31.0562 7.615C31.4529 6.88967 31.9855 6.32867 32.6542 5.932C33.3342 5.524 34.0822 5.32 34.8982 5.32C35.6349 5.32 36.2752 5.46733 36.8192 5.762C37.3745 6.04533 37.8165 6.40233 38.1452 6.833V5.473H40.1002V14.84H38.1452V13.446C37.8165 13.888 37.3689 14.2563 36.8022 14.551C36.2355 14.8457 35.5895 14.993 34.8642 14.993C34.0595 14.993 33.3229 14.789 32.6542 14.381C31.9855 13.9617 31.4529 13.3837 31.0562 12.647C30.6709 11.899 30.4782 11.0547 30.4782 10.114ZM38.1452 10.148C38.1452 9.502 38.0092 8.941 37.7372 8.465C37.4765 7.989 37.1309 7.62633 36.7002 7.377C36.2695 7.12767 35.8049 7.003 35.3062 7.003C34.8075 7.003 34.3429 7.12767 33.9122 7.377C33.4815 7.615 33.1302 7.972 32.8582 8.448C32.5975 8.91267 32.4672 9.468 32.4672 10.114C32.4672 10.76 32.5975 11.3267 32.8582 11.814C33.1302 12.3013 33.4815 12.6753 33.9122 12.936C34.3542 13.1853 34.8189 13.31 35.3062 13.31C35.8049 13.31 36.2695 13.1853 36.7002 12.936C37.1309 12.6867 37.4765 12.324 37.7372 11.848C38.0092 11.3607 38.1452 10.794 38.1452 10.148ZM43.6317 4.232C43.2803 4.232 42.9857 4.113 42.7477 3.875C42.5097 3.637 42.3907 3.34233 42.3907 2.991C42.3907 2.63967 42.5097 2.345 42.7477 2.107C42.9857 1.869 43.2803 1.75 43.6317 1.75C43.9717 1.75 44.2607 1.869 44.4987 2.107C44.7367 2.345 44.8557 2.63967 44.8557 2.991C44.8557 3.34233 44.7367 3.637 44.4987 3.875C44.2607 4.113 43.9717 4.232 43.6317 4.232ZM44.5837 5.473V14.84H42.6457V5.473H44.5837ZM49.0661 2.26V14.84H47.1281V2.26H49.0661ZM50.9645 10.114C50.9645 9.17333 51.1572 8.34033 51.5425 7.615C51.9392 6.88967 52.4719 6.32867 53.1405 5.932C53.8205 5.524 54.5685 5.32 55.3845 5.32C56.1212 5.32 56.7615 5.46733 57.3055 5.762C57.8609 6.04533 58.3029 6.40233 58.6315 6.833V5.473H60.5865V14.84H58.6315V13.446C58.3029 13.888 57.8552 14.2563 57.2885 14.551C56.7219 14.8457 56.0759 14.993 55.3505 14.993C54.5459 14.993 53.8092 14.789 53.1405 14.381C52.4719 13.9617 51.9392 13.3837 51.5425 12.647C51.1572 11.899 50.9645 11.0547 50.9645 10.114ZM58.6315 10.148C58.6315 9.502 58.4955 8.941 58.2235 8.465C57.9629 7.989 57.6172 7.62633 57.1865 7.377C56.7559 7.12767 56.2912 7.003 55.7925 7.003C55.2939 7.003 54.8292 7.12767 54.3985 7.377C53.9679 7.615 53.6165 7.972 53.3445 8.448C53.0839 8.91267 52.9535 9.468 52.9535 10.114C52.9535 10.76 53.0839 11.3267 53.3445 11.814C53.6165 12.3013 53.9679 12.6753 54.3985 12.936C54.8405 13.1853 55.3052 13.31 55.7925 13.31C56.2912 13.31 56.7559 13.1853 57.1865 12.936C57.6172 12.6867 57.9629 12.324 58.2235 11.848C58.4955 11.3607 58.6315 10.794 58.6315 10.148ZM65.07 6.833C65.3533 6.357 65.7273 5.98867 66.192 5.728C66.668 5.456 67.229 5.32 67.875 5.32V7.326H67.382C66.6227 7.326 66.0447 7.51867 65.648 7.904C65.2627 8.28933 65.07 8.958 65.07 9.91V14.84H63.132V5.473H65.07V6.833ZM73.3624 10.165L77.6804 14.84H75.0624L71.5944 10.811V14.84H69.6564V2.26H71.5944V9.57L74.9944 5.473H77.6804L73.3624 10.165Z"
        fill="currentColor"
      />
      <defs>
        <linearGradient
          id="logo-gradient"
          x1="10"
          y1="0"
          x2="10"
          y2="20"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#9B99FE" />
          <stop offset="1" stopColor="#2BC8B7" />
        </linearGradient>
      </defs>
    </svg>
  );
};
export default Navigation;
// import { AtSign, Menu } from "lucide-react";
// import { useLocale, useTranslations } from "next-intl";
// import { useTheme } from "next-themes";
// import Image from "next/image";
// import Link from "next/link";
// import { useRouter } from "next/router";
// import { useEffect, useState } from "react";
// // Components
// import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
// import MobileNavMenuItem from "@/components/landing/MobileNavMenuItem";
// // UI
// import { Button } from "@/ui/button";
// import {
//   DropdownMenu,
//   DropdownMenuItem,
//   DropdownMenuContent,
//   DropdownMenuTrigger,
// } from "@/ui/dropdown-menu";
// import LanguageSwitcher from "@/ui/language-switcher";
// import { Logos } from "@/ui/logos";
// import { Sheet, SheetContent } from "@/ui/sheet";
// import ThemeSwitcher from "@/ui/theme-switcher";
// // Types
// import { IconComponents } from "@/lib/types";
// // Utils
// import { navigationMenuTriggerStyle, cn } from "@/lib/utils";
// // Hooks
// import { useWindowSize } from "@/hooks/use-window-size";
// import settings from "../../../landing.config";
// export const contactIcons: IconComponents = {
//   whatsapp: <Logos.whatsapp className="h-4 w-4" />,
//   twitter: <Logos.twitter className="h-4 w-4" />,
//   instagram: <Logos.instagram className="h-4 w-4" />,
//   mail: <Logos.mail className="h-4 w-4" />,
//   phone: <Logos.phone className="h-4 w-4" />,
// };
// export default function Navigation(props: any) {
//   const t = useTranslations();
//   const lang = useLocale();
//   const { resolvedTheme } = useTheme();
//   const [menuDialog, openMenuDialog] = useState(false);
//   let size = useWindowSize();
//   const router = useRouter();
//   const [isMounted, setIsMounted] = useState(false);
//   useEffect(() => {
//     setIsMounted(true);
//   }, []);
//   const contactMethods = Object.keys(settings.contact)
//     .map((key) => {
//       const url = settings.contact[key];
//       const icon = contactIcons[key];
//       if (icon && url) {
//         return {
//           icon: icon,
//           label: t(`ContactMethods.${key}`),
//           action: () => window.open(url, "_blank"),
//         };
//       }
//       return null;
//     })
//     .filter(Boolean);
//   const navigationItems = [
//     // {
//     //   path: `/${router.locale}`,
//     //   action: () => router.push(`/${router.locale}`),
//     //   trigger: t("Landing.home"),
//     // },
//     {
//       path: `/${router.locale}/features`,
//       action: () => router.push(`/${router.locale}/features`),
//       trigger: t("Landing.features"),
//     },
//     {
//       path: `/${router.locale}/pricing`,
//       action: () => router.push(`/${router.locale}/pricing`),
//       trigger: t("Landing.pricing"),
//     },
//     // {
//     //   path: `/${router.locale}/directory`,
//     //   action: () => router.push(`/${router.locale}/directory`),
//     //   trigger: t("Landing.directory"),
//     // },
//   ];
//   const logoSrc = `https://sikka-images.s3.ap-southeast-1.amazonaws.com/products/tanad/tanad_symbol_${
//     !isMounted || resolvedTheme === "dark" ? "white" : "black"
//   }.png`;
//   if (!isMounted) {
//     return null; // or a loading skeleton
//   }
//   return (
//     <div
//       className={cn(
//         "sticky top-0 z-50",
//         "flex w-full flex-row items-center justify-center p-4",
//         props.onSticky ? "bg-background border-b" : "bg-transparent",
//       )}
//     >
//       <div
//         className={cn(
//           "bg--300 flex w-full flex-row items-center justify-between",
//           !settings.navigation.fullWidth && "max-w-7xl",
//         )}
//       >
//         <div className="flex flex-row items-center justify-center gap-10">
//           <Link href={"/"}>
//             <Image
//               loading="lazy"
//               width={512}
//               height={512}
//               src={logoSrc}
//               className="aspect-auto h-[35px] w-auto"
//               alt="Tanad Logo"
//             />
//           </Link>
//         </div>
//         {(size?.width ?? 0) > 800 ? (
//           <div className="flex max-w-md flex-row gap-2">
//             <div className="bg--400 flex w-fit flex-row gap-2">
//               {navigationItems.map((navLink, i) => (
//                 <Link key={i} href={navLink.path} className={cn(navigationMenuTriggerStyle())}>
//                   {navLink.trigger}
//                 </Link>
//               ))}
//             </div>
//             <LanguageSwitcher defaultSize={true} />
//             <ThemeSwitcher defaultSize={true} />
//             <Link href="/dashboard">
//               <Button aria-label="Dashboard" variant="default">
//                 {t("Landing.dashboard")}
//               </Button>
//             </Link>
//           </div>
//         ) : (
//           <div className="flex flex-row gap-2">
//             <Button
//               aria-label="Mobile Menu"
//               size={"icon"}
//               variant={"outline"}
//               onClick={() => openMenuDialog(!menuDialog)}
//             >
//               <Menu />
//             </Button>
//             <Sheet open={menuDialog} onOpenChange={openMenuDialog}>
//               <SheetContent
//                 dir={lang === "ar" ? "rtl" : "ltr"}
//                 side={lang === "ar" ? "left" : "right"}
//                 style={{ padding: 0 }}
//               >
//                 <div className="flex h-full flex-col pt-14">
//                   <div className="flex flex-row justify-center gap-2 px-4 pb-4">
//                     <Link href="/auth" className="w-full">
//                       <Button aria-label="login" className="w-full">
//                         {t("Landing.dashboard")}
//                       </Button>
//                     </Link>
//                   </div>
//                   <div className="flex flex-grow flex-col gap-2 overflow-y-auto px-4">
//                     {navigationItems.map((n, i) => (
//                       <div className="flex flex-col gap-2" key={i}>
//                         <MobileNavMenuItem
//                           handleClick={() => openMenuDialog(false)}
//                           path={n.path}
//                           key={i}
//                           item={n}
//                           trigger={n.trigger}
//                           index={i}
//                         />
//                         <CustomMotionDiv
//                           delay={i * 0.1}
//                           className="h-px bg-gray-300 dark:bg-gray-700"
//                         />
//                       </div>
//                     ))}
//                   </div>
//                   <div className="flex w-full flex-row items-center justify-between gap-0 border-t p-4">
//                     <div className="flex h-full flex-row items-center gap-2">
//                       <CustomMotionDiv delay={0.1}>
//                         <ThemeSwitcher defaultSize={true} />
//                       </CustomMotionDiv>
//                       <CustomMotionDiv delay={0.2}>
//                         <LanguageSwitcher defaultSize={true} />
//                       </CustomMotionDiv>
//                     </div>
//                     <CustomMotionDiv delay={0.3}>
//                       <DropdownMenu>
//                         <DropdownMenuTrigger>
//                           <div>
//                             <Button aria-label="Contact Methods" variant="outline" size="icon">
//                               <AtSign className="h-5 w-5" />
//                             </Button>
//                           </div>
//                         </DropdownMenuTrigger>
//                         <DropdownMenuContent align={lang === "ar" ? "start" : "end"}>
//                           {contactMethods.map(
//                             (method, index) =>
//                               method && (
//                                 <DropdownMenuItem key={index} onClick={method.action}>
//                                   <span className="me-2">{method.icon}</span>
//                                   {method.label}
//                                 </DropdownMenuItem>
//                               ),
//                           )}
//                         </DropdownMenuContent>
//                       </DropdownMenu>
//                     </CustomMotionDiv>
//                   </div>
//                 </div>
//               </SheetContent>
//             </Sheet>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// }
</file>

<file path="src/components/landing/pricing-with-comparison.tsx">
import { Check, Minus, MoveRight, PhoneCall } from "lucide-react";
import React from "react";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
// Define the structure for a pricing plan
interface PricingPlan {
  name: string;
  description: string;
  price: number | null; // Use null for Enterprise where price isn't shown directly
  priceSuffix: string;
  buttonText: string;
  buttonVariant: "outline" | "default";
  buttonIcon?: React.ElementType;
  features: {
    [featureName: string]: string | boolean;
  };
}
// Centralized data for pricing plans
const plans: PricingPlan[] = [
  {
    name: "Startup",
    description:
      "Our goal is to streamline SMB trade, making it easier and faster than ever for everyone and everywhere.",
    price: 40,
    priceSuffix: "/ month",
    buttonText: "Try it",
    buttonVariant: "outline",
    buttonIcon: MoveRight,
    features: {
      SSO: true,
      "AI Assistant": false,
      "Version Control": false,
      Members: "5 members",
      "Multiplayer Mode": false,
      Orchestration: false,
      Invoices: "50 invoice/month",
      Employees: "10 employees",
    },
  },
  {
    name: "Growth",
    description:
      "Our goal is to streamline SMB trade, making it easier and faster than ever for everyone and everywhere.",
    price: 40, // TODO: Update price if needed
    priceSuffix: "/ month",
    buttonText: "Try it",
    buttonVariant: "default",
    buttonIcon: MoveRight,
    features: {
      SSO: true,
      "AI Assistant": true,
      "Version Control": true,
      Members: "25 members",
      "Multiplayer Mode": true,
      Orchestration: true,
      Invoices: "500 invoice/month",
      Employees: "100 employees",
    },
  },
  {
    name: "Enterprise",
    description:
      "Our goal is to streamline SMB trade, making it easier and faster than ever for everyone and everywhere.",
    price: null, // No direct price shown for Enterprise
    priceSuffix: "", // No suffix needed without a price
    buttonText: "Contact us",
    buttonVariant: "outline",
    buttonIcon: PhoneCall,
    features: {
      SSO: true,
      "AI Assistant": true,
      "Version Control": true,
      Members: "100+ members",
      "Multiplayer Mode": true,
      Orchestration: true,
      Invoices: "Unlimited",
      Employees: "Unlimited",
    },
  },
];
// Define the order of features to be displayed
const featureOrder = [
  "SSO",
  "AI Assistant",
  "Version Control",
  "Members",
  "Multiplayer Mode",
  "Orchestration",
  "Invoices",
  "Employees",
];
function Pricing() {
  return (
    <div className="w-full py-20 lg:py-40">
      <div className="container mx-auto">
        <div className="flex flex-col items-center justify-center gap-4 text-center">
          <Badge>Pricing</Badge>
          <div className="flex flex-col gap-2">
            <h2 className="font-regular max-w-xl text-center text-3xl tracking-tighter md:text-5xl">
              Prices that make sense!
            </h2>
            <p className="text-muted-foreground max-w-xl text-center text-lg leading-relaxed tracking-tight">
              Managing a small business today is already tough.
            </p>
          </div>
          <div className="bg--200 grid w-full grid-cols-3 divide-x pt-20 text-start lg:grid-cols-4">
            <div className="col-span-3 lg:col-span-1"></div>
            {/* Render Plan Headers */}
            {plans.map((plan) => (
              <div key={plan.name} className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
                <p className="text-2xl">{plan.name}</p>
                <p className="text-muted-foreground text-sm">{plan.description}</p>
                <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
                  {plan.price !== null ? (
                    <>
                      <span className="text-4xl">${plan.price}</span>
                      <span className="text-muted-foreground text-sm">{plan.priceSuffix}</span>
                    </>
                  ) : (
                    // Handle Enterprise case where price is not displayed directly
                    <span className="text-muted-foreground text-lg">—</span>
                  )}
                </p>
                <Button variant={plan.buttonVariant} className="mt-8 gap-4">
                  {plan.buttonText} {plan.buttonIcon && <plan.buttonIcon className="h-4 w-4" />}
                </Button>
              </div>
            ))}
            {/* Render Features Header */}
            <div className="bg--400 col-span-3 border-s px-3 py-4 lg:col-span-1 lg:px-6">
              <b>Features</b>
            </div>
            {/* Placeholder divs for alignment */}
            {plans.map((_, index) => (
              <div key={`placeholder-${index}`} className={index === 0 ? "bg--800" : ""}></div>
            ))}
            {/* Render Feature Rows */}
            {featureOrder.map((featureName) => (
              <React.Fragment key={featureName}>
                <div className="col-span-3 border-s px-3 py-4 lg:col-span-1 lg:px-6">
                  {featureName}
                </div>
                {plans.map((plan) => (
                  <div
                    key={`${plan.name}-${featureName}`}
                    className="flex justify-center px-3 py-1 md:px-6 md:py-4"
                  >
                    {typeof plan.features[featureName] === "boolean" ? (
                      plan.features[featureName] ? (
                        <Check className="text-primary h-4 w-4" />
                      ) : (
                        <Minus className="text-muted-foreground h-4 w-4" />
                      )
                    ) : (
                      <p className="text-muted-foreground text-sm">{plan.features[featureName]}</p>
                    )}
                  </div>
                ))}
              </React.Fragment>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
export { Pricing };
</file>

<file path="src/components/landing/PricingPlans.tsx">
import React, { FC, InputHTMLAttributes, useId } from "react";
// UI
import { RadioGroup, RadioGroupItem } from "@/ui/radio-group";
import { PricingCard } from "@/ui/pricing-card";
import { PricingCardProps } from "@/ui/pricing-card";
import { useTranslations } from "next-intl";
type PricingPlansTypes = {
  loadingCards?: boolean;
  plans: PricingCardProps[];
  currencies: string[];
  billingCycles: string[];
  currentCycle: string;
  currentCurrency: string;
  onPlanClicked?: (e: any) => void;
  onCycleChange?: (e: any) => void;
  onCurrencyChange?: (e: any) => void;
  direction?: "rtl" | "ltr";
  mainContainerProps?: InputHTMLAttributes<HTMLDivElement>;
  cardsContainerProps?: InputHTMLAttributes<HTMLDivElement>;
};
export const PricingPlans: FC<PricingPlansTypes> = ({
  mainContainerProps,
  cardsContainerProps,
  ...props
}) => {
  const id = useId();
  const t = useTranslations("Pricing");
  return (
    <div {...mainContainerProps}>
      <div className="mb-2 flex w-full justify-between">
        <div className="inline-flex h-9 rounded-lg bg-input/50 p-0.5">
          <RadioGroup
            value={props.currentCycle}
            onValueChange={(e: any) => {
              if (props.onCycleChange) {
                props.onCycleChange(e);
              }
            }}
            className="group relative inline-grid grid-cols-[1fr_1fr] items-center gap-0 text-sm font-medium after:absolute after:inset-y-0 after:w-1/2 after:rounded-md after:bg-background after:shadow-sm after:shadow-black/5 after:outline-offset-2 after:transition-transform after:duration-300 after:[transition-timing-function:cubic-bezier(0.16,1,0.3,1)] has-[:focus-visible]:after:outline has-[:focus-visible]:after:outline-2 has-[:focus-visible]:after:outline-ring/70 data-[state=monthly]:after:translate-x-0 data-[state=annually]:after:translate-x-full"
            data-state={props.currentCycle}
          >
            <label className="relative z-10 inline-flex h-full min-w-8 cursor-pointer select-none items-center justify-center whitespace-nowrap px-4 transition-colors group-data-[state=annually]:text-muted-foreground/70">
              {t(`billing-cycle.monthly`)}
              <RadioGroupItem
                id={`${id}-0`}
                value={"monthly"}
                className="sr-only"
              />
            </label>
            <label className="relative z-10 inline-flex h-full min-w-8 cursor-pointer select-none items-center justify-center whitespace-nowrap px-4 transition-colors group-data-[state=monthly]:text-muted-foreground/70">
              {t(`billing-cycle.annually`)}
              <RadioGroupItem
                id={`${id}-1`}
                value={"annually"}
                className="sr-only"
              />
            </label>
          </RadioGroup>
        </div>
        <div className="inline-flex h-9 rounded-lg bg-input/50 p-0.5">
          <RadioGroup
            value={props.currentCurrency}
            onValueChange={(e: any) => {
              if (props.onCurrencyChange) {
                props.onCurrencyChange(e);
              }
            }}
            className="group relative inline-grid grid-cols-[1fr_1fr] items-center gap-0 text-sm font-medium after:absolute after:inset-y-0 after:w-1/2 after:rounded-md after:bg-background after:shadow-sm after:shadow-black/5 after:outline-offset-2 after:transition-transform after:duration-300 after:[transition-timing-function:cubic-bezier(0.16,1,0.3,1)] has-[:focus-visible]:after:outline has-[:focus-visible]:after:outline-2 has-[:focus-visible]:after:outline-ring/70 data-[state=sar]:after:translate-x-0 data-[state=usd]:after:translate-x-full"
            data-state={props.currentCurrency}
          >
            <label className="relative z-10 inline-flex h-full min-w-8 cursor-pointer select-none items-center justify-center whitespace-nowrap px-4 transition-colors group-data-[state=usd]:text-muted-foreground/70">
              {t(`billing-currency.sar`)}
              <RadioGroupItem
                id={`${id}-0`}
                value={"sar"}
                className="sr-only"
              />
            </label>
            <label className="relative z-10 inline-flex h-full min-w-8 cursor-pointer select-none items-center justify-center whitespace-nowrap px-4 transition-colors group-data-[state=sar]:text-muted-foreground/70">
              {t(`billing-currency.usd`)}
              <RadioGroupItem
                id={`${id}-1`}
                value={"usd"}
                className="sr-only"
              />
            </label>
          </RadioGroup>
        </div>
      </div>
      <div
        // className="flex w-full flex-col gap-2 md:flex-row justify-between"
        className="inline-grid w-full grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-4"
        {...cardsContainerProps}
      >
        {props.plans.map((plan: any, index) => {
          return (
            <PricingCard
              key={index}
              isSAR={props.currentCurrency === "sar"}
              onPlanClicked={() => {
                if (props.onPlanClicked) {
                  let clickedData = {
                    // plan: plan.id,
                    currency: props.currentCurrency,
                    cycle: props.currentCycle,
                    ...plan,
                  };
                  props.onPlanClicked(clickedData);
                }
              }}
              {...plan}
              isLoadingCard={props.loadingCards || plan.isLoadingCard}
              price={plan.price}
              texts={{
                ...plan.texts,
                currencyText: t(`billing-currency.${props.currentCurrency}`),
                cycleText: t(`billing-cycle.${props.currentCycle}`),
              }}
            />
          );
        })}
      </div>
    </div>
  );
};
</file>

<file path="src/components/landing/SocialIcons.tsx">
import React from "react";
// UI
import { Button } from "@/ui/button";
import { Logos } from "@/ui/logos";
// Components
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
type SocialIconsType = {
  whatsapp?: string;
  twitter?: string;
  instagram?: string;
  mail?: string;
  phone?: string;
};
const SocialIcons: React.FC<SocialIconsType> = (props) => {
  return (
    <>
      {props.whatsapp && (
        <CustomMotionDiv>
          <a href={props.whatsapp}>
            <Button aria-label="Whatsapp" size={"icon"} variant={"ghost"}>
              <Logos.whatsapp className="w-5" />
            </Button>
          </a>
        </CustomMotionDiv>
      )}
      {props.twitter && (
        <CustomMotionDiv delay={0.1}>
          <a href={props.twitter}>
            <Button aria-label="Twitter" size={"icon"} variant={"ghost"}>
              <Logos.twitter className="w-5" />
            </Button>
          </a>
        </CustomMotionDiv>
      )}
      {props.instagram && (
        <CustomMotionDiv delay={0.2}>
          <a href={props.instagram}>
            <Button aria-label="Instagram" size={"icon"} variant={"ghost"}>
              <Logos.instagram className="w-5" />
            </Button>
          </a>
        </CustomMotionDiv>
      )}
      {props.mail && (
        <CustomMotionDiv delay={0.3}>
          <a href={`mailto:${props.mail}`}>
            <Button aria-label="Mail" size={"icon"} variant={"ghost"}>
              <Logos.mail className="w-5" />
            </Button>
          </a>
        </CustomMotionDiv>
      )}
      {props.phone && (
        <CustomMotionDiv delay={0.4}>
          <a href={`tel:${props.phone}`}>
            <Button aria-label="Phone" size={"icon"} variant={"ghost"}>
              <Logos.phone className="w-5" />
            </Button>
          </a>
        </CustomMotionDiv>
      )}
    </>
  );
};
export default SocialIcons;
</file>

<file path="src/components/landing/ThumbnailImage.tsx">
import React, { useState } from "react";
import Image from "next/image";
// UI
import { Skeleton } from "@/ui/skeleton";
// Utils
import { cn } from "@/lib/utils";
type ThumbnailImageType = {
  src?: any;
  alt?: any;
  width?: number;
  height?: number;
  skeletonClassname?: string;
  imageClassname?: string;
  containerClassname?: string;
  priority?: boolean;
};
const ThumbnailImage = ({ src, alt, ...props }: ThumbnailImageType) => {
  const [isLoading, setIsLoading] = useState(true);
  return (
    <div className={cn("relative", props.containerClassname)}>
      {isLoading && <Skeleton className={props.skeletonClassname} />}
      <Image
        alt={alt}
        height={props.height}
        width={props.width}
        src={src}
        className={props.imageClassname}
        onLoad={() => setIsLoading(false)}
        priority={props.priority}
      />
    </div>
  );
};
export default ThumbnailImage;
</file>

<file path="src/components/landing/waitlist-section.tsx">
import { useTranslations } from "next-intl";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
const WaitlistSection = () => {
  const t = useTranslations();
  return (
    <div className="min-h-landing relative z-10 flex flex-1 items-center justify-center">
      <div className="mx-auto w-full max-w-xl space-y-12 p-8">
        <div className="space-y-6 text-center">
          <h2 className="bg-gradient-to-br from-gray-200 to-gray-600 bg-clip-text text-center text-4xl font-extrabold text-transparent sm:text-5xl">
            {t("Landing.waitlist.title")}
          </h2>
          <p className="mx-auto max-w-lg text-xl text-gray-400">{t("Landing.waitlist.subtitle")}</p>
        </div>
        <div className="mx-auto flex max-w-md gap-2">
          <Input
            type="email"
            placeholder={t("Landing.waitlist.placeholder")}
            className="h-12 border-gray-800 bg-gray-950/50"
          />
          <Button className="h-12 bg-black px-6 text-white hover:bg-black/90" variant="ghost">
            {t("Landing.waitlist.button")}
          </Button>
        </div>
      </div>
    </div>
  );
};
export default WaitlistSection;
</file>

<file path="src/components/layouts/app-layout.tsx">
import Cookies from "js-cookie";
import { Loader2 } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { ThemeProvider, useTheme } from "next-themes";
import { Toaster } from "sonner";
import ProtectedRoute from "@/components/app/ProtectedRoute";
import { AppSidebar } from "@/ui/app-sidebar";
import { Breadcrumb } from "@/ui/breadcrumb";
import { Button } from "@/ui/button";
import { CommandMenu } from "@/ui/command-menu";
import LanguageSwitcher from "@/ui/language-switcher";
import { LoadingBar } from "@/ui/loading-bar";
import { SidebarProvider, SidebarTrigger } from "@/ui/sidebar";
import ThemeSwitcher from "@/ui/theme-switcher";
import { UserDropdown } from "@/ui/user-dropdown";
import { useMainStore } from "@/hooks/main.store";
import useUserStore from "@/stores/use-user-store";
const AppLayout = ({ children }: { children: React.ReactNode }) => {
  const t = useTranslations();
  const lang = useLocale();
  const defaultOpen = Cookies.get("sidebar_state") === "true";
  const { setOpenCommandMenu } = useMainStore();
  const { theme } = useTheme();
  const { loading: isUserDataLoading, user } = useUserStore();
  if (isUserDataLoading) {
    return (
      <div className="flex h-screen w-screen items-center justify-center">
        <Loader2 className="text-primary size-16 animate-spin" />
      </div>
    );
  }
  return (
    <ProtectedRoute>
      <ThemeProvider attribute="class" disableTransitionOnChange enableSystem defaultTheme="dark">
        <SidebarProvider dir={lang === "ar" ? "rtl" : "ltr"} defaultOpen={defaultOpen}>
          <LoadingBar />
          <AppSidebar />
          <CommandMenu dir={lang === "ar" ? "rtl" : "ltr"} />
          <Toaster
            theme={theme as "light" | "dark"}
            richColors
            position={lang === "ar" ? "bottom-left" : "bottom-right"}
            dir={lang === "ar" ? "rtl" : "ltr"}
            style={{ fontFamily: "var(--font-family)" }}
          />
          <div className="w-full">
            <div className="flex w-full flex-row justify-between border-b p-2">
              <div className="flex flex-row items-center gap-0 p-0">
                <SidebarTrigger />
                <Breadcrumb />
              </div>
              <div className="flex flex-row gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  className="h-8 ps-1.5"
                  onClick={() => setOpenCommandMenu(true)}
                >
                  <kbd className="bg-muted pointer-events-none hidden h-5 items-center gap-1 rounded border px-1.5 font-mono text-[10px] font-medium opacity-100 select-none sm:flex">
                    <span className="text-xs">⌘</span>K
                  </kbd>
                  <span className="text-muted-foreground text-xs">{t("General.quick_access")}</span>
                </Button>
                <ThemeSwitcher />
                <LanguageSwitcher />
                <UserDropdown />
              </div>
            </div>
            <div className="relative mx-auto">{children}</div>
          </div>
        </SidebarProvider>
      </ThemeProvider>
    </ProtectedRoute>
  );
};
export default AppLayout;
</file>

<file path="src/components/layouts/auth-layout.tsx">
import * as reactSpring from "@react-spring/three";
import { ShaderGradientCanvas, ShaderGradient } from "@shadergradient/react";
import { useLocale, useTranslations } from "next-intl";
import { ThemeProvider } from "next-themes";
import { LoadingBar } from "../ui/loading-bar";
import { Toaster } from "../ui/sonner";
const AuthLayout = ({ children }: { children: React.ReactNode }) => {
  const lang = useLocale();
  const t = useTranslations();
  return (
    <ThemeProvider attribute="class" disableTransitionOnChange enableSystem defaultTheme="dark">
      <LoadingBar />
      <Toaster
        richColors
        position={lang === "ar" ? "bottom-left" : "bottom-right"}
        dir={lang === "ar" ? "rtl" : "ltr"}
        style={{ fontFamily: "var(--font-family)" }}
      />
      <div
        dir={lang === "ar" ? "rtl" : "ltr"}
        className="relative flex min-h-screen flex-row items-center justify-center lg:max-w-none lg:px-0"
      >
        <div className="bg-muted absolute inset-0 hidden h-full w-full flex-col p-0 text-white lg:flex">
          {/* <div className="absolute inset-0 bg-zinc-900" /> */}
          <ShaderGradientCanvas className="pointer-events-none absolute inset-0">
            <ShaderGradient
              animate="on"
              brightness={1.1}
              cAzimuthAngle={180}
              cDistance={3.9}
              cPolarAngle={115}
              cameraZoom={1}
              color1="#5606FF"
              color2="#fe0022"
              enableTransition={false}
              color3="#000000"
              envPreset="city"
              // @ts-ignore
              frameRate={10}
              grain="off"
              lightType="3d"
              positionX={-0.5}
              positionY={0.1}
              positionZ={0}
              range="enabled"
              rangeEnd={40}
              rangeStart={0}
              reflection={0.1}
              rotationX={0}
              rotationY={0}
              rotationZ={235}
              shader="defaults"
              type="waterPlane"
              uAmplitude={0}
              uDensity={1.1}
              uFrequency={5.5}
              uSpeed={0.1}
              uStrength={2.4}
              uTime={0.2}
              wireframe={false}
              zoomOut={false}
              // urlString="https://www.shadergradient.co/customize?animate=on&axesHelper=on&bgColor1=%23000000&bgColor2=%23000000&brightness=1.1&cAzimuthAngle=180&cDistance=3.9&cPolarAngle=115&cameraZoom=1&color1=%235606FF&color2=%23fe0022&color3=%23000000&destination=onCanvas&embedMode=off&envPreset=city&format=gif&fov=45&frameRate=10&grain=off&lightType=3d&pixelDensity=1&positionX=-0.5&positionY=0.1&positionZ=0&range=enabled&rangeEnd=40&rangeStart=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=235&shader=defaults&type=waterPlane&uAmplitude=0&uDensity=1.1&uFrequency=5.5&uSpeed=0.1&uStrength=2.4&uTime=0.2&wireframe=false&zoomOut=false"
            />
          </ShaderGradientCanvas>
        </div>
        <div className="absolute start-0 end-0 z-20 h-full p-0 lg:w-1/2">{children}</div>
        <div className="bg-background absolute z-0 h-full w-full [mask-image:linear-gradient(to_right,#D1D4DC_30%,transparent_100%)] rtl:[mask-image:linear-gradient(to_left,#D1D4DC_30%,transparent_100%)]"></div>
      </div>
    </ThemeProvider>
  );
};
export default AuthLayout;
</file>

<file path="src/components/layouts/data-page-layout.tsx">
import { cn } from "@/lib/utils";
import { useSidebar } from "../ui/sidebar";
const DataPageLayout = ({ children }: { children: React.ReactNode }) => {
  const { state, isMobile } = useSidebar();
  return (
    <div
      className={cn("w-full transition-all duration-200 ease-linear", {
        "w-full max-w-[calc(100vw)]": isMobile,
        "w-full max-w-[calc(100vw-16rem)]": state === "expanded" && !isMobile,
        "w-full max-w-[calc(100vw-3rem)]": state !== "expanded" && !isMobile,
      })}
    >
      {children}
    </div>
  );
};
export default DataPageLayout;
</file>

<file path="src/components/layouts/landing-layout.tsx">
import { useLocale } from "next-intl";
import { ThemeProvider } from "next-themes";
import Footer from "@/components/landing/Footer";
import Navigation from "@/components/landing/Navbar";
import GridBG from "@/ui/grid-bg";
import { LoadingBar } from "@/ui/loading-bar";
import useStickyHeader from "@/hooks/use-sticky-header";
type LayoutType = {
  children?: any;
};
const LandingLayout: React.FC<LayoutType> = ({ children }) => {
  const isSticky = useStickyHeader();
  const lang = useLocale();
  return (
    <ThemeProvider attribute="class" disableTransitionOnChange enableSystem defaultTheme="dark">
      <main className="flex min-h-screen flex-col" dir={lang === "ar" ? "rtl" : "ltr"}>
        <GridBG className="-z-10" />
        <Navigation />
        <div className="w-full flex-1 flex-col justify-center">
          <LoadingBar />
          {children}
        </div>
        <Footer />
      </main>
    </ThemeProvider>
  );
};
export default LandingLayout;
</file>

<file path="src/components/settings/general-settings.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { Flag } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Separator } from "@/ui/separator";
import { Skeleton } from "@/ui/skeleton";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/ui/tooltip";
import { useProfile, useUpdateProfile } from "@/hooks/use-profile";
import useUserStore from "@/stores/use-user-store";
import BetaFlag from "../ui/beta-flag";
const formSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  language: z.string(),
  timezone: z.string(),
});
type FormValues = z.infer<typeof formSchema>;
interface GeneralSettingsProps {
  onDirtyChange: (isDirty: boolean) => void;
  onSave: () => void;
  onSaveComplete: () => void;
  isSaving: boolean;
  formRef: React.RefObject<HTMLFormElement | null>;
}
const GeneralSettings = ({
  onDirtyChange,
  onSave,
  onSaveComplete,
  isSaving,
  formRef,
}: GeneralSettingsProps) => {
  const t = useTranslations();
  const lang = useLocale();
  const router = useRouter();
  // Add state to track the selected timezone and language
  const [selectedTimezone, setSelectedTimezone] = useState<string>("UTC");
  const [selectedLanguage, setSelectedLanguage] = useState<string>(lang);
  // Get user from the existing store to get profile_id
  const { user } = useUserStore();
  const profile_id = user?.id || "";
  // Use the profile hook to fetch data
  const { data: profile, isLoading: isLoadingProfile } = useProfile(profile_id);
  // Initialize the update mutation
  const updateProfileMutation = useUpdateProfile();
  // Create form with default values
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      language: lang,
      timezone: "UTC",
    },
  });
  // Reset form when profile data is loaded
  React.useEffect(() => {
    if (profile) {
      const timezone = profile.user_settings?.timezone || "UTC";
      // Set the selected timezone state
      setSelectedTimezone(timezone);
      // Get stored language preference or use current locale
      const language = profile.user_settings?.language || lang;
      // Set selected language state
      setSelectedLanguage(language);
      const formValues = {
        name: profile.full_name || "",
        email: user?.email || profile.email || "",
        language: language,
        timezone: timezone, // Ensure timezone is explicitly set and not lost
      };
      // Use a timeout to ensure the form reset happens after React has processed state updates
      setTimeout(() => {
        form.reset(formValues);
        // Force set the field values explicitly
        form.setValue("timezone", timezone);
        form.setValue("language", language);
      }, 0);
    }
  }, [profile, user, lang, form]);
  // Watch for form changes to update isDirty state
  const isDirty = form.formState.isDirty;
  React.useEffect(() => {
    onDirtyChange(isDirty);
  }, [isDirty, onDirtyChange]);
  const onSubmit = async (data: FormValues) => {
    onSave();
    try {
      await updateProfileMutation.mutateAsync({
        profile_id,
        data: {
          full_name: data.name,
          // Email is managed separately through auth system if needed
          user_settings: {
            ...(profile?.user_settings || {}),
            timezone: data.timezone,
            language: data.language,
          },
        },
      });
      // If email has changed, you might need to update it through auth system
      if (data.email !== user?.email) {
        // Handle email update through auth provider if needed
        console.log("Email changed, might need additional auth updates");
      }
      // Reset the form with the current data to clear dirty state
      form.reset(data);
      // Check if language has changed and then switch the language
      if (data.language !== lang) {
        router.replace(router.pathname, router.asPath, {
          locale: data.language,
        });
      }
      onSaveComplete();
    } catch (error) {
      console.error("Error submitting form:", error);
      onSaveComplete();
    }
  };
  // Handle enter key press
  const handleKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      form.handleSubmit(onSubmit)();
    }
  };
  return (
    <Card className="shadow-none">
      <CardHeader dir={lang === "ar" ? "rtl" : "ltr"}>
        <CardTitle>{t("Settings.general.title")}</CardTitle>
        <CardDescription>{t("Settings.general.description")}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6" dir={lang === "ar" ? "rtl" : "ltr"}>
        <Form {...form}>
          <form
            ref={formRef}
            onSubmit={form.handleSubmit(onSubmit)}
            onKeyDown={handleKeyDown}
            className="space-y-6"
          >
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.general.profile.title")}</h3>
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.general.profile.name")}</FormLabel>
                      <FormControl>
                        {isLoadingProfile ? (
                          <Skeleton className="h-10 w-full" />
                        ) : (
                          <Input {...field} disabled={isSaving} />
                        )}
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.general.profile.email")}</FormLabel>
                      <FormControl>
                        {isLoadingProfile ? (
                          <Skeleton className="h-10 w-full" />
                        ) : (
                          <Input type="email" {...field} disabled={isSaving} />
                        )}
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            <Separator />
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.general.regional.title")}</h3>
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="language"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.general.regional.language")}</FormLabel>
                      {isLoadingProfile ? (
                        <Skeleton className="h-10 w-full" />
                      ) : (
                        <Select
                          disabled={isSaving}
                          onValueChange={(val) => {
                            field.onChange(val);
                            setSelectedLanguage(val);
                          }}
                          value={field.value || selectedLanguage}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder={t("General.select")}>
                                {field.value === "en"
                                  ? t("General.languages.en")
                                  : t("General.languages.ar")}
                              </SelectValue>
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="en">{t("General.languages.en")}</SelectItem>
                            <SelectItem value="ar">{t("General.languages.ar")}</SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="timezone"
                  render={({ field }) => {
                    return (
                      <FormItem>
                        <FormLabel>{t("Settings.general.regional.timezone")}</FormLabel>
                        {isLoadingProfile ? (
                          <Skeleton className="h-10 w-full" />
                        ) : (
                          <BetaFlag
                            title={t("Flags.timezone_soon.title")}
                            description={t("Flags.timezone_soon.description")}
                          >
                            <Select
                              disabled={isSaving}
                              onValueChange={(val) => {
                                field.onChange(val);
                                setSelectedTimezone(val);
                              }}
                              value={field.value || selectedTimezone} // Fall back to selectedTimezone if field.value is empty
                            >
                              <FormControl>
                                <SelectTrigger disabled>
                                  <SelectValue>
                                    {(() => {
                                      const timezoneValue = field.value || selectedTimezone;
                                      const timezoneLabels = {
                                        UTC: "UTC",
                                        EST: "Eastern Time (EST)",
                                        CST: "Central Time (CST)",
                                        PST: "Pacific Time (PST)",
                                      };
                                      return (
                                        timezoneLabels[
                                          timezoneValue as keyof typeof timezoneLabels
                                        ] || timezoneValue
                                      );
                                    })()}
                                  </SelectValue>
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="UTC">UTC</SelectItem>
                                <SelectItem value="EST">Eastern Time (EST)</SelectItem>
                                <SelectItem value="CST">Central Time (CST)</SelectItem>
                                <SelectItem value="PST">Pacific Time (PST)</SelectItem>
                              </SelectContent>
                            </Select>
                          </BetaFlag>
                        )}
                        <FormMessage />
                      </FormItem>
                    );
                  }}
                />
              </div>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
export default GeneralSettings;
</file>

<file path="src/components/settings/notification-settings.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useLocale, useTranslations } from "next-intl";
import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel } from "@/ui/form";
import { Switch } from "@/ui/switch";
import { useProfile, useUpdateProfile } from "@/hooks/use-profile";
import useUserStore from "@/stores/use-user-store";
const formSchema = z.object({
  email_updates: z.boolean(),
  email_marketing: z.boolean(),
  email_security: z.boolean(),
  app_mentions: z.boolean(),
  app_comments: z.boolean(),
  app_tasks: z.boolean(),
});
type FormValues = z.infer<typeof formSchema>;
interface NotificationSettingsProps {
  onDirtyChange: (isDirty: boolean) => void;
  onSave: () => void;
  onSaveComplete: () => void;
  isSaving: boolean;
  formRef: React.RefObject<HTMLFormElement | null>;
}
const NotificationSettings = ({
  onDirtyChange,
  onSave,
  onSaveComplete,
  isSaving,
  formRef,
}: NotificationSettingsProps) => {
  const t = useTranslations();
  const lang = useLocale();
  // Get user from the existing store to get profile_id
  const { user } = useUserStore();
  const profile_id = user?.id || "";
  const [isLoadingProfile, setIsLoadingProfile] = useState(true);
  // Use the profile hook to fetch data
  const { data: profile } = useProfile(profile_id);
  useEffect(() => {
    setTimeout(() => {
      setIsLoadingProfile(false);
    }, 1000);
  }, []);
  // Initialize the update mutation
  const updateProfileMutation = useUpdateProfile();
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email_updates: false,
      email_marketing: false,
      email_security: false,
      app_mentions: false,
      app_comments: false,
      app_tasks: false,
    },
  });
  // Reset form when profile data is loaded
  useEffect(() => {
    if (profile) {
      const formValues = {
        email_updates: profile.user_settings?.notifications?.email_updates ?? false,
        email_marketing: profile.user_settings?.notifications?.email_marketing ?? false,
        email_security: profile.user_settings?.notifications?.email_security ?? false,
        app_mentions: profile.user_settings?.notifications?.app_mentions ?? false,
        app_comments: profile.user_settings?.notifications?.app_comments ?? false,
        app_tasks: profile.user_settings?.notifications?.app_tasks ?? false,
      };
      setTimeout(() => {
        form.reset(formValues);
      }, 0);
    }
  }, [profile, form]);
  // Watch for form changes to update isDirty state
  const isDirty = form.formState.isDirty;
  useEffect(() => {
    onDirtyChange(isDirty);
  }, [isDirty, onDirtyChange]);
  const onSubmit = async (data: FormValues) => {
    onSave();
    try {
      await updateProfileMutation.mutateAsync({
        profile_id,
        data: {
          user_settings: {
            ...(profile?.user_settings || {}),
            notifications: data,
          },
        },
      });
      // Reset the form with the current data to clear dirty state
      form.reset(data);
      onSaveComplete();
    } catch (error) {
      console.error("Error submitting notification form:", error);
      onSaveComplete();
    }
  };
  // Handle enter key press
  const handleKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      form.handleSubmit(onSubmit)();
    }
  };
  return (
    <Card className="shadow-none">
      <CardHeader dir={lang === "ar" ? "rtl" : "ltr"}>
        <CardTitle>{t("Settings.notifications.title")}</CardTitle>
        <CardDescription>{t("Settings.notifications.description")}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6" dir={lang === "ar" ? "rtl" : "ltr"}>
        <Form {...form}>
          <form
            className="space-y-4"
            ref={formRef}
            onSubmit={form.handleSubmit(onSubmit)}
            onKeyDown={handleKeyDown}
          >
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.notifications.email.title")}</h3>
              <div className="flex flex-col gap-4 rounded-lg border p-4">
                <FormField
                  control={form.control}
                  name="email_updates"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="email-updates" className="m-0 flex-1">
                        {t("Settings.notifications.email.updates")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="email-updates"
                          loading={isLoadingProfile}
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email_marketing"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="email-marketing" className="m-0 flex-1">
                        {t("Settings.notifications.email.marketing")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          loading={isLoadingProfile}
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="email-marketing"
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email_security"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="email-security" className="m-0 flex-1">
                        {t("Settings.notifications.email.security")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          loading={isLoadingProfile}
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="email-security"
                          className="m-0"
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>
            </div>
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.notifications.in_app.title")}</h3>
              <div className="flex flex-col gap-4 rounded-lg border p-4">
                <FormField
                  control={form.control}
                  name="app_mentions"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="app-mentions" className="m-0 flex-1">
                        {t("Settings.notifications.in_app.mentions")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          loading={isLoadingProfile}
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="app-mentions"
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="app_comments"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="app-comments" className="m-0 flex-1">
                        {t("Settings.notifications.in_app.comments")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          loading={isLoadingProfile}
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="app-comments"
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="app_tasks"
                  render={({ field }) => (
                    <FormItem className="m-0 flex items-center justify-between">
                      <FormLabel htmlFor="app-tasks" className="m-0 flex-1">
                        {t("Settings.notifications.in_app.tasks")}
                      </FormLabel>
                      <FormControl className="m-0">
                        <Switch
                          loading={isLoadingProfile}
                          dir={lang === "ar" ? "rtl" : "ltr"}
                          id="app-tasks"
                          checked={isLoadingProfile ? false : field.value}
                          onCheckedChange={field.onChange}
                          disabled={isSaving}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
export default NotificationSettings;
</file>

<file path="src/components/settings/preference-settings.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { DollarSign, Euro, PoundSterling, SaudiRiyal, JapaneseYen, Flag } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Card, CardTitle, CardHeader, CardDescription, CardContent } from "@/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Separator } from "@/ui/separator";
import { Skeleton } from "@/ui/skeleton";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/ui/tooltip";
import { useProfile, useUpdateProfile } from "@/hooks/use-profile";
import useUserStore from "@/stores/use-user-store";
import BetaFlag from "../ui/beta-flag";
const formSchema = z.object({
  currency: z.string(),
  calendar: z.string(),
  dateFormat: z.string(),
  timeFormat: z.string(),
});
type FormValues = z.infer<typeof formSchema>;
interface PreferenceSettingsProps {
  onDirtyChange?: (isDirty: boolean) => void;
  onSave?: () => void;
  onSaveComplete?: () => void;
  isSaving?: boolean;
  formRef?: React.RefObject<HTMLFormElement | null>;
}
const PreferenceSettings = ({
  onDirtyChange,
  onSave,
  onSaveComplete,
  isSaving,
  formRef,
}: PreferenceSettingsProps = {}) => {
  const lang = useLocale();
  const t = useTranslations();
  // Add state to track the selected values
  const [selectedCurrency, setSelectedCurrency] = useState<string>("usd");
  const [selectedCalendar, setSelectedCalendar] = useState<string>("month");
  const [selectedDateFormat, setSelectedDateFormat] = useState<string>("mdy");
  const [selectedTimeFormat, setSelectedTimeFormat] = useState<string>("12h");
  // Get user from the existing store to get profile_id
  const { user } = useUserStore();
  const profile_id = user?.id || "";
  // Use the profile hook to fetch data
  const { data: profile, isLoading: isLoadingProfile } = useProfile(profile_id);
  // Initialize the update mutation
  const updateProfileMutation = useUpdateProfile();
  // Create form with default values
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      currency: "usd",
      calendar: "month",
      dateFormat: "mdy",
      timeFormat: "12h",
    },
  });
  // Reset form when profile data is loaded
  useEffect(() => {
    if (profile) {
      const currency = profile.user_settings?.currency || "usd";
      const calendar = profile.user_settings?.calendar || "month";
      const dateFormat = profile.user_settings?.date_format || "mdy";
      const timeFormat = profile.user_settings?.time_format || "12h";
      // Set the selected state values
      setSelectedCurrency(currency);
      setSelectedCalendar(calendar);
      setSelectedDateFormat(dateFormat);
      setSelectedTimeFormat(timeFormat);
      const formValues = {
        currency,
        calendar,
        dateFormat,
        timeFormat,
      };
      // Use a timeout to ensure the form reset happens after React has processed state updates
      setTimeout(() => {
        form.reset(formValues);
        // Force set the field values explicitly
        form.setValue("currency", currency);
        form.setValue("calendar", calendar);
        form.setValue("dateFormat", dateFormat);
        form.setValue("timeFormat", timeFormat);
      }, 0);
    }
  }, [profile, form]);
  // Watch for form changes to update isDirty state
  const isDirty = form.formState.isDirty;
  useEffect(() => {
    if (onDirtyChange) {
      onDirtyChange(isDirty);
    }
  }, [isDirty, onDirtyChange]);
  const onSubmit = async (data: FormValues) => {
    if (onSave) onSave();
    try {
      await updateProfileMutation.mutateAsync({
        profile_id,
        data: {
          user_settings: {
            ...(profile?.user_settings || {}),
            currency: data.currency,
            calendar: data.calendar,
            date_format: data.dateFormat,
            time_format: data.timeFormat,
          },
        },
      });
      // Reset the form with the current data to clear dirty state
      form.reset(data);
      if (onSaveComplete) onSaveComplete();
    } catch (error) {
      console.error("Error submitting preference form:", error);
      if (onSaveComplete) onSaveComplete();
    }
  };
  // Handle enter key press
  const handleKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      form.handleSubmit(onSubmit)();
    }
  };
  return (
    <Card className="shadow-none">
      <CardHeader dir={lang === "ar" ? "rtl" : "ltr"}>
        <CardTitle>{t("Settings.preferences.title")}</CardTitle>
        <CardDescription>{t("Settings.preferences.description")}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6" dir={lang === "ar" ? "rtl" : "ltr"}>
        <Form {...form}>
          <form
            ref={formRef}
            onSubmit={form.handleSubmit(onSubmit)}
            onKeyDown={handleKeyDown}
            className="space-y-6"
          >
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.preferences.default.title")}</h3>
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="currency"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.preferences.default.currency")}</FormLabel>
                      {isLoadingProfile ? (
                        <Skeleton className="h-10 w-full" />
                      ) : (
                        <Select
                          disabled={isSaving}
                          onValueChange={(val) => {
                            field.onChange(val);
                            setSelectedCurrency(val);
                          }}
                          value={field.value || selectedCurrency}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder={t("General.select")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="sar">
                              <div className="flex flex-row items-center gap-2">
                                <span>SAR</span>
                                <SaudiRiyal className="size-3" />
                              </div>
                            </SelectItem>
                            <SelectItem value="usd">
                              <div className="flex flex-row items-center gap-2">
                                <span>USD</span>
                                <DollarSign className="size-3" />
                              </div>
                            </SelectItem>
                            <SelectItem value="eur">
                              <div className="flex flex-row items-center gap-2">
                                <span>EUR</span>
                                <Euro className="size-3" />
                              </div>
                            </SelectItem>
                            <SelectItem value="gbp">
                              <div className="flex flex-row items-center gap-2">
                                <span>GBP</span>
                                <PoundSterling className="size-3" />
                              </div>
                            </SelectItem>
                            <SelectItem value="jpy">
                              <div className="flex flex-row items-center gap-2">
                                <span>JPY</span>
                                <JapaneseYen className="size-3" />
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="calendar"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.preferences.default.calendar")}</FormLabel>
                      {isLoadingProfile ? (
                        <Skeleton className="h-10 w-full" />
                      ) : (
                        <BetaFlag
                          title={t("Flags.calendar_soon.title")}
                          description={t("Flags.calendar_soon.description")}
                        >
                          <Select
                            disabled
                            // disabled={isSaving}
                            onValueChange={(val) => {
                              field.onChange(val);
                              setSelectedCalendar(val);
                            }}
                            value={field.value || selectedCalendar}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder={t("General.select")} />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="day">
                                {t("General.calendars.gregorian")}
                              </SelectItem>
                              <SelectItem value="week">{t("General.calendars.hijri")}</SelectItem>
                            </SelectContent>
                          </Select>
                        </BetaFlag>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            <Separator />
            <div className="space-y-4">
              <h3 className="text-sm font-medium">{t("Settings.preferences.datetime.title")}</h3>
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="dateFormat"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.preferences.datetime.date_format")}</FormLabel>
                      {isLoadingProfile ? (
                        <Skeleton className="h-10 w-full" />
                      ) : (
                        <Select
                          disabled={isSaving}
                          onValueChange={(val) => {
                            field.onChange(val);
                            setSelectedDateFormat(val);
                          }}
                          value={field.value || selectedDateFormat}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder={t("General.select")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="mdy">MM/DD/YYYY</SelectItem>
                            <SelectItem value="dmy">DD/MM/YYYY</SelectItem>
                            <SelectItem value="ymd">YYYY/MM/DD</SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="timeFormat"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t("Settings.preferences.datetime.time_format")}</FormLabel>
                      {isLoadingProfile ? (
                        <Skeleton className="h-10 w-full" />
                      ) : (
                        <Select
                          disabled={isSaving}
                          onValueChange={(val) => {
                            field.onChange(val);
                            setSelectedTimeFormat(val);
                          }}
                          value={field.value || selectedTimeFormat}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder={t("General.select")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="12h">
                              {t("Settings.preferences.datetime.12h")}
                            </SelectItem>
                            <SelectItem value="24h">
                              {t("Settings.preferences.datetime.24h")}
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
export default PreferenceSettings;
</file>

<file path="src/components/settings/sidebar-settings.tsx">
"use client";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  type DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { GripVertical } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { usePathname } from "next/navigation";
import { useState, useEffect, useCallback, useRef } from "react";
import React from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/ui/card";
import { Switch } from "@/ui/switch";
import { getMenuList, applyCustomMenuOrder, type SidebarMenuGroupProps } from "@/lib/sidebar-list";
import { useProfile, useUpdateProfile } from "@/hooks/use-profile";
import useUserStore from "@/stores/use-user-store";
interface SortableItemProps {
  item: SidebarMenuGroupProps["items"][number];
  title: string;
  enabled: boolean;
  onToggle: (enabled: boolean) => void;
}
const SortableItem = ({ item, title, enabled, onToggle }: SortableItemProps) => {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({
    id: item.title,
  });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };
  const handleSwitchChange = (checked: boolean) => {
    onToggle(checked);
  };
  // Switch component with stopPropagation to prevent drag conflicts
  const SwitchControl = () => (
    <div
      className="relative z-10 flex cursor-pointer items-center"
      onClick={(e) => {
        e.stopPropagation();
        e.preventDefault();
        // Manually trigger the switch change when clicking the wrapper
        handleSwitchChange(!enabled);
      }}
      onPointerDown={(e) => {
        // Stop propagation to prevent triggering the drag
        e.stopPropagation();
        e.preventDefault();
      }}
    >
      <Switch
        checked={enabled}
        onCheckedChange={handleSwitchChange}
        aria-label={`Toggle ${title} visibility`}
        className="data-[state=checked]:bg-primary pointer-events-none"
      />
    </div>
  );
  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      className="hover:bg-accent flex cursor-grab items-center gap-3 rounded-md border p-3 active:cursor-grabbing"
    >
      <GripVertical className="text-muted-foreground h-4 w-4" />
      <span className="h-4 w-4 flex-shrink-0" />
      <span className="flex-1">{title}</span>
      {item.is_active && (
        <span className="text-primary bg-primary/10 mr-2 rounded-full px-2 py-1 text-xs font-medium">
          Active
        </span>
      )}
      {/* Directly use SwitchControl and remove redundant wrapper */}
      <SwitchControl />
    </div>
  );
};
interface SidebarSettingsProps {
  onDirtyChange?: (isDirty: boolean) => void;
  onSave?: () => void;
  onSaveComplete?: () => void;
  isSaving?: boolean;
  formRef?: React.RefObject<HTMLFormElement | null>;
}
const SidebarSettings = ({
  onDirtyChange,
  onSave,
  onSaveComplete,
  isSaving,
  formRef,
}: SidebarSettingsProps = {}) => {
  const lang = useLocale();
  const t = useTranslations();
  const pathname = usePathname();
  const [isDirty, setIsDirty] = useState(false);
  const [menuList, setMenuList] = useState(getMenuList(pathname));
  // Get user from the existing store to get profile_id
  const { user } = useUserStore();
  const profile_id = user?.id || "";
  // Use the profile hook to fetch data
  const { data: profile } = useProfile(profile_id);
  // Initialize the update mutation
  const updateProfileMutation = useUpdateProfile();
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  );
  // Add state to track enabled/disabled items
  const [enabledItems, setEnabledItems] = useState<Record<string, Record<string, boolean>>>({});
  // Create a memoized version of enabledItems to use in the dependency array
  const enabledItemsRef = useRef(enabledItems);
  useEffect(() => {
    enabledItemsRef.current = enabledItems;
  }, [enabledItems]);
  // Update parent component when isDirty changes
  useEffect(() => {
    if (onDirtyChange) {
      onDirtyChange(isDirty);
    }
  }, [isDirty, onDirtyChange]);
  // Load menu configuration from profile if available
  useEffect(() => {
    if (!profile) {
      console.log("No profile available yet, skipping menu configuration");
      return;
    }
    // Only initialize once when profile is loaded
    // or when hidden_menu_items changes
    const currentMenu = getMenuList(pathname);
    // Initialize the enabledItems state regardless of profile data
    // This ensures we always have a valid state to work with
    const initialEnabledState: Record<string, Record<string, boolean>> = {};
    // First initialize all items as enabled
    Object.entries(currentMenu).forEach(([groupName, items]) => {
      initialEnabledState[groupName] = {};
      items.forEach((item) => {
        initialEnabledState[groupName][item.title] = true;
      });
    });
    // Then if we have hidden items data, apply it
    if (profile?.user_settings?.hidden_menu_items) {
      const hiddenItems = profile.user_settings.hidden_menu_items as Record<string, string[]>;
      Object.entries(hiddenItems).forEach(([groupName, hiddenItemsList]) => {
        if (initialEnabledState[groupName]) {
          hiddenItemsList.forEach((itemTitle) => {
            if (initialEnabledState[groupName][itemTitle] !== undefined) {
              initialEnabledState[groupName][itemTitle] = false;
            }
          });
        }
      });
    }
    // Compare new state with current state to avoid unnecessary updates
    const currentEnabledItemsString = JSON.stringify(enabledItems);
    const newEnabledItemsString = JSON.stringify(initialEnabledState);
    if (currentEnabledItemsString !== newEnabledItemsString) {
      setEnabledItems(initialEnabledState);
    }
    // Load the ordered menu as before
    if (profile?.user_settings && "navigation" in profile.user_settings) {
      try {
        // Use the applyCustomMenuOrder function to get a correctly ordered menu
        const savedNavigation = profile.user_settings.navigation as Record<
          string,
          Array<{ title: string }>
        >;
        const orderedMenu = applyCustomMenuOrder(currentMenu, savedNavigation);
        // Compare ordered menu with current menu to avoid unnecessary updates
        const currentMenuString = JSON.stringify(menuList);
        const newMenuString = JSON.stringify(orderedMenu);
        if (currentMenuString !== newMenuString) {
          setMenuList(orderedMenu);
        }
      } catch (error) {
        console.error("Error loading menu configuration:", error);
      }
    }
  }, [profile, pathname]);
  const handleDragEnd = (event: DragEndEvent, groupName: string) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      const oldIndex = menuList[groupName].findIndex((item) => item.title === active.id);
      const newIndex = menuList[groupName].findIndex((item) => item.title === over.id);
      setMenuList((prev) => ({
        ...prev,
        [groupName]: arrayMove(prev[groupName], oldIndex, newIndex),
      }));
      setIsDirty(true);
    }
  };
  const handleInputChange = () => {
    setIsDirty(true);
  };
  // Handler for toggling item visibility
  const handleToggleItem = useCallback(
    (groupName: string, itemTitle: string, enabled: boolean) => {
      if (enabledItemsRef.current[groupName]?.[itemTitle] === enabled) {
        return;
      }
      const newEnabledItems = { ...enabledItemsRef.current };
      // Initialize group if it doesn't exist
      if (!newEnabledItems[groupName]) {
        newEnabledItems[groupName] = {};
      }
      // Update the specific item's enabled state
      newEnabledItems[groupName][itemTitle] = enabled;
      setEnabledItems(newEnabledItems);
      // Mark form as dirty to enable the save button
      setIsDirty(true);
    },
    [setIsDirty],
  );
  const handleSubmit = async (e: React.FormEvent) => {
    if (e) e.preventDefault();
    if (onSave) onSave();
    try {
      // When saving to the database, we need to simplify the menu structure
      // to avoid issues with circular references and complex objects like icon components
      const simplifiedMenuList: Record<string, any[]> = {};
      Object.entries(menuList).forEach(([groupName, items]) => {
        simplifiedMenuList[groupName] = items.map((item) => ({
          title: item.title,
          translationKey: item.translationKey,
          url: item.url,
          is_active: item.is_active,
          action: item.action,
        }));
      });
      // Create a record of hidden menu items
      const hiddenMenuItems: Record<string, string[]> = {};
      Object.entries(enabledItems).forEach(([groupName, items]) => {
        hiddenMenuItems[groupName] = [];
        Object.entries(items).forEach(([itemTitle, enabled]) => {
          if (!enabled) {
            hiddenMenuItems[groupName].push(itemTitle);
          }
        });
        // Remove empty arrays
        if (hiddenMenuItems[groupName].length === 0) {
          delete hiddenMenuItems[groupName];
        }
      });
      // Get current user settings to ensure we're not overwriting anything
      const currentUserSettings = profile?.user_settings || {};
      // Save menu configuration to profile
      const result = await updateProfileMutation.mutateAsync({
        profile_id,
        data: {
          user_settings: {
            ...currentUserSettings,
            navigation: simplifiedMenuList,
            hidden_menu_items: hiddenMenuItems,
          },
        },
      });
      setIsDirty(false);
      if (onSaveComplete) onSaveComplete();
    } catch (error) {
      console.error("Error saving navigation settings:", error);
      if (onSaveComplete) onSaveComplete();
    }
  };
  return (
    <Card className="shadow-none">
      <CardHeader dir={lang === "ar" ? "rtl" : "ltr"}>
        <CardTitle>{t("Settings.navigation.title")}</CardTitle>
        <CardDescription>{t("Settings.navigation.description")}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6" dir={lang === "ar" ? "rtl" : "ltr"}>
        <form ref={formRef} onSubmit={handleSubmit}>
          {Object.entries(menuList).map(([groupName, items]) => (
            <div key={groupName} className="space-y-4">
              <h3 className="text-sm font-medium">{t(`${groupName}.title`)}</h3>
              <DndContext
                sensors={sensors}
                collisionDetection={closestCenter}
                onDragEnd={(event) => handleDragEnd(event, groupName)}
              >
                <SortableContext
                  items={items.map((item) => item.title)}
                  strategy={verticalListSortingStrategy}
                >
                  <div className="space-y-2">
                    {items.map((item) => {
                      // Get the enabled state for this item, defaulting to true if not defined
                      const isEnabled = enabledItems[groupName]?.[item.title] ?? true;
                      return (
                        <SortableItem
                          key={item.title}
                          item={item}
                          title={t(`${item.title}.title`)}
                          enabled={isEnabled}
                          onToggle={(enabled) => handleToggleItem(groupName, item.title, enabled)}
                        />
                      );
                    })}
                  </div>
                </SortableContext>
              </DndContext>
            </div>
          ))}
        </form>
      </CardContent>
    </Card>
  );
};
export default SidebarSettings;
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
const Accordion = AccordionPrimitive.Root;
const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
));
AccordionItem.displayName = "AccordionItem";
const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {
    hideChevron?: boolean;
  }
>(({ className, children, hideChevron = false, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      {hideChevron ? null : (
        <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
      )}
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;
const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm transition-all"
    {...props}
  >
    <div className={cn("pt-0 pb-4", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
</file>

<file path="src/components/ui/adjustable-dialog.tsx">
import { useState, useEffect } from "react";
import { TransitionPanel } from "@/ui/transition-panel";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import { Button } from "@/ui/button";
import useMeasure from "react-use-measure";
import { useLocale } from "next-intl";
import { Loader2 } from "lucide-react";
import { useTranslations } from "next-intl";
interface AdjustableDialogProps {
  items: { id: string; content: React.ReactNode }[];
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  title: string;
  onNext?: (currentIndex: number) => Promise<boolean>;
  hidePreviousButton?: boolean;
}
const AdjustableDialog = ({
  items,
  isOpen,
  onOpenChange,
  title,
  onNext,
  hidePreviousButton = false,
}: AdjustableDialogProps) => {
  const t = useTranslations();
  const locale = useLocale();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [direction, setDirection] = useState(1);
  const [ref, bounds] = useMeasure();
  const [isLoading, setIsLoading] = useState(false);
  // Reset index when dialog opens
  useEffect(() => {
    if (isOpen) {
      setCurrentIndex(0);
      setDirection(1);
    }
  }, [isOpen]);
  const handleNext = async () => {
    if (onNext) {
      setIsLoading(true);
      try {
        const canProceed = await onNext(currentIndex);
        if (!canProceed) return;
      } finally {
        setIsLoading(false);
      }
    }
    if (currentIndex === items.length - 1) {
      onOpenChange(false);
      return;
    }
    setDirection(1);
    setCurrentIndex((prev) => prev + 1);
  };
  const handlePrev = () => {
    if (currentIndex > 0) {
      setDirection(-1);
      setCurrentIndex((prev) => prev - 1);
    }
  };
  const isLastItem = currentIndex === items.length - 1;
  const isFirstItem = currentIndex === 0;
  const shouldHidePrevious = hidePreviousButton || isFirstItem;
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent
        // persist
        className="overflow-hidden"
        dir={locale === "ar" ? "rtl" : "ltr"}
      >
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
        </DialogHeader>
        <TransitionPanel
          activeIndex={currentIndex}
          className="overflow-hidden p-2 pb-10"
          variants={{
            enter: (direction) => ({
              x: direction > 0 ? 364 : -364,
              opacity: 0,
              height: bounds.height > 0 ? bounds.height : "auto",
              position: "initial",
            }),
            center: {
              zIndex: 1,
              x: 0,
              opacity: 1,
              height: bounds.height > 0 ? bounds.height : "auto",
            },
            exit: (direction) => ({
              zIndex: 0,
              x: direction < 0 ? 364 : -364,
              opacity: 0,
              position: "absolute",
              top: 0,
              width: "100%",
            }),
          }}
          transition={{
            x: { type: "spring", stiffness: 300, damping: 30 },
            opacity: { duration: 0.2 },
          }}
          custom={direction}
        >
          {items.map((item) => (
            <div key={item.id} ref={ref}>
              {item.content}
            </div>
          ))}
        </TransitionPanel>
        <div className="flex flex-row justify-between">
          {!shouldHidePrevious ? (
            <Button
              variant="secondary"
              onClick={handlePrev}
              disabled={isFirstItem}
            >
              {t("General.previous")}
            </Button>
          ) : (
            <div className="w-10"></div>
          )}
          <Button
            variant={isLastItem ? "default" : "secondary"}
            onClick={handleNext}
            disabled={isLoading}
            className={shouldHidePrevious ? "" : ""}
          >
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : isLastItem ? (
              t("General.done")
            ) : (
              t("General.next")
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};
export default AdjustableDialog;
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/ui/button"
function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}
function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}
function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}
function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}
function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-start", className)}
      {...props}
    />
  )
}
function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}
function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}
function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}
function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}
function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}
export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/animated-group.tsx">
"use client";
import { motion, Variants } from "motion/react";
import { ReactNode } from "react";
import React from "react";
import { cn } from "@/lib/utils";
type PresetType =
  | "fade"
  | "slide"
  | "scale"
  | "blur"
  | "blur-slide"
  | "zoom"
  | "flip"
  | "bounce"
  | "rotate"
  | "swing";
type AnimatedGroupProps = {
  children: ReactNode;
  className?: string;
  variants?: {
    container?: Variants;
    item?: Variants;
  };
  preset?: PresetType;
};
const defaultContainerVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
    },
  },
};
const defaultItemVariants: Variants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1 },
};
const presetVariants: Record<PresetType, { container: Variants; item: Variants }> = {
  fade: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0 },
      visible: { opacity: 1 },
    },
  },
  slide: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, y: 20 },
      visible: { opacity: 1, y: 0 },
    },
  },
  scale: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, scale: 0.8 },
      visible: { opacity: 1, scale: 1 },
    },
  },
  blur: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, filter: "blur(4px)" },
      visible: { opacity: 1, filter: "blur(0px)" },
    },
  },
  "blur-slide": {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, filter: "blur(4px)", y: 20 },
      visible: { opacity: 1, filter: "blur(0px)", y: 0 },
    },
  },
  zoom: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, scale: 0.5 },
      visible: {
        opacity: 1,
        scale: 1,
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
  },
  flip: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, rotateX: -90 },
      visible: {
        opacity: 1,
        rotateX: 0,
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
  },
  bounce: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, y: -50 },
      visible: {
        opacity: 1,
        y: 0,
        transition: { type: "spring", stiffness: 400, damping: 10 },
      },
    },
  },
  rotate: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, rotate: -180 },
      visible: {
        opacity: 1,
        rotate: 0,
        transition: { type: "spring", stiffness: 200, damping: 15 },
      },
    },
  },
  swing: {
    container: defaultContainerVariants,
    item: {
      hidden: { opacity: 0, rotate: -10 },
      visible: {
        opacity: 1,
        rotate: 0,
        transition: { type: "spring", stiffness: 300, damping: 8 },
      },
    },
  },
};
function AnimatedGroup({ children, className, variants, preset }: AnimatedGroupProps) {
  const selectedVariants = preset
    ? presetVariants[preset]
    : { container: defaultContainerVariants, item: defaultItemVariants };
  const containerVariants = variants?.container || selectedVariants.container;
  const itemVariants = variants?.item || selectedVariants.item;
  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      className={cn(className)}
    >
      {React.Children.map(children, (child, index) => (
        <motion.div key={index} variants={itemVariants}>
          {child}
        </motion.div>
      ))}
    </motion.div>
  );
}
export { AnimatedGroup };
</file>

<file path="src/components/ui/app-sidebar.tsx">
"use client";
import type { LucideIcon } from "lucide-react";
import { Asterisk, Search } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { Input } from "@/ui/input";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarRail,
  useSidebar,
} from "@/ui/sidebar";
import { applyCustomMenuOrder, getMenuList, type SidebarMenuGroupProps } from "@/lib/sidebar-list";
import useUserStore, { ProfileType } from "@/stores/use-user-store";
import { EnterpriseSwitcher } from "./enterprise-switcher";
import { NavMain } from "./sidebar-menu";
import { SidebarUserFooter } from "./sidebar-user-footer";
type Menu = {
  href: string;
  label: string;
  translationKey: string;
  active?: boolean;
  icon: LucideIcon;
  submenus?: {
    href: string;
    label: string;
    translationKey: string;
    active?: boolean;
    plusAction?: string;
  }[];
};
export function AppSidebar() {
  const t = useTranslations();
  const lang = useLocale();
  const { state, isMobile, setOpen: setSidebarOpen } = useSidebar();
  const router = useRouter();
  const [expandedGroups, setExpandedGroups] = useState<Set<number>>(new Set());
  const [expandedMenus, setExpandedMenus] = useState<Set<string>>(new Set());
  const [searchQuery, setSearchQuery] = useState("");
  const previousStateRef = useRef<{ groups: Set<number>; menus: Set<string> }>({
    groups: new Set(),
    menus: new Set(),
  });
  const profile = useUserStore((state) => state.profile);
  const enterprise = useUserStore((state) => state.enterprise);
  const hasPermission = useUserStore((state) => state.hasPermission);
  // Store and clear expanded states when sidebar collapses
  useEffect(() => {
    if (state === "collapsed" && !isMobile) {
      // Store current state before clearing
      previousStateRef.current = {
        groups: new Set(expandedGroups),
        menus: new Set(expandedMenus),
      };
      // Clear all expanded states
      setExpandedGroups(new Set());
      setExpandedMenus(new Set());
    } else if (state === "expanded" && !isMobile) {
      // Restore previous state
      setExpandedGroups(previousStateRef.current.groups);
      setExpandedMenus(previousStateRef.current.menus);
    }
  }, [state, isMobile]);
  const defaultMenuGroups = useMemo(() => getMenuList(router.pathname), [router.pathname]);
  const orderedMenuGroups = useMemo(() => {
    if (profile?.user_settings && "navigation" in profile.user_settings) {
      try {
        const result = applyCustomMenuOrder(
          defaultMenuGroups,
          profile.user_settings.navigation as Record<string, Array<{ title: string }>>,
        );
        // Apply hidden menu items filter
        if (profile.user_settings.hidden_menu_items) {
          const hiddenItems = profile.user_settings.hidden_menu_items as Record<string, string[]>;
          const filteredResult: Record<string, SidebarMenuGroupProps["items"]> = {};
          Object.entries(result).forEach(([groupName, items]) => {
            // Filter out hidden items from this group
            filteredResult[groupName] = items.filter(
              (item) => !hiddenItems[groupName]?.includes(item.title),
            );
          });
          return filteredResult;
        }
        return result;
      } catch (error) {
        // console.error("[app-sidebar] Error applying custom menu order:", error);
      }
    } else {
      // console.log("[app-sidebar] No navigation settings found in profile");
    }
    return defaultMenuGroups;
  }, [defaultMenuGroups, profile?.user_settings]);
  // Filter menu items based on permissions
  const filterGroupsByPermission = (
    groups: Record<string, SidebarMenuGroupProps["items"]>,
  ): Record<string, SidebarMenuGroupProps["items"]> => {
    const filteredGroups: Record<string, SidebarMenuGroupProps["items"]> = {};
    // Iterate over each group name (e.g., "Administration", "Accounting")
    for (const groupName in groups) {
      const items = groups[groupName];
      // Explicitly type the result of the map operation
      const mappedItems: (SidebarMenuGroupProps["items"][number] | null)[] = items.map((item) => {
        // 1. Filter sub-items first (if they exist)
        let filteredSubItems: typeof item.items | undefined = undefined;
        if (item.items) {
          filteredSubItems = item.items.filter((subItem) => {
            // Keep sub-item if no permission is required or user has permission
            return !subItem.requiredPermission || hasPermission(subItem.requiredPermission);
          });
        }
        // 3. Determine if the parent item should be kept based on children
        // If it had sub-items originally, but none are left after filtering, hide the parent item.
        if (item.items && (!filteredSubItems || filteredSubItems.length === 0)) {
          return null;
        }
        // Return the item, potentially with filtered sub-items
        return {
          ...item,
          items: filteredSubItems, // Update sub-items
        };
      });
      // Filter out the null values using a simpler filter
      const filteredItems = mappedItems.filter((item) => item !== null);
      // Only add the group to the result if it still contains items after filtering
      if (filteredItems.length > 0) {
        // Explicitly cast back to the required type
        filteredGroups[groupName] = filteredItems as SidebarMenuGroupProps["items"];
      }
    }
    return filteredGroups;
  };
  const finalMenuGroups = useMemo(
    () => filterGroupsByPermission(orderedMenuGroups),
    [orderedMenuGroups, hasPermission],
  );
  const filterMenuItems = (items: any, query: string) => {
    if (!query) return items;
    const searchLower = query.toLowerCase();
    // Get the English label from the translation key
    const getEnglishLabel = (translationKey: string) => {
      return translationKey.split(".")[0];
    };
    const filterGroup = (group: any) => {
      if (!group) return null;
      const filteredItems = group
        .map((item: any) => {
          // Check both English and translated labels for main item
          const englishLabel = getEnglishLabel(item.translationKey);
          const translatedLabel = t(item.translationKey).toLowerCase();
          const matchesTitle =
            englishLabel.toLowerCase().includes(searchLower) ||
            translatedLabel.includes(searchLower);
          // Check both English and translated labels for sub-items
          const matchesSubItems = item.items?.some((subItem: any) => {
            const subEnglishLabel = getEnglishLabel(subItem.translationKey);
            const subTranslatedLabel = t(subItem.translationKey).toLowerCase();
            return (
              subEnglishLabel.toLowerCase().includes(searchLower) ||
              subTranslatedLabel.includes(searchLower)
            );
          });
          if (matchesTitle) return item;
          if (item.items) {
            const filteredSubItems = item.items.filter((subItem: any) => {
              const subEnglishLabel = getEnglishLabel(subItem.translationKey);
              const subTranslatedLabel = t(subItem.translationKey).toLowerCase();
              return (
                subEnglishLabel.toLowerCase().includes(searchLower) ||
                subTranslatedLabel.includes(searchLower)
              );
            });
            if (filteredSubItems.length > 0) {
              return { ...item, items: filteredSubItems };
            }
          }
          return null;
        })
        .filter(Boolean);
      return filteredItems.length > 0 ? filteredItems : null;
    };
    return {
      Administration: filterGroup(items.Administration),
      Accounting: filterGroup(items.Accounting),
      HumanResources: filterGroup(items.HumanResources),
      Settings: filterGroup(items.Settings),
    };
  };
  const searchableMenuGroups = useMemo(
    () => filterMenuItems(finalMenuGroups, searchQuery),
    [finalMenuGroups, searchQuery, t],
  );
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  return (
    <Sidebar collapsible="icon" side={lang === "ar" ? "right" : "left"} className="z-50">
      <SidebarHeader className="border-b">
        <div className="flex items-center gap-2">
          <EnterpriseSwitcher
            enterprises={[{ name: enterprise?.name || "", logo: Asterisk, plan: "" }]}
          />
        </div>
        {state === "expanded" && (
          <div className="relative flex items-center gap-2">
            <Search className="text-muted-foreground absolute start-2 size-4" />
            <Input
              type="text"
              placeholder={t("General.sidebar_search")}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="h-8 ps-8"
            />
          </div>
        )}
      </SidebarHeader>
      <SidebarContent>
        {searchableMenuGroups.Administration && searchableMenuGroups.Administration.length > 0 && (
          <NavMain title={t("Administration.title")} items={searchableMenuGroups.Administration} />
        )}
        {searchableMenuGroups.Accounting && searchableMenuGroups.Accounting.length > 0 && (
          <NavMain title={t("Accounting.title")} items={searchableMenuGroups.Accounting} />
        )}
        {searchableMenuGroups.HumanResources && searchableMenuGroups.HumanResources.length > 0 && (
          <NavMain title={t("HumanResources.title")} items={searchableMenuGroups.HumanResources} />
        )}
        {searchableMenuGroups.Settings && searchableMenuGroups.Settings.length > 0 && (
          <NavMain title={t("Settings.title")} items={searchableMenuGroups.Settings} />
        )}
      </SidebarContent>
      <SidebarFooter className="border-t">
        <SidebarUserFooter user={profile as ProfileType} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"
const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName
const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName
const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted border border-border",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";
import { cn } from "@/lib/utils";
const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent text-white bg-destructive hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);
export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}
function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}
export { Badge, badgeVariants };
</file>

<file path="src/components/ui/bento-grid.tsx">
import { ArrowRightIcon } from "lucide-react";
import { ComponentPropsWithoutRef, ReactNode } from "react";
import { Button } from "@/ui/button";
import { cn } from "@/lib/utils";
interface BentoGridProps extends ComponentPropsWithoutRef<"div"> {
  children: ReactNode;
  className?: string;
}
interface BentoCardProps extends ComponentPropsWithoutRef<"div"> {
  name: string;
  className: string;
  background: ReactNode;
  Icon: React.ElementType;
  description: string;
  href: string;
  cta: string;
}
const BentoGrid = ({ children, className, ...props }: BentoGridProps) => {
  return (
    <div
      className={cn(
        "grid w-full auto-rows-[22rem] grid-cols-3 gap-4",
        className,
      )}
      {...props}
    >
      {children}
    </div>
  );
};
const BentoCard = ({
  name,
  className,
  background,
  Icon,
  description,
  href,
  cta,
  ...props
}: BentoCardProps) => (
  <div
    key={name}
    className={cn(
      "group relative col-span-3 flex flex-col justify-between overflow-hidden rounded-xl",
      // light styles
      "bg-background [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]",
      // dark styles
      "transform-gpu dark:bg-background dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]",
      className,
    )}
    {...props}
  >
    <div>{background}</div>
    <div className="pointer-events-none z-10 flex transform-gpu flex-col gap-1 p-6 transition-all duration-300 group-hover:-translate-y-10">
      <Icon className="h-12 w-12 origin-left transform-gpu text-neutral-700 dark:text-neutral-300 transition-all duration-300 ease-in-out group-hover:scale-75" />
      <h3 className="text-xl font-semibold text-neutral-700 dark:text-neutral-300">
        {name}
      </h3>
      <p className="max-w-lg text-neutral-400">{description}</p>
    </div>
    <div
      className={cn(
        "pointer-events-none absolute bottom-0 flex w-full translate-y-10 transform-gpu flex-row items-center p-4 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100",
      )}
    >
      <Button variant="ghost" asChild size="sm" className="pointer-events-auto">
        <a href={href}>
          {cta}
          <ArrowRightIcon className="ms-2 h-4 w-4 rtl:rotate-180" />
        </a>
      </Button>
    </div>
    <div className="pointer-events-none absolute inset-0 transform-gpu transition-all duration-300 group-hover:bg-black/[.5] group-hover:dark:bg-neutral-800 group-hover:[mask-image:linear-gradient(to_top,transparent_60%,#000_100%)] [mask-image:linear-gradient(to_top,transparent_60%,#000_100%)]  group-hover:dark:[mask-image:linear-gradient(to_top,transparent_60%,#000_100%)] dark:[mask-image:linear-gradient(to_top,transparent_60%,#000_100%)]" />
  </div>
);
export { BentoCard, BentoGrid };
</file>

<file path="src/components/ui/beta-flag.tsx">
import { Flag } from "lucide-react";
import { TooltipContent, Tooltip, TooltipTrigger } from "./tooltip";
const BetaFlag = ({
  title,
  description,
  children,
}: {
  title: string;
  description: string;
  children: React.ReactNode;
}) => {
  return (
    <Tooltip>
      <TooltipTrigger className="w-full">{children}</TooltipTrigger>
      <TooltipContent className="max-w-[250px]">
        <div className="flex flex-row py-2">
          <div className="flex flex-col">
            <span className="flex flex-row items-center text-sm font-bold">
              <Flag className="me-2 !size-3" />
              {title}
            </span>
            <p className="text-xs">{description}</p>
          </div>
        </div>
      </TooltipContent>
    </Tooltip>
  );
};
export default BetaFlag;
</file>

<file path="src/components/ui/bike-icon.tsx">
const BikeIcon = ({ className }: { className?: string }) => (
  <svg
    className={className}
    stroke="currentColor"
    fill="currentColor"
    stroke-width="0"
    viewBox="0 0 24 24"
    height="200px"
    width="200px"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M16 1C16.5523 1 17 1.44772 17 2V3H22V9H19.9813L22.7271 16.5439C22.9033 16.9948 23 17.4856 23 17.999C23 20.2082 21.2091 21.999 19 21.999C17.1365 21.999 15.5707 20.7247 15.1263 19H10.874C10.4299 20.7252 8.86384 22 7 22C5.05551 22 3.43508 20.6125 3.07474 18.7736C2.43596 18.4396 2 17.7707 2 17V7C2 6.44772 2.44772 6 3 6H10C10.5523 6 11 6.44772 11 7V12C11 12.5523 11.4477 13 12 13H14C14.5523 13 15 12.5523 15 12V3H12V1H16ZM7 16C5.89543 16 5 16.8954 5 18C5 19.1046 5.89543 20 7 20C8.10457 20 9 19.1046 9 18C9 16.8954 8.10457 16 7 16ZM19 15.999C17.8954 15.999 17 16.8944 17 17.999C17 19.1036 17.8954 19.999 19 19.999C20.1046 19.999 21 19.1036 21 17.999C21 17.7587 20.9576 17.5282 20.8799 17.3148L20.8635 17.2714C20.5725 16.5266 19.8479 15.999 19 15.999ZM17.853 9H17V12C17 13.6569 15.6569 15 14 15H12C10.3431 15 9 13.6569 9 12H4V15.3542C4.73294 14.5238 5.80531 14 7 14C8.86384 14 10.4299 15.2748 10.874 17H15.1258C15.5695 15.2743 17.1358 13.999 19 13.999C19.2368 13.999 19.4688 14.0196 19.6943 14.0591L17.853 9ZM9 8H4V10H9V8ZM20 5H17V7H20V5Z"></path>
  </svg>
);
export default BikeIcon;
</file>

<file path="src/components/ui/breadcrumb.tsx">
import { useTranslations } from "next-intl";
import Link from "next/link";
import { useRouter } from "next/router";
import { ChevronRight } from "lucide-react";
import { routeMap } from "@/lib/breadcrumbs-list";
import { dynamicRoutePatterns } from "@/lib/breadcrumbs-list";
export function Breadcrumb() {
  const router = useRouter();
  const t = useTranslations();
  // Rather than creating a new translation context, handle namespace translation differently
  const getTranslatedKey = (key: string) => {
    if (!key) return "";
    const [namespace, translationKey] = key.split(".");
    // Use the default t function if no namespace is provided
    if (!translationKey) {
      return t(key);
    }
    try {
      // Try to use the namespace and key directly from the base t function
      return t(`${namespace}.${translationKey}`);
    } catch (error) {
      // Fallback to just the key if namespace doesn't exist
      return translationKey;
    }
  };
  // Generate breadcrumbs based on the current path
  const getBreadcrumbs = () => {
    const { pathname } = router;
    // Check for dynamic route patterns first
    for (const { pattern, breadcrumbs } of dynamicRoutePatterns) {
      if (pattern.test(pathname)) {
        return breadcrumbs.map((crumb) => ({
          ...crumb,
          label: crumb.labelKey ? getTranslatedKey(crumb.labelKey) : "",
        }));
      }
    }
    // Handle static routes
    if (routeMap[pathname]) {
      const breadcrumbs = [];
      // Always add dashboard
      if (pathname !== "/") {
        breadcrumbs.push({
          path: "/dashboard",
          label: t("Dashboard.title"),
          is_active: false,
        });
      }
      // Add current page
      breadcrumbs.push({
        path: pathname,
        label: routeMap[pathname].translationKey
          ? getTranslatedKey(routeMap[pathname].translationKey!)
          : routeMap[pathname].label,
        is_active: true,
      });
      return breadcrumbs;
    }
    // Default to just showing dashboard
    return [
      {
        path: "/dashboard",
        label: t("Dashboard.title"),
        is_active: pathname === "/",
      },
    ];
  };
  const breadcrumbs = getBreadcrumbs();
  // if (breadcrumbs.length <= 1) {
  //   return null;
  // }
  return (
    <nav
      className="text-muted-foreground flex items-center space-x-1 px-2 p-0 text-sm"
      aria-label="Breadcrumb"
    >
      {breadcrumbs.map((crumb, index) => (
        <div key={index} className="flex items-center">
          {index > 0 && (
            <ChevronRight className="text-muted-foreground/60 mx-1 h-4 w-4 rtl:rotate-180" />
          )}
          {crumb.is_active ? (
            <span className="text-foreground truncate font-medium">{crumb.label}</span>
          ) : (
            <Link href={crumb.path} className="hover:text-foreground truncate transition-colors">
              {crumb.label}
            </Link>
          )}
        </div>
      ))}
    </nav>
  );
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-8 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
        icon_sm: "h-8 w-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"
export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { DayPicker } from "react-day-picker";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { buttonVariants } from "@/ui/button";
import { cn } from "@/lib/utils";
function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md",
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  );
}
export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn("bg-card text-card-foreground rounded-lg border shadow-sm", className)}
      {...props}
    />
  ),
);
Card.displayName = "Card";
const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
);
CardHeader.displayName = "CardHeader";
const CardTitle = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn("text-2xl leading-none font-semibold tracking-tight", className)}
      {...props}
    />
  ),
);
CardTitle.displayName = "CardTitle";
const CardDescription = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("text-muted-foreground text-sm", className)} {...props} />
  ),
);
CardDescription.displayName = "CardDescription";
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & { headless?: boolean }
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", props.headless ? "pt-6" : "", className)} {...props} />
));
CardContent.displayName = "CardContent";
const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
);
CardFooter.displayName = "CardFooter";
export { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle };
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"
import { cn } from "@/lib/utils"
// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const
export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}
type ChartContextProps = {
  config: ChartConfig
}
const ChartContext = React.createContext<ChartContextProps | null>(null)
function useChart() {
  const context = React.useContext(ChartContext)
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }
  return context
}
const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"
const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )
  if (!colorConfig.length) {
    return null
  }
  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}
const ChartTooltip = RechartsPrimitive.Tooltip
const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()
    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }
      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label
      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }
      if (!value) {
        return null
      }
      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])
    if (!active || !payload?.length) {
      return null
    }
    const nestLabel = payload.length === 1 && indicator !== "dot"
    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color
            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"
const ChartLegend = RechartsPrimitive.Legend
const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()
    if (!payload?.length) {
      return null
    }
    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"
// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }
  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined
  let configLabelKey: string = key
  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }
  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}
export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"
import { cn } from "@/lib/utils"
const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName
export { Checkbox }
</file>

<file path="src/components/ui/chip.tsx">
import React from "react";
import { cn } from "@/lib/utils";
export type ChipColors =
  | "green"
  | "blue"
  | "red"
  | "yellow"
  | "orange"
  | "purple"
  | "cyan"
  | "hyper"
  | "oceanic";
export type ChipTypes = React.HTMLAttributes<HTMLSpanElement> & {
  /** The text inside the chip */
  label: string;
  /** The small icon before the chip label  */
  icon?: React.JSX.Element;
  /** The color of the chip, must be a tailwind color */
  color?: ChipColors;
  /** The size of the chip */
  size?: "small" | "normal" | "large";
  /** Enable/Disable the dot before the label of the chip */
  dot?: boolean;
  /** Red/Green dot next to the label of the chip indicating online/offline or available/unavailable */
  dotStatus?: "available" | "unavailable" | "none";
  radius?: "full" | "inherit" | "none";
};
export const Chip = React.forwardRef<HTMLSpanElement, ChipTypes>(
  (
    {
      label,
      size = "normal",
      icon,
      color,
      radius = "inherit",
      dot,
      dotStatus = "none",
      ...rest
    },
    ref,
  ) => {
    let defaultStyles =
      "flex flex-row w-fit gap-1 items-center  px-2.5 py-1  font-bold ";
    let radiusStyles = {
      inherit: " rounded",
      full: "rounded-full",
      none: "rounded-none",
    };
    let sizeStyles = {
      small: "h-[15px] leading-4 px-0 py-0 text-[9px] gap-0.5 ",
      normal: "h-fit text-xs",
      large: "text-base",
    };
    let dotStyles = {
      small: "flex h-1 w-1 rounded-full",
      normal: "flex h-2 w-2 rounded-full",
      large: "flex h-3 w-3 rounded-full",
    };
    let dotStatusStyles = {
      none: "bg-gray-500 dark:bg-gray-800",
      available: "bg-green-500",
      unavailable: "bg-red-500",
    };
    let colorStyles: any = {
      green:
        "bg-green-200 text-green-700 dark:bg-green-700 dark:text-green-200",
      blue: "bg-blue-200 text-blue-700 dark:bg-blue-700 dark:text-blue-100",
      red: "bg-red-200 text-red-700 dark:bg-red-700 dark:text-red-100",
      yellow:
        "bg-yellow-200 text-yellow-700 dark:bg-yellow-600 dark:text-black",
      orange:
        "bg-orange-200 text-orange-700 dark:bg-orange-700 dark:text-orange-100",
      purple:
        "bg-purple-200 text-purple-700 dark:bg-purple-700 dark:text-purple-100",
      cyan: "bg-cyan-200 text-cyan-700 dark:bg-cyan-700 dark:text-cyan-100",
      hyper:
        "text-white dark:text-black bg-gradient-to-tl from-pink-500 via-red-500 to-yellow-500 ",
      oceanic:
        "text-white dark:text-black bg-gradient-to-bl from-green-300 via-blue-500 to-purple-600",
    };
    if (label) {
      return (
        <span
          {...rest}
          ref={ref}
          className={cn(
            defaultStyles,
            sizeStyles[size],
            radiusStyles[radius],
            color ? colorStyles[color] : "border bg-none",
            rest.className,
            "p-2"
          )}
        >
          {dot && (
            <span
              className={cn(dotStyles[size], dotStatusStyles[dotStatus])}
            ></span>
          )}
          {icon && icon}
          {label}
        </span>
      );
    } else {
      return (
        <span
          {...rest}
          ref={ref}
          className={cn(
            "h-2 w-2 rounded-full",
            color ? colorStyles[color] : "border bg-none",
          )}
        ></span>
      );
    }
  },
);
</file>

<file path="src/components/ui/code-input.tsx">
import { DiamondPlus, Hash, Shuffle } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
type CodeInputProps = {
  children: React.ReactNode;
  onSerial: () => void;
  onRandom: () => void;
};
const CodeInput = ({ children, onSerial, onRandom }: CodeInputProps) => {
  const t = useTranslations();
  const locale = useLocale();
  return (
    <div className="relative">
      {children}
      <DropdownMenu dir={locale === "ar" ? "rtl" : "ltr"}>
        <DropdownMenuTrigger asChild>
          <Button size="icon_sm" type="button" variant="ghost" className="absolute end-0.5 top-0.5">
            <Hash className="size-6" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={onSerial}>
            <DiamondPlus /> {t("General.next_number")}
          </DropdownMenuItem>
          <DropdownMenuItem onClick={onRandom}>
            <Shuffle /> {t("General.random")}
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};
export default CodeInput;
</file>

<file path="src/components/ui/collapse-menu-button.tsx">
"use client";
import Link from "next/link";
import { useState } from "react";
import { ChevronDown, Dot, LucideIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/ui/button";
import { DropdownMenuArrow } from "@radix-ui/react-dropdown-menu";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger
} from "@/ui/collapsible";
import {
  Tooltip,
  TooltipTrigger,
  TooltipContent,
  TooltipProvider
} from "@/ui/tooltip";
import {
  DropdownMenu,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuSeparator
} from "@/ui/dropdown-menu";
import { usePathname } from "next/navigation";
type Submenu = {
  href: string;
  label: string;
  active?: boolean;
};
interface CollapseMenuButtonProps {
  icon: LucideIcon;
  label: string;
  active: boolean;
  submenus: Submenu[];
  isOpen: boolean | undefined;
}
export function CollapseMenuButton({
  icon: Icon,
  label,
  active,
  submenus,
  isOpen
}: CollapseMenuButtonProps) {
  const pathname = usePathname();
  const isSubmenuActive = submenus.some((submenu) =>
    submenu.active === undefined ? submenu.href === pathname : submenu.active
  );
  const [isCollapsed, setIsCollapsed] = useState<boolean>(isSubmenuActive);
  return isOpen ? (
    <Collapsible
      open={isCollapsed}
      onOpenChange={setIsCollapsed}
      className="w-full"
    >
      <CollapsibleTrigger
        className="[&[data-state=open]>div>div>svg]:rotate-180 mb-1"
        asChild
      >
        <Button
          variant={isSubmenuActive ? "secondary" : "ghost"}
          className="w-full justify-start h-10"
        >
          <div className="w-full items-center flex justify-between">
            <div className="flex items-center">
              <span className="mr-4">
                <Icon size={18} />
              </span>
              <p
                className={cn(
                  "max-w-[150px] truncate",
                  isOpen
                    ? "translate-x-0 opacity-100"
                    : "-translate-x-96 opacity-0"
                )}
              >
                {label}
              </p>
            </div>
            <div
              className={cn(
                "whitespace-nowrap",
                isOpen
                  ? "translate-x-0 opacity-100"
                  : "-translate-x-96 opacity-0"
              )}
            >
              <ChevronDown
                size={18}
                className="transition-transform duration-200"
              />
            </div>
          </div>
        </Button>
      </CollapsibleTrigger>
      <CollapsibleContent className="overflow-hidden transition-all duration-200 ease-out data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down">
        {submenus.map(({ href, label, active }, index) => (
          <Button
            key={index}
            variant={
              (active === undefined && pathname === href) || active
                ? "secondary"
                : "ghost"
            }
            className="w-full justify-start h-10 mb-1"
            asChild
          >
            <Link href={href}>
              <span className="mr-4 ml-2">
                <Dot size={18} />
              </span>
              <p
                className={cn(
                  "max-w-[170px] truncate",
                  isOpen
                    ? "translate-x-0 opacity-100"
                    : "-translate-x-96 opacity-0"
                )}
              >
                {label}
              </p>
            </Link>
          </Button>
        ))}
      </CollapsibleContent>
    </Collapsible>
  ) : (
    <DropdownMenu>
      <TooltipProvider disableHoverableContent>
        <Tooltip delayDuration={100}>
          <TooltipTrigger asChild>
            <DropdownMenuTrigger asChild>
              <Button
                variant={isSubmenuActive ? "secondary" : "ghost"}
                className="w-full justify-start h-10 mb-1"
              >
                <div className="w-full items-center flex justify-between">
                  <div className="flex items-center">
                    <span className={cn(isOpen === false ? "" : "mr-4")}>
                      <Icon size={18} />
                    </span>
                    <p
                      className={cn(
                        "max-w-[200px] truncate",
                        isOpen === false ? "opacity-0" : "opacity-100"
                      )}
                    >
                      {label}
                    </p>
                  </div>
                </div>
              </Button>
            </DropdownMenuTrigger>
          </TooltipTrigger>
          <TooltipContent side="right" align="start" alignOffset={2}>
            {label}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
      <DropdownMenuContent side="right" sideOffset={25} align="start">
        <DropdownMenuLabel className="max-w-[190px] truncate">
          {label}
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        {submenus.map(({ href, label, active }, index) => (
          <DropdownMenuItem key={index} asChild>
            <Link
              className={`cursor-pointer ${
                ((active === undefined && pathname === href) || active) &&
                "bg-secondary"
              }`}
              href={href}
            >
              <p className="max-w-[180px] truncate">{label}</p>
            </Link>
          </DropdownMenuItem>
        ))}
        <DropdownMenuArrow className="fill-border" />
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
import { cn } from "@/lib/utils"
function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}
function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}
function CollapsibleContent({
  className,
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      className={cn(
        "overflow-hidden transition-all duration-200 ease-out data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
        className
      )}
      data-slot="collapsible-content"
      {...props}
    />
  )
}
export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/combobox-add.tsx">
import { LabelProps } from "@radix-ui/react-label";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { Plus } from "lucide-react";
import * as React from "react";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/ui/command";
import { Label } from "@/ui/label";
import { PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Skeleton } from "@/ui/skeleton";
import { cn } from "@/lib/utils";
import { Button } from "./button";
type ComboboxAddTypes<T> = {
  labelKey?: keyof T | any;
  valueKey?: keyof T | any;
  data: T[];
  width?: string;
  texts?: {
    noItems?: string;
    placeholder?: string;
    searchPlaceholder?: string;
  };
  isLoading?: boolean;
  helperText?: any;
  popoverClassName?: string;
  disabled?: boolean;
  /** This the same value as the one with the key valueKey */
  defaultValue?: string;
  preview?: boolean;
  hideInput?: boolean;
  direction?: "rtl" | "ltr";
  inputProps?: any;
  id?: string;
  /** The label of the input field   */
  label?: any;
  labelProps?: LabelProps;
  /** If true, it will show a red asterisk next to the label*/
  isRequired?: boolean;
  onChange?: (e: any) => void;
  renderOption?: (item: T) => React.ReactNode;
  renderSelected?: (item: T) => React.ReactNode;
  addText?: string;
  onAddClick?: () => void;
};
export const ComboboxAdd = React.forwardRef<HTMLDivElement, ComboboxAddTypes<any>>(
  (
    {
      labelKey = "label",
      valueKey = "value",
      defaultValue = "",
      popoverClassName,
      direction,
      labelProps,
      inputProps,
      data,
      renderOption,
      renderSelected,
      addText = "Add Category",
      ...props
    },
    ref,
  ) => {
    const [open, setOpen] = React.useState(false);
    const [value, setValue] = React.useState(defaultValue);
    const containerRef = React.useRef<HTMLDivElement>(null);
    function getProperty<T>(obj: T, key: string): any {
      return key.split(".").reduce((o: any, k: string) => (o || {})[k], obj);
    }
    const handleOpenChange = (open: boolean) => {
      if (!(props.isLoading || props.preview)) {
        setOpen(open);
      }
    };
    const selectedItem = data.find((item) => getProperty(item, valueKey) === value);
    return (
      <div
        dir={direction}
        className={cn(
          "relative flex h-fit flex-col gap-2",
          props.width === "fit" ? "w-fit" : "w-full",
        )}
        ref={containerRef}
      >
        {props.label && <Label {...labelProps}>{props.label}</Label>}
        <PopoverPrimitive.Root
          open={open}
          onOpenChange={props.disabled ? undefined : handleOpenChange}
        >
          <PopoverTrigger disabled={props.disabled} asChild>
            {props.isLoading ? (
              <Skeleton className="h-[40px] w-full" />
            ) : (
              <div className="flex flex-col items-start gap-2">
                <div
                  className={cn(
                    "absolute top-[22px] h-[0.8px] w-full bg-gray-200 transition-all dark:bg-gray-800",
                    props.preview ? "opacity-100" : "opacity-0",
                  )}
                ></div>
                <button
                  disabled={props.disabled}
                  role="combobox"
                  type="button"
                  aria-expanded={open}
                  className={cn(
                    "ring-offset-background focus-visible:ring-ring inline-flex h-10 w-full items-center justify-between rounded-md border py-2 text-sm font-normal transition-all select-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50",
                    props.preview
                      ? "cursor-default rounded-none border-transparent px-0"
                      : "bg-background px-3",
                  )}
                >
                  {selectedItem
                    ? renderSelected
                      ? renderSelected(selectedItem)
                      : getProperty(selectedItem, labelKey)
                    : props.texts?.placeholder || ". . ."}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className={cn(
                      "size-4 transition-all",
                      !props.preview ? "visible opacity-100" : "invisible opacity-0",
                    )}
                    aria-label="Chevron down icon"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="m6 9 6 6 6-6" />
                  </svg>
                </button>
              </div>
            )}
          </PopoverTrigger>
          <PopoverContent
            sideOffset={0}
            className={cn(
              "w-[var(--radix-popover-trigger-width)] p-0",
              props.helperText && "-mt-4",
            )}
            dir={direction}
          >
            <Command
              filter={(value, search) => {
                if (value.toLowerCase().includes(search.toLowerCase())) return 1;
                return 0;
              }}
            >
              {!props.hideInput && (
                <CommandInput
                  {...inputProps}
                  dir={direction}
                  placeholder={props.texts?.searchPlaceholder || "Search"}
                />
              )}
              <CommandEmpty>{props.texts?.noItems || "No items found."}</CommandEmpty>
              <div className="flex flex-row items-center gap-2">
                <Button
                  variant="outline"
                  className="w-full rounded-none !text-blue-500 dark:!text-blue-400"
                  onClick={props.onAddClick}
                >
                  {addText}
                  <Plus className="size-4" />
                </Button>
              </div>
              <CommandList>
                <CommandGroup className={cn("max-h-[200px]", data.length > 0 && "overflow-y-auto")}>
                  {data.map((item: any, i) => (
                    <CommandItem
                      key={item[valueKey]}
                      onSelect={() => {
                        const newValue = getProperty(item, valueKey);
                        setValue(newValue === value ? "" : (newValue as string));
                        if (props.onChange) {
                          props.onChange(newValue === value ? "" : (newValue as string));
                        }
                        setOpen(false);
                      }}
                    >
                      <svg
                        aria-label="Check Icon"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className={cn(
                          "icon",
                          value === getProperty(item, valueKey) ? "opacity-100" : "opacity-0",
                        )}
                        style={{ marginInlineEnd: "0.5rem" }}
                      >
                        <polyline points="20 6 9 17 4 12" />
                      </svg>
                      {renderOption ? renderOption(item) : getProperty(item, labelKey)}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </PopoverPrimitive.Root>
      </div>
    );
  },
);
</file>

<file path="src/components/ui/combobox.tsx">
import { LabelProps } from "@radix-ui/react-label";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import * as React from "react";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  //   CommandInputProps,
  CommandItem,
  CommandList,
} from "@/ui/command";
// import { HelperText } from "@/ui/helper-text";
import { Label } from "@/ui/label";
import { PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Skeleton } from "@/ui/skeleton";
import { cn } from "@/lib/utils";
import { Button } from "./button";
type ComboboxTypes<T> = {
  labelKey?: keyof T | any;
  valueKey?: keyof T | any;
  data: T[];
  width?: string;
  texts?: {
    noItems?: string;
    placeholder?: string;
    searchPlaceholder?: string;
  };
  isLoading?: boolean;
  helperText?: any;
  popoverClassName?: string;
  /** This the same value as the one with the key valueKey */
  defaultValue?: string;
  preview?: boolean;
  hideInput?: boolean;
  direction?: "rtl" | "ltr";
  inputProps?: any;
  //   TODO: fix this
  //   inputProps?: CommandInputProps;
  id?: string;
  /** The label of the input field   */
  label?: any;
  labelProps?: LabelProps;
  /** If true, it will show a red asterisk next to the label*/
  isRequired?: boolean;
  onChange?: (e: any) => void;
  renderOption?: (item: T) => React.ReactNode;
  renderSelected?: (item: T) => React.ReactNode;
};
export const Combobox = React.forwardRef<HTMLDivElement, ComboboxTypes<any>>(
  (
    {
      labelKey = "label",
      valueKey = "value",
      defaultValue = "",
      popoverClassName,
      direction,
      labelProps,
      inputProps,
      data,
      renderOption,
      renderSelected,
      ...props
    },
    ref,
  ) => {
    const [open, setOpen] = React.useState(false);
    const [value, setValue] = React.useState(defaultValue);
    const containerRef = React.useRef<HTMLDivElement>(null);
    // function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
    //   return key.split(".").reduce((o, k) => (o || {})[k], obj);
    // }
    function getProperty<T>(obj: T, key: string): any {
      return key.split(".").reduce((o: any, k: string) => (o || {})[k], obj);
    }
    const handleOpenChange = (open: boolean) => {
      if (!(props.isLoading || props.preview)) {
        setOpen(open);
      }
    };
    const selectedItem = data.find((item) => getProperty(item, valueKey) === value);
    return (
      <div
        className={cn(
          "relative flex h-fit flex-col gap-2",
          props.width === "fit" ? "w-fit" : "w-full",
        )}
        ref={containerRef}
      >
        {props.label && <Label {...labelProps}>{props.label}</Label>}
        <PopoverPrimitive.Root open={open} onOpenChange={handleOpenChange}>
          <PopoverTrigger asChild>
            {props.isLoading ? (
              <div className="pb-2">
                <Skeleton className="h-[40px] min-h-[40px] w-full" />
              </div>
            ) : (
              <div className="flex flex-col items-start gap-2">
                <div
                  className={cn(
                    "absolute top-[22px] h-[0.8px] w-full bg-gray-200 transition-all dark:bg-gray-800",
                    props.preview ? "opacity-100" : "opacity-0",
                  )}
                ></div>
                <Button
                  role="combobox"
                  type="button"
                  variant="outline"
                  size="sm"
                  aria-expanded={open}
                  className={cn(
                    "ring-offset-background focus-visible:ring-ring inline-flex w-full items-center justify-between rounded-md border py-2 text-sm font-normal transition-all select-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50",
                    props.preview
                      ? "cursor-default rounded-none border-transparent px-0"
                      : "bg-background px-3",
                  )}
                >
                  {selectedItem
                    ? renderSelected
                      ? renderSelected(selectedItem)
                      : getProperty(selectedItem, labelKey)
                    : props.texts?.placeholder || ". . ."}
                  {/* {value
                    ? getProperty(
                        data.find((item: any) => item[valueKey] === value) ||
                          {},
                        labelKey,
                      )
                    : props.texts?.placeholder || ". . ."} */}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className={cn(
                      "size-4 transition-all",
                      !props.preview ? "visible opacity-100" : "invisible opacity-0",
                    )}
                    aria-label="Chevron down icon"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="m6 9 6 6 6-6" />
                  </svg>
                </Button>
                {/* <HelperText helperText={props.helperText} /> */}
              </div>
            )}
          </PopoverTrigger>
          <PopoverContent
            // sideOffset={0}
            align="start"
            className={cn("w-[--radix-popover-trigger-width] p-0", props.helperText && "-mt-4")}
            dir={direction}
            // container={containerRef.current}
          >
            <Command
              filter={(value, search) => {
                if (value.toLowerCase().includes(search.toLowerCase())) return 1;
                return 0;
              }}
            >
              {!props.hideInput && (
                <CommandInput
                  {...inputProps}
                  dir={direction}
                  placeholder={props.texts?.searchPlaceholder || "Search"}
                />
              )}
              <CommandEmpty>{props.texts?.noItems || "No items found."}</CommandEmpty>
              <CommandList>
                <CommandGroup className={cn("max-h-[200px]", data.length > 0 && "overflow-y-auto")}>
                  {data.map((item: any, i) => (
                    <CommandItem
                      key={i}
                      onSelect={() => {
                        const newValue = getProperty(item, valueKey);
                        setValue(newValue === value ? "" : (newValue as string));
                        if (props.onChange) {
                          props.onChange(newValue === value ? "" : (newValue as string));
                        }
                        setOpen(false);
                      }}
                    >
                      <svg
                        aria-label="Check Icon"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className={cn(
                          "icon",
                          value === getProperty(item, valueKey) ? "opacity-100" : "opacity-0",
                        )}
                        style={{ marginInlineEnd: "0.5rem" }}
                      >
                        <polyline points="20 6 9 17 4 12" />
                      </svg>
                      {renderOption ? renderOption(item) : getProperty(item, labelKey)}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </PopoverPrimitive.Root>
      </div>
    );
  },
);
</file>

<file path="src/components/ui/command-menu.tsx">
import { useEffect, useState } from "react";
import { useLocale, useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/ui/command";
import { Dialog, DialogContent } from "@/ui/dialog";
import { commandList } from "@/lib/command-list";
import { useMainStore } from "@/hooks/main.store";
type ShortcutCommand = {
  key: string;
  path: string;
  metaKey?: boolean;
};
export function CommandMenu({ dir }: { dir: "ltr" | "rtl" }) {
  const router = useRouter();
  const { openCommandMenu, setOpenCommandMenu } = useMainStore();
  const t = useTranslations();
  const locale = useLocale();
  const tGeneral = useTranslations("General");
  // Define all shortcuts and their corresponding paths
  const shortcuts: ShortcutCommand[] = [
    { key: "k", path: "", metaKey: true }, // Command menu toggle
    { key: "d", path: "/dashboard", metaKey: true },
    { key: "c", path: "/clients", metaKey: true },
    { key: "j", path: "/jobs", metaKey: true },
    { key: "e", path: "/employees", metaKey: true },
    { key: "x", path: "/expenses", metaKey: true },
    { key: "p", path: "/products", metaKey: true },
    { key: "i", path: "/invoices", metaKey: true },
    { key: "o", path: "/companies", metaKey: true },
    { key: "l", path: "/calendar", metaKey: true },
    { key: "s", path: "/settings", metaKey: true },
  ];
  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      // Find matching shortcut
      const shortcut = shortcuts.find(
        (s) =>
          s.key.toLowerCase() === e.key?.toLowerCase() && (!s.metaKey || e.metaKey || e.ctrlKey),
      );
      if (!shortcut) return;
      // Handle command menu toggle (⌘K) separately
      if (!shortcut.path) {
        e.preventDefault();
        setOpenCommandMenu(!openCommandMenu);
        return;
      }
      // Only handle other shortcuts when menu is open
      if (openCommandMenu) {
        e.preventDefault();
        router.push(shortcut.path);
      }
    };
    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, [router, shortcuts, openCommandMenu, setOpenCommandMenu]);
  const runCommand = (command: () => void) => {
    setOpenCommandMenu(false);
    command();
  };
  // Get the English label from the translation key
  const getEnglishLabel = (translationKey: string) => {
    return translationKey.split(".")[0];
  };
  return (
    <Dialog open={openCommandMenu} onOpenChange={setOpenCommandMenu}>
      <DialogContent className="max-w-xl overflow-hidden p-0" dir={locale === "ar" ? "rtl" : "ltr"}>
        <Command
          className="[&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-item]_svg]:w-5] [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5"
          dir={dir}
        >
          <CommandInput placeholder={tGeneral("search")} />
          <CommandList>
            <CommandEmpty>{tGeneral("no_results")}</CommandEmpty>
            {commandList.map((group, groupIndex) => (
              <div key={groupIndex}>
                <CommandGroup heading={t(group.heading)}>
                  {group.items.map((item) => {
                    const englishLabel = getEnglishLabel(item.label);
                    const arabicLabel = t(item.label);
                    return (
                      <CommandItem
                        key={item.href}
                        onSelect={() => runCommand(() => router.push(item.href))}
                        value={`${englishLabel} ${arabicLabel}`}
                      >
                        <item.icon className="ms-2 h-4 w-4" />
                        <span>{arabicLabel}</span>
                        <CommandShortcut>{item.shortcut}</CommandShortcut>
                      </CommandItem>
                    );
                  })}
                </CommandGroup>
                <CommandSeparator />
              </div>
            ))}
          </CommandList>
        </Command>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";
import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/ui/dialog";
const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;
const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};
const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="me-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));
CommandInput.displayName = CommandPrimitive.Input.displayName;
const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));
CommandList.displayName = CommandPrimitive.List.displayName;
const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));
CommandEmpty.displayName = CommandPrimitive.Empty.displayName;
const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));
CommandGroup.displayName = CommandPrimitive.Group.displayName;
const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;
const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className,
    )}
    {...props}
  />
));
CommandItem.displayName = CommandPrimitive.Item.displayName;
const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ms-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";
export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};
</file>

<file path="src/components/ui/confirm-delete.tsx">
import { Loader2 } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/ui/alert-dialog";
interface ConfirmDeleteProps {
  isDeleteDialogOpen: boolean;
  setIsDeleteDialogOpen: (open: boolean) => void;
  isDeleting: boolean;
  handleConfirmDelete: () => void;
  title: string;
  description: string;
}
const ConfirmDelete = ({
  isDeleteDialogOpen,
  setIsDeleteDialogOpen,
  isDeleting,
  handleConfirmDelete,
  title,
  description,
}: ConfirmDeleteProps) => {
  const t = useTranslations();
  const locale = useLocale();
  return (
    <AlertDialog
      open={isDeleteDialogOpen}
      onOpenChange={(open) => {
        if (!isDeleting) {
          setIsDeleteDialogOpen(open);
        }
      }}
    >
      <AlertDialogContent dir={locale === "ar" ? "rtl" : "ltr"}>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isDeleting}>{t("General.cancel")}</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleConfirmDelete}
            disabled={isDeleting}
            className="bg-destructive hover:bg-destructive/90 text-white"
          >
            {isDeleting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                {t("General.deleting")}
              </>
            ) : (
              t("General.delete")
            )}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};
export default ConfirmDelete;
</file>

<file path="src/components/ui/currency-input.tsx">
import { useEffect, useState, useRef } from "react";
import { Input } from "@/ui/input";
import { SARSymbol } from "./sar-symbol";
// Helper function to convert Arabic numerals to English numerals
const convertArabicToEnglishNumerals = (value: string): string => {
  const arabicNumerals = ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"];
  return value
    .split("")
    .map((char) => {
      if (char === ".") return char; // Preserve periods
      const index = arabicNumerals.indexOf(char);
      return index !== -1 ? index.toString() : char;
    })
    .join("");
};
interface CurrencyInputProps
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange" | "value"> {
  value?: number;
  onChange?: (value: number | undefined) => void;
  showCommas?: boolean;
  showCurrencySymbol?: boolean;
}
export function CurrencyInput({
  value,
  onChange,
  showCurrencySymbol = true,
  showCommas = false,
  ...props
}: CurrencyInputProps) {
  const [inputText, setInputText] = useState(value?.toFixed(2) || "");
  const isUserInput = useRef(false);
  // Update input text when value prop changes, but only if it's not from user input
  useEffect(() => {
    if (!isUserInput.current && value !== undefined) {
      setInputText(value.toFixed(2));
    }
    isUserInput.current = false;
  }, [value]);
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    isUserInput.current = true;
    const newValue = e.target.value;
    // Allow empty value
    if (newValue === "") {
      setInputText("");
      onChange?.(undefined);
      return;
    }
    // Only allow numbers, periods, and commas
    if (!/^[0-9٠-٩.,]*$/.test(newValue)) {
      return;
    }
    // Convert to English numerals first
    const converted = convertArabicToEnglishNumerals(newValue);
    // Split by decimal point
    const [wholePart, decimalPart] = converted.split(".");
    // Remove any existing commas from whole part
    const cleanWholePart = wholePart.replace(/,/g, "");
    // Format the whole part with commas if showCommas is true
    let formattedValue = cleanWholePart;
    if (showCommas && cleanWholePart) {
      const num = Number(cleanWholePart);
      if (!isNaN(num)) {
        formattedValue = num.toLocaleString();
      }
    }
    // Add back the decimal part if it exists, limiting to 2 digits
    if (decimalPart !== undefined) {
      formattedValue += `.${decimalPart.slice(0, 2)}`;
    }
    setInputText(formattedValue);
    // Update the numeric value
    const num = cleanWholePart
      ? Number(cleanWholePart + (decimalPart ? `.${decimalPart.slice(0, 2)}` : ""))
      : undefined;
    if (!isNaN(num as number)) {
      onChange?.(num);
    }
  };
  const handleBlur = () => {
    // Format to always show 2 decimal places on blur if we have a value
    if (inputText) {
      const num = Number(inputText);
      if (!isNaN(num)) {
        isUserInput.current = true;
        if (showCommas) {
          const formatted = num.toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
          });
          setInputText(formatted);
        } else {
          setInputText(num.toFixed(2));
        }
      }
    }
  };
  return (
    <div className="relative">
      <Input
        type="text"
        inputMode="decimal"
        placeholder="0.00"
        className="currency-input"
        value={inputText}
        onChange={handleChange}
        onBlur={handleBlur}
        {...props}
      />
      {showCurrencySymbol && (
        <span className="text-muted-foreground absolute end-2 top-1/2 -translate-y-1/2">
          <SARSymbol className="size-4" />
        </span>
      )}
    </div>
  );
}
</file>

<file path="src/components/ui/customers-section.tsx">
import { InfiniteSlider } from "@/ui/infinite-slider";
import { ProgressiveBlur } from "@/ui/progressive-blur";
const CustomersSection = () => {
  return (
    <section className="bg-background pb-16 md:py-32">
      <div className="group relative m-auto max-w-6xl px-6">
        <div className="flex flex-col items-center md:flex-row">
          <div className="md:max-w-44 md:border-r md:pr-6">
            <p className="text-end text-sm">Powering the best teams</p>
          </div>
          <div className="relative py-6 md:w-[calc(100%-11rem)]" dir="ltr">
            <InfiniteSlider gap={112}>
              <div className="flex">
                <img
                  className="mx-auto h-5 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/nvidia.svg"
                  alt="Nvidia Logo"
                  height="20"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-4 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/column.svg"
                  alt="Column Logo"
                  height="16"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-4 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/github.svg"
                  alt="GitHub Logo"
                  height="16"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-5 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/nike.svg"
                  alt="Nike Logo"
                  height="20"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-5 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/lemonsqueezy.svg"
                  alt="Lemon Squeezy Logo"
                  height="20"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-4 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/laravel.svg"
                  alt="Laravel Logo"
                  height="16"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-7 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/lilly.svg"
                  alt="Lilly Logo"
                  height="28"
                  width="auto"
                />
              </div>
              <div className="flex">
                <img
                  className="mx-auto h-6 w-fit dark:invert"
                  src="https://html.tailus.io/blocks/customers/openai.svg"
                  alt="OpenAI Logo"
                  height="24"
                  width="auto"
                />
              </div>
            </InfiniteSlider>
            <div className="from-background absolute inset-y-0 left-0 w-20 bg-linear-to-r"></div>
            <div className="from-background absolute inset-y-0 right-0 w-20 bg-linear-to-l"></div>
            <ProgressiveBlur
              className="pointer-events-none absolute top-0 left-0 h-full w-20"
              direction="left"
              blurIntensity={1}
            />
            <ProgressiveBlur
              className="pointer-events-none absolute top-0 right-0 h-full w-20"
              direction="right"
              blurIntensity={1}
            />
          </div>
        </div>
      </div>
    </section>
  );
};
export default CustomersSection;
</file>

<file path="src/components/ui/data-model-list.tsx">
import { ReactNode } from "react";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Skeleton } from "@/ui/skeleton";
interface DataModelListProps<T> {
  data?: T[];
  isLoading: boolean;
  error: Error | null;
  emptyMessage: string;
  errorMessage?: string;
  addFirstItemMessage?: string;
  renderItem: (item: T) => ReactNode;
  gridCols?: "1" | "2" | "3";
  skeletonCount?: number;
}
export default function DataModelList<T>({
  data = [],
  isLoading,
  error,
  emptyMessage,
  errorMessage,
  addFirstItemMessage,
  renderItem,
  gridCols = "3",
  skeletonCount = 3,
}: DataModelListProps<T>) {
  if (isLoading) {
    return (
      <div className={`grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-${gridCols}`}>
        {Array.from({ length: skeletonCount }).map((_, i) => (
          <Card key={i}>
            <CardHeader>
              <Skeleton className="h-4 w-3/4" />
            </CardHeader>
            <CardContent>
              <Skeleton className="mb-2 h-4 w-1/2" />
              <Skeleton className="h-4 w-1/4" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }
  if (error) {
    return (
      <div className="rounded border border-red-200 bg-red-50 px-4 py-3 text-red-700">
        {errorMessage || "An error occurred while fetching data"}
      </div>
    );
  }
  if (data.length === 0) {
    return (
      <div className="py-12 text-center">
        <p className="text-gray-500">{emptyMessage}</p>
        {addFirstItemMessage && (
          <p className="text-primary hover:text-primary/90 mt-2 inline-flex items-center gap-2">
            {addFirstItemMessage}
          </p>
        )}
      </div>
    );
  }
  return (
    <div className={`grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-${gridCols}`}>
      {data.map(renderItem)}
    </div>
  );
}
</file>

<file path="src/components/ui/date-picker.tsx">
"use client";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import * as React from "react";
import { Button } from "@/ui/button";
import { Calendar } from "@/ui/calendar";
import { FormControl } from "@/ui/form";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { cn } from "@/lib/utils";
interface DatePickerProps {
  date?: Date;
  onSelect: (date: Date | undefined) => void;
  placeholder?: string;
  disabled?: boolean;
}
export function DatePicker({
  date,
  onSelect,
  placeholder = "Pick a date",
  disabled = false,
}: DatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <FormControl>
          <Button
            variant={"outline"}
            className={cn(
              "w-full justify-start text-left font-normal",
              !date && "text-muted-foreground",
            )}
            disabled={disabled}
          >
            <CalendarIcon className="h-4 w-4" />
            {date ? format(date, "PPP") : <span>{placeholder}</span>}
          </Button>
        </FormControl>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <Calendar mode="single" selected={date} onSelect={onSelect} initialFocus />
      </PopoverContent>
    </Popover>
  );
}
</file>

<file path="src/components/ui/debug-pukla.tsx">
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/ui/accordion";
import { useMainStore } from "@/hooks/main.store";
const DebugPukla = () => {
  const { selectedPukla } = useMainStore();
  return (
    <div className="bg-background fixed end-2 bottom-2 z-[100] rounded border px-4 py-0">
      <Accordion type="single" collapsible>
        <AccordionItem value="item-1" className="min-w-[200px] !border-none">
          <AccordionTrigger>Current Pukla is</AccordionTrigger>
          <AccordionContent className="bg-muted-foreground/10 max-h-[200px] max-w-[200px] overflow-y-auto rounded p-2">
            <pre dir="ltr" className="overflow-y-auto">
              {JSON.stringify(selectedPukla, null, 2)}
            </pre>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
};
export default DebugPukla;
</file>

<file path="src/components/ui/debug-tools.tsx">
import { HelpCircle } from "lucide-react";
import useUserStore from "@/stores/use-user-store";
import { Button } from "./button";
import { Popover, PopoverContent, PopoverTrigger } from "./popover";
import { ScrollArea } from "./scroll-area";
const DebugTools = () => {
  const profile = useUserStore((state) => state.profile);
  const user = useUserStore((state) => state.user);
  const enterprise = useUserStore((state) => state.enterprise);
  const membership = useUserStore((state) => state.membership);
  const permissions = useUserStore((state) => state.permissions);
  return (
    <div className="fixed bottom-14 left-1 z-50 flex flex-col gap-2 p-4">
      <Popover>
        <PopoverTrigger asChild>
          <Button size="icon_sm" className="size-[38px] rounded-full" variant="outline">
            <HelpCircle />
          </Button>
        </PopoverTrigger>
        <PopoverContent align="end" side="left" className="w-[300px]">
          <ScrollArea className="h-[400px]">
            <div className="flex flex-col gap-4">
            <div>
              <div className="text-xs font-bold">User ID</div>
                <div className="text-xs break-all">{user?.id}</div>
              </div>
              <div>
                <div className="text-xs font-bold">Enterprise</div>
                <div className="text-xs break-all">
                  {enterprise?.name} ({enterprise?.id})
                </div>
              </div>
              <div>
                <div className="text-xs font-bold">Role ID</div>
                <div className="text-xs break-all">{membership?.role_id}</div>
            </div>
            <div>
                <div className="text-xs font-bold">Permissions</div>
                <div className="flex flex-col gap-1">
                  {permissions.map((permission) => (
                    <div key={permission} className="text-xs">
                      {permission}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </ScrollArea>
        </PopoverContent>
      </Popover>
    </div>
  );
};
export default DebugTools;
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";
import { cn } from "@/lib/utils";
function Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}
function DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}
function DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}
function DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent z-20 data-[state=open]:text-muted-foreground absolute top-4 end-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-start", className)}
      {...props}
    />
  );
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props}
    />
  );
}
function DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  );
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};
</file>

<file path="src/components/ui/documents-list.tsx">
"use client";
import { format } from "date-fns";
import { File, Download, ExternalLink, Trash2 } from "lucide-react";
import { useTranslations } from "next-intl";
import { useState, useEffect } from "react";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/ui/alert-dialog";
import { Button } from "@/ui/button";
import { Card, CardContent } from "@/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/ui/table";
import { deleteDocument, getDocumentsByEntity } from "@/services/documents";
interface DocumentListProps {
  entityId?: string;
  entityType: "company" | "expense";
}
export function DocumentList({ entityId, entityType }: DocumentListProps) {
  const t = useTranslations();
  const [documents, setDocuments] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [documentToDelete, setDocumentToDelete] = useState<string | null>(null);
  useEffect(() => {
    if (entityId) {
      fetchDocuments();
    } else {
      setLoading(false);
    }
  }, [entityId]);
  const fetchDocuments = async () => {
    if (!entityId) return;
    try {
      setLoading(true);
      const docs = await getDocumentsByEntity(entityId, entityType);
      setDocuments(docs);
    } catch (error) {
      // TODO: only when editing a entity that has documents
      console.error("Error fetching documents:", error);
    } finally {
      setLoading(false);
    }
  };
  const handleDeleteClick = (documentId: string) => {
    setDocumentToDelete(documentId);
    setDeleteDialogOpen(true);
  };
  const handleConfirmDelete = async () => {
    if (!documentToDelete) return;
    try {
      await deleteDocument(documentToDelete);
      setDocuments(documents.filter((doc) => doc.id !== documentToDelete));
      toast.success(t("Documents.delete_success"));
    } catch (error) {
      toast.error(t("Documents.delete_error"));
      console.error("Error deleting document:", error);
    } finally {
      setDeleteDialogOpen(false);
      setDocumentToDelete(null);
    }
  };
  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex justify-center">
            <p className="text-muted-foreground text-sm">{t("General.loading")}</p>
          </div>
        </CardContent>
      </Card>
    );
  }
  if (!documents.length) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col items-center justify-center py-6">
            <File className="text-muted-foreground mb-2 h-8 w-8" />
            <p className="text-muted-foreground text-sm">{t("Documents.no_documents")}</p>
          </div>
        </CardContent>
      </Card>
    );
  }
  return (
    <>
      <Card>
        <CardContent className="p-4">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>{t("Documents.name")}</TableHead>
                <TableHead>{t("Documents.uploaded_on")}</TableHead>
                <TableHead className="text-right">{t("Documents.actions")}</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {documents.map((doc) => (
                <TableRow key={doc.id}>
                  <TableCell className="font-medium">
                    <div className="flex items-center gap-2">
                      <File className="h-4 w-4" />
                      {doc.name}
                    </div>
                  </TableCell>
                  <TableCell>{format(new Date(doc.created_at), "PPP")}</TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      <Button variant="outline" size="icon" asChild>
                        <a href={doc.url} download>
                          <Download className="h-4 w-4" />
                        </a>
                      </Button>
                      <Button variant="outline" size="icon" asChild>
                        <a href={doc.url} target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="h-4 w-4" />
                        </a>
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleDeleteClick(doc.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>{t("Documents.confirm_delete")}</AlertDialogTitle>
            <AlertDialogDescription>{t("Documents.delete_warning")}</AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>{t("General.cancel")}</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmDelete}>
              {t("General.delete")}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
</file>

<file path="src/components/ui/documents-uploader.tsx">
"use client";
import { File, Plus, Trash2, Upload } from "lucide-react";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import { Card, CardContent } from "@/ui/card";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { ScrollArea } from "@/ui/scroll-area";
import { uploadDocument } from "@/services/documents";
export interface DocumentFile {
  id?: string;
  name: string;
  file: File;
  url?: string;
  entity_id?: string;
  entity_type?:
    | "company"
    | "expense"
    | "salary"
    | "employee"
    | "invoice"
    | "quote"
    | "vendor"
    | "warehouse"
    | "branch"
    | "office"
    | "department";
  uploaded?: boolean;
}
interface DocumentUploaderProps {
  entityId?: string;
  entityType:
    | "company"
    | "expense"
    | "salary"
    | "employee"
    | "invoice"
    | "quote"
    | "vendor"
    | "warehouse"
    | "branch"
    | "office"
    | "department";
  existingDocuments?: DocumentFile[];
  onDocumentsChange: (documents: DocumentFile[]) => void;
  disabled?: boolean;
  maxFiles?: number;
}
export function DocumentUploader({
  entityId,
  entityType,
  existingDocuments = [],
  onDocumentsChange,
  disabled = false,
  maxFiles = 10,
}: DocumentUploaderProps) {
  const t = useTranslations();
  const [documents, setDocuments] = useState<DocumentFile[]>(existingDocuments);
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files?.length) return;
    if (documents.length + e.target.files.length > maxFiles) {
      toast.error(t("Documents.max_files_error"), {
        description: t("Documents.max_files_description", { count: maxFiles }),
      });
      return;
    }
    const newFiles: DocumentFile[] = Array.from(e.target.files).map((file) => ({
      name: file.name,
      file,
      entity_type: entityType,
    }));
    const updatedDocuments = [...documents, ...newFiles];
    setDocuments(updatedDocuments);
    onDocumentsChange(updatedDocuments);
  };
  const handleNameChange = (index: number, name: string) => {
    const updatedDocuments = [...documents];
    updatedDocuments[index].name = name;
    setDocuments(updatedDocuments);
    onDocumentsChange(updatedDocuments);
  };
  const handleRemoveFile = (index: number) => {
    const updatedDocuments = documents.filter((_, i) => i !== index);
    setDocuments(updatedDocuments);
    onDocumentsChange(updatedDocuments);
  };
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <Label>{t("Documents.title")}</Label>
        <div className="relative">
          <Input
            type="file"
            multiple
            onChange={handleFileChange}
            className="absolute inset-0 cursor-pointer opacity-0"
            disabled={disabled || documents.length >= maxFiles}
            accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
          />
          <Button
            type="button"
            variant="outline"
            size="sm"
            disabled={disabled || documents.length >= maxFiles}
          >
            <Plus className="mr-2 h-4 w-4" />
            {t("Documents.add_document")}
          </Button>
        </div>
      </div>
      {documents.length > 0 ? (
        <ScrollArea className="h-[200px] rounded-md border">
          <div className="space-y-2 p-4">
            {documents.map((doc, index) => (
              <Card key={doc.id || index} className="overflow-hidden">
                <CardContent className="p-3">
                  <div className="flex items-center gap-3">
                    <File className="text-muted-foreground h-5 w-5 flex-shrink-0" />
                    <Input
                      value={doc.name}
                      onChange={(e) => handleNameChange(index, e.target.value)}
                      className="h-8 flex-1"
                      placeholder={t("Documents.document_name")}
                      disabled={disabled || doc.uploaded}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8 flex-shrink-0"
                      onClick={() => handleRemoveFile(index)}
                      disabled={disabled || doc.uploaded}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </ScrollArea>
      ) : (
        <div className="flex h-[200px] flex-col items-center justify-center rounded-md border border-dashed">
          <Upload className="text-muted-foreground mb-2 h-8 w-8" />
          <p className="text-muted-foreground text-sm">{t("Documents.no_documents")}</p>
          <p className="text-muted-foreground mt-1 text-xs">{t("Documents.drag_or_click")}</p>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";
import { cn } from "@/lib/utils";
const DropdownMenu = DropdownMenuPrimitive.Root;
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
const DropdownMenuGroup = DropdownMenuPrimitive.Group;
const DropdownMenuPortal = DropdownMenuPrimitive.Portal;
const DropdownMenuSub = DropdownMenuPrimitive.Sub;
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;
const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "ps-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ms-auto" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;
const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;
const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "ps-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 ps-8 pe-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;
const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 ps-8 pe-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "ps-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;
const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ms-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";
export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/enterprise-switcher.tsx">
"use client";
import { ChevronsUpDown, Plus } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import * as React from "react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from "@/ui/sidebar";
import { Tooltip, TooltipContent, TooltipTrigger } from "./tooltip";
export function EnterpriseSwitcher({
  enterprises,
}: {
  enterprises: {
    name: string;
    logo: React.ElementType;
    plan: string;
  }[];
}) {
  const t = useTranslations();
  const lang = useLocale();
  const { isMobile } = useSidebar();
  const [activeEnterprise, setActiveEnterprise] = React.useState(enterprises[0]);
  if (!activeEnterprise) {
    return null;
  }
  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu dir={lang === "ar" ? "rtl" : "ltr"}>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg">
                <activeEnterprise.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{activeEnterprise.name}</span>
                <span className="truncate text-xs">{activeEnterprise.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-muted-foreground text-xs">
              {t("General.enterprises")}
            </DropdownMenuLabel>
            {enterprises.map((enterprise, index) => (
              <DropdownMenuItem
                key={enterprise.name}
                onClick={() => setActiveEnterprise(enterprise)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <enterprise.logo className="size-4 shrink-0" />
                </div>
                {enterprise.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <Tooltip>
              <TooltipTrigger>
                <DropdownMenuItem className="gap-2 p-2" disabled={true}>
                  <div className="bg-background flex size-6 items-center justify-center rounded-md border">
                    <Plus className="size-4" />
                  </div>
                  <div className="text-muted-foreground font-medium">
                    {t("General.add_enterprise")}
                  </div>
                </DropdownMenuItem>
              </TooltipTrigger>
              <TooltipContent side="left">
                <p>{t("General.soon")}</p>
              </TooltipContent>
            </Tooltip>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}
</file>

<file path="src/components/ui/error-component.tsx">
"use client";
import { Send, X, AlertTriangle, ArrowRight } from "lucide-react";
import { motion } from "motion/react";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { Button } from "@/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/ui/dialog";
import { Textarea } from "@/ui/textarea";
interface ErrorComponentProps {
  errorMessage: string;
  errorCode?: string;
  onReport?: (details: string) => Promise<void>;
}
export default function ErrorComponent({
  errorMessage,
  errorCode,
  onReport = async () => {},
}: ErrorComponentProps) {
  const t = useTranslations();
  const locale = useLocale();
  const [reportDetails, setReportDetails] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const handleReport = async () => {
    setIsSubmitting(true);
    try {
      await onReport(reportDetails);
      setIsSubmitted(true);
    } catch (error) {
      console.error("Failed to submit report:", error);
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="mx-auto max-w-2xl p-4">
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className="overflow-hidden rounded-xl border border-red-200 bg-white shadow-lg dark:border-red-900 dark:bg-gray-900"
      >
        {/* Header */}
        <div className="flex items-center justify-between bg-gradient-to-r from-red-500 to-rose-600 px-6 py-4">
          <div className="flex items-center space-x-3">
            <div className="rounded-full bg-white/20 p-2">
              <AlertTriangle className="h-5 w-5 text-white" />
            </div>
            <h3 className="font-medium text-white">{t("General.error.error_detected")}</h3>
          </div>
        </div>
        {/* Content */}
        <div className="p-6">
          <div className="mb-4">
            <div className="mb-2 text-sm text-gray-500 dark:text-gray-400">
              {t("General.error.error_message")}
            </div>
            <div className="overflow-x-auto rounded-lg border border-gray-200 bg-gray-50 p-4 font-mono text-sm dark:border-gray-700 dark:bg-gray-800">
              {errorMessage}
            </div>
          </div>
          <div className="flex items-center justify-between">
            {errorCode ? (
              <div className="flex items-center space-x-2">
                <div className="h-2 w-2 animate-pulse rounded-full bg-red-500"></div>
                <span className="text-xs font-medium text-gray-500 dark:text-gray-400">
                  {t("General.error.error_code")}: {errorCode}
                </span>
              </div>
            ) : (
              <div />
            )}
            <Dialog>
              <DialogTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className="group border-red-200 text-red-600 hover:border-red-300 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-950/50"
                >
                  <span>{t("General.report_issue")}</span>
                  <ArrowRight className="ms-2 h-3 w-3 transition-transform group-hover:translate-x-1 rtl:rotate-180" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md" dir={locale === "ar" ? "rtl" : "ltr"}>
                {isSubmitted ? (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="space-y-3 py-8 text-center"
                  >
                    <div className="flex justify-center">
                      <div className="flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800">
                        <Send className="h-7 w-7 text-green-600 dark:text-green-400" />
                      </div>
                    </div>
                    <h3 className="mt-4 text-xl font-semibold">
                      {t("General.report_issue_thank_you")}
                    </h3>
                    <p className="mx-auto max-w-sm text-gray-500 dark:text-gray-400">
                      {t("General.report_issue_description")}
                    </p>
                  </motion.div>
                ) : (
                  <>
                    <DialogHeader>
                      <DialogTitle className="text-xl">
                        {t("General.report_issue_title")}
                      </DialogTitle>
                      <DialogDescription className="text-gray-500 dark:text-gray-400">
                        {t("General.report_issue_description")}
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-5 py-4">
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
                          {t("General.error.error_details")}
                        </h4>
                        <div className="rounded-md border border-gray-200 bg-gray-50 p-3 font-mono text-xs dark:border-gray-700 dark:bg-gray-800">
                          {errorMessage}
                        </div>
                      </div>
                      <div className="flex flex-col space-y-2">
                        <label
                          htmlFor="details"
                          className="text-sm font-medium text-gray-700 dark:text-gray-300"
                        >
                          {t("General.error.error_details_question")}
                        </label>
                        <Textarea
                          id="details"
                          value={reportDetails}
                          onChange={(e) => setReportDetails(e.target.value)}
                          className="min-h-[120px] resize-none focus:border-red-500 focus:ring-red-500"
                        />
                      </div>
                    </div>
                    <DialogFooter className="border-t border-gray-100 pt-4 sm:justify-between dark:border-gray-800">
                      <DialogClose asChild>
                        <Button variant="outline" type="button">
                          {t("General.cancel")}
                        </Button>
                      </DialogClose>
                      <Button
                        type="button"
                        onClick={handleReport}
                        disabled={isSubmitting}
                        className="bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700"
                      >
                        {isSubmitting ? t("General.submitting") : t("General.submit_report")}
                      </Button>
                    </DialogFooter>
                  </>
                )}
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="src/components/ui/filter-popover.tsx">
"use client";
import { Filter, Plus, Trash2, Save, Clock, Check } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { Button } from "@/ui/button";
import { Calendar } from "@/ui/calendar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import IconButton from "@/ui/icon-button";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Separator } from "@/ui/separator";
import { Switch } from "@/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/ui/tabs";
import { FilterCondition } from "@/types/common.type";
// Define filter operators for different field types
const TEXT_OPERATORS = [
  { value: "equals", label: "Equals" },
  { value: "contains", label: "Contains" },
  { value: "starts_with", label: "Starts with" },
  { value: "ends_with", label: "Ends with" },
  { value: "is_empty", label: "Is empty" },
  { value: "is_not_empty", label: "Is not empty" },
];
const NUMBER_OPERATORS = [
  { value: "equals", label: "Equals" },
  { value: "greaterThan", label: "Greater than" },
  { value: "lessThan", label: "Less than" },
  { value: "between", label: "Between" },
  { value: "isEmpty", label: "Is empty" },
  { value: "isNotEmpty", label: "Is not empty" },
];
const DATE_OPERATORS = [
  { value: "equals", label: "Equals" },
  { value: "before", label: "Before" },
  { value: "after", label: "After" },
  { value: "between", label: "Between" },
  { value: "isEmpty", label: "Is empty" },
  { value: "isNotEmpty", label: "Is not empty" },
];
// Saved filter presets
const SAVED_FILTERS = [
  { id: 1, name: "High Value Customers", conditions: [] },
  { id: 2, name: "Recent Customers", conditions: [] },
  { id: 3, name: "Inactive Customers", conditions: [] },
];
interface FilterPopoverProps {
  fields?: Array<{
    id: string;
    translationKey: string;
    type: "text" | "number" | "date";
  }>;
  conditions?: FilterCondition[];
  onConditionsChange?: (conditions: FilterCondition[]) => void;
  caseSensitive?: boolean;
  onCaseSensitiveChange?: (value: boolean) => void;
}
export default function FilterPopover({
  fields = [],
  conditions: externalConditions,
  onConditionsChange,
  caseSensitive = false,
  onCaseSensitiveChange,
}: FilterPopoverProps) {
  const t = useTranslations();
  const locale = useLocale();
  const [open, setOpen] = useState(false);
  const [activeFilters, setActiveFilters] = useState(0);
  const [filterConditions, setFilterConditions] = useState<FilterCondition[]>(
    externalConditions || [
      {
        id: 1,
        field: fields[0]?.id || "name",
        operator: "contains",
        value: "",
        type: fields[0]?.type || "text",
        conjunction: "and",
      },
    ],
  );
  const [activeTab, setActiveTab] = useState("filters");
  const getOperatorsForField = (fieldId: string) => {
    const field = fields.find((f) => f.id === fieldId);
    if (!field) return TEXT_OPERATORS;
    switch (field.type) {
      case "number":
        return NUMBER_OPERATORS;
      case "date":
        return DATE_OPERATORS;
      default:
        return TEXT_OPERATORS;
    }
  };
  const getFieldType = (fieldId: string): "text" | "number" | "date" => {
    const field = fields.find((f) => f.id === fieldId);
    return field?.type || "text";
  };
  const addFilterCondition = () => {
    const newId = Math.max(0, ...filterConditions.map((c) => c.id)) + 1;
    const newCondition: FilterCondition = {
      id: newId,
      field: fields[0]?.id || "name",
      operator: "contains",
      value: "",
      type: fields[0]?.type || "text",
      conjunction: "and",
    };
    const newConditions = [...filterConditions, newCondition];
    setFilterConditions(newConditions);
    onConditionsChange?.(newConditions);
  };
  const removeFilterCondition = (id: number) => {
    const newConditions = filterConditions.filter((condition) => condition.id !== id);
    setFilterConditions(newConditions);
    onConditionsChange?.(newConditions);
  };
  const updateFilterCondition = (id: number, field: string, value: string) => {
    const newConditions = filterConditions.map((condition) => {
      if (condition.id === id) {
        const updatedCondition = { ...condition, [field]: value };
        // If field changed, update the operator and type
        if (field === "field") {
          const fieldType = getFieldType(value);
          updatedCondition.type = fieldType;
          // Set default operator based on field type
          switch (fieldType) {
            case "number":
              updatedCondition.operator = "equals";
              break;
            case "date":
              updatedCondition.operator = "equals";
              break;
            default:
              updatedCondition.operator = "contains";
          }
          // Reset value when changing field type
          updatedCondition.value = "";
        }
        // Ensure conjunction is always "and" or "or"
        if (field === "conjunction" && value !== "and" && value !== "or") {
          updatedCondition.conjunction = "and";
        }
        return updatedCondition as FilterCondition;
      }
      return condition;
    });
    setFilterConditions(newConditions);
    onConditionsChange?.(newConditions);
  };
  const applyFilters = () => {
    // Filter out conditions with empty values unless operator is isEmpty/isNotEmpty
    const validConditions = filterConditions.filter(
      (c) => c.value !== "" || c.operator === "isEmpty" || c.operator === "isNotEmpty",
    );
    setActiveFilters(validConditions.length);
    onConditionsChange?.(validConditions);
    setOpen(false);
  };
  const resetFilters = () => {
    const defaultConditions: FilterCondition[] = [
      {
        id: 1,
        field: fields[0]?.id || "name",
        operator: "contains",
        value: "",
        type: fields[0]?.type || "text",
        conjunction: "and",
      },
    ];
    setFilterConditions(defaultConditions);
    onConditionsChange?.(defaultConditions);
    setActiveFilters(0);
    setOpen(false);
    if (onCaseSensitiveChange) {
      onCaseSensitiveChange(false);
    }
  };
  const renderValueInput = (condition: any) => {
    const { type, operator, value, id } = condition;
    // No input needed for isEmpty/isNotEmpty operators
    if (operator === "isEmpty" || operator === "isNotEmpty") {
      return null;
    }
    if (type === "date") {
      return (
        <div className="mt-2">
          <Calendar
            mode="single"
            selected={value ? new Date(value) : undefined}
            onSelect={(date) => updateFilterCondition(id, "value", date ? date.toISOString() : "")}
            className="rounded-md border"
          />
        </div>
      );
    }
    if (operator === "between" && type === "number") {
      const [min, max] = value.split(",").map((v: string) => v.trim()) || ["", ""];
      return (
        <div className="mt-2 grid grid-cols-2 gap-2">
          <Input
            type="number"
            placeholder="Min"
            value={min}
            onChange={(e) => updateFilterCondition(id, "value", `${e.target.value},${max}`)}
          />
          <Input
            type="number"
            placeholder="Max"
            value={max}
            onChange={(e) => updateFilterCondition(id, "value", `${min},${e.target.value}`)}
          />
        </div>
      );
    }
    if (type === "number") {
      return (
        <Input
          type="number"
          placeholder={t("General.filter.value.placeholder")}
          className="mt-2"
          value={value}
          onChange={(e) => updateFilterCondition(id, "value", e.target.value)}
        />
      );
    }
    return (
      <Input
        type="text"
        placeholder={t("General.filter.value.placeholder")}
        className="mt-2"
        value={value}
        onChange={(e) => updateFilterCondition(id, "value", e.target.value)}
      />
    );
  };
  return (
    <div className="relative">
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <IconButton
            icon={<Filter className="h-4 w-4" />}
            label={t("General.filter.title")}
            badge={activeFilters > 0 ? activeFilters : undefined}
          />
        </PopoverTrigger>
        <PopoverContent className="w-96" align="end" dir={locale === "ar" ? "rtl" : "ltr"}>
          <Tabs defaultValue="filters" value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-4 grid grid-cols-2">
              <TabsTrigger value="filters">{t("General.filter_options")}</TabsTrigger>
              <TabsTrigger value="saved">{t("General.saved_filters")}</TabsTrigger>
            </TabsList>
            <TabsContent value="filters" className="space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="leading-none font-medium">{t("General.filter_options")}</h4>
                <div className="flex gap-2">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7"
                    onClick={() => setActiveTab("saved")}
                  >
                    <Save className="h-3.5 w-3.5" />
                  </Button>
                </div>
              </div>
              <div className="space-y-4">
                {filterConditions.map((condition, index) => (
                  <div key={condition.id} className="space-y-2 border-b border-dashed pb-4">
                    {index > 0 && (
                      <div className="mb-2 flex items-center">
                        <Select
                          value={condition.conjunction}
                          onValueChange={(value) =>
                            updateFilterCondition(condition.id, "conjunction", value)
                          }
                        >
                          <SelectTrigger className="w-24">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="and">AND</SelectItem>
                            <SelectItem value="or">OR</SelectItem>
                          </SelectContent>
                        </Select>
                        <div className="flex-1" />
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-7 w-7"
                          onClick={() => removeFilterCondition(condition.id)}
                        >
                          <Trash2 className="h-3.5 w-3.5" />
                        </Button>
                      </div>
                    )}
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <Label>{t("General.field")}</Label>
                        <Select
                          value={condition.field}
                          onValueChange={(value) =>
                            updateFilterCondition(condition.id, "field", value)
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {fields.map((field) => (
                              <SelectItem key={field.id} value={field.id}>
                                {t(field.translationKey)}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>{t("General.operator")}</Label>
                        <Select
                          value={condition.operator}
                          onValueChange={(value) =>
                            updateFilterCondition(condition.id, "operator", value)
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {getOperatorsForField(condition.field).map((op) => (
                              <SelectItem key={op.value} value={op.value}>
                                {t(`General.operators.${op.value}`)}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    {renderValueInput(condition)}
                  </div>
                ))}
              </div>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-center text-sm"
                onClick={addFilterCondition}
              >
                <Plus className="mr-1 h-3.5 w-3.5" />
                {t("General.add_filter_condition")}
              </Button>
              <div className="flex items-center space-x-2">
                <Switch
                  id="case-sensitive"
                  checked={caseSensitive}
                  onCheckedChange={onCaseSensitiveChange}
                />
                <Label htmlFor="case-sensitive">{t("General.case_sensitive")}</Label>
              </div>
              <Separator />
              <div className="flex gap-2">
                <Button variant="outline" onClick={resetFilters} className="flex-1">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="15"
                    height="15"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="mr-2 h-4 w-4"
                  >
                    <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                    <path d="M3 3v5h5" />
                  </svg>
                  {t("General.reset_all")}
                </Button>
                <Button onClick={applyFilters} className="flex-1">
                  {t("General.apply_filters")}
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="saved" className="relative space-y-4">
              <div className="bg-background/80 absolute inset-0 z-10 flex h-full w-full items-center justify-center">
                <div className="bg-background m-auto my-auto flex h-fit w-fit items-center justify-between rounded-md border p-4 text-4xl font-bold">
                  {t("General.soon")}
                </div>
              </div>
              <div className="flex items-center justify-between">
                <h4 className="leading-none font-medium">{t("General.saved_filters")}</h4>
                <Button variant="outline" size="sm" className="h-8">
                  <Plus className="mr-1 h-3.5 w-3.5" />
                  {t("General.save_current_filter")}
                </Button>
              </div>
              <div className="space-y-2">
                {SAVED_FILTERS.map((filter) => (
                  <div
                    key={filter.id}
                    className="hover:bg-muted flex cursor-pointer items-center justify-between rounded-md p-2"
                    onClick={() => {
                      // In a real app, we would load the filter conditions here
                      setActiveTab("filters");
                    }}
                  >
                    <div className="flex items-center">
                      <Clock className="text-muted-foreground mr-2 h-4 w-4" />
                      <span>{filter.name}</span>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="15"
                            height="15"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          >
                            <circle cx="12" cy="12" r="1" />
                            <circle cx="12" cy="5" r="1" />
                            <circle cx="12" cy="19" r="1" />
                          </svg>
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem>
                          <Check className="mr-2 h-4 w-4" />
                          <span>{t("General.apply_filter")}</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="15"
                            height="15"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            className="mr-2 h-4 w-4"
                          >
                            <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
                            <path d="m15 5 4 4" />
                          </svg>
                          <span>{t("General.edit")}</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem className="text-destructive">
                          <Trash2 className="mr-2 h-4 w-4" />
                          <span>{t("General.delete")}</span>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </PopoverContent>
      </Popover>
    </div>
  );
}
</file>

<file path="src/components/ui/final-confirm-delete.tsx">
"use client";
import { CircleAlert, Loader2 } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import { useEffect, useId, useState } from "react";
import { Button } from "@/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/ui/dialog";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
export default function Component({
  onConfirm,
  open,
  setOpen,
  pukla,
  loadingDelete,
}: {
  onConfirm: () => void;
  open: boolean;
  setOpen: (open: boolean) => void;
  pukla?: any;
  loadingDelete: boolean;
}) {
  const t = useTranslations();
  const lang = useLocale();
  const id = useId();
  const [inputValue, setInputValue] = useState("");
  useEffect(() => {
    if (open) {
      setInputValue("");
    }
  }, [open]);
  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogContent dir={lang === "ar" ? "rtl" : "ltr"}>
        <div className="flex flex-col items-center gap-2">
          <div
            className="border-border flex size-9 shrink-0 items-center justify-center rounded-full border"
            aria-hidden="true"
          >
            <CircleAlert className="opacity-80" size={16} strokeWidth={2} />
          </div>
          <DialogHeader>
            <DialogTitle className="sm:text-center">{t("MyPuklas.delete_pukla")}</DialogTitle>
            <DialogDescription className="sm:text-center">
              {t("MyPuklas.delete_pukla_description", {
                pukla_name: pukla?.title,
              })}
            </DialogDescription>
          </DialogHeader>
        </div>
        <form
          className="space-y-5"
          onSubmit={(e) => {
            e.preventDefault();
            onConfirm();
          }}
        >
          <div className="flex flex-col gap-2">
            <Label htmlFor={id}>{t("MyPuklas.delete_pukla_label")}</Label>
            <Input
              id={id}
              type="text"
              placeholder={pukla?.title}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
            />
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button type="button" variant="outline" className="flex-1">
                {t("General.cancel")}
              </Button>
            </DialogClose>
            <Button type="submit" className="flex-1" disabled={inputValue !== pukla?.title}>
              {loadingDelete ? <Loader2 className="size-4 animate-spin" /> : t("General.delete")}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/ui/flippable-input.tsx">
import { PilcrowLeft, PilcrowRight } from "lucide-react";
import { AnimatePresence, motion } from "motion/react";
import { useLocale, useTranslations } from "next-intl";
import * as React from "react";
import { cn } from "@/lib/utils";
import IconButton from "./icon-button";
function FlippableInput({
  className,
  canFlipDirection = true,
  type,
  ...props
}: React.ComponentProps<"input"> & { canFlipDirection?: boolean }) {
  const locale = useLocale();
  const [isFlipped, setIsFlipped] = React.useState(locale === "ar");
  const [isHovering, setIsHovering] = React.useState(false);
  const t = useTranslations();
  React.useEffect(() => {
    setIsFlipped(locale === "ar");
  }, [locale]);
  const getDirectionClasses = () => {
    if (locale === "ar") {
      if (isFlipped) {
        return "-end-1.5";
      } else {
        return "start-0.5";
      }
    } else {
      if (isFlipped) {
        return "start-0.5";
      } else {
        return "-end-1.5";
      }
    }
  };
  const getTooltipLabel = () => {
    if (locale === "ar") {
      if (isFlipped) {
        return t("General.switch_to_rtl");
      } else {
        return t("General.switch_to_ltr");
      }
    } else {
      if (isFlipped) {
        return t("General.switch_to_ltr");
      } else {
        return t("General.switch_to_rtl");
      }
    }
  };
  return (
    <div
      className="relative"
      onMouseEnter={() => setIsHovering(true)}
      onMouseLeave={() => setIsHovering(false)}
    >
      <AnimatePresence>
        {canFlipDirection && isHovering && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ duration: 0.15, delay: 0.3 }}
            className={cn(
              "absolute top-0.5 h-10 w-10",
              getDirectionClasses(),
              // isFlipped ? "!rtl:-end-1.5 start-0.5" : "!rtl:start-0.5 -end-1.5",
              // isFlipped ? "-end-1.5" : "start-0.5",
            )}
          >
            <IconButton
              variant="ghost"
              icon={
                isFlipped ? (
                  <PilcrowRight className="text-muted-foreground size-4" />
                ) : (
                  <PilcrowLeft className="text-muted-foreground size-4" />
                )
              }
              label={getTooltipLabel()}
              onClick={() => setIsFlipped(!isFlipped)}
              className="size-8"
            />
          </motion.div>
        )}
      </AnimatePresence>
      <input
        dir={isFlipped ? "rtl" : "ltr"}
        type={type}
        data-slot="input"
        className={cn(
          "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
          "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
          className,
        )}
        {...props}
      />
    </div>
  );
}
export { FlippableInput };
</file>

<file path="src/components/ui/form-dialog.tsx">
import { Loader2 } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { Button } from "@/ui/button";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/ui/dialog";
interface FormDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  title: string;
  children: React.ReactNode;
  formId: string;
  onCancel?: () => void;
  cancelText?: string;
  submitText?: string;
  loadingSave?: boolean;
  dummyData?: () => void;
}
export function FormDialog({
  open,
  onOpenChange,
  title,
  children,
  formId,
  onCancel,
  loadingSave,
  dummyData,
}: FormDialogProps) {
  const t = useTranslations();
  const { locale } = useRouter();
  const handleCancel = () => {
    onCancel?.();
    onOpenChange(false);
  };
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent
        className="flex max-h-[80vh] flex-col gap-0 overflow-hidden !p-0"
        dir={locale === "ar" ? "rtl" : "ltr"}
      >
        <DialogHeader className="sticky top-0 z-10 border-b p-4">
          <DialogTitle>
            {title}
            {dummyData && (
              <Button variant="outline" size="sm" className="ms-4" onClick={dummyData}>
                Generate
              </Button>
            )}
          </DialogTitle>
        </DialogHeader>
        <div className="flex-1 overflow-y-auto p-4">{children}</div>
        <DialogFooter className="sticky bottom-0 flex justify-end gap-2 border-t p-4">
          <Button variant="outline" onClick={handleCancel}>
            {t("General.cancel")}
          </Button>
          <Button type="submit" form={formId} className="min-w-24" disabled={loadingSave}>
            {loadingSave ? <Loader2 className="size-4 animate-spin" /> : t("General.save")}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/ui/form.tsx">
"use client";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import * as React from "react";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";
import { Label } from "@/ui/label";
import { cn } from "@/lib/utils";
const Form = FormProvider;
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};
const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }
  const { id } = itemContext;
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};
type FormItemContextValue = {
  id: string;
};
const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();
  return (
    <FormItemContext.Provider value={{ id }}>
      <div data-slot="form-item" className={cn("grid gap-2", className)} {...props} />
    </FormItemContext.Provider>
  );
}
function FormLabel({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();
  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}
function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
      aria-invalid={!!error}
      {...props}
    />
  );
}
function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();
  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}
function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;
  if (!body) {
    return null;
  }
  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/google-button.tsx">
"use client";
import { Loader2 } from "lucide-react";
import { Button } from "./button";
const GoogleButton = (props: {
  text: string;
  onClick: () => void;
  loading: boolean;
}) => {
  return (
    <Button
      type="button"
      aria-label={props.text}
      onClick={props.onClick}
      variant="outline"
      className="flex items-center w-full border justify-center rounded-md  "
      disabled={props.loading}
    >
      {props.loading ? (
        <Loader2 className="me-2 h-4 w-4 animate-spin" />
      ) : (
        <div className="flex flex-row items-center gap-2">
          <div className="flex items-center justify-center text-primary">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              className="w-5 h-5"
              fill="currentColor"
            >
              <title>{props.text}</title>
              <desc>Google G Logo</desc>
              <path
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                className="fill-google-logo-blue"
              ></path>
              <path
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                className="fill-google-logo-green"
              ></path>
              <path
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                className="fill-google-logo-yellow"
              ></path>
              <path
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                className="fill-google-logo-red"
              ></path>
            </svg>
          </div>
          <span className="text-primary ">{props.text}</span>
        </div>
      )}
    </Button>
  );
};
export default GoogleButton;
</file>

<file path="src/components/ui/grid-background.tsx">
"use client";
import { useId } from "react";
import { cn } from "@/lib/utils";
interface GridPatternProps extends React.SVGProps<SVGSVGElement> {
  width?: number;
  height?: number;
  x?: number;
  y?: number;
  squares?: Array<[x: number, y: number]>;
  strokeDasharray?: string;
  className?: string;
  [key: string]: unknown;
}
export function GridPattern({
  width = 40,
  height = 40,
  x = -1,
  y = -1,
  strokeDasharray = "0",
  squares,
  className,
  ...props
}: GridPatternProps) {
  const id = useId();
  return (
    <svg
      aria-hidden="true"
      className={cn(
        "pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30",
        className
      )}
      {...props}
    >
      <defs>
        <pattern
          id={id}
          width={width}
          height={height}
          patternUnits="userSpaceOnUse"
          x={x}
          y={y}
        >
          <path
            d={`M.5 ${height}V.5H${width}`}
            fill="none"
            strokeDasharray={strokeDasharray}
          />
        </pattern>
      </defs>
      <rect width="100%" height="100%" strokeWidth={0} fill={`url(#${id})`} />
      {squares && (
        <svg x={x} y={y} className="overflow-visible">
          {squares.map(([x, y]) => (
            <rect
              strokeWidth="0"
              key={`${x}-${y}`}
              width={width - 1}
              height={height - 1}
              x={x * width + 1}
              y={y * height + 1}
            />
          ))}
        </svg>
      )}
    </svg>
  );
}
</file>

<file path="src/components/ui/grid-bg.tsx">
import React from "react";
import { cn } from "@/lib/utils";
const GridBG = (props: { className?: string }) => {
  return (
    <div
      className={cn(
        "absolute inset-0  top-0 h-full w-full bg-[radial-gradient(#D1D4DC_1px,transparent_1px)] [background-size:16px_16px] [mask-image:linear-gradient(1turn,#D1D4DC_50%,transparent_100%)] dark:opacity-20",
        props.className
      )}
      // To make it fade out
      // [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_60%,transparent_100%)]
    ></div>
  );
};
export default GridBG;
// POLKA LIKE DOTS
// <div>
// <div
//   className={cn(
//     "absolute dark:opacity-20 inset-0 top-4 h-full w-full bg-[radial-gradient(#D1D4DC_1px,transparent_1px)] [background-size:16px_16px] [mask-image:linear-gradient(1turn,#D1D4DC_50%,transparent_100%)]",
//     props.className
//   )}
//   // To make it fade out
//   // [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_60%,transparent_100%)]
// ></div>
// <div
//   className={cn(
//     "absolute dark:opacity-20 inset-2 top-10  h-full  bg-[radial-gradient(#D1D4DC_1px,transparent_1px)] [background-size:16px_16px] [mask-image:linear-gradient(1turn,#D1D4DC_50%,transparent_100%)]",
//     props.className
//   )}
//   style={{ width: "calc(100% - 8px)" }}
//   // To make it fade out
//   // [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_60%,transparent_100%)]
// ></div>
// </div>
</file>

<file path="src/components/ui/hero-section-2.tsx">
"use client";
import { ChevronRight, Menu, X } from "lucide-react";
import { useScroll } from "motion/react";
import { useTranslations } from "next-intl";
import Link from "next/link";
import React from "react";
import { AnimatedGroup } from "@/ui/animated-group";
import { Button } from "@/ui/button";
import { cn } from "@/lib/utils";
const transitionVariants = {
  item: {
    hidden: {
      opacity: 0,
      filter: "blur(12px)",
      y: 12,
    },
    visible: {
      opacity: 1,
      filter: "blur(0px)",
      y: 0,
      transition: {
        type: "spring",
        bounce: 0.3,
        duration: 1.5,
      },
    },
  },
};
export function HeroSection() {
  const t = useTranslations();
  return (
    <>
      <main className="overflow-hidden">
        <section>
          <div className="relative pt-24">
            <div className="absolute inset-0 -z-10 size-full [background:radial-gradient(125%_125%_at_50%_100%,transparent_0%,var(--background)_75%)]"></div>
            <div className="mx-auto max-w-5xl px-6">
              <div className="sm:mx-auto lg:mr-auto">
                <AnimatedGroup
                  variants={{
                    container: {
                      visible: {
                        transition: {
                          staggerChildren: 0.05,
                          delayChildren: 0.75,
                        },
                      },
                    },
                    ...transitionVariants,
                  }}
                >
                  <h1 className="mt-8 max-w-2xl text-5xl font-bold text-balance md:text-6xl lg:mt-16">
                    {t("Landing.hero.title")}
                  </h1>
                  <p className="mt-8 max-w-2xl text-lg text-pretty">
                    Tailwindcss highly customizable components for building modern websites and
                    applications that look and feel the way you mean it.
                  </p>
                  <div className="mt-12 flex items-center gap-2">
                    <div key={1} className="bg-foreground/10 rounded-[14px] border p-0.5">
                      <Button asChild size="lg" className="rounded-xl px-5 text-base">
                        <Link href="#link">
                          <span className="text-nowrap">Start Building</span>
                        </Link>
                      </Button>
                    </div>
                    <Button
                      key={2}
                      asChild
                      size="lg"
                      variant="ghost"
                      className="h-[42px] rounded-xl px-5 text-base"
                    >
                      <Link href="#link">
                        <span className="text-nowrap">Request a demo</span>
                      </Link>
                    </Button>
                  </div>
                </AnimatedGroup>
              </div>
            </div>
            <AnimatedGroup
              variants={{
                container: {
                  visible: {
                    transition: {
                      staggerChildren: 0.05,
                      delayChildren: 0.75,
                    },
                  },
                },
                ...transitionVariants,
              }}
            >
              <div className="relative mt-8 -mr-56 overflow-hidden px-2 sm:mt-12 sm:mr-0 md:mt-20">
                <div
                  aria-hidden
                  className="to-background absolute inset-0 z-10 bg-gradient-to-b from-transparent from-35%"
                />
                <div className="ring-background bg-background relative mx-auto max-w-5xl overflow-hidden rounded-2xl border p-4 shadow-lg ring-1 inset-shadow-2xs shadow-zinc-950/15 dark:inset-shadow-white/20">
                  <img
                    className="bg-background relative hidden aspect-15/8 rounded-2xl dark:block"
                    src="https://tailark.com/_next/image?url=%2Fmail2.png&w=3840&q=75"
                    alt="app screen"
                    width="2700"
                    height="1440"
                  />
                  <img
                    className="border-border/25 relative z-2 aspect-15/8 rounded-2xl border dark:hidden"
                    src="https://tailark.com/_next/image?url=%2Fmail2-light.png&w=3840&q=75"
                    alt="app screen"
                    width="2700"
                    height="1440"
                  />
                </div>
              </div>
            </AnimatedGroup>
          </div>
        </section>
      </main>
    </>
  );
}
const menuItems = [
  { name: "Features", href: "#link" },
  { name: "Solution", href: "#link" },
  { name: "Pricing", href: "#link" },
  { name: "About", href: "#link" },
];
</file>

<file path="src/components/ui/icon-button.tsx">
import { cn } from "@/lib/utils";
import { Button } from "./button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./tooltip";
interface IconButtonProps extends React.HTMLAttributes<HTMLButtonElement> {
  icon: React.ReactNode;
  label?: string | React.ReactNode;
  badge?: number;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  buttonType?: "button" | "submit" | "reset";
  size?: "icon" | "default" | "sm" | "lg" | "icon_sm";
  contentClassName?: string;
}
const IconButton = ({
  icon,
  label,
  badge,
  buttonType,
  variant,
  size,
  contentClassName,
  ...props
}: IconButtonProps) => {
  return (
    <TooltipProvider>
      <Tooltip delayDuration={400}>
        <TooltipTrigger asChild>
          <Button
            variant={variant || "outline"}
            size={size || "icon"}
            className={cn("relative size-8", props.className)}
            type={buttonType || "button"}
            {...props}
          >
            {icon}
            {badge !== undefined && (
              <span className="bg-primary text-primary-foreground absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full text-[10px]">
                {badge}
              </span>
            )}
            <span className="sr-only">{label}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent
          style={{
            transformOrigin: "var(--radix-tooltip-trigger-width)",
          }}
          className={contentClassName}
        >
          {label}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};
export default IconButton;
</file>

<file path="src/components/ui/infinite-slider.tsx">
"use client";
import { useMotionValue, animate, motion } from "motion/react";
import { useState, useEffect } from "react";
import useMeasure from "react-use-measure";
import { cn } from "@/lib/utils";
type InfiniteSliderProps = {
  children: React.ReactNode;
  gap?: number;
  duration?: number;
  durationOnHover?: number;
  direction?: "horizontal" | "vertical";
  reverse?: boolean;
  className?: string;
};
export function InfiniteSlider({
  children,
  gap = 16,
  duration = 25,
  durationOnHover,
  direction = "horizontal",
  reverse = false,
  className,
}: InfiniteSliderProps) {
  const [currentDuration, setCurrentDuration] = useState(duration);
  const [ref, { width, height }] = useMeasure();
  const translation = useMotionValue(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [key, setKey] = useState(0);
  useEffect(() => {
    let controls;
    const size = direction === "horizontal" ? width : height;
    const contentSize = size + gap;
    const from = reverse ? -contentSize / 2 : 0;
    const to = reverse ? 0 : -contentSize / 2;
    if (isTransitioning) {
      controls = animate(translation, [translation.get(), to], {
        ease: "linear",
        duration: currentDuration * Math.abs((translation.get() - to) / contentSize),
        onComplete: () => {
          setIsTransitioning(false);
          setKey((prevKey) => prevKey + 1);
        },
      });
    } else {
      controls = animate(translation, [from, to], {
        ease: "linear",
        duration: currentDuration,
        repeat: Infinity,
        repeatType: "loop",
        repeatDelay: 0,
        onRepeat: () => {
          translation.set(from);
        },
      });
    }
    return controls?.stop;
  }, [key, translation, currentDuration, width, height, gap, isTransitioning, direction, reverse]);
  const hoverProps = durationOnHover
    ? {
        onHoverStart: () => {
          setIsTransitioning(true);
          setCurrentDuration(durationOnHover);
        },
        onHoverEnd: () => {
          setIsTransitioning(true);
          setCurrentDuration(duration);
        },
      }
    : {};
  return (
    <div className={cn("overflow-hidden", className)}>
      <motion.div
        className="flex w-max"
        style={{
          ...(direction === "horizontal" ? { x: translation } : { y: translation }),
          gap: `${gap}px`,
          flexDirection: direction === "horizontal" ? "row" : "column",
        }}
        ref={ref}
        {...hoverProps}
      >
        {children}
        {children}
      </motion.div>
    </div>
  );
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className,
      )}
      {...props}
    />
  );
}
export { Input };
</file>

<file path="src/components/ui/label.tsx">
"use client";
import * as LabelPrimitive from "@radix-ui/react-label";
import * as React from "react";
import { cn } from "@/lib/utils";
function Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className,
      )}
      {...props}
    />
  );
}
export { Label };
</file>

<file path="src/components/ui/language-switcher.tsx">
"use client";
import { Languages } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import { useRouter } from "next/router";
// UI
import { Button } from "@/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { cn } from "@/lib/utils";
export default function LanguageSwitcher({
  defaultSize = false,
  className,
  style,
}: {
  defaultSize?: boolean;
  className?: string;
  style?: React.CSSProperties;
}) {
  const t = useTranslations("General");
  const lang = useLocale();
  const router = useRouter();
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="icon"
          className={cn(defaultSize ? "" : "size-8", className)}
          style={style}
        >
          <Languages />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align={lang === "ar" ? "start" : "end"}>
        <DropdownMenuRadioGroup
          value={lang === "en-US" ? "en" : lang}
          onValueChange={(value) => {
            router.replace(router.pathname, router.asPath, {
              locale: value,
            });
          }}
        >
          <DropdownMenuRadioItem value="ar">{t("languages.ar")}</DropdownMenuRadioItem>
          <DropdownMenuRadioItem value="en">{t("languages.en")}</DropdownMenuRadioItem>
        </DropdownMenuRadioGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/components/ui/loading-bar.tsx">
import React, { useEffect } from "react";
import Router from "next/router";
import NProgress from "nprogress";
interface LoadingBarProps {
  color?: string;
  startPosition?: number;
  stopDelayMs?: number;
  options?: object;
  height?: number;
}
export const LoadingBar: React.FC<LoadingBarProps> = ({
  color,
  startPosition = 0.3,
  stopDelayMs = 0,
  height = 5,
  options,
}) => {
  let timer: NodeJS.Timeout | null = null;
  const routeChangeStart = () => {
    NProgress.set(startPosition);
    NProgress.start();
  };
  const routeChangeEnd = () => {
    if (timer) clearTimeout(timer);
    timer = setTimeout(() => {
      NProgress.done(true);
    }, stopDelayMs);
  };
  useEffect(() => {
    if (options) {
      NProgress.configure(options);
    }
    Router.events.on("routeChangeStart", routeChangeStart);
    Router.events.on("routeChangeComplete", routeChangeEnd);
    Router.events.on("routeChangeError", routeChangeEnd);
    return () => {
      Router.events.off("routeChangeStart", routeChangeStart);
      Router.events.off("routeChangeComplete", routeChangeEnd);
      Router.events.off("routeChangeError", routeChangeEnd);
    };
  });
  return (
    <style jsx global>{`
      #nprogress {
        pointer-events: none;
      }
      #nprogress .bar {
        background: ${color || "var(--primary)"};
        position: fixed;
        z-index: 1031;
        top: 0;
        left: 0;
        width: 100%;
        height: ${height}px;
      }
      #nprogress .peg {
        display: block;
        position: absolute;
        right: 0px;
        width: 100px;
        height: 100%;
        box-shadow:
          0 0 10px ${color},
          0 0 5px ${color};
        opacity: 1;
        -webkit-transform: rotate(3deg) translate(0px, -4px);
        -ms-transform: rotate(3deg) translate(0px, -4px);
        transform: rotate(3deg) translate(0px, -4px);
      }
      #nprogress .spinner {
        display: block;
        position: fixed;
        z-index: 1031;
        top: 15px;
        right: 15px;
      }
      #nprogress .spinner-icon {
        width: 18px;
        height: 18px;
        box-sizing: border-box;
        border: solid 2px transparent;
        border-top-color: ${color};
        border-left-color: ${color};
        border-radius: 50%;
        -webkit-animation: nprogress-spinner 400ms linear infinite;
        animation: nprogress-spinner 400ms linear infinite;
      }
      .nprogress-custom-parent {
        overflow: hidden;
        position: relative;
      }
      .nprogress-custom-parent #nprogress .spinner,
      .nprogress-custom-parent #nprogress .bar {
        position: absolute;
      }
      @-webkit-keyframes nprogress-spinner {
        0% {
          -webkit-transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(360deg);
        }
      }
      @keyframes nprogress-spinner {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    `}</style>
  );
};
</file>

<file path="src/components/ui/logos.tsx">
import React from "react";
type IconProps = React.HTMLAttributes<SVGElement>;
export const Logos = {
  metamask: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlSpace="preserve"
      id="Layer_1"
      x={0}
      y={0}
      viewBox="0 0 318.6 318.6"
      {...props}
    >
      <style>
        {
          ".st1,.st6{fill:#e4761b;stroke:#e4761b;stroke-linecap:round;stroke-linejoin:round}.st6{fill:#f6851b;stroke:#f6851b}"
        }
      </style>
      <path
        fill="#e2761b"
        stroke="#e2761b"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m274.1 35.5-99.5 73.9L193 65.8z"
      />
      <path
        d="m44.4 35.5 98.7 74.6-17.5-44.3zm193.9 171.3-26.5 40.6 56.7 15.6 16.3-55.3zm-204.4.9L50.1 263l56.7-15.6-26.5-40.6z"
        className="st1"
      />
      <path
        d="m103.6 138.2-15.8 23.9 56.3 2.5-2-60.5zm111.3 0-39-34.8-1.3 61.2 56.2-2.5zM106.8 247.4l33.8-16.5-29.2-22.8zm71.1-16.5 33.9 16.5-4.7-39.3z"
        className="st1"
      />
      <path
        fill="#d7c1b3"
        stroke="#d7c1b3"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m211.8 247.4-33.9-16.5 2.7 22.1-.3 9.3zm-105 0 31.5 14.9-.2-9.3 2.5-22.1z"
      />
      <path
        fill="#233447"
        stroke="#233447"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m138.8 193.5-28.2-8.3 19.9-9.1zm40.9 0 8.3-17.4 20 9.1z"
      />
      <path
        fill="#cd6116"
        stroke="#cd6116"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m106.8 247.4 4.8-40.6-31.3.9zM207 206.8l4.8 40.6 26.5-39.7zm23.8-44.7-56.2 2.5 5.2 28.9 8.3-17.4 20 9.1zm-120.2 23.1 20-9.1 8.2 17.4 5.3-28.9-56.3-2.5z"
      />
      <path
        fill="#e4751f"
        stroke="#e4751f"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m87.8 162.1 23.6 46-.8-22.9zm120.3 23.1-1 22.9 23.7-46zm-64-20.6-5.3 28.9 6.6 34.1 1.5-44.9zm30.5 0-2.7 18 1.2 45 6.7-34.1z"
      />
      <path
        d="m179.8 193.5-6.7 34.1 4.8 3.3 29.2-22.8 1-22.9zm-69.2-8.3.8 22.9 29.2 22.8 4.8-3.3-6.6-34.1z"
        className="st6"
      />
      <path
        fill="#c0ad9e"
        stroke="#c0ad9e"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m180.3 262.3.3-9.3-2.5-2.2h-37.7l-2.3 2.2.2 9.3-31.5-14.9 11 9 22.3 15.5h38.3l22.4-15.5 11-9z"
      />
      <path
        fill="#161616"
        stroke="#161616"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m177.9 230.9-4.8-3.3h-27.7l-4.8 3.3-2.5 22.1 2.3-2.2h37.7l2.5 2.2z"
      />
      <path
        fill="#763d16"
        stroke="#763d16"
        strokeLinecap="round"
        strokeLinejoin="round"
        d="m278.3 114.2 8.5-40.8-12.7-37.9-96.2 71.4 37 31.3 52.3 15.3 11.6-13.5-5-3.6 8-7.3-6.2-4.8 8-6.1zM31.8 73.4l8.5 40.8-5.4 4 8 6.1-6.1 4.8 8 7.3-5 3.6 11.5 13.5 52.3-15.3 37-31.3-96.2-71.4z"
      />
      <path
        d="m267.2 153.5-52.3-15.3 15.9 23.9-23.7 46 31.2-.4h46.5zm-163.6-15.3-52.3 15.3-17.4 54.2h46.4l31.1.4-23.6-46zm71 26.4 3.3-57.7 15.2-41.1h-67.5l15 41.1 3.5 57.7 1.2 18.2.1 44.8h27.7l.2-44.8z"
        className="st6"
      />
    </svg>
  ),
  nafath: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlSpace="preserve"
      id="Layer_1"
      x={0}
      y={0}
      // style={{
      //   enableBackground: "new 0 0 581.1 318.6"
      // }}
      viewBox="22.5 44.5 535.6 230.34"
      {...props}
    >
      <style>{".st0{fill:#0a9a8f}"}</style>
      <path
        d="M426.1 233.8c1.5.2 2.4.4 3.3.4 21.3 0 42.7.1 64-.1 12.7-.1 20-6.8 20.4-19.4.6-21 .6-42 .6-63 0-3.9 1.1-6.1 4.7-7.9 10.9-5.4 21.5-11.2 32.3-16.8 1.3-.7 2.7-1.3 4.5-2.1.1 1.4.3 2.4.3 3.5 0 29.1.5 58.2-.2 87.3-.5 21.8-9.4 39.7-29.1 51-10.1 5.8-21.3 7.9-32.7 7.9-32.1.2-64.1.2-96.2 0-8.2-.1-16.4-1.8-24.6-2.1-5.5-.2-11 1.1-16.6 1.4-9.3.4-18.7.7-28 .8-26.3.1-52.6.3-78.9-.1-7.8-.1-15.9-1.2-23.4-3.4-22.7-7-34.9-23.3-38.8-46.2-.8-4.9-1-9.9-1-14.9-.1-42.5 0-85-.1-127.5 0-3.6.9-5.6 4.2-7.2 11-5.5 21.8-11.3 32.7-16.9 1.3-.7 2.7-1.3 4.8-2.3v149c0 3.7.2 7.5.7 11.2 1.5 11.1 7.6 17.5 18.7 17.7 22.6.4 45.1.1 67.7.1.4 0 .9-.3 1.9-.6-1-2-1.9-3.9-2.9-5.7-16-27.8-11.5-65.2 7-87.2 11-13.2 25.3-20.4 42.3-21.9 17.3-1.5 33.9.9 48.1 12.1 15.4 12.1 23.3 28.3 25.8 47.5 2.6 19.1-.9 36.8-10.8 53.3-.1.3-.2.9-.7 2.1zm-27.4-48.1c-.8-3.2-1.5-9.2-3.9-14.4-4.9-10.6-13.9-14.9-25.5-14.3-10.4.6-17.9 5.9-21.5 15.7-7.4 19.7 1.5 44.7 19.4 55.5 3.2 1.9 5.8 2 8.9-.1 14.2-9.4 21.9-22.5 22.6-42.4zM78.7 155.1c6.8-11.7 13.6-23.2 20.5-35 13.5 8.1 25.5 17.4 35.1 29.4 18.1 22.4 24.3 48.2 21.3 76.5-.7 6.9-2.2 13.9-4.6 20.4-6 16.6-18.8 26.3-35.8 27.1-30.6 1.4-61.2.8-91.9 1.1-.1 0-.3-.1-.8-.4.4-1 .7-2.2 1.2-3.2 5.7-11 11.6-22 17.2-33.1 1.4-2.7 3-3.7 6.1-3.7 15.4.2 30.8-.4 46.2.2 18.1.7 21.6-10.1 21.2-23-.7-23.6-12.1-40.9-31.6-53.4-1.1-.9-2.4-1.8-4.1-2.9zM536.2 44.5c13.4 0 21.9 8.4 21.9 21.7 0 14.4-7.4 22.1-21.5 22.3-13.4.2-22-8.4-22.1-22.1 0-13.3 8.4-21.9 21.7-21.9zM121.1 66.4c0 14.8-7.3 22.3-21.5 22.1-13.5-.2-22-9-21.9-22.5.2-13.2 8.8-21.5 22.3-21.5 13.2.1 21.1 8.3 21.1 21.9z"
        className="st0"
      />
      <path
        d="M393 71.1c-.1 14.7-6.8 21.6-21.3 21.6-13.9 0-21.9-8.1-21.9-22.1 0-13.7 8.3-21.6 22.4-21.5 13.3.1 20.8 8.2 20.8 22z"
        className="st0"
      />
    </svg>
  ),
  hawa: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" xmlSpace="preserve" viewBox="0 0 765 765" {...props}>
      <path
        d="M382.5 0C171.6 0 0 171.6 0 382.5V765h382.5C593.4 765 765 593.4 765 382.5S593.4 0 382.5 0zM281.6 305.7c98 0 177.7 79.7 177.7 177.7 0 98-79.7 177.7-177.7 177.7s-177.7-79.7-177.7-177.7c0-98 79.7-177.7 177.7-177.7zm246 314.5c23.2-41.6 35.6-88.7 35.6-136.7 0-155.3-126.3-281.6-281.6-281.6-48 0-95.1 12.4-136.8 35.6C194.9 156 285 104 382.5 104c153.6 0 278.6 125 278.6 278.6 0 97.3-52 187.5-133.5 237.6z"
        fill="currentColor"
      />
    </svg>
  ),
  sikka: (props: IconProps) => (
    <svg
      aria-label="Sikka Logo"
      xmlns="http://www.w3.org/2000/svg"
      width="512"
      height="512"
      viewBox="0 0 512 512"
      {...props}
    >
      <path
        d="M242.26,91.23c-6.29,0-11.42,5.1-11.42,11.32v134.95L117.43,98.59c-4.58-5.66-6.86-7.36-13.15-7.36h-41.51c-3.98,0-4.18,3.41-4.18,7.36,0,1.7.58,3.96,1.73,5.1l124.37,152.31-124.37,152.31c-1.15,1.15-1.73,3.41-1.73,5.1,0,3.96.19,7.36,4.18,7.36h41.51c6.29,0,8.57-1.7,13.15-7.36l113.41-138.91v134.95c0,6.21,5.13,11.32,11.42,11.32h27.48c6.29,0,11.42-5.1,11.42-11.32v-134.95l113.41,138.91c4.58,5.66,6.86,7.36,13.15,7.36h41.51c3.98,0,4.18-3.41,4.18-7.36,0-1.7-.58-3.96-1.73-5.1l-124.37-152.31,124.37-152.31c1.15-1.15,1.73-3.41,1.73-5.1,0-3.96-.19-7.36-4.18-7.36h-41.51c-6.29,0-8.57,1.7-13.15,7.36l-113.41,138.91V102.54c0-6.21-5.13-11.32-11.42-11.32h-27.48Z"
        fill="currentColor"
        stroke-width="0"
      ></path>
    </svg>
  ),
  mail: (props: IconProps) => (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      strokeLinecap="round"
      strokeLinejoin="round"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
      <polyline points="22,6 12,13 2,6"></polyline>
    </svg>
  ),
  phone: (props: IconProps) => (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3"
      ></path>
    </svg>
  ),
  twitter: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M21.543 7.104c.015.211.015.423.015.636 0 6.507-4.954 14.01-14.01 14.01v-.003A13.94 13.94 0 0 1 0 19.539a9.88 9.88 0 0 0 7.287-2.041 4.93 4.93 0 0 1-4.6-3.42 4.916 4.916 0 0 0 2.223-.084A4.926 4.926 0 0 1 .96 9.167v-.062a4.887 4.887 0 0 0 2.235.616A4.928 4.928 0 0 1 1.67 3.148a13.98 13.98 0 0 0 10.15 5.144 4.929 4.929 0 0 1 8.39-4.49 9.868 9.868 0 0 0 3.128-1.196 4.941 4.941 0 0 1-2.165 2.724A9.828 9.828 0 0 0 24 4.555a10.019 10.019 0 0 1-2.457 2.549z"
      />
    </svg>
  ),
  x: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <title>X</title>
      <path
        fill="currentColor"
        d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
      />
    </svg>
  ),
  instagram: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16" {...props}>
      <path d="M8 0C5.829 0 5.556.01 4.703.048 3.85.088 3.269.222 2.76.42a3.917 3.917 0 0 0-1.417.923A3.927 3.927 0 0 0 .42 2.76C.222 3.268.087 3.85.048 4.7.01 5.555 0 5.827 0 8.001c0 2.172.01 2.444.048 3.297.04.852.174 1.433.372 1.942.205.526.478.972.923 1.417.444.445.89.719 1.416.923.51.198 1.09.333 1.942.372C5.555 15.99 5.827 16 8 16s2.444-.01 3.298-.048c.851-.04 1.434-.174 1.943-.372a3.916 3.916 0 0 0 1.416-.923c.445-.445.718-.891.923-1.417.197-.509.332-1.09.372-1.942C15.99 10.445 16 10.173 16 8s-.01-2.445-.048-3.299c-.04-.851-.175-1.433-.372-1.941a3.926 3.926 0 0 0-.923-1.417A3.911 3.911 0 0 0 13.24.42c-.51-.198-1.092-.333-1.943-.372C10.443.01 10.172 0 7.998 0h.003zm-.717 1.442h.718c2.136 0 2.389.007 3.232.046.78.035 1.204.166 1.486.275.373.145.64.319.92.599.28.28.453.546.598.92.11.281.24.705.275 1.485.039.843.047 1.096.047 3.231s-.008 2.389-.047 3.232c-.035.78-.166 1.203-.275 1.485a2.47 2.47 0 0 1-.599.919c-.28.28-.546.453-.92.598-.28.11-.704.24-1.485.276-.843.038-1.096.047-3.232.047s-2.39-.009-3.233-.047c-.78-.036-1.203-.166-1.485-.276a2.478 2.478 0 0 1-.92-.598 2.48 2.48 0 0 1-.6-.92c-.109-.281-.24-.705-.275-1.485-.038-.843-.046-1.096-.046-3.233 0-2.136.008-2.388.046-3.231.036-.78.166-1.204.276-1.486.145-.373.319-.64.599-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276.738-.034 1.024-.044 2.515-.045v.002zm4.988 1.328a.96.96 0 1 0 0 1.92.96.96 0 0 0 0-1.92zm-4.27 1.122a4.109 4.109 0 1 0 0 8.217 4.109 4.109 0 0 0 0-8.217zm0 1.441a2.667 2.667 0 1 1 0 5.334 2.667 2.667 0 0 1 0-5.334z" />
    </svg>
  ),
  telegram: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>Telegram</title>
      <path
        fill="currentColor"
        d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"
      />
    </svg>
  ),
  youtube: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>YouTube</title>
      <path
        fill="currentColor"
        d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"
      />
    </svg>
  ),
  tiktok: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>TikTok</title>
      <path
        fill="currentColor"
        d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z"
      />
    </svg>
  ),
  linkedin: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>LinkedIn</title>
      <path
        fill="currentColor"
        d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
      />
    </svg>
  ),
  behance: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>Behance</title>
      <path
        fill="currentColor"
        d="M16.969 16.927a2.561 2.561 0 0 0 1.901.677 2.501 2.501 0 0 0 1.531-.475c.362-.235.636-.584.779-.99h2.585a5.091 5.091 0 0 1-1.9 2.896 5.292 5.292 0 0 1-3.091.88 5.839 5.839 0 0 1-2.284-.433 4.871 4.871 0 0 1-1.723-1.211 5.657 5.657 0 0 1-1.08-1.874 7.057 7.057 0 0 1-.383-2.393c-.005-.8.129-1.595.396-2.349a5.313 5.313 0 0 1 5.088-3.604 4.87 4.87 0 0 1 2.376.563c.661.362 1.231.87 1.668 1.485a6.2 6.2 0 0 1 .943 2.133c.194.821.263 1.666.205 2.508h-7.699c-.063.79.184 1.574.688 2.187ZM6.947 4.084a8.065 8.065 0 0 1 1.928.198 4.29 4.29 0 0 1 1.49.638c.418.303.748.711.958 1.182.241.579.357 1.203.341 1.83a3.506 3.506 0 0 1-.506 1.961 3.726 3.726 0 0 1-1.503 1.287 3.588 3.588 0 0 1 2.027 1.437c.464.747.697 1.615.67 2.494a4.593 4.593 0 0 1-.423 2.032 3.945 3.945 0 0 1-1.163 1.413 5.114 5.114 0 0 1-1.683.807 7.135 7.135 0 0 1-1.928.259H0V4.084h6.947Zm-.235 12.9c.308.004.616-.029.916-.099a2.18 2.18 0 0 0 .766-.332c.228-.158.411-.371.534-.619.142-.317.208-.663.191-1.009a2.08 2.08 0 0 0-.642-1.715 2.618 2.618 0 0 0-1.696-.505h-3.54v4.279h3.471Zm13.635-5.967a2.13 2.13 0 0 0-1.654-.619 2.336 2.336 0 0 0-1.163.259 2.474 2.474 0 0 0-.738.62 2.359 2.359 0 0 0-.396.792c-.074.239-.12.485-.137.734h4.769a3.239 3.239 0 0 0-.679-1.785l-.002-.001Zm-13.813-.648a2.254 2.254 0 0 0 1.423-.433c.399-.355.607-.88.56-1.413a1.916 1.916 0 0 0-.178-.891 1.298 1.298 0 0 0-.495-.533 1.851 1.851 0 0 0-.711-.274 3.966 3.966 0 0 0-.835-.073H3.241v3.631h3.293v-.014ZM21.62 5.122h-5.976v1.527h5.976V5.122Z"
      />
    </svg>
  ),
  microsoft: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" {...props}>
      <path
        fill="currentColor"
        d="M7.462 0H0v7.19h7.462V0zM16 0H8.538v7.19H16V0zM7.462 8.211H0V16h7.462V8.211zm8.538 0H8.538V16H16V8.211z"
      ></path>
    </svg>
  ),
  github: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 438.549 438.549" {...props}>
      <path
        fill="currentColor"
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      ></path>
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg viewBox="0 0 25 25" fill="none" {...props}>
      <path
        d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z"
        fill="currentcolor"
      ></path>
      <path d="M12 0H4V8H12V0Z" fill="currentcolor"></path>
      <path
        d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
        fill="currentcolor"
      ></path>
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" fill="currentColor" {...props}>
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
        fill="currentColor"
      />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
      />
    </svg>
  ),
  googleplay: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>Google Play</title>
      <path
        fill="currentColor"
        d="M22.018 13.298l-3.919 2.218-3.515-3.493 3.543-3.521 3.891 2.202a1.49 1.49 0 0 1 0 2.594zM1.337.924a1.486 1.486 0 0 0-.112.568v21.017c0 .217.045.419.124.6l11.155-11.087L1.337.924zm12.207 10.065l3.258-3.238L3.45.195a1.466 1.466 0 0 0-.946-.179l11.04 10.973zm0 2.067l-11 10.933c.298.036.612-.016.906-.183l13.324-7.54-3.23-3.21z"
      />
    </svg>
  ),
  apple: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  applestore: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>App Store</title>
      <path
        fill="currentColor"
        d="M8.8086 14.9194l6.1107-11.0368c.0837-.1513.1682-.302.2437-.4584.0685-.142.1267-.2854.1646-.4403.0803-.3259.0588-.6656-.066-.9767-.1238-.3095-.3417-.5678-.6201-.7355a1.4175 1.4175 0 0 0-.921-.1924c-.3207.043-.6135.1935-.8443.4288-.1094.1118-.1996.2361-.2832.369-.092.1463-.175.2979-.259.4492l-.3864.6979-.3865-.6979c-.0837-.1515-.1667-.303-.2587-.4492-.0837-.1329-.1739-.2572-.2835-.369-.2305-.2353-.5233-.3857-.844-.429a1.4181 1.4181 0 0 0-.921.1926c-.2784.1677-.4964.426-.6203.7355-.1246.311-.1461.6508-.066.9767.038.155.0962.2984.1648.4403.0753.1564.1598.307.2437.4584l1.248 2.2543-4.8625 8.7825H2.0295c-.1676 0-.3351-.0007-.5026.0092-.1522.009-.3004.0284-.448.0714-.3108.0906-.5822.2798-.7783.548-.195.2665-.3006.5929-.3006.9279 0 .3352.1057.6612.3006.9277.196.2683.4675.4575.7782.548.1477.043.296.0623.4481.0715.1675.01.335.009.5026.009h13.0974c.0171-.0357.059-.1294.1-.2697.415-1.4151-.6156-2.843-2.0347-2.843zM3.113 18.5418l-.7922 1.5008c-.0818.1553-.1644.31-.2384.4705-.067.1458-.124.293-.1611.452-.0785.3346-.0576.6834.0645 1.0029.1212.3175.3346.583.607.7549.2727.172.5891.2416.9013.1975.3139-.044.6005-.1986.8263-.4402.1072-.1148.1954-.2424.2772-.3787.0902-.1503.1714-.3059.2535-.4612L6 19.4636c-.0896-.149-.9473-1.4704-2.887-.9218m20.5861-3.0056a1.4707 1.4707 0 0 0-.779-.5407c-.1476-.0425-.2961-.0616-.4483-.0705-.1678-.0099-.3352-.0091-.503-.0091H18.648l-4.3891-7.817c-.6655.7005-.9632 1.485-1.0773 2.1976-.1655 1.0333.0367 2.0934.546 3.0004l5.2741 9.3933c.084.1494.167.299.2591.4435.0837.131.1739.2537.2836.364.231.2323.5238.3809.8449.4232.3192.0424.643-.0244.9217-.1899.2784-.1653.4968-.4204.621-.7257.1246-.3072.146-.6425.0658-.9641-.0381-.1529-.0962-.2945-.165-.4346-.0753-.1543-.1598-.303-.2438-.4524l-1.216-2.1662h1.596c.1677 0 .3351.0009.5029-.009.1522-.009.3007-.028.4483-.0705a1.4707 1.4707 0 0 0 .779-.5407A1.5386 1.5386 0 0 0 24 16.452a1.539 1.539 0 0 0-.3009-.9158Z"
      />
    </svg>
  ),
  paypal: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  spinner: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  ),
  whatsapp: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" {...props}>
      <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z" />
    </svg>
  ),
  visa: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>Visa</title>
      <path
        fill="currentColor"
        d="M9.112 8.262L5.97 15.758H3.92L2.374 9.775c-.094-.368-.175-.503-.461-.658C1.447 8.864.677 8.627 0 8.479l.046-.217h3.3a.904.904 0 01.894.764l.817 4.338 2.018-5.102zm8.033 5.049c.008-1.979-2.736-2.088-2.717-2.972.006-.269.262-.555.822-.628a3.66 3.66 0 011.913.336l.34-1.59a5.207 5.207 0 00-1.814-.333c-1.917 0-3.266 1.02-3.278 2.479-.012 1.079.963 1.68 1.698 2.04.756.367 1.01.603 1.006.931-.005.504-.602.725-1.16.734-.975.015-1.54-.263-1.992-.473l-.351 1.642c.453.208 1.289.39 2.156.398 2.037 0 3.37-1.006 3.377-2.564m5.061 2.447H24l-1.565-7.496h-1.656a.883.883 0 00-.826.55l-2.909 6.946h2.036l.405-1.12h2.488zm-2.163-2.656l1.02-2.815.588 2.815zm-8.16-4.84l-1.603 7.496H8.34l1.605-7.496z"
      />
    </svg>
  ),
  mastercard: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>MasterCard</title>
      <path
        fill="currentColor"
        d="M11.343 18.031c.058.049.12.098.181.146-1.177.783-2.59 1.238-4.107 1.238C3.32 19.416 0 16.096 0 12c0-4.095 3.32-7.416 7.416-7.416 1.518 0 2.931.456 4.105 1.238-.06.051-.12.098-.165.15C9.6 7.489 8.595 9.688 8.595 12c0 2.311 1.001 4.51 2.748 6.031zm5.241-13.447c-1.52 0-2.931.456-4.105 1.238.06.051.12.098.165.15C14.4 7.489 15.405 9.688 15.405 12c0 2.31-1.001 4.507-2.748 6.031-.058.049-.12.098-.181.146 1.177.783 2.588 1.238 4.107 1.238C20.68 19.416 24 16.096 24 12c0-4.094-3.32-7.416-7.416-7.416zM12 6.174c-.096.075-.189.15-.28.231C10.156 7.764 9.169 9.765 9.169 12c0 2.236.987 4.236 2.551 5.595.09.08.185.158.28.232.096-.074.189-.152.28-.232 1.563-1.359 2.551-3.359 2.551-5.595 0-2.235-.987-4.236-2.551-5.595-.09-.08-.184-.156-.28-.231z"
      />
    </svg>
  ),
};
</file>

<file path="src/components/ui/marquee.tsx">
import { cn } from "@/lib/utils";
import { ComponentPropsWithoutRef } from "react";
interface MarqueeProps extends ComponentPropsWithoutRef<"div"> {
  /**
   * Optional CSS class name to apply custom styles
   */
  className?: string;
  /**
   * Whether to reverse the animation direction
   * @default false
   */
  reverse?: boolean;
  /**
   * Whether to pause the animation on hover
   * @default false
   */
  pauseOnHover?: boolean;
  /**
   * Content to be displayed in the marquee
   */
  children: React.ReactNode;
  /**
   * Whether to animate vertically instead of horizontally
   * @default false
   */
  vertical?: boolean;
  /**
   * Number of times to repeat the content
   * @default 4
   */
  repeat?: number;
}
export function Marquee({
  className,
  reverse = false,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}
</file>

<file path="src/components/ui/motion-highlight.tsx">
"use client";
import { AnimatePresence, Transition, motion } from "motion/react";
import * as React from "react";
import { cn } from "@/lib/utils";
type MotionHighlightMode = "children" | "parent";
type Bounds = {
  top: number;
  left: number;
  width: number;
  height: number;
};
type MotionHighlightContextType<T extends string> = {
  mode: MotionHighlightMode;
  activeValue: T | null;
  setActiveValue: (value: T | null) => void;
  setBounds: (bounds: DOMRect) => void;
  clearBounds: () => void;
  id: string;
  hover: boolean;
  className?: string;
  activeClassName?: string;
  setActiveClassName: (className: string) => void;
  transition?: Transition;
  disabled?: boolean;
  enabled?: boolean;
  exitDelay?: number;
  forceUpdateBounds?: boolean;
};
const MotionHighlightContext = React.createContext<
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  MotionHighlightContextType<any> | undefined
>(undefined);
function useMotionHighlight<T extends string>(): MotionHighlightContextType<T> {
  const context = React.useContext(MotionHighlightContext);
  if (!context) {
    throw new Error("useMotionHighlight must be used within a MotionHighlightProvider");
  }
  return context as unknown as MotionHighlightContextType<T>;
}
type BaseMotionHighlightProps<T extends string> = {
  mode?: MotionHighlightMode;
  value?: T | null;
  defaultValue?: T | null;
  onValueChange?: (value: T | null) => void;
  className?: string;
  transition?: Transition;
  hover?: boolean;
  disabled?: boolean;
  enabled?: boolean;
  exitDelay?: number;
};
type ParentModeMotionHighlightProps = {
  boundsOffset?: Partial<Bounds>;
  containerClassName?: string;
  forceUpdateBounds?: boolean;
};
type ControlledParentModeMotionHighlightProps<T extends string> = BaseMotionHighlightProps<T> &
  ParentModeMotionHighlightProps & {
    mode: "parent";
    controlledItems: true;
    children: React.ReactNode;
  };
type ControlledChildrenModeMotionHighlightProps<T extends string> = BaseMotionHighlightProps<T> & {
  mode?: "children" | undefined;
  controlledItems: true;
  children: React.ReactNode;
};
type UncontrolledParentModeMotionHighlightProps<T extends string> = BaseMotionHighlightProps<T> &
  ParentModeMotionHighlightProps & {
    mode: "parent";
    controlledItems?: false;
    itemsClassName?: string;
    children: React.ReactElement | React.ReactElement[];
  };
type UncontrolledChildrenModeMotionHighlightProps<T extends string> =
  BaseMotionHighlightProps<T> & {
    mode?: "children";
    controlledItems?: false;
    itemsClassName?: string;
    children: React.ReactElement | React.ReactElement[];
  };
type MotionHighlightProps<T extends string> = React.ComponentProps<"div"> &
  (
    | ControlledParentModeMotionHighlightProps<T>
    | ControlledChildrenModeMotionHighlightProps<T>
    | UncontrolledParentModeMotionHighlightProps<T>
    | UncontrolledChildrenModeMotionHighlightProps<T>
  );
function MotionHighlight<T extends string>({ ref, ...props }: MotionHighlightProps<T>) {
  const {
    children,
    value,
    defaultValue,
    onValueChange,
    className,
    transition = { type: "spring", stiffness: 350, damping: 35 },
    hover = false,
    enabled = true,
    controlledItems,
    disabled = false,
    exitDelay = 0.2,
    mode = "children",
  } = props;
  const localRef = React.useRef<HTMLDivElement>(null);
  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);
  const [activeValue, setActiveValue] = React.useState<T | null>(value ?? defaultValue ?? null);
  const [boundsState, setBoundsState] = React.useState<Bounds | null>(null);
  const [activeClassNameState, setActiveClassNameState] = React.useState<string>("");
  const safeSetActiveValue = React.useCallback(
    (id: T | null) => {
      setActiveValue((prev) => (prev === id ? prev : id));
      if (id !== activeValue) onValueChange?.(id as T);
    },
    [activeValue, onValueChange],
  );
  const safeSetBounds = React.useCallback(
    (bounds: DOMRect) => {
      if (!localRef.current) return;
      const boundsOffset = (props as ParentModeMotionHighlightProps)?.boundsOffset ?? {
        top: 0,
        left: 0,
        width: 0,
        height: 0,
      };
      const containerRect = localRef.current.getBoundingClientRect();
      const newBounds: Bounds = {
        top: bounds.top - containerRect.top + (boundsOffset.top ?? 0),
        left: bounds.left - containerRect.left + (boundsOffset.left ?? 0),
        width: bounds.width + (boundsOffset.width ?? 0),
        height: bounds.height + (boundsOffset.height ?? 0),
      };
      setBoundsState((prev) => {
        if (
          prev &&
          prev.top === newBounds.top &&
          prev.left === newBounds.left &&
          prev.width === newBounds.width &&
          prev.height === newBounds.height
        ) {
          return prev;
        }
        return newBounds;
      });
    },
    [props],
  );
  const clearBounds = React.useCallback(() => {
    setBoundsState((prev) => (prev === null ? prev : null));
  }, []);
  React.useEffect(() => {
    if (value !== undefined) setActiveValue(value);
    else if (defaultValue !== undefined) setActiveValue(defaultValue);
  }, [value, defaultValue]);
  const id = React.useId();
  React.useEffect(() => {
    if (mode !== "parent") return;
    const container = localRef.current;
    if (!container) return;
    const onScroll = () => {
      if (!activeValue) return;
      const activeEl = container.querySelector<HTMLElement>(
        `[data-value="${activeValue}"][data-highlight="true"]`,
      );
      if (activeEl) safeSetBounds(activeEl.getBoundingClientRect());
    };
    container.addEventListener("scroll", onScroll, { passive: true });
    return () => container.removeEventListener("scroll", onScroll);
  }, [mode, activeValue, safeSetBounds]);
  const render = React.useCallback(
    (children: React.ReactNode) => {
      if (mode === "parent") {
        return (
          <div
            ref={localRef}
            data-slot="motion-highlight-container"
            className={cn(
              "relative",
              (props as ParentModeMotionHighlightProps)?.containerClassName,
            )}
          >
            <AnimatePresence initial={false}>
              {boundsState && (
                <motion.div
                  data-slot="motion-highlight"
                  animate={{
                    top: boundsState.top,
                    left: boundsState.left,
                    width: boundsState.width,
                    height: boundsState.height,
                    opacity: 1,
                  }}
                  initial={{
                    top: boundsState.top,
                    left: boundsState.left,
                    width: boundsState.width,
                    height: boundsState.height,
                    opacity: 0,
                  }}
                  exit={{
                    opacity: 0,
                    transition: {
                      ...transition,
                      delay: (transition?.delay ?? 0) + (exitDelay ?? 0),
                    },
                  }}
                  transition={transition}
                  className={cn("bg-muted absolute z-0", className, activeClassNameState)}
                />
              )}
            </AnimatePresence>
            {children}
          </div>
        );
      }
      return children;
    },
    [mode, props, boundsState, transition, exitDelay, className, activeClassNameState],
  );
  return (
    <MotionHighlightContext.Provider
      value={{
        mode,
        activeValue,
        setActiveValue: safeSetActiveValue,
        id,
        hover,
        className,
        transition,
        disabled,
        enabled,
        exitDelay,
        setBounds: safeSetBounds,
        clearBounds,
        activeClassName: activeClassNameState,
        setActiveClassName: setActiveClassNameState,
        forceUpdateBounds: (props as ParentModeMotionHighlightProps)?.forceUpdateBounds,
      }}
    >
      {enabled
        ? controlledItems
          ? render(children)
          : render(
              React.Children.map(children, (child, index) => (
                <MotionHighlightItem key={index} className={props?.itemsClassName}>
                  {child}
                </MotionHighlightItem>
              )),
            )
        : children}
    </MotionHighlightContext.Provider>
  );
}
function getNonOverridingDataAttributes(
  element: React.ReactElement,
  dataAttributes: Record<string, unknown>,
): Record<string, unknown> {
  return Object.keys(dataAttributes).reduce<Record<string, unknown>>((acc, key) => {
    if ((element.props as Record<string, unknown>)[key] === undefined) {
      acc[key] = dataAttributes[key];
    }
    return acc;
  }, {});
}
type ExtendedChildProps = React.ComponentProps<"div"> & {
  id?: string;
  ref?: React.Ref<HTMLElement>;
  "data-active"?: string;
  "data-value"?: string;
  "data-disabled"?: boolean;
  "data-highlight"?: boolean;
  "data-slot"?: string;
};
type MotionHighlightItemProps = React.ComponentProps<"div"> & {
  children: React.ReactElement;
  id?: string;
  value?: string;
  className?: string;
  transition?: Transition;
  activeClassName?: string;
  disabled?: boolean;
  exitDelay?: number;
  asChild?: boolean;
  forceUpdateBounds?: boolean;
};
function MotionHighlightItem({
  ref,
  children,
  id,
  value,
  className,
  transition,
  disabled = false,
  activeClassName,
  exitDelay,
  asChild = false,
  forceUpdateBounds,
  ...props
}: MotionHighlightItemProps) {
  const itemId = React.useId();
  const {
    activeValue,
    setActiveValue,
    mode,
    setBounds,
    clearBounds,
    hover,
    enabled,
    className: contextClassName,
    transition: contextTransition,
    id: contextId,
    disabled: contextDisabled,
    exitDelay: contextExitDelay,
    forceUpdateBounds: contextForceUpdateBounds,
    setActiveClassName,
  } = useMotionHighlight();
  const element = children as React.ReactElement<ExtendedChildProps>;
  const childValue = id ?? value ?? element.props?.["data-value"] ?? element.props?.id ?? itemId;
  const isActive = activeValue === childValue;
  const isDisabled = disabled === undefined ? contextDisabled : disabled;
  const itemTransition = transition ?? contextTransition;
  const localRef = React.useRef<HTMLDivElement>(null);
  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);
  React.useEffect(() => {
    if (mode !== "parent") return;
    let rafId: number;
    let previousBounds: Bounds | null = null;
    const shouldUpdateBounds =
      forceUpdateBounds === true || (contextForceUpdateBounds && forceUpdateBounds !== false);
    const updateBounds = () => {
      if (!localRef.current) return;
      const bounds = localRef.current.getBoundingClientRect();
      if (shouldUpdateBounds) {
        if (
          previousBounds &&
          previousBounds.top === bounds.top &&
          previousBounds.left === bounds.left &&
          previousBounds.width === bounds.width &&
          previousBounds.height === bounds.height
        ) {
          rafId = requestAnimationFrame(updateBounds);
          return;
        }
        previousBounds = bounds;
        rafId = requestAnimationFrame(updateBounds);
      }
      setBounds(bounds);
    };
    if (isActive) {
      updateBounds();
      setActiveClassName(activeClassName ?? "");
    } else if (!activeValue) clearBounds();
    if (shouldUpdateBounds) return () => cancelAnimationFrame(rafId);
  }, [
    mode,
    isActive,
    activeValue,
    setBounds,
    clearBounds,
    activeClassName,
    setActiveClassName,
    forceUpdateBounds,
    contextForceUpdateBounds,
  ]);
  if (!React.isValidElement(children)) return children;
  const dataAttributes = {
    "data-active": isActive ? "true" : "false",
    "aria-selected": isActive,
    "data-disabled": isDisabled,
    "data-value": childValue,
    "data-highlight": true,
  };
  const commonHandlers = hover
    ? {
        onMouseEnter: (e: React.MouseEvent<HTMLDivElement>) => {
          setActiveValue(childValue);
          element.props.onMouseEnter?.(e);
        },
        onMouseLeave: (e: React.MouseEvent<HTMLDivElement>) => {
          setActiveValue(null);
          element.props.onMouseLeave?.(e);
        },
      }
    : {
        onClick: (e: React.MouseEvent<HTMLDivElement>) => {
          setActiveValue(childValue);
          element.props.onClick?.(e);
        },
      };
  if (asChild) {
    if (mode === "children") {
      return React.cloneElement(
        element,
        {
          key: childValue,
          ref: localRef,
          className: cn("relative", element.props.className),
          ...getNonOverridingDataAttributes(element, {
            ...dataAttributes,
            "data-slot": "motion-highlight-item-container",
          }),
          ...commonHandlers,
          ...props,
        },
        <>
          <AnimatePresence initial={false}>
            {isActive && !isDisabled && (
              <motion.div
                layoutId={`transition-background-${contextId}`}
                data-slot="motion-highlight"
                className={cn("bg-muted absolute inset-0 z-0", contextClassName, activeClassName)}
                transition={itemTransition}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{
                  opacity: 0,
                  transition: {
                    ...itemTransition,
                    delay: (itemTransition?.delay ?? 0) + (exitDelay ?? contextExitDelay ?? 0),
                  },
                }}
                {...dataAttributes}
              />
            )}
          </AnimatePresence>
          <div
            data-slot="motion-highlight-item"
            className={cn("relative z-[1]", className)}
            {...dataAttributes}
          >
            {children}
          </div>
        </>,
      );
    }
    return React.cloneElement(element, {
      ref: localRef,
      ...getNonOverridingDataAttributes(element, {
        ...dataAttributes,
        "data-slot": "motion-highlight-item",
      }),
      ...commonHandlers,
    });
  }
  return enabled ? (
    <div
      key={childValue}
      ref={localRef}
      data-slot="motion-highlight-item-container"
      className={cn(mode === "children" && "relative", className)}
      {...dataAttributes}
      {...props}
      {...commonHandlers}
    >
      {mode === "children" && (
        <AnimatePresence initial={false}>
          {isActive && !isDisabled && (
            <motion.div
              layoutId={`transition-background-${contextId}`}
              data-slot="motion-highlight"
              className={cn("bg-muted absolute inset-0 z-0", contextClassName, activeClassName)}
              transition={itemTransition}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{
                opacity: 0,
                transition: {
                  ...itemTransition,
                  delay: (itemTransition?.delay ?? 0) + (exitDelay ?? contextExitDelay ?? 0),
                },
              }}
              {...dataAttributes}
            />
          )}
        </AnimatePresence>
      )}
      {React.cloneElement(element, {
        className: cn("relative z-[1]", element.props.className),
        ...getNonOverridingDataAttributes(element, {
          ...dataAttributes,
          "data-slot": "motion-highlight-item",
        }),
      })}
    </div>
  ) : (
    children
  );
}
export {
  MotionHighlight,
  MotionHighlightItem,
  useMotionHighlight,
  type MotionHighlightProps,
  type MotionHighlightItemProps,
};
</file>

<file path="src/components/ui/multi-select.tsx">
// src/components/multi-select.tsx
import { cva, type VariantProps } from "class-variance-authority";
import { CheckIcon, XCircle, ChevronDown, XIcon, WandSparkles } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import * as React from "react";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Separator } from "@/ui/separator";
import { Skeleton } from "@/ui/skeleton";
import { cn } from "@/lib/utils";
/**
 * Variants for the multi-select component to handle different styles.
 * Uses class-variance-authority (cva) to define different styles based on "variant" prop.
 */
const multiSelectVariants = cva(
  "m-1 transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 duration-300",
  {
    variants: {
      variant: {
        default: "border-foreground/10 text-foreground bg-card hover:bg-card/80",
        secondary:
          "border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        inverted: "inverted",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);
export type MultiSelectOption<T = string> = {
  id: string;
  label: string;
  value: T;
  icon?: React.ComponentType<{ className?: string }>;
  metadata?: Record<string, any>;
};
/**
 * Props for MultiSelect component
 */
interface MultiSelectProps<T = string>
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "defaultValue"> {
  /**
   * An array of option objects to be displayed in the multi-select component.
   * Each option object has a label, value, and an optional icon.
   */
  options: MultiSelectOption<T>[];
  /**
   * Callback function triggered when the selected values change.
   * Receives an array of the new selected values.
   */
  onValueChange: (value: T[]) => void;
  /** The default selected values when the component mounts. */
  defaultValue?: T[];
  /**
   * Placeholder text to be displayed when no values are selected.
   * Optional, defaults to "Select options".
   */
  placeholder?: string;
  /**
   * Animation duration in seconds for the visual effects (e.g., bouncing badges).
   * Optional, defaults to 0 (no animation).
   */
  animation?: number;
  /**
   * Maximum number of items to display. Extra selected items will be summarized.
   * Optional, defaults to 3.
   */
  maxCount?: number;
  /**
   * The modality of the popover. When set to true, interaction with outside elements
   * will be disabled and only popover content will be visible to screen readers.
   * Optional, defaults to false.
   */
  modalPopover?: boolean;
  /**
   * If true, renders the multi-select component as a child of another component.
   * Optional, defaults to false.
   */
  asChild?: boolean;
  /**
   * Additional class names to apply custom styles to the multi-select component.
   * Optional, can be used to add custom styles.
   */
  className?: string;
  /**
   * Optional render function to customize how each option is displayed
   * If not provided, defaults to showing just the label
   */
  renderOption?: (option: MultiSelectOption<T>) => React.ReactNode;
  /**
   * Variant of the multi-select component
   */
  variant?: VariantProps<typeof multiSelectVariants>["variant"];
  /**
   * Function to get a unique key for a value
   * Required when T is not a string
   */
  getValueKey?: (value: T) => string;
  /**
   * Function to check if two values are equal
   * Required when T is not a string
   */
  isValueEqual?: (a: T, b: T) => boolean;
  /**
   * If true, the multi-select component will be loading
   * Optional, defaults to false.
   */
  loading?: boolean;
}
export const MultiSelect = React.forwardRef<HTMLButtonElement, MultiSelectProps>(
  <T extends any>(
    {
      options,
      onValueChange,
      variant,
      defaultValue = [],
      placeholder = "Select options",
      animation = 0,
      maxCount = 3,
      modalPopover = false,
      asChild = false,
      className,
      renderOption,
      getValueKey = (value: T) => (typeof value === "string" ? value : JSON.stringify(value)),
      isValueEqual = (a: T, b: T) => getValueKey(a) === getValueKey(b),
      loading = false,
      ...props
    }: MultiSelectProps<T>,
    ref: React.Ref<HTMLButtonElement>,
  ) => {
    const [selectedValues, setSelectedValues] = React.useState<T[]>(defaultValue as T[]);
    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);
    const [isAnimating, setIsAnimating] = React.useState(false);
    const t = useTranslations();
    const locale = useLocale();
    const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
      if (event.key === "Enter") {
        setIsPopoverOpen(true);
      } else if (event.key === "Backspace" && !event.currentTarget.value) {
        const newSelectedValues = [...selectedValues];
        newSelectedValues.pop();
        setSelectedValues(newSelectedValues);
        onValueChange(newSelectedValues);
      }
    };
    const toggleOption = (option: T) => {
      const newSelectedValues = selectedValues.some((value) => isValueEqual(value, option))
        ? selectedValues.filter((value) => !isValueEqual(value, option))
        : [...selectedValues, option];
      setSelectedValues(newSelectedValues);
      onValueChange(newSelectedValues);
    };
    const handleClear = () => {
      setSelectedValues([]);
      onValueChange([]);
    };
    const handleTogglePopover = () => {
      setIsPopoverOpen((prev) => !prev);
    };
    const clearExtraOptions = () => {
      const newSelectedValues = selectedValues.slice(0, maxCount);
      setSelectedValues(newSelectedValues);
      onValueChange(newSelectedValues);
    };
    const toggleAll = () => {
      if (selectedValues.length === options.length) {
        handleClear();
      } else {
        const allValues = options.map((option) => option.value);
        setSelectedValues(allValues as T[]);
        onValueChange(allValues as T[]);
      }
    };
    const getOptionLabel = (value: T): string => {
      return options.find((o) => isValueEqual(o.value, value))?.label || "";
    };
    return (
      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen} modal={modalPopover}>
        <PopoverTrigger asChild>
          {loading ? (
            <Skeleton className="min-h-10 w-full" />
          ) : (
            <Button
              ref={ref}
              {...props}
              onClick={handleTogglePopover}
              className={cn(
                "flex h-auto min-h-10 w-full items-center justify-between rounded-md border bg-inherit p-1 hover:bg-inherit [&_svg]:pointer-events-auto",
                className,
              )}
            >
              {selectedValues.length > 0 ? (
                <div className="flex w-full items-center justify-between">
                  <div className="flex flex-wrap items-center">
                    {selectedValues.slice(0, maxCount).map((value) => {
                      const option = options.find((o) => isValueEqual(o.value, value));
                      const IconComponent = option?.icon;
                      return (
                        <Badge
                          key={getValueKey(value)}
                          className={cn(
                            isAnimating ? "animate-bounce" : "",
                            multiSelectVariants({ variant }),
                          )}
                          style={{ animationDuration: `${animation}s` }}
                        >
                          {IconComponent && <IconComponent className="me-2 h-4 w-4" />}
                          {getOptionLabel(value)}
                          <XCircle
                            className="ms-2 h-4 w-4 cursor-pointer"
                            onClick={(event) => {
                              event.stopPropagation();
                              toggleOption(value);
                            }}
                          />
                        </Badge>
                      );
                    })}
                    {selectedValues.length > maxCount && (
                      <Badge
                        className={cn(
                          "text-foreground border-foreground/1 bg-transparent hover:bg-transparent",
                          isAnimating ? "animate-bounce" : "",
                          multiSelectVariants({ variant }),
                        )}
                        style={{ animationDuration: `${animation}s` }}
                      >
                        {`+ ${selectedValues.length - maxCount} ${t("General.more")}`}
                        <XCircle
                          className="ms-2 h-4 w-4 cursor-pointer"
                          onClick={(event) => {
                            event.stopPropagation();
                            clearExtraOptions();
                          }}
                        />
                      </Badge>
                    )}
                  </div>
                  <div className="flex items-center justify-between">
                    <XIcon
                      className="text-muted-foreground mx-2 h-4 cursor-pointer"
                      onClick={(event) => {
                        event.stopPropagation();
                        handleClear();
                      }}
                    />
                    <Separator orientation="vertical" className="flex h-full min-h-6" />
                    <ChevronDown className="text-muted-foreground mx-2 h-4 cursor-pointer" />
                  </div>
                </div>
              ) : (
                <div className="mx-auto flex w-full items-center justify-between">
                  <span className="text-muted-foreground mx-3 text-sm">{placeholder}</span>
                  <ChevronDown className="text-muted-foreground mx-2 h-4 cursor-pointer" />
                </div>
              )}
            </Button>
          )}
        </PopoverTrigger>
        <PopoverContent
          className="w-auto p-0"
          align="start"
          dir={locale === "ar" ? "rtl" : "ltr"}
          onEscapeKeyDown={() => setIsPopoverOpen(false)}
        >
          <Command>
            <CommandInput placeholder={t("General.search")} onKeyDown={handleInputKeyDown} />
            <CommandList>
              <CommandEmpty>{t("General.no_results_found")}</CommandEmpty>
              <CommandGroup>
                <CommandItem key="all" onSelect={toggleAll} className="cursor-pointer">
                  <div
                    className={cn(
                      "border-primary me-2 flex h-4 w-4 items-center justify-center rounded-sm border",
                      selectedValues.length === options.length
                        ? "bg-primary text-primary-foreground"
                        : "opacity-50 [&_svg]:invisible",
                    )}
                  >
                    <CheckIcon className="h-4 w-4" />
                  </div>
                  <span>{t("General.select_all")}</span>
                </CommandItem>
                {options.map((option, i) => {
                  const isSelected = selectedValues.some((value) =>
                    isValueEqual(value, option.value),
                  );
                  return (
                    <CommandItem
                      key={i}
                      onSelect={() => toggleOption(option.value)}
                      value={String(i)}
                      className="cursor-pointer"
                    >
                      <div
                        className={cn(
                          "border-primary me-2 flex h-4 w-4 items-center justify-center rounded-sm border",
                          isSelected
                            ? "bg-primary text-primary-foreground"
                            : "opacity-50 [&_svg]:invisible",
                        )}
                      >
                        <CheckIcon className="h-4 w-4" />
                      </div>
                      {option.icon && (
                        <option.icon className="text-muted-foreground me-2 h-4 w-4" />
                      )}
                      {renderOption ? renderOption(option) : <span>{option.label}</span>}
                    </CommandItem>
                  );
                })}
              </CommandGroup>
              <CommandSeparator />
              <CommandGroup>
                <div className="flex items-center justify-between">
                  {selectedValues.length > 0 && (
                    <>
                      <CommandItem
                        onSelect={handleClear}
                        className="flex-1 cursor-pointer justify-center"
                      >
                        {t("General.clear")}
                      </CommandItem>
                      <Separator orientation="vertical" className="flex h-full min-h-6" />
                    </>
                  )}
                  <CommandItem
                    onSelect={() => setIsPopoverOpen(false)}
                    className="max-w-full flex-1 cursor-pointer justify-center"
                  >
                    {t("General.close")}
                  </CommandItem>
                </div>
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
        {animation > 0 && selectedValues.length > 0 && (
          <WandSparkles
            className={cn(
              "text-foreground bg-background my-2 h-3 w-3 cursor-pointer",
              isAnimating ? "" : "text-muted-foreground",
            )}
            onClick={() => setIsAnimating(!isAnimating)}
          />
        )}
      </Popover>
    );
  },
) as <T = string>(
  props: MultiSelectProps<T> & React.RefAttributes<HTMLButtonElement>,
) => React.ReactElement;
(MultiSelect as any).displayName = "MultiSelect";
</file>

<file path="src/components/ui/no-permission.tsx">
import { Shield } from "lucide-react";
import { useTranslations } from "next-intl";
import { Alert, AlertDescription, AlertTitle } from "./alert";
const NoPermission = () => {
  const t = useTranslations();
  return (
    <div className="flex h-screen items-center justify-center p-4">
      <Alert variant="destructive" className="max-w-md">
        <Shield className="h-4 w-4" />
        <AlertTitle>{t("General.no_permission")}</AlertTitle>
        <AlertDescription>{t("General.no_permission_description")}</AlertDescription>
      </Alert>
    </div>
  );
};
export default NoPermission;
</file>

<file path="src/components/ui/number-input.tsx">
import { useRef, useEffect } from "react";
import { Input } from "./input";
const NumberInput = ({ ...props }) => {
  const domRef = useRef<HTMLInputElement>(null);
  useEffect(() => {
    const preventInputScroll = (e: WheelEvent) => e.preventDefault();
    domRef.current?.addEventListener("wheel", preventInputScroll);
    return () => {
      domRef.current?.removeEventListener("wheel", preventInputScroll);
    };
  });
  return <Input type="number" ref={domRef} {...props} />;
};
export default NumberInput;
</file>

<file path="src/components/ui/page-search-and-filter.tsx">
import { Search, Plus, LayoutGrid, Table2 } from "lucide-react";
import { useTranslations } from "next-intl";
import Link from "next/link";
import * as React from "react";
import { StoreApi, useStore } from "zustand";
import { cn } from "@/lib/utils";
import { FilterableField, SortableColumn, FilterCondition } from "@/types/common.type";
import { Button } from "./button";
import FilterPopover from "./filter-popover";
import IconButton from "./icon-button";
import { Input } from "./input";
import SortPopover from "./sort-popover";
export interface PageSearchAndFilterProps extends React.HTMLAttributes<HTMLDivElement> {
  store: StoreApi<{
    searchQuery: string;
    setSearchQuery: (searchQuery: string) => void;
    filterConditions: FilterCondition[];
    setFilterConditions: (filterConditions: FilterCondition[]) => void;
    filterCaseSensitive: boolean;
    setFilterCaseSensitive: (filterCaseSensitive: boolean) => void;
    viewMode: "table" | "cards";
    setViewMode: (viewMode: "table" | "cards") => void;
    isDeleteDialogOpen: boolean;
    setIsDeleteDialogOpen: (isDeleteDialogOpen: boolean) => void;
    sortRules: { field: string; direction: string }[];
    setSortRules: (sortRules: { field: string; direction: string }[]) => void;
    sortCaseSensitive: boolean;
    setSortCaseSensitive: (sortCaseSensitive: boolean) => void;
    sortNullsFirst: boolean;
    setSortNullsFirst: (sortNullsFirst: boolean) => void;
    clearSelection: () => void;
    setSelectedRows: (ids: string[]) => void;
  }>;
  title?: string;
  onAddClick?: () => void;
  createLabel?: string;
  searchPlaceholder?: string;
  sortableColumns: SortableColumn[];
  filterableFields?: FilterableField[];
}
const PageSearchAndFilter = ({
  store,
  className,
  title = "Items",
  onAddClick,
  createLabel = "Create",
  searchPlaceholder = "Search...",
  sortableColumns,
  filterableFields,
  ...props
}: PageSearchAndFilterProps) => {
  const viewMode = useStore(store, (state) => state.viewMode);
  const setViewMode = useStore(store, (state) => state.setViewMode);
  const searchQuery = useStore(store, (state) => state.searchQuery);
  const setSearchQuery = useStore(store, (state) => state.setSearchQuery);
  const filterConditions = useStore(store, (state) => state.filterConditions);
  const onFilterConditionsChange = useStore(store, (state) => state.setFilterConditions);
  const filterCaseSensitive = useStore(store, (state) => state.filterCaseSensitive);
  const onFilterCaseSensitiveChange = useStore(store, (state) => state.setFilterCaseSensitive);
  const sortRules = useStore(store, (state) => state.sortRules);
  const onSortRulesChange = useStore(store, (state) => state.setSortRules);
  const sortCaseSensitive = useStore(store, (state) => state.sortCaseSensitive);
  const setSortCaseSensitive = useStore(store, (state) => state.setSortCaseSensitive);
  const sortNullsFirst = useStore(store, (state) => state.sortNullsFirst);
  const setSortNullsFirst = useStore(store, (state) => state.setSortNullsFirst);
  const t = useTranslations();
  return (
    <div
      className={cn(
        "bg-background sticky top-0 z-10 flex !min-h-12 items-center justify-between gap-4 border-b px-2",
        className,
      )}
      {...props}
    >
      <div className="flex flex-1 items-center gap-4">
        {title && <h2 className="hidden text-xl font-medium md:block">{title}</h2>}
        <div className="relative max-w-md flex-1">
          <Input
            type="text"
            placeholder={searchPlaceholder}
            className="bg-muted/50 h-8 w-full ps-9 focus-visible:ring-1"
            onChange={(e) => setSearchQuery(e.target.value)}
            value={searchQuery}
          />
          <Search className="text-muted-foreground absolute start-3 top-1/2 h-4 w-4 -translate-y-1/2" />
        </div>
      </div>
      <div className="flex items-center gap-2">
        <IconButton
          icon={
            viewMode === "table" ? (
              <LayoutGrid className="h-4 w-4" />
            ) : (
              <Table2 className="h-4 w-4" />
            )
          }
          label={viewMode === "table" ? t("General.cards_view") : t("General.table_view")}
          onClick={() => setViewMode(viewMode === "table" ? "cards" : "table")}
        />
        <FilterPopover
          fields={filterableFields}
          conditions={filterConditions}
          onConditionsChange={onFilterConditionsChange}
          caseSensitive={filterCaseSensitive}
          onCaseSensitiveChange={onFilterCaseSensitiveChange}
        />
        <SortPopover
          columns={sortableColumns}
          sortRules={sortRules}
          onSortRulesChange={onSortRulesChange}
          caseSensitive={sortCaseSensitive}
          onCaseSensitiveChange={setSortCaseSensitive}
          nullsFirst={sortNullsFirst}
          onNullsFirstChange={setSortNullsFirst}
        />
        {onAddClick && (
          <Button size="sm" className="h-8" onClick={onAddClick}>
            <Plus className="me-1 h-4 w-4" />
            <span>{createLabel}</span>
          </Button>
        )}
      </div>
    </div>
  );
};
export default PageSearchAndFilter;
</file>

<file path="src/components/ui/page-title.tsx">
import { Loader2, Plus } from "lucide-react";
import Link from "next/link";
import { Button } from "./button";
const PageTitle = ({
  createButtonLink,
  createButtonText,
  createButtonDisabled,
  customButton,
  dummyButton,
  loading,
  formButtons,
  texts,
  onCancel,
  formId,
}: {
  onCancel?: () => void;
  dummyButton?: () => void;
  createButtonLink?: string;
  createButtonText?: string;
  createButtonDisabled?: boolean;
  customButton?: React.ReactNode;
  formButtons?: boolean;
  formId?: string;
  loading?: boolean;
  texts?: {
    title?: string;
    submit_form?: string;
    cancel?: string;
  };
}) => {
  return (
    <div className="bg-muted sticky top-0 flex !min-h-12 items-center justify-between border-b p-2 py-0">
      {texts?.title && <h2 className="ms-2 text-xl font-bold">{texts?.title}</h2>}
      {customButton
        ? customButton
        : createButtonLink && (
            <Link href={createButtonLink}>
              <Button disabled={createButtonDisabled} size="sm" className="h-8">
                <Plus className="h-4 w-4" />
                {createButtonText}
              </Button>
            </Link>
          )}
      {formButtons && (
        <div className="flex gap-2 p-0">
          {dummyButton && (
            <Button variant="outline" size="sm" onClick={dummyButton}>
              Dummy Data
            </Button>
          )}
          {customButton
            ? customButton
            : createButtonLink && (
                <Link href={createButtonLink}>
                  <Button disabled={createButtonDisabled} size="sm" className="h-8">
                    <Plus className="h-4 w-4" />
                    {createButtonText}
                  </Button>
                </Link>
              )}
          <Button variant="outline" size="sm" className="h-8" onClick={onCancel}>
            {texts?.cancel}
          </Button>
          <Button type="submit" size="sm" form={formId} className="h-8 min-w-24" disabled={loading}>
            {loading ? <Loader2 className="h-4 w-4 animate-spin" /> : texts?.submit_form}
          </Button>
        </div>
      )}
    </div>
  );
};
export default PageTitle;
</file>

<file path="src/components/ui/pagination.tsx">
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";
import * as React from "react";
import { ButtonProps, buttonVariants } from "@/ui/button";
import { cn } from "@/lib/utils";
const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";
const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul ref={ref} className={cn("flex items-center gap-1", className)} {...props} />
  ),
);
PaginationContent.displayName = "PaginationContent";
const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(
  ({ className, ...props }, ref) => <li ref={ref} className={cn("", className)} {...props} />,
);
PaginationItem.displayName = "PaginationItem";
type PaginationLinkProps = {
  is_active?: boolean;
  isDisabled?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;
const PaginationLink = ({ className, is_active, size = "icon", ...props }: PaginationLinkProps) => (
  <a
    aria-current={is_active ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: is_active ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";
const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 ps-2.5", className)}
    {...props}
  >
    <ChevronLeft size={16} strokeWidth={2} className="rtl:rotate-180" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";
const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pe-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight size={16} strokeWidth={2} className="rtl:rotate-180" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";
const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal size={16} strokeWidth={2} />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";
export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};
</file>

<file path="src/components/ui/phone-input.tsx">
"use client";
import { parsePhoneNumber } from "libphonenumber-js/min";
import { Check, ChevronsUpDown } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import * as React from "react";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Input } from "@/components/ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { countries } from "@/lib/constants/countries";
import { cn } from "@/lib/utils";
interface PhoneInputProps {
  value: string;
  defaultValue?: string;
  onChange: (value: string) => void;
}
export default function PhoneInput({ value, defaultValue, onChange }: PhoneInputProps) {
  const t = useTranslations();
  const locale = useLocale();
  const [open, setOpen] = React.useState(false);
  const [selectedCountry, setSelectedCountry] = React.useState(countries[0]);
  // Get the local value (without country code) from the full number
  const getLocalValue = (fullNumber: string, countryCode: string) => {
    if (!fullNumber) return "";
    return fullNumber.startsWith(countryCode) ? fullNumber.slice(countryCode.length) : fullNumber;
  };
  // Get the initial local value
  const initialLocalValue = React.useMemo(() => {
    try {
      if (value) {
        const phoneNumber = parsePhoneNumber(value);
        if (phoneNumber) {
          const country = countries.find((c) => c.value === phoneNumber.country?.toLowerCase());
          if (country) {
            setSelectedCountry(country);
            return phoneNumber.nationalNumber;
          }
        }
      }
      return "";
    } catch (error) {
      return "";
    }
  }, []);
  const [localValue, setLocalValue] = React.useState(initialLocalValue);
  const handleCountrySelect = (value: string) => {
    const country = countries.find((country) => country.value === value);
    if (country) {
      setSelectedCountry(country);
      const newFullNumber = localValue ? `${country.code}${localValue}` : "";
      onChange(newFullNumber);
      setOpen(false);
    }
  };
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    const numericValue = inputValue.replace(/[^0-9]/g, "");
    setLocalValue(numericValue);
    const fullNumber = numericValue ? `${selectedCountry.code}${numericValue}` : "";
    onChange(fullNumber);
  };
  // Update local value when the full number changes externally
  React.useEffect(() => {
    const newLocalValue = getLocalValue(value, selectedCountry.code);
    if (newLocalValue !== localValue) {
      setLocalValue(newLocalValue);
    }
  }, [value, selectedCountry.code]);
  return (
    <div className="flex rounded-md shadow-xs transition-[color,box-shadow]" dir="ltr">
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={open}
            className="h-9 w-fit justify-between gap-0 rounded-e-none border-e-0"
            size="sm"
          >
            <div className="flex items-center">
              <span>{selectedCountry.code}</span>
            </div>
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[240px] p-0">
          <Command>
            <CommandInput placeholder={t("General.search_country")} />
            <CommandList>
              <CommandEmpty>{t("General.no_country_found")}</CommandEmpty>
              <CommandGroup>
                {countries.map((country) => {
                  // Translate the country label if possible (assuming a convention)
                  // You might need a more robust way to get translated names
                  // depending on your i18n setup.
                  // Using a generic key structure for now.
                  const translatedLabel =
                    t(`Country.${country.label.replace(/ /g, "_").toLowerCase()}`) || country.label;
                  const searchValue =
                    `${country.value} ${country.label} ${translatedLabel} ${country.code}`.toLowerCase();
                  return (
                    <CommandItem
                      key={country.value}
                      // Construct a searchable value including code, names, and value
                      value={searchValue}
                      onSelect={() => handleCountrySelect(country.value)} // Use () => to avoid direct call
                    >
                      <div className="flex w-full items-center justify-between">
                        <div className="flex flex-row items-center">
                          <img
                            src={`https://flagcdn.com/w20/${country.value}.png`}
                            alt={`${country.label} flag`}
                            className="mr-2 h-fit w-6"
                          />
                          {/* Display translated name if different and locale is not English */}
                          <span>
                            {locale !== "en" && translatedLabel !== country.label
                              ? translatedLabel
                              : country.label}
                          </span>
                        </div>
                        <span className="text-muted-foreground text-sm">{country.code}</span>
                      </div>
                      <Check
                        className={cn(
                          "ml-auto h-4 w-4",
                          selectedCountry.value === country.value ? "opacity-100" : "opacity-0",
                        )}
                      />
                    </CommandItem>
                  );
                })}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
      <Input
        type="tel"
        value={localValue}
        defaultValue={defaultValue}
        onChange={handleInputChange}
        placeholder={selectedCountry.placeholder}
        className="flex-1 rounded-s-none shadow-none"
      />
    </div>
  );
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"
const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger
const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName
export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/pricing-card.tsx">
import { useLocale } from "next-intl";
import React, { FC } from "react";
import { Button } from "@/ui/button";
import { Card } from "@/ui/card";
import { Chip } from "@/ui/chip";
import { SARSymbol } from "@/ui/sar-symbol";
import { Separator } from "@/ui/separator";
import { Skeleton } from "@/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/ui/tooltip";
import { cn } from "@/lib/utils";
type PlanFeature = {
  soon?: boolean;
  included?: boolean;
  text: string;
  hint?: string;
  hintSide?: "top" | "bottom" | "right" | "left";
};
type PricingPlanTexts = {
  title?: string;
  subtitle?: string;
  buttonText?: string;
  cycleText?: string;
  currencyText?: string;
  soon?: string;
  recommended?: string;
  priceless?: string;
};
export type PricingCardProps = {
  isSAR?: boolean;
  direction?: "rtl" | "ltr";
  features: PlanFeature[];
  endButton?: boolean;
  price: number;
  oldPrice?: number;
  noPrice?: boolean;
  id?: string;
  discount?: string;
  onPlanClicked?: () => void;
  currentPlan?: boolean;
  recommended?: boolean;
  size?: "small" | "medium" | "large";
  isLoadingPrice?: boolean;
  isLoadingCard?: boolean;
  texts: PricingPlanTexts;
};
export const PricingCard: FC<PricingCardProps> = ({
  size = "medium",
  direction = "ltr",
  endButton = true,
  recommended,
  currentPlan = false,
  ...props
}) => {
  const lang = useLocale();
  let cardSizes = {
    small: "w-full max-w-sm rounded border dark:border-gray-700 bg-background",
    medium: "w-full rounded min-w-fit border dark:border-gray-700 bg-background",
    large: "w-full max-w-lg rounded border dark:border-gray-700 bg-background",
  };
  return (
    <>
      {props.isLoadingCard ? (
        <Skeleton
          className={cn(cardSizes[size], "h-[200px]")}
          //   fade="bottom"
        />
      ) : (
        <Card
          dir={direction}
          className={cn(
            currentPlan ? "border-primary dark:border-primary/70 border-2" : "border",
            cardSizes[size],
            "relative flex flex-col justify-between gap-4 p-4",
            recommended ? "rounded rounded-t-none" : "rounded",
          )}
        >
          {recommended && (
            <div
              className="bg-primary text-primary-foreground absolute top-0 -left-[1px] -translate-y-full rounded-t border p-2 text-center"
              style={{ width: "calc(100% + 2px)" }}
            >
              {props.texts?.recommended || "RECOMMENDED"}
            </div>
          )}
          <div className="flex h-full flex-col gap-4">
            <div className="text-md text-primary/70 relative flex flex-col justify-between font-bold">
              <span>{props.texts?.title}</span>
              <h5 className="text-primary/70 text-sm font-normal">{props.texts?.subtitle}</h5>
              {props.discount && (
                <span className="absolute end-0">
                  <Chip label={props.discount} size="large" color="hyper" />
                </span>
              )}
            </div>
            <div className="text-primary flex items-baseline">
              {props.isLoadingPrice ? (
                <Skeleton className="h-[48px] w-full max-w-[200px] p-0" />
              ) : (
                <>
                  {props.noPrice ? (
                    <div className="text-5xl font-extrabold tracking-tight">
                      {props.texts?.priceless || "Contact Us"}
                    </div>
                  ) : (
                    <div className="flex flex-row items-end gap-0">
                      <div className="flex flex-row items-end gap-2">
                        <div className="flex flex-row items-end gap-2">
                          {props.oldPrice && props.oldPrice > 0 && (
                            <span className="line-through opacity-70">
                              {props.oldPrice + " " + props.texts?.currencyText}
                            </span>
                          )}
                          <span className="text-5xl leading-9 font-extrabold tracking-tight">
                            {props.price}
                          </span>
                        </div>
                        <span className="mx-1 text-sm font-semibold">
                          {props.isSAR && lang === "ar" ? (
                            <SARSymbol className="size-8" />
                          ) : (
                            props.texts?.currencyText
                          )}
                        </span>
                      </div>
                      <span className="text-primary/70 ms-1 text-xl font-normal whitespace-nowrap">
                        / {props.texts?.cycleText}
                      </span>
                    </div>
                  )}
                </>
              )}
            </div>
            {endButton && <Separator />}
            <div
              className={cn(
                "flex h-full justify-between gap-4",
                endButton ? "flex-col" : "flex-col-reverse",
              )}
            >
              {props.features && (
                <ul role="list" className="space-y-0 overflow-x-auto">
                  {props.features?.map((feature, o) => {
                    return (
                      <li
                        key={o}
                        className={cn(
                          "flex flex-row justify-between gap-2",
                          !feature.included && "line-through",
                        )}
                      >
                        <div className="flex flex-row items-center">
                          {feature.included ? (
                            <svg
                              aria-label="Check Icon"
                              aria-hidden="true"
                              className="text-primary m-2 h-5 w-5 flex-shrink-0"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path
                                fillRule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                clipRule="evenodd"
                              ></path>
                            </svg>
                          ) : (
                            <div className="bg-primary/10 m-2 mx-2.5 h-4 w-4 rounded-full"></div>
                          )}
                          <span className="text-primary/70 flex flex-row items-center gap-2 text-start leading-tight font-normal whitespace-nowrap">
                            {feature.text}{" "}
                            {feature.soon && feature.included && (
                              <Chip label={props.texts?.soon || ""} color="oceanic" size="small" />
                            )}
                          </span>
                        </div>
                        {feature.hint && (
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger>
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  className="h-[14px] w-[14px] cursor-help"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                >
                                  <circle cx="12" cy="12" r="10" />
                                  <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" />
                                  <path d="M12 17h.01" />
                                </svg>
                              </TooltipTrigger>
                              <TooltipContent side={feature.hintSide}>
                                {feature.hint}
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        )}
                      </li>
                    );
                  })}
                </ul>
              )}
              <Button onClick={props.onPlanClicked} disabled={currentPlan} className="w-full">
                {props.texts?.buttonText}
              </Button>
            </div>
          </div>
        </Card>
      )}
    </>
  );
};
</file>

<file path="src/components/ui/pricing-section-with-comparison.tsx">
import { Check, Minus, MoveRight, PhoneCall } from "lucide-react";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
function Pricing() {
  return (
    <div className="w-full py-20 lg:py-40">
      <div className="container mx-auto">
        <div className="flex flex-col items-center justify-center gap-4 text-center">
          <Badge>Pricing</Badge>
          <div className="flex flex-col gap-2">
            <h2 className="font-regular max-w-xl text-center text-3xl tracking-tighter md:text-5xl">
              Prices that make sense!
            </h2>
            <p className="text-muted-foreground max-w-xl text-center text-lg leading-relaxed tracking-tight">
              Managing a small business today is already tough.
            </p>
          </div>
          <div className="grid w-full grid-cols-3 divide-x pt-20 text-left lg:grid-cols-4">
            <div className="col-span-3 lg:col-span-1"></div>
            <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
              <p className="text-2xl">Startup</p>
              <p className="text-muted-foreground text-sm">
                Our goal is to streamline SMB trade, making it easier and faster than ever for
                everyone and everywhere.
              </p>
              <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
                <span className="text-4xl">$40</span>
                <span className="text-muted-foreground text-sm"> / month</span>
              </p>
              <Button variant="outline" className="mt-8 gap-4">
                Try it <MoveRight className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
              <p className="text-2xl">Growth</p>
              <p className="text-muted-foreground text-sm">
                Our goal is to streamline SMB trade, making it easier and faster than ever for
                everyone and everywhere.
              </p>
              <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
                <span className="text-4xl">$40</span>
                <span className="text-muted-foreground text-sm"> / month</span>
              </p>
              <Button className="mt-8 gap-4">
                Try it <MoveRight className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex flex-col gap-2 px-3 py-1 md:px-6 md:py-4">
              <p className="text-2xl">Enterprise</p>
              <p className="text-muted-foreground text-sm">
                Our goal is to streamline SMB trade, making it easier and faster than ever for
                everyone and everywhere.
              </p>
              <p className="mt-8 flex flex-col gap-2 text-xl lg:flex-row lg:items-center">
                <span className="text-4xl">$40</span>
                <span className="text-muted-foreground text-sm"> / month</span>
              </p>
              <Button variant="outline" className="mt-8 gap-4">
                Contact us <PhoneCall className="h-4 w-4" />
              </Button>
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">
              <b>Features</b>
            </div>
            <div></div>
            <div></div>
            <div></div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">SSO</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">AI Assistant</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Minus className="text-muted-foreground h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">Version Control</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Minus className="text-muted-foreground h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">Members</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <p className="text-muted-foreground text-sm">5 members</p>
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <p className="text-muted-foreground text-sm">25 members</p>
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <p className="text-muted-foreground text-sm">100+ members</p>
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">Multiplayer Mode</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Minus className="text-muted-foreground h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="col-span-3 px-3 py-4 lg:col-span-1 lg:px-6">Orchestration</div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Minus className="text-muted-foreground h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
            <div className="flex justify-center px-3 py-1 md:px-6 md:py-4">
              <Check className="text-primary h-4 w-4" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
export { Pricing };
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"
const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName
export { Progress }
</file>

<file path="src/components/ui/progressive-blur.tsx">
"use client";
import { HTMLMotionProps, motion } from "motion/react";
import { cn } from "@/lib/utils";
export const GRADIENT_ANGLES = {
  top: 0,
  right: 90,
  bottom: 180,
  left: 270,
};
export type ProgressiveBlurProps = {
  direction?: keyof typeof GRADIENT_ANGLES;
  blurLayers?: number;
  className?: string;
  blurIntensity?: number;
} & HTMLMotionProps<"div">;
export function ProgressiveBlur({
  direction = "bottom",
  blurLayers = 8,
  className,
  blurIntensity = 0.25,
  ...props
}: ProgressiveBlurProps) {
  const layers = Math.max(blurLayers, 2);
  const segmentSize = 1 / (blurLayers + 1);
  return (
    <div className={cn("relative", className)}>
      {Array.from({ length: layers }).map((_, index) => {
        const angle = GRADIENT_ANGLES[direction];
        const gradientStops = [
          index * segmentSize,
          (index + 1) * segmentSize,
          (index + 2) * segmentSize,
          (index + 3) * segmentSize,
        ].map(
          (pos, posIndex) =>
            `rgba(255, 255, 255, ${posIndex === 1 || posIndex === 2 ? 1 : 0}) ${pos * 100}%`,
        );
        const gradient = `linear-gradient(${angle}deg, ${gradientStops.join(", ")})`;
        return (
          <motion.div
            key={index}
            className="pointer-events-none absolute inset-0 rounded-[inherit]"
            style={{
              maskImage: gradient,
              WebkitMaskImage: gradient,
              backdropFilter: `blur(${index * blurIntensity}px)`,
            }}
            {...props}
          />
        );
      })}
    </div>
  );
}
</file>

<file path="src/components/ui/pukla-card.tsx">
import { useTranslations } from "next-intl";
import { Avatar, AvatarFallback, AvatarImage } from "@/ui/avatar";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardDescription, CardTitle, CardHeader } from "@/ui/card";
import { useClipboard } from "@/hooks/use-clipboard";
import { cn } from "@/lib/utils";
const PuklaCard = ({
  pukla,
  linkCount,
  onClick,
  isSelected,
}: {
  pukla: any;
  linkCount: number;
  onClick: () => void;
  isSelected: boolean;
}) => {
  const t = useTranslations();
  const { copy } = useClipboard();
  return (
    <Card
      key={pukla.id}
      onClick={() => onClick()}
      className={cn("cursor-pointer", isSelected && "border-2 border-black dark:border-white")}
    >
      <CardHeader className="flex flex-row items-center gap-4">
        <Avatar>
          <AvatarImage src={pukla.avatarUrl} alt={pukla.title} />
          <AvatarFallback>{pukla.title.slice(0, 2).toUpperCase()}</AvatarFallback>
        </Avatar>
        <div>
          <CardTitle>{pukla.title}</CardTitle>
          <CardDescription>
            {process.env.NEXT_PUBLIC_APP_URL}/{pukla.slug}
          </CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-muted-foreground mb-2 text-sm">{pukla.description}</p>
        <div className="flex items-center justify-between">
          <Badge variant="secondary">
            {t("MyPuklas.links")} {linkCount}
          </Badge>
          <span className="text-muted-foreground text-xs">
            {t("MyPuklas.created")} {new Date(pukla.created_at).toLocaleDateString()}
          </span>
        </div>
      </CardContent>
    </Card>
  );
};
export default PuklaCard;
</file>

<file path="src/components/ui/radio-group.tsx">
"use client";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import * as React from "react";
import { cn } from "@/lib/utils";
const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-3", className)} {...props} ref={ref} />;
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;
const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square size-4 rounded-full border border-input shadow-sm shadow-black/5 outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center text-current">
        <svg
          width="6"
          height="6"
          viewBox="0 0 6 6"
          fill="currentcolor"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle cx="3" cy="3" r="3" />
        </svg>
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;
export { RadioGroup, RadioGroupItem };
</file>

<file path="src/components/ui/radix-collapsible.tsx">
'use client';
import * as React from 'react';
import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';
import { AnimatePresence, motion, type Transition } from 'motion/react';
interface CollapsibleContextType {
  isOpen: boolean;
}
const CollapsibleContext = React.createContext<CollapsibleContextType>({
  isOpen: false,
});
const useCollapsible = (): CollapsibleContextType => {
  const context = React.useContext(CollapsibleContext);
  if (!context) {
    throw new Error('useCollapsible must be used within a Collapsible');
  }
  return context;
};
type CollapsibleProps = React.ComponentPropsWithoutRef<
  typeof CollapsiblePrimitive.Root
>;
const Collapsible: React.FC<CollapsibleProps> = ({ children, ...props }) => {
  const [isOpen, setIsOpen] = React.useState(
    props?.open ?? props?.defaultOpen ?? false,
  );
  const handleOpenChange = React.useCallback(
    (open: boolean) => {
      setIsOpen(open);
      props.onOpenChange?.(open);
    },
    [props],
  );
  return (
    <CollapsiblePrimitive.Root {...props} onOpenChange={handleOpenChange}>
      <CollapsibleContext.Provider value={{ isOpen }}>
        {children}
      </CollapsibleContext.Provider>
    </CollapsiblePrimitive.Root>
  );
};
type CollapsibleTriggerProps = React.ComponentPropsWithoutRef<
  typeof CollapsiblePrimitive.Trigger
>;
const CollapsibleTrigger = CollapsiblePrimitive.Trigger;
type CollapsibleContentProps = React.ComponentPropsWithoutRef<
  typeof CollapsiblePrimitive.Content
> & {
  transition?: Transition;
};
const CollapsibleContent = React.forwardRef<
  React.ElementRef<typeof CollapsiblePrimitive.Content>,
  CollapsibleContentProps
>(
  (
    {
      className,
      children,
      transition,
      //  = 
      // { type: 'spring', stiffness: 150, damping: 17 },
      ...props
    },
    ref,
  ) => {
    const { isOpen } = useCollapsible();
    return (
      <AnimatePresence>
        {isOpen && (
          <CollapsiblePrimitive.Content asChild forceMount ref={ref} {...props}>
            <motion.div
              key="collapsible-content"
              layout
              initial={{ opacity: 0, height: 0, overflow: 'hidden' }}
              animate={{ opacity: 1, height: 'auto', overflow: 'hidden' }}
              exit={{ opacity: 0, height: 0, overflow: 'hidden' }}
              transition={transition}
              className={className}
            >
              {children}
            </motion.div>
          </CollapsiblePrimitive.Content>
        )}
      </AnimatePresence>
    );
  },
);
CollapsibleContent.displayName = CollapsiblePrimitive.Content.displayName;
export {
  Collapsible,
  CollapsibleTrigger,
  CollapsibleContent,
  useCollapsible,
  type CollapsibleContextType,
  type CollapsibleProps,
  type CollapsibleTriggerProps,
  type CollapsibleContentProps,
};
</file>

<file path="src/components/ui/radix-dialog.tsx">
'use client';
import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';
import { AnimatePresence, motion, type Transition } from 'motion/react';
import { cn } from '@/lib/utils';
interface DialogContextType {
  isOpen: boolean;
}
const DialogContext = React.createContext<DialogContextType>({ isOpen: false });
const useDialog = (): DialogContextType => {
  const context = React.useContext(DialogContext);
  if (!context) {
    throw new Error('useDialog must be used within a Dialog');
  }
  return context;
};
type DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;
const Dialog: React.FC<DialogProps> = ({ children, ...props }) => {
  const [isOpen, setIsOpen] = React.useState(
    props?.open ?? props?.defaultOpen ?? false,
  );
  React.useEffect(() => {
    if (props?.open !== undefined) setIsOpen(props.open);
  }, [props?.open]);
  const handleOpenChange = React.useCallback(
    (open: boolean) => {
      setIsOpen(open);
      props.onOpenChange?.(open);
    },
    [props],
  );
  return (
    <DialogContext.Provider value={{ isOpen }}>
      <DialogPrimitive.Root {...props} onOpenChange={handleOpenChange}>
        {children}
      </DialogPrimitive.Root>
    </DialogContext.Provider>
  );
};
type DialogTriggerProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Trigger
>;
const DialogTrigger = DialogPrimitive.Trigger;
type DialogPortalProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Portal
>;
const DialogPortal = DialogPrimitive.Portal;
type DialogCloseProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Close
>;
const DialogClose = DialogPrimitive.Close;
type DialogOverlayProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Overlay
>;
const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  DialogOverlayProps
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
type FlipDirection = 'top' | 'bottom' | 'left' | 'right';
type DialogContentProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Content
> & {
  from?: FlipDirection;
  transition?: Transition;
};
const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  DialogContentProps
>(
  (
    {
      className,
      children,
      from = 'top',
      transition = { type: 'spring', stiffness: 150, damping: 25 },
      ...props
    },
    ref,
  ) => {
    const { isOpen } = useDialog();
    const initialRotation =
      from === 'top' || from === 'left' ? '20deg' : '-20deg';
    const isVertical = from === 'top' || from === 'bottom';
    const rotateAxis = isVertical ? 'rotateX' : 'rotateY';
    return (
      <AnimatePresence>
        {isOpen && (
          <DialogPortal forceMount>
            <DialogOverlay asChild forceMount>
              <motion.div
                key="dialog-overlay"
                initial={{ opacity: 0, filter: 'blur(4px)' }}
                animate={{ opacity: 1, filter: 'blur(0px)' }}
                exit={{ opacity: 0, filter: 'blur(4px)' }}
                transition={{ duration: 0.2, ease: 'easeInOut' }}
              />
            </DialogOverlay>
            <DialogPrimitive.Content asChild forceMount ref={ref} {...props}>
              <motion.div
                key="dialog-content"
                initial={{
                  opacity: 0,
                  filter: 'blur(4px)',
                  // transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,
                }}
                animate={{
                  opacity: 1,
                  filter: 'blur(0px)',
                  // transform: `perspective(500px) ${rotateAxis}(0deg) scale(1)`,
                }}
                exit={{
                  opacity: 0,
                  filter: 'blur(4px)',
                  // transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,
                }}
                transition={transition}
                className={cn(
                  'fixed left-[50%] top-[50%] z-50 grid w-[calc(100%-2rem)] max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg rounded-xl',
                  className,
                )}
              >
                {children}
                <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
                  <X className="h-4 w-4" />
                  <span className="sr-only">Close</span>
                </DialogPrimitive.Close>
              </motion.div>
            </DialogPrimitive.Content>
          </DialogPortal>
        )}
      </AnimatePresence>
    );
  },
);
DialogContent.displayName = DialogPrimitive.Content.displayName;
type DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;
const DialogHeader = React.forwardRef<HTMLDivElement, DialogHeaderProps>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(
        'flex flex-col space-y-1.5 text-center sm:text-left',
        className,
      )}
      {...props}
    />
  ),
);
DialogHeader.displayName = 'DialogHeader';
type DialogFooterProps = React.HTMLAttributes<HTMLDivElement>;
const DialogFooter = React.forwardRef<HTMLDivElement, DialogFooterProps>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end gap-2',
        className,
      )}
      {...props}
    />
  ),
);
DialogFooter.displayName = 'DialogFooter';
type DialogTitleProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Title
>;
const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  DialogTitleProps
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;
type DialogDescriptionProps = React.ComponentPropsWithoutRef<
  typeof DialogPrimitive.Description
>;
const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  DialogDescriptionProps
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;
export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  useDialog,
  type DialogContextType,
  type DialogProps,
  type DialogTriggerProps,
  type DialogPortalProps,
  type DialogCloseProps,
  type DialogOverlayProps,
  type DialogContentProps,
  type DialogHeaderProps,
  type DialogFooterProps,
  type DialogTitleProps,
  type DialogDescriptionProps,
};
</file>

<file path="src/components/ui/row-actions.tsx">
"use client";
import { MoreHorizontal, Trash2, Edit, Copy, Eye, Archive } from "lucide-react";
import { motion, AnimatePresence } from "motion/react";
import React, { useState } from "react";
import { Button } from "./button";
import IconButton from "./icon-button";
interface RowActionsProps {
  onEdit?: () => void;
  onDuplicate?: () => void;
  onView?: () => void;
  onArchive?: () => void;
  onDelete?: () => void;
  texts?: {
    edit?: string;
    duplicate?: string;
    view?: string;
    archive?: string;
    delete?: string;
  };
}
const RowActions = ({
  onEdit,
  onDuplicate,
  onView,
  onArchive,
  onDelete,
  texts,
}: RowActionsProps) => {
  const [isHovered, setIsHovered] = useState(false);
  const actions = [onDelete, onEdit, onDuplicate, onView, onArchive];
  const availableActionsCount = actions.filter(Boolean).length; // Count how many actions are defined
  const collapsedWidth = 32; // Default width when collapsed or no actions
  // Calculate expanded width based on the number of actions:
  // Each button is w-7 (28px), gap is gap-1 (4px), padding is p-1 (4px on each side)
  // Width = (count * 28) + (max(0, count - 1) * 4) + (2 * 4)
  // Simplified: Width = 32 * count + 4 (for count >= 1)
  const expandedWidth = availableActionsCount > 0 ? availableActionsCount * 32 + 4 : collapsedWidth;
  return (
    <motion.div
      className="relative flex items-center justify-end"
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <AnimatePresence>
        {isHovered ? (
          <motion.div
            initial={{ width: collapsedWidth, opacity: 0 }}
            animate={{ width: expandedWidth, opacity: 1 }}
            exit={{ width: collapsedWidth, opacity: 0 }}
            className="bg-background flex items-center justify-between gap-1 overflow-clip rounded-md p-1 shadow-sm"
          >
            {onDelete && (
              <IconButton
                icon={<Trash2 className="size-4" />}
                label={texts?.delete || "delete"}
                className="h-7 w-7"
                onClick={onDelete}
              />
            )}
            {onEdit && (
              <IconButton
                icon={<Edit className="size-4" />}
                label={texts?.edit || "edit"}
                className="h-7 w-7"
                onClick={onEdit}
              />
            )}
            {onDuplicate && (
              <IconButton
                icon={<Copy className="size-4" />}
                label={texts?.duplicate || "duplicate"}
                className="h-7 w-7"
                onClick={onDuplicate}
              />
            )}
            {/* {onView && (
              <IconButton
                icon={<Eye className="size-4" />}
                label={texts?.view || "view"}
                className="h-7 w-7"
                onClick={onView}
            />
            )}
            {onArchive && (
              <IconButton
                icon={<Archive className="size-4" />}
                label={texts?.archive || "archive"}
                className="h-7 w-7"
                onClick={onArchive}
              />
            )} */}
          </motion.div>
        ) : (
          <motion.div
            initial={{ width: collapsedWidth, opacity: 1 }}
            animate={{ width: collapsedWidth, opacity: 1 }}
            exit={{ width: collapsedWidth, opacity: 0 }}
            className="bg-background mt-0.5 flex items-center justify-between gap-1 overflow-clip p-1"
          >
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <MoreHorizontal className="size-4" />
            </Button>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};
export default RowActions;
</file>

<file path="src/components/ui/sar-symbol.tsx">
import React from "react";
import { cn } from "@/lib/utils";
export const SARSymbol = ({ className }: { className?: string }) => {
  return (
    <svg
      id="Layer_1"
      data-name="Layer 1"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1124.14 1256.39"
      className={className}
    >
      <path
        className="fill-current"
        d="M699.62,1113.02h0c-20.06,44.48-33.32,92.75-38.4,143.37l424.51-90.24c20.06-44.47,33.31-92.75,38.4-143.37l-424.51,90.24Z"
      />
      <path
        className="fill-current"
        d="M1085.73,895.8c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.33v-135.2l292.27-62.11c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.27V66.13c-50.67,28.45-95.67,66.32-132.25,110.99v403.35l-132.25,28.11V0c-50.67,28.44-95.67,66.32-132.25,110.99v525.69l-295.91,62.88c-20.06,44.47-33.33,92.75-38.42,143.37l334.33-71.05v170.26l-358.3,76.14c-20.06,44.47-33.32,92.75-38.4,143.37l375.04-79.7c30.53-6.35,56.77-24.4,73.83-49.24l68.78-101.97v-.02c7.14-10.55,11.3-23.27,11.3-36.97v-149.98l132.25-28.11v270.4l424.53-90.28Z"
      />
    </svg>
  );
};
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"
const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";
import { cn } from "@/lib/utils";
const Select = SelectPrimitive.Root;
const SelectGroup = SelectPrimitive.Group;
const SelectValue = SelectPrimitive.Value;
const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & {
    hideIcon?: boolean;
    defaultStyles?: boolean;
  }
>(({ className, children, hideIcon = false, defaultStyles = true, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "border-input bg-background placeholder:text-muted-foreground flex h-10 w-full items-center justify-between rounded-md border px-3 py-2 text-sm disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
      defaultStyles &&
        "ring-offset-background focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none",
    )}
    {...props}
  >
    {children}
    {!hideIcon && (
      <SelectPrimitive.Icon asChild>
        <ChevronDown className="me-2 h-4 w-4 opacity-50" />
      </SelectPrimitive.Icon>
    )}
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;
const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;
const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;
const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 ps-8 pe-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;
const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default items-center rounded-sm py-1.5 ps-8 pe-2 text-sm outline-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute start-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;
const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("bg-muted -mx-1 my-1 h-px", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;
export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="src/components/ui/selection-mode.tsx">
import { useTranslations } from "next-intl";
import { Trash2, X } from "lucide-react";
import { Button } from "./button";
const SelectionMode = ({
  selectedRows,
  clearSelection,
  isDeleting,
  setIsDeleteDialogOpen,
}: {
  selectedRows: string[];
  clearSelection: () => void;
  isDeleting: boolean;
  setIsDeleteDialogOpen: (open: boolean) => void;
}) => {
  const t = useTranslations();
  return (
    <div className="bg-background sticky top-0 z-10 flex !min-h-12 items-center justify-between gap-4 border-b px-2">
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium">
          {selectedRows.length} {t("General.items_selected")}
        </span>
      </div>
      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={clearSelection}
          className="flex items-center gap-2"
          disabled={isDeleting}
        >
          <X className="h-4 w-4" />
          {t("General.clear")}
        </Button>
        <Button
          variant="destructive"
          size="sm"
          onClick={() => setIsDeleteDialogOpen(true)}
          className="flex items-center gap-2"
          disabled={isDeleting}
        >
          <Trash2 className="h-4 w-4" />
          {t("General.delete")}
        </Button>
      </div>
    </div>
  );
};
export default SelectionMode;
</file>

<file path="src/components/ui/separator.tsx">
import * as SeparatorPrimitive from "@radix-ui/react-separator";
import * as React from "react";
import { cn } from "@/lib/utils";
function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className,
      )}
      {...props}
    />
  );
}
export { Separator };
</file>

<file path="src/components/ui/sheet-table.tsx">
"use client";
/**
 * sheet-table/index.tsx
 *
 * A reusable table component with editable cells, row/column disabling,
 * custom data support, and Zod validation. Supports:
 *  - Grouping rows by a `headerKey`
 *  - A configurable footer (totals row + custom element)
 *  - TanStack Table column sizing (size, minSize, maxSize)
 *  - Forwarding other TanStack Table configuration via tableOptions
 *  - Sub-rows (nested rows) with expand/collapse
 * - Hover-based Add/Remove row actions
 * - Custom styling for cells and columns
 * - Real-time validation with Zod schemas
 * - Keyboard shortcuts (Ctrl+Z, Ctrl+V, etc.)
 */
import {
  useReactTable,
  getCoreRowModel,
  getExpandedRowModel,
  flexRender,
  TableOptions,
  ColumnDef,
  Row as TanStackRow,
  ColumnSizingState,
} from "@tanstack/react-table";
// ** import icons
import {
  ChevronDown,
  ChevronRight,
  MoreHorizontal,
  Plus,
  Trash2,
  Edit,
  Copy,
  Eye,
  Archive,
} from "lucide-react";
import { EllipsisVertical } from "lucide-react";
import { motion, AnimatePresence } from "motion/react";
import { useTranslations } from "next-intl";
import React, { useState, useCallback, useEffect } from "react";
import type { ZodType, ZodTypeDef } from "zod";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
// ** import ui components
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  TableFooter,
} from "@/ui/table";
// ** import lib
import { cn } from "@/lib/utils";
import { Button } from "./button";
import IconButton from "./icon-button";
import RowActions from "./row-actions";
export type ExtendedColumnDef<TData extends object, TValue = unknown> = Omit<
  ColumnDef<TData, TValue>,
  "id" | "accessorKey"
> & {
  id?: string;
  accessorKey?: string;
  cellType?: "text" | "select";
  options?: Array<{ label: string; value: string | number }>;
  validationSchema?: ZodType<any, ZodTypeDef, any>;
  className?: string | ((row: TData) => string); // Allows static or dynamic class names
  style?: React.CSSProperties; // style for inline styles
};
/**
 * Extended props for footer functionality.
 */
interface FooterProps {
  /**
   * totalRowValues:
   *  - Object mapping column ID/accessorKey => any
   *  - If provided, we render a special totals row at the bottom of the table.
   */
  totalRowValues?: Record<string, any>;
  /**
   * totalRowLabel:
   *  - A string label used to fill empty cells in the totals row.
   *  - Defaults to "" if omitted.
   */
  totalRowLabel?: string;
  /**
   * totalRowTitle:
   *  - A string displayed on a separate row above the totals row.
   *  - Shown only if totalRowValues is provided as well.
   */
  totalRowTitle?: string;
  /**
   * footerElement:
   *  - A React node rendered below the totals row.
   *  - If omitted, no extra footer node is rendered.
   */
  footerElement?: React.ReactNode;
}
/**
 * Props for the SheetTable component.
 * Includes footer props and additional TanStack table configurations.
 */
export interface SheetTableProps<T extends object> extends FooterProps {
  id?: string;
  /**
   * Column definitions for the table.
   */
  columns: ExtendedColumnDef<T>[];
  /**
   * Data to be displayed in the table.
   */
  data: T[];
  /**
   * Callback for handling cell edits.
   */
  onEdit?: <K extends keyof T>(rowIndex: string, columnId: K, value: T[K]) => void;
  /**
   * Callback for when a cell is focused.
   */
  onCellFocus?: (rowId: string) => void;
  /**
   * Whether row selection is enabled.
   */
  enableRowSelection?: boolean;
  /**
   * Whether row actions are enabled.
   */
  enableRowActions?: boolean;
  /**
   * Callback for when row selection changes.
   */
  onRowSelectionChange?: (selectedRows: T[]) => void;
  /**
   * Columns that are disabled for editing.
   */
  disabledColumns?: string[];
  /**
   * Rows that are disabled for editing.
   * Can be an array of row indices or a record mapping column IDs to row indices.
   */
  disabledRows?: number[] | Record<string, number[]>;
  /**
   * Whether to show the table header.
   */
  showHeader?: boolean;
  /**
   * Whether to show a secondary header below the main header.
   */
  showSecondHeader?: boolean;
  /**
   * Title for the secondary header, if enabled.
   */
  secondHeaderTitle?: string;
  /**
   * If true, column sizing is enabled. Sizes are tracked in local state.
   */
  enableColumnSizing?: boolean;
  /**
   * Additional table options to be passed directly to `useReactTable`.
   * Examples: initialState, columnResizeMode, etc.
   */
  tableOptions?: Partial<TableOptions<T>>;
  /**
   * Configuration for Add/Remove row icons:
   * { add?: "left" | "right"; remove?: "left" | "right"; }
   * Example: { add: "left", remove: "right" }
   */
  rowActions?: {
    add?: "left" | "right";
    remove?: "left" | "right";
  };
  /**
   * Optional function to handle adding a sub-row to a given row (by rowId).
   */
  handleAddRowFunction?: (parentRowId: string) => void;
  /**
   * Optional function to handle removing a given row (by rowId),
   * including all of its sub-rows.
   */
  handleRemoveRowFunction?: (rowId: string) => void;
  /**
   * Texts for the table.
   */
  texts?: {
    actions?: string;
    edit?: string;
    duplicate?: string;
    view?: string;
    archive?: string;
    delete?: string;
  };
  onActionClicked?: (action: string, rowId: string) => void;
  canEditAction?: boolean;
  canDuplicateAction?: boolean;
  canViewAction?: boolean;
  canArchiveAction?: boolean;
  canDeleteAction?: boolean;
}
/**
 * Returns a stable string key for each column (id > accessorKey > "").
 */
export function getColumnKey<T extends object>(colDef: ExtendedColumnDef<T>): string {
  return colDef.id ?? colDef.accessorKey ?? "";
}
/**
 * Parse & validate helper:
 * - If colDef is numeric and empty => undefined (if optional)
 * - If colDef is numeric and invalid => produce error
 */
export function parseAndValidate<T extends object>(
  rawValue: string,
  colDef: ExtendedColumnDef<T>,
): { parsedValue: unknown; errorMessage: string | null } {
  const schema = colDef.validationSchema;
  if (!schema) {
    // No validation => no error
    return { parsedValue: rawValue, errorMessage: null };
  }
  let parsedValue: unknown = rawValue;
  let errorMessage: string | null = null;
  const schemaType = (schema as any)?._def?.typeName;
  if (schemaType === "ZodNumber") {
    // If empty => undefined (if optional this is okay, otherwise error)
    if (rawValue.trim() === "") {
      parsedValue = undefined;
    } else {
      // Try parse to float
      const maybeNum = parseFloat(rawValue);
      // If the user typed something that parseFloat sees as NaN, it's an error
      parsedValue = Number.isNaN(maybeNum) ? rawValue : maybeNum;
    }
  }
  const result = schema.safeParse(parsedValue);
  if (!result.success) {
    errorMessage = result.error.issues[0].message;
  }
  return { parsedValue, errorMessage };
}
/**
 * BLOCK non-numeric characters in numeric columns, including paste.
 * (We keep these separate so they're easy to import and use in the main component.)
 */
export function handleKeyDown<T extends object>(
  e: React.KeyboardEvent<HTMLTableCellElement | HTMLDivElement>,
  colDef: ExtendedColumnDef<T>,
) {
  if (!colDef.validationSchema) return;
  const schemaType = (colDef.validationSchema as any)?._def?.typeName;
  if (schemaType === "ZodNumber") {
    // Allowed keys for numeric input:
    const allowedKeys = [
      "Backspace",
      "Delete",
      "ArrowLeft",
      "ArrowRight",
      "Tab",
      "Home",
      "End",
      ".",
      "-",
    ];
    const isDigit = /^[0-9]$/.test(e.key);
    if (!allowedKeys.includes(e.key) && !isDigit) {
      e.preventDefault();
    }
  }
}
export function handlePaste<T extends object>(
  e: React.ClipboardEvent<HTMLTableCellElement | HTMLDivElement>,
  colDef: ExtendedColumnDef<T>,
) {
  if (!colDef.validationSchema) return;
  const schemaType = (colDef.validationSchema as any)?._def?.typeName;
  if (schemaType === "ZodNumber") {
    const text = e.clipboardData.getData("text");
    // If the pasted text is not a valid float, block it.
    if (!/^-?\d*\.?\d*$/.test(text)) {
      e.preventDefault();
    }
  }
}
/**
 * Helper function to determine if a row is disabled based on the provided
 * disabledRows prop. This prop can be either a simple array of row indices
 * or a record keyed by groupKey mapped to arrays of row indices.
 */
export function isRowDisabled(
  rows: number[] | Record<string, number[]> | undefined,
  groupKey: string,
  rowIndex: number,
): boolean {
  if (!rows) return false;
  if (Array.isArray(rows)) {
    return rows.includes(rowIndex);
  }
  return rows[groupKey]?.includes(rowIndex) ?? false;
}
/**
 * The main SheetTable component, now with optional column sizing support,
 * sub-row expansions, and hover-based Add/Remove row actions.
 */
function SheetTable<
  T extends {
    // Common properties for each row
    id?: string; // Each row should have a unique string/number ID
    headerKey?: string;
    subRows?: T[];
  },
>(props: SheetTableProps<T>) {
  const {
    texts,
    onActionClicked,
    columns,
    data,
    onEdit,
    disabledColumns = [],
    disabledRows = [],
    showHeader = true,
    showSecondHeader = false,
    secondHeaderTitle = "",
    enableRowSelection = false,
    enableRowActions = false,
    onRowSelectionChange,
    // Footer props
    totalRowValues,
    totalRowLabel = "",
    totalRowTitle,
    footerElement,
    // Additional TanStack config
    enableColumnSizing = false,
    tableOptions = {},
    // Add/Remove Dynamic Row Actions
    rowActions,
    handleAddRowFunction,
    handleRemoveRowFunction,
    id,
  } = props;
  const t = useTranslations();
  /**
   * If column sizing is enabled, we track sizes in state.
   * This allows the user to define 'size', 'minSize', 'maxSize' in the column definitions.
   */
  const [columnSizing, setColumnSizing] = useState<ColumnSizingState>({});
  /**
   * Expanded state for sub-rows. Keyed by row.id in TanStack Table.
   */
  const [expanded, setExpanded] = useState<Record<string, boolean>>({});
  /**
   * Track errors/original content keyed by (groupKey, rowId) for editing.
   */
  const [cellErrors, setCellErrors] = useState<
    Record<string, Record<string, Record<string, string | null>>>
  >({});
  const [cellOriginalContent, setCellOriginalContent] = useState<
    Record<string, Record<string, Record<string, string>>>
  >({});
  /**
   * Track the currently hovered row ID (or null if none).
   */
  const [hoveredRowId, setHoveredRowId] = useState<string | null>(null);
  /**
   * Build the final table options. Merge user-provided tableOptions with ours.
   */
  const mergedOptions: TableOptions<T> = {
    data,
    columns,
    getRowId: (row) => row.id ?? String(Math.random()), // fallback if row.id is missing
    getCoreRowModel: getCoreRowModel(),
    // Provide subRows if you have them:
    getSubRows: (row) => row.subRows ?? undefined,
    // Add expansions
    getExpandedRowModel: getExpandedRowModel(),
    enableExpanding: true,
    // Add row selection
    enableRowSelection: true,
    enableMultiRowSelection: true,
    // External expanded state
    state: {
      // If user also provided tableOptions.state, merge them
      ...(tableOptions.state ?? {}),
      expanded,
      ...(enableColumnSizing
        ? {
            columnSizing,
          }
        : {}),
    },
    onExpandedChange: setExpanded, // keep expansions in local state
    // If sizing is enabled, pass sizing states:
    ...(enableColumnSizing
      ? {
          onColumnSizingChange: setColumnSizing,
          columnResizeMode: tableOptions.columnResizeMode ?? "onChange",
        }
      : {}),
    // Spread any other user-provided table options
    ...tableOptions,
  } as TableOptions<T>;
  /**
   * Initialize the table using TanStack Table.
   */
  const table = useReactTable<T>(mergedOptions);
  // Update parent component when row selection changes
  useEffect(() => {
    if (onRowSelectionChange) {
      const selectedRows = table.getSelectedRowModel().flatRows.map((row) => row.original);
      onRowSelectionChange(selectedRows);
    }
  }, [table.getState().rowSelection, onRowSelectionChange, table]);
  /**
   * Find a TanStack row by matching rowData.id.
   */
  const findTableRow = useCallback(
    (rowData: T): TanStackRow<T> | undefined => {
      if (!rowData.id) return undefined;
      // NOTE: Because we have expansions, rowData might be in subRows.
      // We can do a quick flatten search across all rows. We use table.getRowModel().flatRows
      return table.getRowModel().flatRows.find((r) => r.original.id === rowData.id);
    },
    [table],
  );
  /**
   * Store a cell's original value on focus, for detecting changes on blur.
   */
  const handleCellFocus = useCallback(
    (
      e: React.FocusEvent<HTMLTableCellElement | HTMLDivElement>,
      groupKey: string,
      rowData: T,
      colDef: ExtendedColumnDef<T>,
    ) => {
      const tanStackRow = findTableRow(rowData);
      if (!tanStackRow) return;
      const rowId = tanStackRow.id;
      const colKey = getColumnKey(colDef);
      const initialText = e.currentTarget.textContent ?? "";
      setCellOriginalContent((prev) => {
        const groupContent = prev[groupKey] || {};
        const rowContent = {
          ...(groupContent[rowId] || {}),
          [colKey]: initialText,
        };
        return {
          ...prev,
          [groupKey]: { ...groupContent, [rowId]: rowContent },
        };
      });
    },
    [findTableRow],
  );
  /**
   * Real-time validation on each keystroke (but no onEdit call here).
   */
  const handleCellInput = useCallback(
    (
      e: React.FormEvent<HTMLTableCellElement | HTMLDivElement>,
      groupKey: string,
      rowData: T,
      colDef: ExtendedColumnDef<T>,
    ) => {
      const tanStackRow = findTableRow(rowData);
      if (!tanStackRow) return;
      const rowId = tanStackRow.id;
      const rowIndex = tanStackRow.index;
      const colKey = getColumnKey(colDef);
      if (isRowDisabled(disabledRows, groupKey, rowIndex) || disabledColumns.includes(colKey)) {
        return;
      }
      const rawValue = e.currentTarget.textContent ?? "";
      const { errorMessage } = parseAndValidate(rawValue, colDef);
      setCellErrors((prev) => {
        const groupErrors = prev[groupKey] || {};
        const rowErrors = {
          ...(groupErrors[rowId] || {}),
          [colKey]: errorMessage,
        };
        return { ...prev, [groupKey]: { ...groupErrors, [rowId]: rowErrors } };
      });
    },
    [disabledColumns, disabledRows, findTableRow],
  );
  /**
   * OnBlur: if content changed from the original, parse/validate. If valid => onEdit(rowId, colKey, parsedValue).
   */
  const handleCellBlur = useCallback(
    (
      e: React.FocusEvent<HTMLTableCellElement | HTMLDivElement>,
      groupKey: string,
      rowData: T,
      colDef: ExtendedColumnDef<T>,
    ) => {
      const tanStackRow = findTableRow(rowData);
      if (!tanStackRow) return;
      const rowId = tanStackRow.id;
      const rowIndex = tanStackRow.index;
      const colKey = getColumnKey(colDef);
      if (isRowDisabled(disabledRows, groupKey, rowIndex) || disabledColumns.includes(colKey)) {
        return;
      }
      const rawValue = e.currentTarget.textContent ?? "";
      const originalValue = cellOriginalContent[groupKey]?.[rowId]?.[colKey] ?? "";
      if (rawValue === originalValue) {
        return; // No change
      }
      const { parsedValue, errorMessage } = parseAndValidate(rawValue, colDef);
      setCellErrors((prev) => {
        const groupErrors = prev[groupKey] || {};
        const rowErrors = {
          ...(groupErrors[rowId] || {}),
          [colKey]: errorMessage,
        };
        return { ...prev, [groupKey]: { ...groupErrors, [rowId]: rowErrors } };
      });
      if (errorMessage) {
        console.error(`Row "${rowId}", Col "${colKey}" error: ${errorMessage}`);
      } else if (onEdit) {
        // Instead of rowIndex, we pass the row's unique ID from TanStack
        onEdit(rowId, colKey as keyof T, parsedValue as T[keyof T]);
      }
    },
    [disabledColumns, disabledRows, findTableRow, cellOriginalContent, onEdit],
  );
  /**
   * Group data by `headerKey` (top-level only).
   * Sub-rows are handled by TanStack expansions.
   */
  const groupedData = React.useMemo(() => {
    const out: Record<string, T[]> = {};
    data.forEach((row) => {
      const key = row.headerKey || "ungrouped";
      if (!out[key]) out[key] = [];
      out[key].push(row);
    });
    return out;
  }, [data]);
  /**
   * Attempt removing the row with the given rowId via handleRemoveRowFunction.
   * You can also do the "recursive removal" in your parent with a similar approach to `updateNestedRow`.
   */
  const removeRow = useCallback(
    (rowId: string) => {
      if (handleRemoveRowFunction) {
        handleRemoveRowFunction(rowId);
      }
    },
    [handleRemoveRowFunction],
  );
  /**
   * Attempt adding a sub-row to the row with given rowId (the "parentRowId").
   */
  const addSubRow = useCallback(
    (parentRowId: string) => {
      if (handleAddRowFunction) {
        handleAddRowFunction(parentRowId);
      }
    },
    [handleAddRowFunction],
  );
  // rowActions config
  const addPos = rowActions?.add ?? null; // "left" | "right" | null
  const removePos = rowActions?.remove ?? null; // "left" | "right" | null
  const rowActionCellStyle: React.CSSProperties = {
    width: "5px",
    maxWidth: "5px",
    outline: "none",
  };
  const rowActionCellClassName = "p-0 border-none bg-transparent";
  /**
   * Recursively renders a row and its sub-rows, handling:
   * - Row content and cell editing
   * - Hover-activated action icons (Add/Remove)
   * - Sub-row indentation and expansion
   * - Row-level error tracking and validation
   * - Disabled state management
   *
   * @param row - TanStack row instance containing the data and state
   * @param groupKey - Identifier for the row's group, used for validation and disabled state
   * @param level - Nesting depth (0 = top-level), used for sub-row indentation
   * @returns JSX element containing the row and its sub-rows
   */
  const renderRow = (row: TanStackRow<T>, groupKey: string, level = 0) => {
    const rowId = row.id;
    const rowIndex = row.index;
    const rowData = row.original;
    // Determine if this row or its group is disabled
    const disabled = isRowDisabled(disabledRows, groupKey, rowIndex);
    // TanStack expansion logic
    const hasSubRows = row.getCanExpand();
    const isExpanded = row.getIsExpanded();
    // Determine if we show the rowAction icons on hover
    const showRowActions = hoveredRowId === rowId; // only for hovered row
    const stickyColumnId = "checkbox";
    return (
      <React.Fragment key={rowId}>
        <TableRow
          className={cn(
            "relative", // it's will remove border for icons cells
            disabled ? "bg-muted" : "",
            row.getIsSelected() ? "bg-muted/50" : "",
          )}
          // On mouse enter/leave, set hovered row
          onMouseEnter={() => setHoveredRowId(rowId)}
          onMouseLeave={() => setHoveredRowId((prev) => (prev === rowId ? null : prev))}
          data-state={row.getIsSelected() && "selected"}
        >
          {/* Selection checkbox */}
          {enableRowSelection && (
            <TableCell className="bg-background sticky start-0 z-2 border-y">
              <div className="flex h-auto items-center justify-center">
                <input
                  type="checkbox"
                  checked={row.getIsSelected()}
                  onChange={row.getToggleSelectedHandler()}
                  className="h-4 w-4 rounded border-gray-300"
                />
              </div>
              <div className="bg-border absolute end-0 top-0 h-full w-[0.5px]" />
            </TableCell>
          )}
          {/* Left icon cells */}
          {addPos === "left" && handleAddRowFunction && (
            <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle}>
              {showRowActions && (
                <button
                  className="flex w-full items-center justify-center"
                  onClick={() => addSubRow(rowId)}
                >
                  <Plus size={16} />
                </button>
              )}
            </TableCell>
          )}
          {removePos === "left" && handleRemoveRowFunction && (
            <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle}>
              {showRowActions && (
                <button
                  className="flex w-full items-center justify-center"
                  onClick={() => removeRow(rowId)}
                >
                  <Trash2 size={16} />
                </button>
              )}
            </TableCell>
          )}
          {/**
           * If the "Add" or "Remove" icons are on the left, we can render an extra <TableCell> for them,
           * or overlay them.
           * We'll do an approach that overlays them. For clarity, let's keep it simple:
           * we'll just overlay or absolutely position them, or place them in the first cell.
           */}
          {row.getVisibleCells().map((cell, cellIndex) => {
            const colDef = cell.column.columnDef as ExtendedColumnDef<T>;
            const colKey = getColumnKey(colDef);
            const isDisabled = disabled || disabledColumns.includes(colKey);
            const errorMsg = cellErrors[groupKey]?.[rowId]?.[colKey] || null;
            // Apply sizing logic & indentation
            const style: React.CSSProperties = {};
            if (enableColumnSizing) {
              const size = cell.column.getSize();
              if (size) style.width = `${size}px`;
              if (colDef.minSize) style.minWidth = `${colDef.minSize}px`;
              if (colDef.maxSize) style.maxWidth = `${colDef.maxSize}px`;
            }
            // if (cellIndex === 0) {
            //   style.paddingLeft = `${level * 20}px`;
            // }
            // Render cell content with customizations for the first cell
            const rawCellContent = flexRender(cell.column.columnDef.cell, cell.getContext());
            let cellContent: React.ReactNode = rawCellContent;
            // If first cell, show expand arrow if subRows exist
            if (cellIndex === 0) {
              cellContent = (
                <div
                  className="flex h-full w-full items-center gap-2"
                  style={{ outline: "none" }} // Hide the focus outline
                >
                  {hasSubRows && (
                    <button
                      type="button"
                      className={cn("flex-shrink-0", {
                        "cursor-not-allowed opacity-50": !hasSubRows,
                      })}
                      onClick={() => row.toggleExpanded()}
                      disabled={!hasSubRows}
                    >
                      {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                    </button>
                  )}
                  <div
                    className="flex-grow"
                    contentEditable={!isDisabled}
                    suppressContentEditableWarning
                    style={{ outline: "none" }} // Hide the outline for editing
                    onFocus={(e) => handleCellFocus(e, groupKey, rowData, colDef)}
                    onKeyDown={(e) => {
                      if (
                        (e.ctrlKey || e.metaKey) &&
                        ["a", "c", "x", "z", "v"].includes(e.key.toLowerCase())
                      ) {
                        return;
                      }
                      handleKeyDown(e, colDef);
                    }}
                    onPaste={(e) => handlePaste(e, colDef)}
                    onInput={(e) => handleCellInput(e, groupKey, rowData, colDef)}
                    onBlur={(e) => handleCellBlur(e, groupKey, rowData, colDef)}
                  >
                    {rawCellContent}
                  </div>
                </div>
              );
            }
            // if cell type is select, show a select element
            if (colDef.cellType === "select" && colDef.options) {
              const cellValue = cell.getValue() as string | number;
              const selectedOption = colDef.options.find((opt) => opt.value === cellValue);
              return (
                <TableCell
                  key={cell.id}
                  className={cn(
                    "relative border p-0",
                    {
                      "bg-muted": isDisabled,
                      "bg-destructive/25": errorMsg,
                    },
                    typeof colDef.className === "function"
                      ? colDef.className(rowData)
                      : colDef.className,
                  )}
                >
                  <Select
                    value={String(cellValue)}
                    onValueChange={(value) => {
                      if (onEdit) {
                        onEdit(rowId, colKey as keyof T, value as T[keyof T]);
                      }
                    }}
                  >
                    <SelectTrigger
                      defaultStyles={false}
                      className={cn(
                        "focus:ring-none blur:outline-none relative border-none ring-0 outline-0 focus:ring-offset-0 focus:outline-none",
                        {
                          "bg-muted": isDisabled,
                          "bg-destructive/25": errorMsg,
                        },
                        typeof colDef.className === "function"
                          ? colDef.className(rowData)
                          : colDef.className,
                      )}
                      hideIcon={true}
                    >
                      <SelectValue>{selectedOption?.label ?? cellValue}</SelectValue>
                    </SelectTrigger>
                    <SelectContent>
                      {colDef.options.map((option) => (
                        <SelectItem key={option.value} value={String(option.value)}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </TableCell>
              );
            }
            return (
              <TableCell
                key={cell.id}
                className={cn(
                  "relative border", // 'relative' for absolute icons if you prefer
                  {
                    "bg-muted": isDisabled,
                    "bg-destructive/25": errorMsg,
                  },
                  typeof colDef.className === "function"
                    ? colDef.className(rowData)
                    : colDef.className,
                )}
                style={style}
                contentEditable={cellIndex === 0 ? false : !isDisabled}
                suppressContentEditableWarning
                onFocus={(e) => {
                  if (cellIndex > 0 && !isDisabled) {
                    handleCellFocus(e, groupKey, rowData, colDef);
                  }
                }}
                onKeyDown={(e) => {
                  if (cellIndex > 0 && !isDisabled) {
                    if (
                      (e.ctrlKey || e.metaKey) &&
                      // Let user do Ctrl+A, C, X, Z, V, etc.
                      ["a", "c", "x", "z", "v"].includes(e.key.toLowerCase())
                    ) {
                      return; // do not block copy/paste
                    }
                    handleKeyDown(e, colDef);
                  }
                }}
                onPaste={(e) => {
                  if (cellIndex > 0 && !isDisabled) {
                    handlePaste(e, colDef);
                  }
                }}
                onInput={(e) => {
                  if (cellIndex > 0 && !isDisabled) {
                    handleCellInput(e, groupKey, rowData, colDef);
                  }
                }}
                onBlur={(e) => {
                  if (cellIndex > 0 && !isDisabled) {
                    handleCellBlur(e, groupKey, rowData, colDef);
                  }
                }}
              >
                {/** The actual content */}
                {cellContent}
              </TableCell>
            );
          })}
          {/* Right icon cells */}
          {addPos === "right" && handleAddRowFunction && (
            <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle}>
              {showRowActions && (
                <button
                  className="flex w-full items-center justify-center"
                  onClick={() => addSubRow(rowId)}
                >
                  <Plus size={16} />
                </button>
              )}
            </TableCell>
          )}
          {removePos === "right" && handleRemoveRowFunction && (
            <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle}>
              {showRowActions && (
                <button
                  className="flex w-full items-center justify-center"
                  onClick={() => removeRow(rowId)}
                >
                  <Trash2 size={16} />
                </button>
              )}
            </TableCell>
          )}
          {/* Selection checkbox */}
          {enableRowActions && (
            <div className="sticky end-0 z-2">
              <RowActions
                texts={texts}
                onEdit={props.canEditAction ? () => onActionClicked?.("edit", rowId) : undefined}
                onDuplicate={
                  props.canDuplicateAction ? () => onActionClicked?.("duplicate", rowId) : undefined
                }
                onView={props.canViewAction ? () => onActionClicked?.("view", rowId) : undefined}
                onArchive={
                  props.canArchiveAction ? () => onActionClicked?.("archive", rowId) : undefined
                }
                onDelete={
                  props.canDeleteAction ? () => onActionClicked?.("delete", rowId) : undefined
                }
              />
            </div>
          )}
        </TableRow>
        {/* If expanded, render each subRows recursively */}
        {isExpanded && row.subRows.map((subRow) => renderRow(subRow, groupKey, level + 1))}
      </React.Fragment>
    );
  };
  /**
   * Renders optional footer (totals row + optional custom element) inside a <TableFooter>.
   */
  function renderFooter() {
    if (!totalRowValues && !footerElement) return null;
    return (
      <TableFooter className="border-none">
        {/* If there's a totalRowTitle, show it in a single row */}
        {totalRowTitle && (
          <TableRow className="border-none">
            {/* If there's a totalRowTitle, show it in a single row */}
            {enableRowSelection && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {removePos === "left" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            <TableCell colSpan={columns.length} className="border text-center font-semibold">
              {totalRowTitle}
            </TableCell>
            {/* Left icon - empty cells  */}
            {addPos === "right" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {removePos === "right" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
          </TableRow>
        )}
        {/* The totals row */}
        {totalRowValues && (
          <TableRow className="border-none">
            {/*  Right icon - empty cells  */}
            {addPos === "left" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {removePos === "left" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {columns.map((colDef, index) => {
              const colKey = getColumnKey(colDef);
              const cellValue = totalRowValues[colKey];
              // Provide a default string if totalRowLabel is not passed and this is the first cell
              const displayValue =
                cellValue !== undefined ? cellValue : index === 0 ? totalRowLabel || "" : "";
              // Always apply the border to the first cell or any cell that has a displayValue
              const applyBorder = index === 0 || displayValue !== "";
              return (
                <TableCell
                  key={`total-${colKey}`}
                  className={`font-bold ${applyBorder ? "border" : ""}`}
                >
                  {displayValue}
                </TableCell>
              );
            })}
          </TableRow>
        )}
        {/* If a footerElement is provided, render it after the totals row */}
        {footerElement}
      </TableFooter>
    );
  }
  return (
    <div className="overflow-x-auto p-0 pb-2">
      <Table id={id}>
        {/* <TableCaption>Dynamic, editable data table with grouping & nested sub-rows.</TableCaption> */}
        {/* Primary header */}
        {showHeader && (
          <TableHeader className="relative">
            <TableRow className="border-none">
              {/* Selection checkbox header */}
              {enableRowSelection && (
                <TableHead className="bg-muted sticky start-0 z-2 w-[30px] border-y p-0">
                  <div className="flex h-full items-center justify-center">
                    <input
                      type="checkbox"
                      checked={table.getIsAllPageRowsSelected()}
                      onChange={table.getToggleAllPageRowsSelectedHandler()}
                      className="h-4 w-4 rounded border-gray-300"
                      title={t("General.select_all")}
                    />
                  </div>
                  <div className="bg-border absolute end-0 top-0 h-full w-[0.5px]" />
                </TableHead>
              )}
              {/* Right icon cells empty headers */}
              {addPos === "left" && (
                <TableHead className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
              )}
              {removePos === "left" && (
                <TableHead className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
              )}
              {table.getHeaderGroups().map((headerGroup) =>
                headerGroup.headers.map((header) => {
                  const style: React.CSSProperties = {};
                  if (enableColumnSizing) {
                    const col = header.column.columnDef;
                    const size = header.getSize();
                    if (size) style.width = `${size}px`;
                    if (col.minSize) style.minWidth = `${col.minSize}px`;
                    if (col.maxSize) style.maxWidth = `${col.maxSize}px`;
                  }
                  return (
                    <TableHead key={header.id} className="border text-start" style={style}>
                      {flexRender(header.column.columnDef.header, header.getContext()) as string}
                    </TableHead>
                  );
                }),
              )}
              {/* Left icon cells empty headers */}
              {addPos === "right" && (
                <TableHead className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
              )}
              {removePos === "right" && (
                <TableHead className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
              )}
              {enableRowActions && (
                <TableHead className="border">{props.texts?.actions || "Actions"}</TableHead>
              )}
            </TableRow>
          </TableHeader>
        )}
        {/* Optional second header */}
        {showSecondHeader && secondHeaderTitle && (
          <TableRow>
            {/* Right icon cells empty headers */}
            {addPos === "left" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {removePos === "left" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            <TableHead colSpan={columns.length} className="border text-center">
              {secondHeaderTitle}
            </TableHead>
            {/* Left icon cells empty headers */}
            {addPos === "right" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
            {removePos === "right" && (
              <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
            )}
          </TableRow>
        )}
        <TableBody>
          {Object.entries(groupedData).map(([groupKey, topRows]) => (
            <React.Fragment key={groupKey}>
              {/* Group label row (if not ungrouped) */}
              {groupKey !== "ungrouped" && (
                <TableRow className="border-none">
                  {/* Right icon cells empty headers */}
                  {addPos === "left" && (
                    <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
                  )}
                  {removePos === "left" && (
                    <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
                  )}
                  <TableCell
                    colSpan={columns.length}
                    className="bg-muted-foreground/10 border font-bold"
                  >
                    {groupKey}
                  </TableCell>
                  {/* Left icon cells empty headers */}
                  {addPos === "right" && (
                    <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
                  )}
                  {removePos === "right" && (
                    <TableCell className={cn(rowActionCellClassName)} style={rowActionCellStyle} />
                  )}
                </TableRow>
              )}
              {/* For each top-level row in this group, find the actual row in table.
                  Then recursively render it with renderRow() */}
              {topRows.map((rowData) => {
                const row = table.getRowModel().flatRows.find((r) => r.original === rowData);
                if (!row) return null;
                return renderRow(row, groupKey, 0);
              })}
            </React.Fragment>
          ))}
        </TableBody>
        {/* Render footer (totals row + custom footer) */}
        {renderFooter()}
      </Table>
    </div>
  );
}
export default SheetTable;
</file>

<file path="src/components/ui/sheet.tsx">
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal
const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)
interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}
const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName
const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-start",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"
const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"
const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName
const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName
export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="src/components/ui/sidebar-menu.tsx">
"use client";
import { ChevronRight, Plus } from "lucide-react";
import { AnimatePresence, motion } from "motion/react";
import { useLocale, useTranslations } from "next-intl";
import Link from "next/link";
import { useRouter } from "next/router";
import React from "react";
import { Button } from "@/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/ui/radix-collapsible";
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarMenuAction,
  SidebarSeparator,
  useSidebar,
} from "@/ui/sidebar";
import { SidebarMenuGroupProps } from "@/lib/sidebar-list";
import { cn } from "@/lib/utils";
export function NavMain({ title, items }: SidebarMenuGroupProps) {
  const { state, isMobile } = useSidebar();
  const isCollapsed = state === "collapsed" && !isMobile;
  return (
    <SidebarGroup>
      <AnimatePresence>
        {!isCollapsed && (
          <motion.div
            key={title}
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2 }}
          >
            <SidebarGroupLabel>{title}</SidebarGroupLabel>
          </motion.div>
        )}
      </AnimatePresence>
      <SidebarSeparator className="mb-2" />
      <SidebarMenu>
        {items.map((item, i) =>
          item.items ? (
            <CollapsibleSidebarMenuItem key={i} {...item} />
          ) : (
            <NonCollapsibleSidebarMenuItem key={i} {...item} />
          ),
        )}
      </SidebarMenu>
    </SidebarGroup>
  );
}
const CollapsibleSidebarMenuItem = (item: SidebarMenuGroupProps["items"][number]) => {
  const t = useTranslations();
  const locale = useLocale();
  const router = useRouter();
  const [isOpen, setIsOpen] = React.useState(item.is_active);
  const { state, isMobile } = useSidebar();
  const isCollapsed = state === "collapsed" && !isMobile;
  if (isCollapsed) {
    return (
      <SidebarMenuItem>
        <Popover>
          <PopoverTrigger asChild>
            <SidebarMenuButton tooltip={t(item.translationKey)}>
              {item.icon && <item.icon />}
              <span>{t(item.translationKey)}</span>
            </SidebarMenuButton>
          </PopoverTrigger>
          <PopoverContent
            dir={locale === "ar" ? "rtl" : "ltr"}
            side="right"
            align="start"
            className="min-w-32 p-0"
          >
            <div className="p-2">
              <div className={cn("px-2 py-1.5 text-sm font-semibold")}>
                {t(item.translationKey)}
              </div>
              <DropdownMenuSeparator className="mx-1" />
              {item.items?.map((subItem) => (
                <Link
                  href={subItem.url}
                  key={subItem.title}
                  className="focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground relative flex cursor-pointer items-center justify-between gap-2 rounded-sm px-2 py-1.5 text-sm transition-colors outline-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
                >
                  <span>{t(subItem.translationKey)}</span>
                  {subItem.action && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="hover:bg-primary hover:text-primary-foreground !size-5 flex-shrink-0 cursor-pointer !p-0"
                      onClick={(e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        router.push(subItem.action!);
                      }}
                      aria-label={`Add new ${t(subItem.translationKey)}`}
                    >
                      <Plus className="!size-3" />
                    </Button>
                  )}
                </Link>
              ))}
            </div>
          </PopoverContent>
        </Popover>
      </SidebarMenuItem>
    );
  }
  return (
    <Collapsible
      key={item.title}
      asChild
      defaultOpen={item.is_active}
      open={isOpen}
      onOpenChange={setIsOpen}
    >
      <SidebarMenuItem>
        <CollapsibleTrigger asChild>
          <SidebarMenuButton tooltip={t(item.translationKey)}>
            {item.icon && <item.icon />}
            <span>{t(item.translationKey)}</span>
            {item.items && (
              <motion.div
                initial={{ rotate: 0 }}
                animate={{ rotate: isOpen ? (locale === "ar" ? -90 : 90) : 0 }}
                transition={{ duration: 0.2 }}
                className="ms-auto"
              >
                <ChevronRight className="size-4 rtl:-rotate-180" />
              </motion.div>
            )}
          </SidebarMenuButton>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <SidebarMenuSub className="me-0 pe-0" dir={locale === "ar" ? "rtl" : "ltr"}>
            {item.items?.map((subItem) => (
              <SidebarMenuSubItem key={subItem.title} className="relative">
                <SidebarMenuSubButton
                  asChild
                  className={cn(
                    subItem.is_active &&
                      "bg-primary text-primary-foreground hover:bg-primary/90 hover:text-primary-foreground",
                  )}
                >
                  <Link href={subItem.url}>
                    <span>{t(subItem.translationKey)}</span>
                  </Link>
                </SidebarMenuSubButton>
                {subItem.action && (
                  <SidebarMenuAction
                    className="absolute !end-1 top-1/2 -translate-y-1/2 cursor-pointer"
                    onClick={(e) => {
                      e.stopPropagation();
                      e.preventDefault();
                      if (subItem.action) {
                        router.push(subItem.action);
                      }
                    }}
                  >
                    <Plus className="!size-3" />
                    <span className="sr-only">More</span>
                  </SidebarMenuAction>
                )}
              </SidebarMenuSubItem>
            ))}
          </SidebarMenuSub>
        </CollapsibleContent>
      </SidebarMenuItem>
    </Collapsible>
  );
};
const NonCollapsibleSidebarMenuItem = (item: SidebarMenuGroupProps["items"][number]) => {
  const t = useTranslations();
  return (
    <SidebarMenuItem>
      <Link href={item.url}>
        <SidebarMenuButton tooltip={t(item.translationKey)}>
          {item.icon && <item.icon />}
          <span>{t(item.translationKey)}</span>
        </SidebarMenuButton>
      </Link>
      {item.action && (
        <SidebarMenuAction className="absolute !end-1 top-1/2 -translate-y-1/2">
          <Plus className="!size-3" />
          <span className="sr-only">More</span>
        </SidebarMenuAction>
      )}
    </SidebarMenuItem>
  );
};
</file>

<file path="src/components/ui/sidebar-user-footer.tsx">
"use client";
import { Dialog } from "@radix-ui/react-dialog";
import {
  MessageSquareWarning,
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
  User2,
  HelpCircle,
} from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import Link from "next/link";
import { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from "@/ui/sidebar";
import { ProfileType } from "@/stores/use-user-store";
import { FeedbackDialog } from "../app/FeedbackDialog";
export function SidebarUserFooter({ user }: { user: ProfileType }) {
  const { isMobile } = useSidebar();
  const t = useTranslations();
  const lang = useLocale();
  const [open, setOpen] = useState(false);
  return (
    <>
      <SidebarMenu>
        <SidebarMenuItem>
          <DropdownMenu dir={lang === "ar" ? "rtl" : "ltr"}>
            <DropdownMenuTrigger asChild>
              <SidebarMenuButton
                size="lg"
                className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
              >
                <Avatar className="h-8 w-8 rounded-md">
                  <AvatarImage src={user?.avatar_url ?? ""} alt={user?.full_name ?? ""} />
                  <AvatarFallback className="rounded-md">
                    {user?.full_name?.charAt(0)}
                  </AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-start text-sm leading-tight">
                  <span className="truncate font-semibold">{user?.full_name}</span>
                  <span className="truncate text-xs">{user?.email}</span>
                </div>
                <ChevronsUpDown className="ms-auto size-4" />
              </SidebarMenuButton>
            </DropdownMenuTrigger>
            <DropdownMenuContent
              className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
              side={isMobile ? "bottom" : "right"}
              align="end"
              sideOffset={4}
            >
              <DropdownMenuLabel className="p-0 font-normal">
                <div className="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                  <Avatar className="h-8 w-8 rounded-lg">
                    <AvatarImage src={user?.avatar_url ?? ""} alt={user?.full_name ?? ""} />
                    <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                  </Avatar>
                  <div className="grid flex-1 text-start text-sm leading-tight">
                    <span className="truncate font-semibold">{user?.full_name}</span>
                    <span className="truncate text-xs">{user?.email}</span>
                  </div>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                <Link href="/account">
                  <DropdownMenuItem className="cursor-pointer">
                    <User2 className="me-2 h-4 w-4" />
                    {t("Account.title")}
                  </DropdownMenuItem>
                </Link>
                <Link href="/billing">
                  <DropdownMenuItem className="cursor-pointer">
                    <CreditCard className="me-2 h-4 w-4" />
                    {t("Billing.title")}
                  </DropdownMenuItem>
                </Link>
              </DropdownMenuGroup>
              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                <Link href="/help">
                  <DropdownMenuItem className="cursor-pointer">
                    <HelpCircle className="me-2 h-4 w-4" />
                    {t("Help.title")}
                  </DropdownMenuItem>
                </Link>
                <DropdownMenuItem className="cursor-pointer" onClick={() => setOpen(true)}>
                  <MessageSquareWarning className="me-2 h-4 w-4" />
                  {t("Feedback.give_feedback")}
                </DropdownMenuItem>
              </DropdownMenuGroup>
              <DropdownMenuSeparator />
              <DropdownMenuItem className="cursor-pointer">
                <LogOut className="me-2 h-4 w-4" />
                {t("Auth.sign_out")}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </SidebarMenuItem>
      </SidebarMenu>
      <Dialog open={open} onOpenChange={setOpen}>
        <FeedbackDialog onOpenChange={setOpen} />
      </Dialog>
    </>
  );
}
</file>

<file path="src/components/ui/sidebar.tsx">
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeftIcon } from "lucide-react";
import * as React from "react";
import { Button } from "@/ui/button";
import { Input } from "@/ui/input";
import { Separator } from "@/ui/separator";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "@/ui/sheet";
import { Skeleton } from "@/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/ui/tooltip";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";
type SidebarContextProps = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};
const SidebarContext = React.createContext<SidebarContextProps | null>(null);
function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }
  return context;
}
function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  defaultOpen?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}) {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);
  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }
      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );
  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);
  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);
  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";
  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );
  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className,
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}
function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  side?: "left" | "right";
  variant?: "sidebar" | "floating" | "inset";
  collapsible?: "offcanvas" | "icon" | "none";
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();
  if (collapsible === "none") {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className,
        )}
        {...props}
      >
        {children}
      </div>
    );
  }
  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }
  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)",
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
}
function SidebarTrigger({ className, onClick, ...props }: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();
  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}
function SidebarRail({ className, ...props }: React.ComponentProps<"button">) {
  const { toggleSidebar } = useSidebar();
  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className,
      )}
      {...props}
    />
  );
}
function SidebarInset({ className, ...props }: React.ComponentProps<"main">) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ms-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ms-2",
        className,
      )}
      {...props}
    />
  );
}
function SidebarInput({ className, ...props }: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props}
    />
  );
}
function SidebarHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
}
function SidebarFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
}
function SidebarSeparator({ className, ...props }: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  );
}
function SidebarContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-0 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
}
function SidebarGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
}
function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"div"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "div";
  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className,
      )}
      {...props}
    />
  );
}
function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}
function SidebarGroupContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props}
    />
  );
}
function SidebarMenu({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props}
    />
  );
}
function SidebarMenuItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props}
    />
  );
}
const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);
function SidebarMenuButton({
  asChild = false,
  is_active = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean;
  is_active?: boolean;
  tooltip?: string | React.ComponentProps<typeof TooltipContent>;
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();
  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={is_active}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );
  if (!tooltip) {
    return button;
  }
  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }
  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip}
      />
    </Tooltip>
  );
}
function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean;
  showOnHover?: boolean;
}) {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className,
      )}
      {...props}
    />
  );
}
function SidebarMenuBadge({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}
function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<"div"> & {
  showIcon?: boolean;
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);
  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
}
function SidebarMenuSub({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-s px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}
function SidebarMenuSubItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props}
    />
  );
}
function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  is_active = false,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean;
  size?: "sm" | "md";
  is_active?: boolean;
}) {
  const Comp = asChild ? Slot : "a";
  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={is_active}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}
export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};
</file>

<file path="src/components/ui/signature.tsx">
import { LabelProps } from "@radix-ui/react-label";
import React, { useRef, useEffect, FC } from "react";
import SignaturePad, { Options as SignaturePadOptions } from "signature_pad";
// @ts-ignore
import trimCanvas from "trim-canvas";
import { Label } from "@/ui/label";
import { cn } from "@/lib/utils";
export interface SignatureCanvasProps extends SignaturePadOptions {
  canvasProps?: React.CanvasHTMLAttributes<HTMLCanvasElement>;
  clearOnResize?: boolean;
  onGetImage?: any;
  helperText?: any;
  texts?: { clear?: string };
  labelProps?: LabelProps;
  label?: any;
}
export const Signature: FC<SignatureCanvasProps> = ({
  canvasProps,
  clearOnResize = false,
  onGetImage,
  texts,
  label,
  labelProps,
  helperText,
  ...sigPadProps
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const sigPadRef = useRef<SignaturePad | null>(null);
  const checkClearOnResize = () => {
    if (!clearOnResize) {
      return;
    }
    resizeCanvas();
  };
  const resizeCanvas = () => {
    const canvas = canvasRef.current;
    if (canvas && canvas.parentElement) {
      const ratio = Math.max(window.devicePixelRatio || 1, 1);
      if (typeof canvasProps?.width === "undefined") {
        // Full width of the parent element
        canvas.width = canvas.parentElement.offsetWidth * ratio;
      } else {
        // Use specified width
        canvas.width = Number(canvasProps.width) * ratio;
      }
      canvas.height = 150 * ratio;
      // if (typeof canvasProps?.height === "undefined") {
      //   canvas.height = canvas.parentElement.offsetHeight * ratio;
      // } else {
      //   canvas.height = Number(canvasProps.height) * ratio; // Ensure it's treated as a number
      // }
      canvas.getContext("2d")?.scale(ratio, ratio);
      clear();
    }
  };
  const getTrimmedCanvas = (): HTMLCanvasElement => {
    const canvas = canvasRef.current;
    if (!canvas) {
      throw new Error("Canvas reference is null");
    }
    const copy = document.createElement("canvas");
    copy.width = canvas.width;
    copy.height = canvas.height;
    copy.getContext("2d")?.drawImage(canvas, 0, 0);
    return trimCanvas(copy);
  };
  const getSignatureImage = () => {
    const trimmedCanvas = getTrimmedCanvas();
    return trimmedCanvas.toDataURL();
  };
  useEffect(() => {
    if (onGetImage) {
      onGetImage(getSignatureImage);
    }
  }, [onGetImage]);
  useEffect(() => {
    const canvas = canvasRef.current;
    if (canvas) {
      sigPadRef.current = new SignaturePad(canvas, sigPadProps);
      resizeCanvas();
      window.addEventListener("resize", checkClearOnResize);
    }
    return () => {
      window.removeEventListener("resize", checkClearOnResize);
    };
  }, [sigPadProps]);
  const clear = () => sigPadRef.current?.clear();
  const isEmpty = () => !!sigPadRef.current?.isEmpty();
  const fromDataURL = (dataURL: string, options?: any) =>
    sigPadRef.current?.fromDataURL(dataURL, options);
  const toDataURL = (type?: string, encoderOptions?: any) =>
    sigPadRef.current?.toDataURL(type, encoderOptions);
  const fromData = (pointGroups: any[]) => sigPadRef.current?.fromData(pointGroups);
  const toData = () => sigPadRef.current?.toData();
  return (
    <div className="w-full">
      {label && (
        <Label {...labelProps} className="mb-2">
          {label || "Signature"}
        </Label>
      )}
      <canvas
        ref={canvasRef}
        {...canvasProps}
        className={cn("rounded border bg-[var(--constant-background)]", canvasProps?.className)}
      />
      <div className="flex flex-row justify-between">
        {/* Regular helper text */}
        {/* {helperText && ( */}
        <p
          className={cn(
            "text-helper-color my-0 text-start text-xs transition-all",
            helperText ? "h-4 opacity-100" : "h-0 opacity-0",
          )}
        >
          {helperText}
        </p>
        {/* )} */}
        <div className="clickable-link w-fit" onClick={() => clear()}>
          {texts?.clear || "Clear"}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="src/components/ui/slider-with-input.tsx">
"use client";
import { RotateCcw } from "lucide-react";
import * as React from "react";
import { Button } from "@/ui/button";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { Slider } from "@/ui/slider";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/ui/tooltip";
import { useSliderWithInput } from "@/hooks/use-slider-with-input";
interface SliderWithInputProps {
  value: number[];
  onValueChange: (value: number[]) => void;
  minValue?: number;
  maxValue?: number;
  step?: number;
  label?: string;
  initialValue?: number[];
  defaultValue?: number[];
}
export default function SliderWithInput({
  value,
  onValueChange,
  minValue = 0,
  maxValue = 100,
  step = 1,
  label = "Value",
  defaultValue,
}: SliderWithInputProps) {
  const handleSliderChange = (value: number[]) => {
    onValueChange(value);
  };
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = parseInt(e.target.value);
    if (isNaN(newValue)) return;
    const clampedValue = Math.min(Math.max(newValue, minValue), maxValue);
    onValueChange([clampedValue]);
  };
  const handleReset = () => {
    onValueChange([minValue]);
  };
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between gap-2">
        <label className="text-sm font-medium">{label}</label>
        <div className="mb-1 flex items-center gap-2">
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="icon"
                  variant="ghost"
                  className="size-7"
                  aria-label="Reset to default"
                  onClick={handleReset}
                >
                  <RotateCcw className="size-4" aria-hidden="true" />
                </Button>
              </TooltipTrigger>
              <TooltipContent className="px-2 py-1 text-xs">Reset to default</TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <Input
            value={value[0]}
            className="h-7 w-12 px-2 py-0"
            type="number"
            inputMode="decimal"
            onChange={handleInputChange}
            min={minValue}
            max={maxValue}
            step={step}
          />
        </div>
      </div>
      <Slider
        value={value}
        onValueChange={handleSliderChange}
        min={minValue}
        max={maxValue}
        step={step}
        className="w-full"
      />
    </div>
  );
}
</file>

<file path="src/components/ui/slider.tsx">
"use client";
import * as SliderPrimitive from "@radix-ui/react-slider";
import * as React from "react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/ui/tooltip";
import { cn } from "@/lib/utils";
const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> & {
    showTooltip?: boolean;
    tooltipContent?: (value: number) => React.ReactNode;
  }
>(({ className, showTooltip = false, tooltipContent, ...props }, ref) => {
  const [showTooltipState, setShowTooltipState] = React.useState(false);
  const [internalValue, setInternalValue] = React.useState<number[]>(
    (props.defaultValue as number[]) ?? (props.value as number[]) ?? [0],
  );
  React.useEffect(() => {
    if (props.value !== undefined) {
      setInternalValue(props.value as number[]);
    }
  }, [props.value]);
  const handleValueChange = (newValue: number[]) => {
    setInternalValue(newValue);
    props.onValueChange?.(newValue);
  };
  const handlePointerDown = () => {
    if (showTooltip) {
      setShowTooltipState(true);
    }
  };
  const handlePointerUp = React.useCallback(() => {
    if (showTooltip) {
      setShowTooltipState(false);
    }
  }, [showTooltip]);
  React.useEffect(() => {
    if (showTooltip) {
      document.addEventListener("pointerup", handlePointerUp);
      return () => {
        document.removeEventListener("pointerup", handlePointerUp);
      };
    }
  }, [showTooltip, handlePointerUp]);
  const renderThumb = (value: number) => {
    const thumb = (
      <SliderPrimitive.Thumb
        className="border-primary bg-background focus-visible:outline-ring/40 block h-5 w-5 rounded-full border-2 transition-colors focus-visible:outline focus-visible:outline-[3px] data-[disabled]:cursor-not-allowed"
        onPointerDown={handlePointerDown}
      />
    );
    if (!showTooltip) return thumb;
    return (
      <TooltipProvider>
        <Tooltip open={showTooltipState}>
          <TooltipTrigger asChild>{thumb}</TooltipTrigger>
          <TooltipContent
            className="px-2 py-1 text-xs"
            sideOffset={8}
            side={props.orientation === "vertical" ? "right" : "top"}
          >
            <p>{tooltipContent ? tooltipContent(value) : value}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };
  return (
    <SliderPrimitive.Root
      ref={ref}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className,
      )}
      onValueChange={handleValueChange}
      {...props}
    >
      <SliderPrimitive.Track className="bg-secondary relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-2 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-2">
        <SliderPrimitive.Range className="bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full" />
      </SliderPrimitive.Track>
      {internalValue?.map((value, index) => (
        <React.Fragment key={index}>{renderThumb(value)}</React.Fragment>
      ))}
    </SliderPrimitive.Root>
  );
});
Slider.displayName = SliderPrimitive.Root.displayName;
export { Slider };
</file>

<file path="src/components/ui/social-platforms.tsx">
import {
  SiFacebook,
  SiSnapchat,
  SiTelegram,
  SiSpotify,
  SiGithub,
  SiBehance,
  SiDribbble,
  SiWhatsapp,
  SiTiktok,
  SiLinkedin,
  SiX,
  SiInstagram,
  SiYoutube,
  SiTwitch,
  SiPinterest,
  SiTumblr,
  SiVimeo,
  SiSoundcloud,
  SiVsco,
  SiMedium,
} from "@icons-pack/react-simple-icons";
// import { Globe } from "lucide-react";
export type socialLinkOptionsType = {
  platform: string;
  icon: any;
  label: string;
  placeholder: string;
};
export const socialLinkOptions: socialLinkOptionsType[] = [
  // {
  //   platform: "website",
  //   icon: <Globe />,
  //   label: "Website",
  //   placeholder: "https://example.com",
  // },
  {
    platform: "instagram",
    icon: <SiInstagram size={20} />,
    label: "Instagram",
    placeholder: "https://instagram.com/username",
  },
  {
    platform: "twitter",
    icon: <SiX size={20} />,
    label: "Twitter",
    placeholder: "https://twitter.com/username",
  },
  {
    platform: "snapchat",
    icon: <SiSnapchat size={20} />,
    label: "Snapchat",
    placeholder: "https://snapchat.com/username",
  },
  {
    platform: "linkedin",
    icon: <SiLinkedin size={20} />,
    label: "Linkedin",
    placeholder: "https://linkedin.com/username",
  },
  {
    platform: "tiktok",
    icon: <SiTiktok size={20} />,
    label: "Tiktok",
    placeholder: "https://tiktok.com/username",
  },
  {
    platform: "whatsapp",
    icon: <SiWhatsapp size={20} />,
    label: "Whatsapp",
    placeholder: "https://wa.me/+1234567890",
  },
  {
    platform: "telegram",
    icon: <SiTelegram size={20} />,
    label: "Telegram",
    placeholder: "https://t.me/username",
  },
  {
    platform: "youtube",
    icon: <SiYoutube size={20} />,
    label: "Youtube",
    placeholder: "https://youtube.com/username",
  },
  {
    platform: "github",
    icon: <SiGithub size={20} />,
    label: "Github",
    placeholder: "https://github.com/username",
  },
  {
    platform: "behance",
    icon: <SiBehance size={20} />,
    label: "Behance",
    placeholder: "https://behance.net/username",
  },
  {
    platform: "dribbble",
    icon: <SiDribbble size={20} />,
    label: "Dribbble",
    placeholder: "https://dribbble.com/username",
  },
  {
    platform: "facebook",
    icon: <SiFacebook size={20} />,
    label: "Facebook",
    placeholder: "https://facebook.com/username",
  },
  {
    platform: "spotify",
    icon: <SiSpotify size={20} />,
    label: "Spotify",
    placeholder: "https://open.spotify.com/username",
  },
  {
    platform: "twitch",
    icon: <SiTwitch size={20} />,
    label: "Twitch",
    placeholder: "https://twitch.tv/username",
  },
  {
    platform: "medium",
    icon: <SiMedium size={20} />,
    label: "Medium",
    placeholder: "https://medium.com/username",
  },
  {
    platform: "pinterest",
    icon: <SiPinterest size={20} />,
    label: "Pinterest",
    placeholder: "https://pinterest.com/username",
  },
  {
    platform: "soundcloud",
    icon: <SiSoundcloud size={20} />,
    label: "Soundcloud",
    placeholder: "https://soundcloud.com/username",
  },
  {
    platform: "tumblr",
    icon: <SiTumblr size={20} />,
    label: "Tumblr",
    placeholder: "https://tumblr.com/username",
  },
  {
    platform: "vimeo",
    icon: <SiVimeo size={20} />,
    label: "Vimeo",
    placeholder: "https://vimeo.com/username",
  },
  {
    platform: "vsco",
    icon: <SiVsco size={20} />,
    label: "Vsco",
    placeholder: "https://vsco.co/username",
  },
];
export const getIcon = (platform: string) => {
  const socialLink = socialLinkOptions.find((link) => link.platform === platform);
  return socialLink ? socialLink.icon : null;
};
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes";
import { Toaster as Sonner } from "sonner";
type ToasterProps = React.ComponentProps<typeof Sonner>;
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};
export { Toaster };
</file>

<file path="src/components/ui/sort-popover.tsx">
"use client";
import { ArrowDownAZ, ArrowUpAZ, ArrowUpDown, Plus, Trash2 } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { Button } from "@/ui/button";
import { Label } from "@/ui/label";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { RadioGroup, RadioGroupItem } from "@/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Separator } from "@/ui/separator";
import { Switch } from "@/ui/switch";
import { SortableColumn } from "@/types/common.type";
import IconButton from "./icon-button";
import { Tooltip, TooltipContent, TooltipTrigger } from "./tooltip";
interface SortPopoverProps {
  sortRules: { field: string; direction: string }[];
  onSortRulesChange: (sortRules: { field: string; direction: string }[]) => void;
  columns: SortableColumn[];
  caseSensitive?: boolean;
  onCaseSensitiveChange?: (value: boolean) => void;
  nullsFirst?: boolean;
  onNullsFirstChange?: (value: boolean) => void;
}
function SortPopover({
  sortRules,
  onSortRulesChange,
  columns,
  caseSensitive = false,
  onCaseSensitiveChange,
  nullsFirst = false,
  onNullsFirstChange,
}: SortPopoverProps) {
  const t = useTranslations();
  const locale = useLocale();
  const [open, setOpen] = useState(false);
  const addSortRule = () => {
    if (sortRules.length < 3) {
      onSortRulesChange([...sortRules, { field: columns[0].value, direction: "asc" }]);
    }
  };
  const removeSortRule = (index: number) => {
    onSortRulesChange(sortRules.filter((_, i) => i !== index));
  };
  const updateSortRule = (index: number, field: string, value: string) => {
    const newRules = [...sortRules];
    newRules[index] = { ...newRules[index], [field]: value };
    onSortRulesChange(newRules);
  };
  const applySort = () => {
    setOpen(false);
  };
  const resetSort = () => {
    onSortRulesChange([{ field: columns[0].value, direction: "asc" }]);
  };
  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <IconButton icon={<ArrowUpDown className="h-4 w-4" />} label={t("General.sort")} />
      </PopoverTrigger>
      <PopoverContent className="w-80" align="end" dir={locale === "ar" ? "rtl" : "ltr"}>
        <div className="grid gap-4">
          <div className="flex items-center justify-between">
            <h4 className="leading-none font-medium">{t("General.sort_options")}</h4>
            {sortRules.length > 1 && (
              <span className="text-muted-foreground text-xs">
                {t("General.sort_priority_hint")}
              </span>
            )}
          </div>
          <div className="grid gap-3">
            {sortRules.map((rule, index) => (
              <div key={index} className="grid gap-2">
                {index > 0 && <Separator className="my-1" />}
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground text-sm">
                    {index === 0
                      ? t("General.primary_sort")
                      : index === 1
                        ? t("General.secondary_sort")
                        : t("General.tertiary_sort")}
                  </span>
                  {index > 0 && (
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-7 w-7 p-0"
                          onClick={() => removeSortRule(index)}
                        >
                          <Trash2 className="h-3.5 w-3.5" />
                          <span className="sr-only">{t("General.remove")}</span>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>{t("General.remove_sort_rule")}</TooltipContent>
                    </Tooltip>
                  )}
                </div>
                <div className="grid grid-cols-[1fr_auto] gap-2">
                  <Select
                    dir={locale === "ar" ? "rtl" : "ltr"}
                    value={rule.field}
                    onValueChange={(value) => updateSortRule(index, "field", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder={t("General.select_field")} />
                    </SelectTrigger>
                    <SelectContent>
                      {columns.map((column) => (
                        <SelectItem key={column.value} value={column.value}>
                          {t(column.translationKey)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <RadioGroup
                    className="flex items-center gap-2"
                    value={rule.direction}
                    onValueChange={(value) => updateSortRule(index, "direction", value)}
                  >
                    <div
                      className={`rounded-md border p-1 ${
                        rule.direction === "asc" ? "bg-muted" : ""
                      }`}
                    >
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div>
                            <RadioGroupItem value="asc" id={`asc-${index}`} className="sr-only" />
                            <Label htmlFor={`asc-${index}`} className="cursor-pointer">
                              <ArrowUpAZ className="h-4 w-4" />
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>{t("General.ascending")}</TooltipContent>
                      </Tooltip>
                    </div>
                    <div
                      className={`rounded-md border p-1 ${
                        rule.direction === "desc" ? "bg-muted" : ""
                      }`}
                    >
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div>
                            <RadioGroupItem value="desc" id={`desc-${index}`} className="sr-only" />
                            <Label htmlFor={`desc-${index}`} className="cursor-pointer">
                              <ArrowDownAZ className="h-4 w-4" />
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>{t("General.descending")}</TooltipContent>
                      </Tooltip>
                    </div>
                  </RadioGroup>
                </div>
              </div>
            ))}
          </div>
          {sortRules.length < 3 && (
            <Button
              variant="outline"
              size="sm"
              className="text-muted-foreground mt-1 justify-start text-sm"
              onClick={addSortRule}
            >
              <Plus className="me-1 h-3.5 w-3.5" />
              {t("General.add_another_rule")}
            </Button>
          )}
          <div className="flex items-center space-x-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="case-sensitive"
                    checked={caseSensitive}
                    onCheckedChange={onCaseSensitiveChange}
                  />
                  <Label htmlFor="case-sensitive">{t("General.case_sensitive")}</Label>
                </div>
              </TooltipTrigger>
              <TooltipContent>{t("General.case_sensitive_hint")}</TooltipContent>
            </Tooltip>
          </div>
          <div className="flex items-center space-x-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="null-first"
                    checked={nullsFirst}
                    onCheckedChange={onNullsFirstChange}
                  />
                  <Label htmlFor="null-first">{t("General.show_empty_values_first")}</Label>
                </div>
              </TooltipTrigger>
              <TooltipContent>{t("General.empty_values_hint")}</TooltipContent>
            </Tooltip>
          </div>
          <Separator />
          <div className="flex gap-2">
            <Button variant="outline" onClick={resetSort} className="flex-1">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="15"
                height="15"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="me-2 h-4 w-4"
              >
                <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                <path d="M3 3v5h5" />
              </svg>
              {t("General.reset_all")}
            </Button>
            <Button onClick={applySort} className="flex-1">
              {t("General.done")}
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}
export default SortPopover;
</file>

<file path="src/components/ui/stat-card.tsx">
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import { Skeleton } from "@/ui/skeleton";
interface StatCardProps {
  title: string;
  value: number | string;
  loading: boolean;
  link?: string;
  additionalText?: string;
}
export function StatCard({ title, value, loading, link, additionalText }: StatCardProps) {
  const cardContent = (
    <>
      <CardHeader>
        <CardTitle className="text-sm font-medium text-gray-500">{title}</CardTitle>
      </CardHeader>
      <CardContent>
        {loading ? (
          <Skeleton className="h-8 w-1/2" />
        ) : (
          <div className="text-2xl font-bold">{value}</div>
        )}
        {additionalText && <p className="mt-1 text-xs text-gray-500">{additionalText}</p>}
      </CardContent>
    </>
  );
  return link ? (
    <Link href={link}>
      <Card className="h-full cursor-pointer transition-shadow hover:shadow-lg">{cardContent}</Card>
    </Link>
  ) : (
    <Card className="h-full">{cardContent}</Card>
  );
}
</file>

<file path="src/components/ui/switch.tsx">
"use client";
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { motion } from "motion/react";
import { cn } from "@/lib/utils";
type SwitchProps = React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> & {
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  thumbIcon?: React.ReactNode;
  loading?: boolean;
};
const Switch = React.forwardRef<React.ElementRef<typeof SwitchPrimitives.Root>, SwitchProps>(
  ({ className, leftIcon, rightIcon, thumbIcon, onCheckedChange, loading, ...props }, ref) => {
    const [isChecked, setIsChecked] = React.useState(
      props?.checked ?? props?.defaultChecked ?? false,
    );
    const [isTapped, setIsTapped] = React.useState(false);
    React.useEffect(() => {
      if (props?.checked !== undefined) setIsChecked(props.checked);
    }, [props?.checked]);
    const handleChange = React.useCallback(
      (checked: boolean) => {
        setIsChecked(checked);
        onCheckedChange?.(checked);
      },
      [onCheckedChange],
    );
    return (
      <SwitchPrimitives.Root {...props} onCheckedChange={handleChange} asChild>
        <motion.button
          ref={ref}
          className={cn(
            "focus-visible:ring-ring focus-visible:ring-offset-background data-[state=checked]:bg-primary data-[state=unchecked]:bg-input relative flex h-6 w-10 shrink-0 cursor-pointer items-center rounded-full p-[3px] transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:justify-end data-[state=unchecked]:justify-start",
            className,
          )}
          whileTap="tap"
          initial={false}
          onTapStart={() => setIsTapped(true)}
          onTapCancel={() => setIsTapped(false)}
          onTap={() => setIsTapped(false)}
        >
          {leftIcon && (
            <motion.div
              animate={isChecked ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }}
              transition={{ type: "spring", bounce: 0 }}
              className="absolute top-1/2 left-1 -translate-y-1/2 text-neutral-400 dark:text-neutral-500 [&_svg]:size-3"
            >
              {typeof leftIcon !== "string" ? leftIcon : null}
            </motion.div>
          )}
          {rightIcon && (
            <motion.div
              animate={isChecked ? { scale: 0, opacity: 0 } : { scale: 1, opacity: 1 }}
              transition={{ type: "spring", bounce: 0 }}
              className="absolute top-1/2 right-1 -translate-y-1/2 text-neutral-500 dark:text-neutral-400 [&_svg]:size-3"
            >
              {typeof rightIcon !== "string" ? rightIcon : null}
            </motion.div>
          )}
          {!loading && (
            <SwitchPrimitives.Thumb asChild>
              <motion.div
                whileTap="tab"
                className={cn(
                  "bg-background relative z-[1] flex items-center justify-center rounded-full text-neutral-500 shadow-lg ring-0 dark:text-neutral-400 [&_svg]:size-3",
                )}
                layout
                transition={{ type: "spring", stiffness: 300, damping: 25 }}
                style={{
                  width: 18,
                  height: 18,
                }}
                animate={
                  isTapped
                    ? { width: 21, transition: { duration: 0.1 } }
                    : { width: 18, transition: { duration: 0.1 } }
                }
              >
                {thumbIcon && typeof thumbIcon !== "string" ? thumbIcon : null}
              </motion.div>
            </SwitchPrimitives.Thumb>
          )}
        </motion.button>
      </SwitchPrimitives.Root>
    );
  },
);
Switch.displayName = SwitchPrimitives.Root.displayName;
export { Switch, type SwitchProps };
</file>

<file path="src/components/ui/table-skeleton.tsx">
import { Skeleton } from "./skeleton";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./table";
interface TableSkeletonProps {
  columns: string[];
  rows: number;
}
const TableSkeleton = ({ columns, rows }: TableSkeletonProps) => {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          {columns.map((column, index) => (
            <TableHead key={index}>
              <Skeleton className="h-4 w-full" />
            </TableHead>
          ))}
        </TableRow>
      </TableHeader>
      <TableBody>
        {Array.from({ length: rows }).map((_, rowIndex) => (
          <TableRow key={rowIndex}>
            {columns.map((_, colIndex) => (
              <TableCell key={colIndex}>
                <Skeleton className="h-4 w-full" />
              </TableCell>
            ))}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};
export default TableSkeleton;
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div data-slot="table-container" className="relative w-full">
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  );
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return <thead data-slot="table-header" className={cn("[&_tr]:border-b", className)} {...props} />;
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  );
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn("bg-muted/50 border-t font-medium [&>tr]:last:border-b-0", className)}
      {...props}
    />
  );
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className,
      )}
      {...props}
    />
  );
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground bg-primary/5 h-10 px-2 !text-start align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className,
      )}
      {...props}
    />
  );
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className,
      )}
      {...props}
    />
  );
}
function TableCaption({ className, ...props }: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  );
}
export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };
</file>

<file path="src/components/ui/tabs.tsx">
"use client";
import * as TabsPrimitive from "@radix-ui/react-tabs";
import { type HTMLMotionProps, type Transition, motion } from "motion/react";
import * as React from "react";
import { MotionHighlight, MotionHighlightItem } from "@/ui/motion-highlight";
import { cn } from "@/lib/utils";
type TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;
function Tabs({ className, ...props }: TabsProps) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  );
}
type TabsListProps = React.ComponentProps<typeof TabsPrimitive.List> & {
  activeClassName?: string;
  transition?: Transition;
};
function TabsList({
  ref,
  children,
  className,
  activeClassName,
  transition = {
    type: "spring",
    stiffness: 200,
    damping: 25,
  },
  ...props
}: TabsListProps) {
  const localRef = React.useRef<HTMLDivElement | null>(null);
  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);
  const [activeValue, setActiveValue] = React.useState<string | undefined>(undefined);
  const getActiveValue = React.useCallback(() => {
    if (!localRef.current) return;
    const activeTab = localRef.current.querySelector<HTMLElement>('[data-state="active"]');
    if (!activeTab) return;
    setActiveValue(activeTab.getAttribute("data-value") ?? undefined);
  }, []);
  React.useEffect(() => {
    getActiveValue();
    const observer = new MutationObserver(getActiveValue);
    if (localRef.current) {
      observer.observe(localRef.current, {
        attributes: true,
        childList: true,
        subtree: true,
      });
    }
    return () => {
      observer.disconnect();
    };
  }, [getActiveValue]);
  return (
    <MotionHighlight
      controlledItems
      className={cn("bg-background rounded-sm shadow-sm", activeClassName)}
      value={activeValue}
      transition={transition}
    >
      <TabsPrimitive.List
        ref={localRef}
        data-slot="tabs-list"
        className={cn(
          "bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]",
          className,
        )}
        {...props}
      >
        {children}
      </TabsPrimitive.List>
    </MotionHighlight>
  );
}
type TabsTriggerProps = React.ComponentProps<typeof TabsPrimitive.Trigger>;
function TabsTrigger({ className, value, ...props }: TabsTriggerProps) {
  return (
    <MotionHighlightItem value={value} className="size-full">
      <TabsPrimitive.Trigger
        data-slot="tabs-trigger"
        className={cn(
          "ring-offset-background focus-visible:ring-ring data-[state=active]:text-foreground z-[1] inline-flex size-full cursor-pointer items-center justify-center rounded-sm px-2 py-1 text-sm font-medium whitespace-nowrap transition-all focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50",
          className,
        )}
        value={value}
        {...props}
      />
    </MotionHighlightItem>
  );
}
type TabsContentProps = React.ComponentProps<typeof TabsPrimitive.Content> &
  HTMLMotionProps<"div"> & {
    transition?: Transition;
  };
function TabsContent({
  className,
  children,
  transition = {
    duration: 0.5,
    ease: "easeInOut",
  },
  ...props
}: TabsContentProps) {
  return (
    <TabsPrimitive.Content asChild {...props}>
      <motion.div
        data-slot="tabs-content"
        className={cn("flex-1 outline-none", className)}
        layout
        initial={{ opacity: 0, y: -10, filter: "blur(4px)" }}
        animate={{ opacity: 1, y: 0, filter: "blur(0px)" }}
        exit={{ opacity: 0, y: 10, filter: "blur(4px)" }}
        transition={transition}
        {...props}
      >
        {children}
      </motion.div>
    </TabsPrimitive.Content>
  );
}
type TabsContentsProps = HTMLMotionProps<"div"> & {
  children: React.ReactNode;
  className?: string;
  transition?: Transition;
};
function TabsContents({
  children,
  className,
  transition = { type: "spring", stiffness: 200, damping: 25 },
  ...props
}: TabsContentsProps) {
  const containerRef = React.useRef<HTMLDivElement | null>(null);
  const [height, setHeight] = React.useState(0);
  React.useEffect(() => {
    if (!containerRef.current) return;
    const resizeObserver = new ResizeObserver((entries) => {
      const newHeight = entries[0].contentRect.height;
      requestAnimationFrame(() => {
        setHeight(newHeight);
      });
    });
    resizeObserver.observe(containerRef.current);
    return () => {
      resizeObserver.disconnect();
    };
  }, [children]);
  React.useLayoutEffect(() => {
    if (containerRef.current) {
      const initialHeight = containerRef.current.getBoundingClientRect().height;
      setHeight(initialHeight);
    }
  }, [children]);
  return (
    <motion.div
      data-slot="tabs-contents"
      layout
      animate={{ height: height }}
      transition={transition}
      className={className}
      {...props}
    >
      <div ref={containerRef}>{children}</div>
    </motion.div>
  );
}
export {
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
  TabsContents,
  type TabsProps,
  type TabsListProps,
  type TabsTriggerProps,
  type TabsContentProps,
  type TabsContentsProps,
};
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<"textarea">>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[80px] w-full rounded-md border px-3 py-2 text-base focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Textarea.displayName = "Textarea";
export { Textarea };
</file>

<file path="src/components/ui/theme-switcher.tsx">
"use client";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { Button } from "@/ui/button";
export default function ThemeSwitcher({ defaultSize = false }: { defaultSize?: boolean }) {
  const { setTheme, resolvedTheme } = useTheme();
  return (
    <Button
      onClick={() => setTheme(resolvedTheme === "dark" ? "light" : "dark")}
      variant="outline"
      size="icon"
      className={defaultSize ? "" : "size-8"}
    >
      {resolvedTheme === "dark" ? <Moon /> : <Sun />}
    </Button>
  );
}
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { cn } from "@/lib/utils";
const TooltipProvider = TooltipPrimitive.Provider;
const Tooltip = TooltipPrimitive.Root;
const TooltipTrigger = TooltipPrimitive.Trigger;
const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="src/components/ui/transition-panel.tsx">
"use client";
import { AnimatePresence, Transition, Variant, motion, MotionProps } from "motion/react";
import { cn } from "@/lib/utils";
type TransitionPanelProps = {
  children: React.ReactNode[];
  className?: string;
  transition?: Transition;
  activeIndex: number;
  variants?: { enter: Variant; center: Variant; exit: Variant };
} & MotionProps;
export function TransitionPanel({
  children,
  className,
  transition,
  variants,
  activeIndex,
  ...motionProps
}: TransitionPanelProps) {
  return (
    <div className={cn("relative", className)}>
      <AnimatePresence initial={false} mode="popLayout" custom={motionProps.custom}>
        <motion.div
          key={activeIndex}
          variants={variants}
          transition={transition}
          initial="enter"
          animate="center"
          exit="exit"
          {...motionProps}
        >
          {children[activeIndex]}
        </motion.div>
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="src/components/ui/user-dropdown.tsx">
import { LogOut, User } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
import { Button } from "./button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "./dropdown-menu";
export function UserDropdown() {
  const t = useTranslations();
  const { user, profile } = useUserStore();
  const signOut = useUserStore((state) => state.signOut);
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  if (!user) return null;
  const handleSignOut = async () => {
    try {
      await signOut();
      toast.success(t("Auth.signed_out_successfully"));
      router.push("/auth");
    } catch (error) {
      toast.error(t("Auth.error_signing_out"));
    }
  };
  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger asChild>
        <Button size="icon_sm" variant="outline">
          <User className="h-5 w-5" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm leading-none font-medium">{user.email}</p>
            {profile?.stripe_customer_id && (
              <p className="text-muted-foreground text-xs leading-none">Premium Plan</p>
            )}
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem onClick={() => router.push("/account")}>
            <User className="mr-2 h-4 w-4" />
            <span>{t("Account.title")}</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleSignOut}>
          <LogOut className="mr-2 h-4 w-4" />
          <span>{t("Auth.sign_out")}</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/components/loading-page.tsx">
import { Loader2 } from "lucide-react";
export default function LoadingPage() {
  return (
    <div className="flex h-screen w-full items-center justify-center">
      <Loader2 className="text-primary h-8 w-8 animate-spin" />
    </div>
  );
}
</file>

<file path="src/db/archive/policies.sql">
-- Policies for auth.users
CREATE POLICY "Users can view their own user data" ON "auth"."users" AS PERMISSIVE FOR SELECT TO authenticated USING ((auth.uid() = id));
-- Policies for public.user_enterprise_roles
CREATE POLICY "Enable read access for users" ON "public"."user_enterprise_roles" AS PERMISSIVE FOR SELECT TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Enable insert for authenticated users" ON "public"."user_enterprise_roles" AS PERMISSIVE FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Enable update for users" ON "public"."user_enterprise_roles" AS PERMISSIVE FOR UPDATE TO authenticated USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Enable delete for users" ON "public"."user_enterprise_roles" AS PERMISSIVE FOR DELETE TO authenticated USING ((auth.uid() = user_id));
-- Policies for public.enterprises
CREATE POLICY "Access if member" ON "public"."enterprises" AS PERMISSIVE FOR SELECT TO public USING ((EXISTS ( SELECT 1
   FROM memberships
  WHERE ((memberships.enterprise_id = enterprises.id) AND (memberships.profile_id = auth.uid())))));
-- Policies for public.memberships
CREATE POLICY "Access if same user" ON "public"."memberships" AS PERMISSIVE FOR SELECT TO public USING ((profile_id = auth.uid()));
-- Policies for public.invoices
CREATE POLICY "Read if has permission" ON "public"."invoices" AS PERMISSIVE FOR SELECT TO public USING ((EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'invoices.read'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = invoices.enterprise_id)))));
CREATE POLICY "Delete if has permission" ON "public"."invoices" AS PERMISSIVE FOR DELETE TO public USING ((EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'invoices.delete'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = invoices.enterprise_id)))));
-- Policies for public.expenses
CREATE POLICY "Read if has permission" ON "public"."expenses" AS PERMISSIVE FOR SELECT TO public USING ((EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'expenses.read'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = expenses.enterprise_id)))));
CREATE POLICY "Create if has permission" ON "public"."expenses" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'expenses.create'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = expenses.enterprise_id)))));
-- Policies for public.profiles
CREATE POLICY "Users can view own profile" ON "public"."profiles" AS PERMISSIVE FOR SELECT TO public USING ((auth.uid() = id));
CREATE POLICY "Users can insert own profile" ON "public"."profiles" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can update own profile" ON "public"."profiles" AS PERMISSIVE FOR UPDATE TO public USING ((auth.uid() = id)) WITH CHECK ((auth.uid() = id));
-- Policies for public.user_roles
CREATE POLICY "Admins can manage user roles" ON "public"."user_roles" AS PERMISSIVE FOR ALL TO authenticated USING (has_enterprise_permission(enterprise_id, ARRAY['roles.create'::app_permission, 'roles.update'::app_permission])) WITH CHECK (has_enterprise_permission(enterprise_id, ARRAY['roles.create'::app_permission, 'roles.update'::app_permission]));
</file>

<file path="src/db/archive/rbac.sql">
-- Drop existing RBAC objects
-- First drop the dependent policies
DROP POLICY IF EXISTS "Superadmins can view all users" ON auth.users;
DROP POLICY IF EXISTS "Superadmins can manage all users" ON auth.users;
DROP POLICY IF EXISTS "Users can update enterprises" ON enterprises;
DROP POLICY IF EXISTS "Users can view their own roles" ON user_roles;
DROP POLICY IF EXISTS "Users can create initial role" ON user_roles;
DROP POLICY IF EXISTS "Only superadmins can manage roles" ON user_roles;
DROP POLICY IF EXISTS "Only superadmins can manage role permissions" ON role_permissions;
-- Now drop the tables
DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP TABLE IF EXISTS public.user_roles CASCADE;
-- Create tables
CREATE TABLE public.user_roles (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  role app_role NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE(user_id, role)
);
CREATE TABLE public.role_permissions (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE(role, permission)
);
-- Insert role permissions for superadmin (all permissions)
INSERT INTO public.role_permissions (role, permission)
SELECT 'superadmin', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission;
-- Enable RLS
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
-- Create policies
CREATE POLICY "Users can view their own roles"
  ON public.user_roles
  FOR SELECT
  USING (auth.uid() = user_id);
CREATE POLICY "Users can view all role permissions"
  ON public.role_permissions
  FOR SELECT
  USING (true);
-- Create functions
CREATE OR REPLACE FUNCTION public.has_role(role_name app_role)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = auth.uid()
    AND role = role_name
  );
$$;
CREATE OR REPLACE FUNCTION public.has_permission(permission_name app_permission)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles ur
    JOIN public.role_permissions rp ON ur.role = rp.role
    WHERE ur.user_id = auth.uid()
    AND rp.permission = permission_name
  );
$$;
-- Create triggers
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.user_roles
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.role_permissions
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
</file>

<file path="src/db/archive/triggers.sql">
-- Drop existing trigger and function if they exist
DROP TRIGGER IF EXISTS validate_department_location_trigger ON department_locations;
DROP FUNCTION IF EXISTS validate_department_location();
-- Drop existing RBAC triggers and functions if they exist
DROP TRIGGER IF EXISTS validate_user_role_trigger ON user_roles;
DROP TRIGGER IF EXISTS validate_role_permission_trigger ON role_permissions;
DROP FUNCTION IF EXISTS validate_user_role();
DROP FUNCTION IF EXISTS validate_role_permission();
DROP FUNCTION IF EXISTS has_permission(text, uuid);
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user_role();
-- Create the trigger function
CREATE OR REPLACE FUNCTION validate_department_location()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.location_type = 'office' AND NOT EXISTS (SELECT 1 FROM offices WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid office location_id';
  ELSIF NEW.location_type = 'branch' AND NOT EXISTS (SELECT 1 FROM branches WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid branch location_id';
  ELSIF NEW.location_type = 'warehouse' AND NOT EXISTS (SELECT 1 FROM warehouses WHERE id = NEW.location_id) THEN
    RAISE EXCEPTION 'Invalid warehouse location_id';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create the trigger
CREATE TRIGGER validate_department_location_trigger
BEFORE INSERT OR UPDATE ON department_locations
FOR EACH ROW
EXECUTE FUNCTION validate_department_location();
-- Create function to validate user role assignments
CREATE OR REPLACE FUNCTION validate_user_role()
RETURNS TRIGGER AS $$
BEGIN
  -- Check if the user exists in auth.users
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = NEW.user_id) THEN
    RAISE EXCEPTION 'Invalid user_id';
  END IF;
  -- Check if the role is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.role::text AND enumtypid = 'app_role'::regtype) THEN
    RAISE EXCEPTION 'Invalid role';
  END IF;
  -- Check if the enterprise exists
  IF NEW.enterprise_id IS NOT NULL AND NOT EXISTS (SELECT 1 FROM enterprises WHERE id = NEW.enterprise_id) THEN
    RAISE EXCEPTION 'Invalid enterprise_id';
  END IF;
  -- Check if the user is already assigned this role in this enterprise
  IF EXISTS (
    SELECT 1 FROM user_roles 
    WHERE user_id = NEW.user_id 
    AND role = NEW.role 
    AND enterprise_id = NEW.enterprise_id
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'User already has this role in this enterprise';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create trigger for user role validation
CREATE TRIGGER validate_user_role_trigger
BEFORE INSERT OR UPDATE ON user_roles
FOR EACH ROW
EXECUTE FUNCTION validate_user_role();
-- Create function to validate role permission assignments
CREATE OR REPLACE FUNCTION validate_role_permission()
RETURNS TRIGGER AS $$
BEGIN
  -- Check if the role is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.role::text AND enumtypid = 'app_role'::regtype) THEN
    RAISE EXCEPTION 'Invalid role';
  END IF;
  -- Check if the permission is valid
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = NEW.permission::text AND enumtypid = 'app_permission'::regtype) THEN
    RAISE EXCEPTION 'Invalid permission';
  END IF;
  -- Check if this role already has this permission
  IF EXISTS (
    SELECT 1 FROM role_permissions 
    WHERE role = NEW.role 
    AND permission = NEW.permission
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'Role already has this permission';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create trigger for role permission validation
CREATE TRIGGER validate_role_permission_trigger
BEFORE INSERT OR UPDATE ON role_permissions
FOR EACH ROW
EXECUTE FUNCTION validate_role_permission();
-- Create the has_permission function
CREATE OR REPLACE FUNCTION has_permission(permission_name text, enterprise_id uuid)
RETURNS boolean AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM public.user_roles ur
    JOIN public.role_permissions rp ON ur.role = rp.role
    WHERE ur.user_id = auth.uid()
    AND ur.enterprise_id = has_permission.enterprise_id
    AND rp.permission = permission_name::app_permission
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create function to handle new user role creation
CREATE OR REPLACE FUNCTION handle_new_user_role()
RETURNS TRIGGER AS $$
BEGIN
  -- Create a superadmin role for the new user
  INSERT INTO public.user_roles (user_id, role, enterprise_id)
  VALUES (NEW.id, 'superadmin'::app_role, NULL);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create trigger for new user role creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION handle_new_user_role();
-- Create function to set updated_at timestamp
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create function to handle new user profile creation
CREATE OR REPLACE FUNCTION handle_new_user_profile()
RETURNS TRIGGER AS $$
DECLARE
    _role public.app_role;
BEGIN
    -- Set the role
    _role := 'superadmin'::public.app_role;
    -- Log the trigger execution
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile', 'auth.users', NEW.id, row_to_json(NEW)::jsonb);
    -- Insert into user_roles first with explicit schema
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, _role);
    -- Then create the profile with explicit schema
    INSERT INTO public.profiles (
        id,
        user_id,
        email,
        first_name,
        last_name,
        role,
        created_at
    )
    VALUES (
        NEW.id,
        NEW.id,
        NEW.email,
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 1), ''), 'New'),
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 2), ''), 'User'),
        _role,
        NOW()
    );
    RETURN NEW;
EXCEPTION WHEN OTHERS THEN
    -- Log any errors
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile_error', 'auth.users', NEW.id, jsonb_build_object('error', SQLERRM));
    RAISE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;
-- Create function for custom access token hook
CREATE OR REPLACE FUNCTION custom_access_token_hook(event jsonb)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
AS $$
DECLARE
    claims jsonb;
    user_role public.app_role;
    user_permissions text[];
BEGIN
    -- Fetch the user role in the user_roles table
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = (event->>'user_id')::uuid;
    -- Get user permissions
    SELECT array_agg(rp.permission::text)
    INTO user_permissions
    FROM public.role_permissions rp
    WHERE rp.role = user_role;
    claims := event->'claims';
    IF user_role IS NOT NULL THEN
        -- Set the role claim
        claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
        -- Set the permissions claim
        claims := jsonb_set(claims, '{user_permissions}', to_jsonb(user_permissions));
    ELSE
        claims := jsonb_set(claims, '{user_role}', 'null');
        claims := jsonb_set(claims, '{user_permissions}', '[]');
    END IF;
    -- Update the claims object in the original event
    event := jsonb_set(event, '{claims}', claims);
    RETURN event;
END;
$$;
</file>

<file path="src/db/archive/types.sql">
-- Drop existing types if they exist
DROP TYPE IF EXISTS public.app_permission CASCADE;
DROP TYPE IF EXISTS public.app_role CASCADE;
-- Create enum types if they don't exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('superadmin', 'admin', 'accounting', 'hr');
    END IF;
END$$;
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_permission') THEN
        CREATE TYPE public.app_permission AS ENUM (
            -- Profiles
            'profiles.create',
            'profiles.read',
            'profiles.update',
            'profiles.delete',
            'profiles.export',
            -- Enterprises
            'enterprises.create',
            'enterprises.read',
            'enterprises.update',
            'enterprises.delete',
            'enterprises.export',
            -- Invoices
            'invoices.create',
            'invoices.read',
            'invoices.update',
            'invoices.delete',
            'invoices.export',
            'invoices.duplicate',
            -- Products
            'products.create',
            'products.read',
            'products.update',
            'products.delete',
            'products.export',
            -- Quotes
            'quotes.create',
            'quotes.read',
            'quotes.update',
            'quotes.delete',
            'quotes.export',
            'quotes.duplicate',
            -- Employees
            'employees.create',
            'employees.read',
            'employees.update',
            'employees.delete',
            'employees.export',
            -- Salaries
            'salaries.create',
            'salaries.read',
            'salaries.update',
            'salaries.delete',
            'salaries.export',
            -- Documents
            'documents.create',
            'documents.read',
            'documents.update',
            'documents.delete',
            'documents.export',
            -- Templates
            'templates.create',
            'templates.read',
            'templates.update',
            'templates.delete',
            'templates.export',
            'templates.duplicate',
            -- Employee Requests
            'employee_requests.create',
            'employee_requests.read',
            'employee_requests.update',
            'employee_requests.delete',
            'employee_requests.export',
            -- Job Listings
            'job_listings.create',
            'job_listings.read',
            'job_listings.update',
            'job_listings.delete',
            'job_listings.export',
            -- Offices
            'offices.create',
            'offices.read',
            'offices.update',
            'offices.delete',
            'offices.export',
            -- Expenses
            'expenses.create',
            'expenses.read',
            'expenses.update',
            'expenses.delete',
            'expenses.export',
            'expenses.duplicate',
            -- Departments
            'departments.create',
            'departments.read',
            'departments.update',
            'departments.delete',
            'departments.export',
            -- Warehouses
            'warehouses.create',
            'warehouses.read',
            'warehouses.update',
            'warehouses.delete',
            'warehouses.export',
            -- Vendors
            'vendors.create',
            'vendors.read',
            'vendors.update',
            'vendors.delete',
            'vendors.export',
            -- Clients
            'clients.create',
            'clients.read',
            'clients.update',
            'clients.delete',
            'clients.export',
            -- Companies
            'companies.create',
            'companies.read',
            'companies.update',
            'companies.delete',
            'companies.export',
            -- Branches
            'branches.create',
            'branches.read',
            'branches.update',
            'branches.delete',
            'branches.export'
        );
    END IF;
END$$;
</file>

<file path="src/db/drizzle.ts">
import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";
import * as relations from "@/db/relations";
import * as schema from "@/db/schema";
// This file is only imported by server-side code
if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL is not set");
}
// Parse the connection string to handle SSL
const connectionString = process.env.DATABASE_URL;
const ssl = connectionString.includes("sslmode=require")
  ? { rejectUnauthorized: false }
  : false;
const pool = new Pool({
  connectionString,
  max: 10,
  idleTimeoutMillis: 60000,
  connectionTimeoutMillis: 10000,
  ssl,
});
export const db = drizzle(pool, {
  schema: { ...schema, ...relations },
});
</file>

<file path="src/db/README.md">
# Making changes to the DB

- run the following command to create a new migration file

```
supabase migration new FILE_NAME
```

- add the sql query to the newly created file in `/supabase/migrations/FILE_NAME`
- run `supabase push` to apply the migrations to the db.

If any changes are made to `src/db/schema.ts` or `src/db/relations.ts` then we'll need to run `drizzle-kit generate` to generate the migrations files from the changes we made to the drizzle schema. And after that we can run `supabase push` to apply the migrations.

# Adding Permissions

The superadmin predefined role has the id: `e5a42bf8-12a8-4ac9-89f8-1f2ee46ed44b`

```
 insert into
  permissions (role_id, permission)
values
  (
    'e5a42bf8-12a8-4ac9-89f8-1f2ee46ed44b',
    'companies.read'
  ),
  (
    'e5a42bf8-12a8-4ac9-89f8-1f2ee46ed44b',
    'companies.create'
  ),
  (
    'e5a42bf8-12a8-4ac9-89f8-1f2ee46ed44b',
    'companies.delete'
  ),
  (
    'e5a42bf8-12a8-4ac9-89f8-1f2ee46ed44b',
    'companies.update'
  );
```



# Steps

- Define the change: Modify your schema in supabase/migrations/schema.ts using Drizzle's syntax. This file acts as the source of truth for your application's understanding of the database structure.

- (Optional but Recommended) Generate SQL: Run npx drizzle-kit generate --dialect postgresql (or similar, depending on your config). This command looks at your schema.ts changes and generates the corresponding SQL DDL statements. It usually saves them in a drizzle folder.

- Create Supabase Migration: Run supabase migrations new <your_migration_name>. This creates an empty SQL file in supabase/migrations/.

- Add SQL: Copy the SQL generated by drizzle-kit generate (from the drizzle folder) into the new file created by supabase migrations new. Alternatively, write the SQL manually if you prefer. Review the SQL carefully.

- Apply Migration: Run supabase db push --include-all (or supabase migration up --include-all) to apply the SQL migration to your Supabase database. This updates the actual database schema and keeps Supabase's migration history correct.
</file>

<file path="src/db/relations.ts">
import { relations } from "drizzle-orm/relations";
import {
  jobs,
  job_listing_jobs,
  job_listings,
  employees,
  employee_requests,
  sso_providersInAuth,
  saml_providersInAuth,
  flow_stateInAuth,
  saml_relay_statesInAuth,
  products,
  invoice_items,
  usersInAuth,
  identitiesInAuth,
  sessionsInAuth,
  refresh_tokensInAuth,
  mfa_factorsInAuth,
  one_time_tokensInAuth,
  mfa_amr_claimsInAuth,
  mfa_challengesInAuth,
  sso_domainsInAuth,
  departments,
  department_locations,
  clients,
  quotes,
  salaries,
  quote_items,
  companies,
  user_enterprise_roles,
  profiles,
  roles,
  permissions,
  enterprises,
  memberships,
  invoices,
  expenses,
  user_roles,
} from "./schema";
export const job_listing_jobsRelations = relations(job_listing_jobs, ({ one }) => ({
  job: one(jobs, {
    fields: [job_listing_jobs.job_id],
    references: [jobs.id],
  }),
  job_listing: one(job_listings, {
    fields: [job_listing_jobs.job_listing_id],
    references: [job_listings.id],
  }),
}));
export const jobsRelations = relations(jobs, ({ many }) => ({
  job_listing_jobs: many(job_listing_jobs),
}));
export const job_listingsRelations = relations(job_listings, ({ many }) => ({
  job_listing_jobs: many(job_listing_jobs),
}));
export const employee_requestsRelations = relations(employee_requests, ({ one }) => ({
  employee: one(employees, {
    fields: [employee_requests.employee_id],
    references: [employees.id],
  }),
}));
export const employeesRelations = relations(employees, ({ one, many }) => ({
  employee_requests: many(employee_requests),
  department: one(departments, {
    fields: [employees.department_id],
    references: [departments.id],
  }),
  salaries: many(salaries),
}));
export const saml_providersInAuthRelations = relations(saml_providersInAuth, ({ one }) => ({
  sso_providersInAuth: one(sso_providersInAuth, {
    fields: [saml_providersInAuth.sso_provider_id],
    references: [sso_providersInAuth.id],
  }),
}));
export const sso_providersInAuthRelations = relations(sso_providersInAuth, ({ many }) => ({
  saml_providersInAuths: many(saml_providersInAuth),
  saml_relay_statesInAuths: many(saml_relay_statesInAuth),
  sso_domainsInAuths: many(sso_domainsInAuth),
}));
export const saml_relay_statesInAuthRelations = relations(saml_relay_statesInAuth, ({ one }) => ({
  flow_stateInAuth: one(flow_stateInAuth, {
    fields: [saml_relay_statesInAuth.flow_state_id],
    references: [flow_stateInAuth.id],
  }),
  sso_providersInAuth: one(sso_providersInAuth, {
    fields: [saml_relay_statesInAuth.sso_provider_id],
    references: [sso_providersInAuth.id],
  }),
}));
export const flow_stateInAuthRelations = relations(flow_stateInAuth, ({ many }) => ({
  saml_relay_statesInAuths: many(saml_relay_statesInAuth),
}));
export const invoice_itemsRelations = relations(invoice_items, ({ one }) => ({
  product: one(products, {
    fields: [invoice_items.product_id],
    references: [products.id],
  }),
}));
export const productsRelations = relations(products, ({ many }) => ({
  invoice_items: many(invoice_items),
  quote_items: many(quote_items),
}));
export const identitiesInAuthRelations = relations(identitiesInAuth, ({ one }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [identitiesInAuth.user_id],
    references: [usersInAuth.id],
  }),
}));
export const usersInAuthRelations = relations(usersInAuth, ({ many }) => ({
  identitiesInAuths: many(identitiesInAuth),
  sessionsInAuths: many(sessionsInAuth),
  mfa_factorsInAuths: many(mfa_factorsInAuth),
  one_time_tokensInAuths: many(one_time_tokensInAuth),
  user_enterprise_roles: many(user_enterprise_roles),
  profiles: many(profiles),
  user_roles: many(user_roles),
}));
export const sessionsInAuthRelations = relations(sessionsInAuth, ({ one, many }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [sessionsInAuth.user_id],
    references: [usersInAuth.id],
  }),
  refresh_tokensInAuths: many(refresh_tokensInAuth),
  mfa_amr_claimsInAuths: many(mfa_amr_claimsInAuth),
}));
export const refresh_tokensInAuthRelations = relations(refresh_tokensInAuth, ({ one }) => ({
  sessionsInAuth: one(sessionsInAuth, {
    fields: [refresh_tokensInAuth.session_id],
    references: [sessionsInAuth.id],
  }),
}));
export const mfa_factorsInAuthRelations = relations(mfa_factorsInAuth, ({ one, many }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [mfa_factorsInAuth.user_id],
    references: [usersInAuth.id],
  }),
  mfa_challengesInAuths: many(mfa_challengesInAuth),
}));
export const one_time_tokensInAuthRelations = relations(one_time_tokensInAuth, ({ one }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [one_time_tokensInAuth.user_id],
    references: [usersInAuth.id],
  }),
}));
export const mfa_amr_claimsInAuthRelations = relations(mfa_amr_claimsInAuth, ({ one }) => ({
  sessionsInAuth: one(sessionsInAuth, {
    fields: [mfa_amr_claimsInAuth.session_id],
    references: [sessionsInAuth.id],
  }),
}));
export const mfa_challengesInAuthRelations = relations(mfa_challengesInAuth, ({ one }) => ({
  mfa_factorsInAuth: one(mfa_factorsInAuth, {
    fields: [mfa_challengesInAuth.factor_id],
    references: [mfa_factorsInAuth.id],
  }),
}));
export const sso_domainsInAuthRelations = relations(sso_domainsInAuth, ({ one }) => ({
  sso_providersInAuth: one(sso_providersInAuth, {
    fields: [sso_domainsInAuth.sso_provider_id],
    references: [sso_providersInAuth.id],
  }),
}));
export const departmentsRelations = relations(departments, ({ many }) => ({
  employees: many(employees),
  department_locations: many(department_locations),
}));
export const department_locationsRelations = relations(department_locations, ({ one }) => ({
  department: one(departments, {
    fields: [department_locations.department_id],
    references: [departments.id],
  }),
}));
export const quotesRelations = relations(quotes, ({ one, many }) => ({
  client: one(clients, {
    fields: [quotes.client_id],
    references: [clients.id],
  }),
  quote_items: many(quote_items),
}));
export const clientsRelations = relations(clients, ({ one, many }) => ({
  quotes: many(quotes),
  company: one(companies, {
    fields: [clients.company],
    references: [companies.id],
  }),
}));
export const salariesRelations = relations(salaries, ({ one }) => ({
  employee: one(employees, {
    fields: [salaries.employee_id],
    references: [employees.id],
  }),
}));
export const quote_itemsRelations = relations(quote_items, ({ one }) => ({
  product: one(products, {
    fields: [quote_items.product_id],
    references: [products.id],
  }),
  quote: one(quotes, {
    fields: [quote_items.quote_id],
    references: [quotes.id],
  }),
}));
export const companiesRelations = relations(companies, ({ many }) => ({
  clients: many(clients),
}));
export const user_enterprise_rolesRelations = relations(user_enterprise_roles, ({ one }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [user_enterprise_roles.user_id],
    references: [usersInAuth.id],
  }),
}));
export const profilesRelations = relations(profiles, ({ one, many }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [profiles.id],
    references: [usersInAuth.id],
  }),
  memberships: many(memberships),
  invoices: many(invoices),
  expenses: many(expenses),
}));
export const permissionsRelations = relations(permissions, ({ one }) => ({
  role: one(roles, {
    fields: [permissions.role_id],
    references: [roles.id],
  }),
}));
export const rolesRelations = relations(roles, ({ many }) => ({
  permissions: many(permissions),
  memberships: many(memberships),
}));
export const membershipsRelations = relations(memberships, ({ one }) => ({
  enterprise: one(enterprises, {
    fields: [memberships.enterprise_id],
    references: [enterprises.id],
  }),
  profile: one(profiles, {
    fields: [memberships.profile_id],
    references: [profiles.id],
  }),
  role: one(roles, {
    fields: [memberships.role_id],
    references: [roles.id],
  }),
}));
export const enterprisesRelations = relations(enterprises, ({ many }) => ({
  memberships: many(memberships),
  invoices: many(invoices),
  expenses: many(expenses),
}));
export const invoicesRelations = relations(invoices, ({ one }) => ({
  profile: one(profiles, {
    fields: [invoices.created_by],
    references: [profiles.id],
  }),
  enterprise: one(enterprises, {
    fields: [invoices.enterprise_id],
    references: [enterprises.id],
  }),
}));
export const expensesRelations = relations(expenses, ({ one }) => ({
  profile: one(profiles, {
    fields: [expenses.created_by],
    references: [profiles.id],
  }),
  enterprise: one(enterprises, {
    fields: [expenses.enterprise_id],
    references: [enterprises.id],
  }),
}));
export const user_rolesRelations = relations(user_roles, ({ one }) => ({
  usersInAuth: one(usersInAuth, {
    fields: [user_roles.user_id],
    references: [usersInAuth.id],
  }),
}));
</file>

<file path="src/db/schema.ts">
import { sql } from "drizzle-orm";
import {
  pgTable,
  index,
  uuid,
  text,
  numeric,
  timestamp,
  boolean,
  check,
  jsonb,
  foreignKey,
  date,
  pgSchema,
  unique,
  uniqueIndex,
  varchar,
  smallint,
  json,
  inet,
  bigserial,
  primaryKey,
  pgView,
  pgEnum,
} from "drizzle-orm/pg-core";
export const auth = pgSchema("auth");
export const aal_levelInAuth = auth.enum("aal_level", ["aal1", "aal2", "aal3"]);
export const code_challenge_methodInAuth = auth.enum("code_challenge_method", ["s256", "plain"]);
export const factor_statusInAuth = auth.enum("factor_status", ["unverified", "verified"]);
export const factor_typeInAuth = auth.enum("factor_type", ["totp", "webauthn", "phone"]);
export const one_time_token_typeInAuth = auth.enum("one_time_token_type", [
  "confirmation_token",
  "reauthentication_token",
  "recovery_token",
  "email_change_token_new",
  "email_change_token_current",
  "phone_change_token",
]);
export const app_permission = pgEnum("app_permission", [
  "users.create",
  "users.read",
  "users.update",
  "users.delete",
  "users.export",
  "users.invite",
  "users.duplicate",
  "roles.create",
  "roles.read",
  "roles.update",
  "roles.delete",
  "roles.export",
  "roles.assign",
  "roles.duplicate",
  "companies.create",
  "companies.read",
  "companies.update",
  "companies.delete",
  "companies.export",
  "companies.duplicate",
  "clients.create",
  "clients.read",
  "clients.update",
  "clients.delete",
  "clients.export",
  "clients.duplicate",
  "invoices.create",
  "invoices.read",
  "invoices.update",
  "invoices.delete",
  "invoices.export",
  "invoices.duplicate",
  "expenses.create",
  "expenses.read",
  "expenses.update",
  "expenses.delete",
  "expenses.export",
  "expenses.duplicate",
  "quotes.read",
  "quotes.create",
  "quotes.delete",
  "quotes.update",
  "quotes.duplicate",
  "quotes.export",
  "branches.read",
  "branches.create",
  "branches.delete",
  "branches.update",
  "branches.duplicate",
  "branches.export",
  "vendors.read",
  "vendors.create",
  "vendors.delete",
  "vendors.update",
  "vendors.duplicate",
  "vendors.export",
  "offices.read",
  "offices.create",
  "offices.delete",
  "offices.update",
  "offices.duplicate",
  "offices.export",
  "warehouses.read",
  "warehouses.create",
  "warehouses.delete",
  "warehouses.update",
  "warehouses.duplicate",
  "warehouses.export",
  "purchases.read",
  "purchases.create",
  "purchases.delete",
  "purchases.update",
  "purchases.duplicate",
  "purchases.export",
  "products.read",
  "products.create",
  "products.delete",
  "products.update",
  "products.duplicate",
  "products.export",
  "employees.read",
  "employees.create",
  "employees.delete",
  "employees.update",
  "employees.duplicate",
  "employees.export",
  "departments.read",
  "departments.create",
  "departments.delete",
  "departments.update",
  "departments.duplicate",
  "departments.export",
  "salaries.read",
  "salaries.create",
  "salaries.delete",
  "salaries.update",
  "salaries.duplicate",
  "salaries.export",
  "job_listings.read",
  "job_listings.create",
  "job_listings.delete",
  "job_listings.update",
  "job_listings.duplicate",
  "job_listings.export",
  "employee_requests.read",
  "employee_requests.create",
  "employee_requests.delete",
  "employee_requests.update",
  "employee_requests.duplicate",
  "employee_requests.export",
  "jobs.read",
  "jobs.create",
  "jobs.delete",
  "jobs.update",
  "jobs.duplicate",
  "jobs.export",
  "applicants.read",
  "applicants.create",
  "applicants.delete",
  "applicants.update",
  "applicants.duplicate",
  "applicants.export",
]);
export const products = pgTable(
  "products",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    name: text().notNull(),
    description: text(),
    price: numeric({ precision: 10, scale: 2 }).notNull(),
    sku: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    cost: numeric({ precision: 10, scale: 2 }),
    quantity: numeric({ precision: 10, scale: 2 }).default("0").notNull(),
    unit: text(),
    is_active: boolean().default(true).notNull(),
  },
  (table) => [
    index("products_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("products_sku_idx").using("btree", table.sku.asc().nullsLast().op("text_ops")),
    index("products_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const templates = pgTable(
  "templates",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    type: text().notNull(),
    content: jsonb().notNull(),
    is_default: boolean().default(false).notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("templates_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("templates_type_idx").using("btree", table.type.asc().nullsLast().op("text_ops")),
    index("templates_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    check("templates_type_check", sql`type = ANY (ARRAY['invoice'::text, 'quote'::text])`),
  ],
);
export const documents = pgTable(
  "documents",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    url: text().notNull(),
    file_path: text().notNull(),
    entity_id: uuid().notNull(),
    entity_type: text().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("documents_entity_id_idx").using(
      "btree",
      table.entity_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("documents_entity_type_idx").using(
      "btree",
      table.entity_type.asc().nullsLast().op("text_ops"),
    ),
    index("documents_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    check(
      "documents_entity_type_check",
      sql`entity_type = ANY (ARRAY['company'::text, 'expense'::text])`,
    ),
  ],
);
export const job_listing_jobs = pgTable(
  "job_listing_jobs",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    job_listing_id: uuid().notNull(),
    job_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("job_listing_jobs_job_id_idx").using(
      "btree",
      table.job_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("job_listing_jobs_job_listing_id_idx").using(
      "btree",
      table.job_listing_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.job_id],
      foreignColumns: [jobs.id],
      name: "job_listing_jobs_job_id_jobs_id_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.job_listing_id],
      foreignColumns: [job_listings.id],
      name: "job_listing_jobs_job_listing_id_job_listings_id_fk",
    }).onDelete("cascade"),
  ],
);
export const employee_requests = pgTable(
  "employee_requests",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    employee_id: uuid().notNull(),
    type: text().notNull(),
    status: text().default("pending").notNull(),
    title: text().notNull(),
    description: text(),
    start_date: date(),
    end_date: date(),
    amount: numeric({ precision: 10, scale: 2 }),
    attachments: jsonb().default([]),
    notes: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("employee_requests_created_at_idx").using(
      "btree",
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    index("employee_requests_employee_id_idx").using(
      "btree",
      table.employee_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("employee_requests_status_idx").using(
      "btree",
      table.status.asc().nullsLast().op("text_ops"),
    ),
    index("employee_requests_type_idx").using("btree", table.type.asc().nullsLast().op("text_ops")),
    index("employee_requests_user_id_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.employee_id],
      foreignColumns: [employees.id],
      name: "employee_requests_employee_id_employees_id_fk",
    }),
  ],
);
export const saml_providersInAuth = auth.table(
  "saml_providers",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    entity_id: text().notNull(),
    metadata_xml: text().notNull(),
    metadata_url: text(),
    attribute_mapping: jsonb(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    name_id_format: text(),
  },
  (table) => [
    index("saml_providers_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "saml_providers_sso_provider_id_fkey",
    }).onDelete("cascade"),
    unique("saml_providers_entity_id_key").on(table.entity_id),
    check("entity_id not empty", sql`char_length(entity_id) > 0`),
    check(
      "metadata_url not empty",
      sql`(metadata_url = NULL::text) OR (char_length(metadata_url) > 0)`,
    ),
    check("metadata_xml not empty", sql`char_length(metadata_xml) > 0`),
  ],
);
export const saml_relay_statesInAuth = auth.table(
  "saml_relay_states",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    request_id: text().notNull(),
    for_email: text(),
    redirect_to: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    flow_state_id: uuid(),
  },
  (table) => [
    index("saml_relay_states_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("saml_relay_states_for_email_idx").using(
      "btree",
      table.for_email.asc().nullsLast().op("text_ops"),
    ),
    index("saml_relay_states_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.flow_state_id],
      foreignColumns: [flow_stateInAuth.id],
      name: "saml_relay_states_flow_state_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "saml_relay_states_sso_provider_id_fkey",
    }).onDelete("cascade"),
    check("request_id not empty", sql`char_length(request_id) > 0`),
  ],
);
export const usersInAuth = auth.table(
  "users",
  {
    instance_id: uuid(),
    id: uuid().primaryKey().notNull(),
    aud: varchar({ length: 255 }),
    role: varchar({ length: 255 }),
    email: varchar({ length: 255 }),
    encrypted_password: varchar({ length: 255 }),
    email_confirmed_at: timestamp({ withTimezone: true, mode: "string" }),
    invited_at: timestamp({ withTimezone: true, mode: "string" }),
    confirmation_token: varchar({ length: 255 }),
    confirmation_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    recovery_token: varchar({ length: 255 }),
    recovery_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    email_change_token_new: varchar({ length: 255 }),
    email_change: varchar({ length: 255 }),
    email_change_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    last_sign_in_at: timestamp({ withTimezone: true, mode: "string" }),
    raw_app_meta_data: jsonb(),
    raw_user_meta_data: jsonb(),
    is_super_admin: boolean(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    phone: text().default(sql`NULL`),
    phone_confirmed_at: timestamp({ withTimezone: true, mode: "string" }),
    phone_change: text().default(sql`NULL`),
    phone_change_token: varchar({ length: 255 }).default(sql`NULL`),
    phone_change_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    confirmed_at: timestamp({ withTimezone: true, mode: "string" }).generatedAlwaysAs(
      sql`LEAST(email_confirmed_at, phone_confirmed_at)`,
    ),
    email_change_token_current: varchar({ length: 255 }).default(sql`NULL`),
    email_change_confirm_status: smallint().default(0),
    banned_until: timestamp({ withTimezone: true, mode: "string" }),
    reauthentication_token: varchar({ length: 255 }).default(sql`NULL`),
    reauthentication_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    is_sso_user: boolean().default(false).notNull(),
    deleted_at: timestamp({ withTimezone: true, mode: "string" }),
    is_anonymous: boolean().default(false).notNull(),
  },
  (table) => [
    uniqueIndex("confirmation_token_idx")
      .using("btree", table.confirmation_token.asc().nullsLast().op("text_ops"))
      .where(sql`((confirmation_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("email_change_token_current_idx")
      .using("btree", table.email_change_token_current.asc().nullsLast().op("text_ops"))
      .where(sql`((email_change_token_current)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("email_change_token_new_idx")
      .using("btree", table.email_change_token_new.asc().nullsLast().op("text_ops"))
      .where(sql`((email_change_token_new)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("reauthentication_token_idx")
      .using("btree", table.reauthentication_token.asc().nullsLast().op("text_ops"))
      .where(sql`((reauthentication_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("recovery_token_idx")
      .using("btree", table.recovery_token.asc().nullsLast().op("text_ops"))
      .where(sql`((recovery_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("users_email_partial_key")
      .using("btree", table.email.asc().nullsLast().op("text_ops"))
      .where(sql`(is_sso_user = false)`),
    index("users_instance_id_email_idx").using(
      "btree",
      sql`instance_id`,
      sql`lower((email)::text)`,
    ),
    index("users_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("users_is_anonymous_idx").using(
      "btree",
      table.is_anonymous.asc().nullsLast().op("bool_ops"),
    ),
    unique("users_phone_key").on(table.phone),
    check(
      "users_email_change_confirm_status_check",
      sql`(email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)`,
    ),
  ],
);
export const sso_providersInAuth = auth.table(
  "sso_providers",
  {
    id: uuid().primaryKey().notNull(),
    resource_id: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    uniqueIndex("sso_providers_resource_id_idx").using("btree", sql`lower(resource_id)`),
    check(
      "resource_id not empty",
      sql`(resource_id = NULL::text) OR (char_length(resource_id) > 0)`,
    ),
  ],
);
export const invoice_items = pgTable(
  "invoice_items",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    description: text().notNull(),
    quantity: numeric({ precision: 10, scale: 2 }).default("1").notNull(),
    unit_price: numeric({ precision: 10, scale: 2 }).notNull(),
    amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`(quantity * unit_price)`),
    invoice_id: uuid().notNull(),
    product_id: uuid(),
  },
  (table) => [
    index("invoice_items_invoice_id_idx").using(
      "btree",
      table.invoice_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.product_id],
      foreignColumns: [products.id],
      name: "invoice_items_product_id_fkey",
    }),
  ],
);
export const job_listings = pgTable(
  "job_listings",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    title: varchar({ length: 255 }).notNull(),
    description: text(),
    is_active: boolean().default(true).notNull(),
    slug: varchar({ length: 255 }).notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    is_public: boolean().default(false).notNull(),
  },
  (table) => [
    index("job_listings_slug_idx").using("btree", table.slug.asc().nullsLast().op("text_ops")),
    index("job_listings_title_idx").using("btree", table.title.asc().nullsLast().op("text_ops")),
    index("job_listings_user_id_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    unique("job_listings_slug_unique").on(table.slug),
  ],
);
export const offices = pgTable(
  "offices",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    short_address: text().notNull(),
    additional_number: text(),
    building_number: text().notNull(),
    street_name: text().notNull(),
    city: text().notNull(),
    region: text().notNull(),
    country: text().notNull(),
    zip_code: text().notNull(),
    phone: text(),
    email: text(),
    is_active: boolean().default(true).notNull(),
    user_id: uuid().notNull(),
    notes: text(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("offices_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("offices_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const flow_stateInAuth = auth.table(
  "flow_state",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid(),
    auth_code: text().notNull(),
    code_challenge_method: code_challenge_methodInAuth().notNull(),
    code_challenge: text().notNull(),
    provider_type: text().notNull(),
    provider_access_token: text(),
    provider_refresh_token: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    authentication_method: text().notNull(),
    auth_code_issued_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    index("flow_state_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("idx_auth_code").using("btree", table.auth_code.asc().nullsLast().op("text_ops")),
    index("idx_user_id_auth_method").using(
      "btree",
      table.user_id.asc().nullsLast().op("text_ops"),
      table.authentication_method.asc().nullsLast().op("text_ops"),
    ),
  ],
);
export const identitiesInAuth = auth.table(
  "identities",
  {
    provider_id: text().notNull(),
    user_id: uuid().notNull(),
    identity_data: jsonb().notNull(),
    provider: text().notNull(),
    last_sign_in_at: timestamp({ withTimezone: true, mode: "string" }),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    email: text().generatedAlwaysAs(sql`lower((identity_data ->> 'email'::text))`),
    id: uuid().defaultRandom().primaryKey().notNull(),
  },
  (table) => [
    index("identities_email_idx").using(
      "btree",
      table.email.asc().nullsLast().op("text_pattern_ops"),
    ),
    index("identities_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "identities_user_id_fkey",
    }).onDelete("cascade"),
    unique("identities_provider_id_provider_unique").on(table.provider_id, table.provider),
  ],
);
export const audit_log_entriesInAuth = auth.table(
  "audit_log_entries",
  {
    instance_id: uuid(),
    id: uuid().primaryKey().notNull(),
    payload: json(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    ip_address: varchar({ length: 64 }).default(sql`NULL`),
  },
  (table) => [
    index("audit_logs_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
  ],
);
export const instancesInAuth = auth.table("instances", {
  id: uuid().primaryKey().notNull(),
  uuid: uuid(),
  raw_base_config: text(),
  created_at: timestamp({ withTimezone: true, mode: "string" }),
  updated_at: timestamp({ withTimezone: true, mode: "string" }),
});
export const schema_migrationsInAuth = auth.table("schema_migrations", {
  version: varchar({ length: 255 }).primaryKey().notNull(),
});
export const sessionsInAuth = auth.table(
  "sessions",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    factor_id: uuid(),
    aal: aal_levelInAuth(),
    not_after: timestamp({ withTimezone: true, mode: "string" }),
    refreshed_at: timestamp({ mode: "string" }),
    user_agent: text(),
    ip: inet(),
    tag: text(),
  },
  (table) => [
    index("sessions_not_after_idx").using(
      "btree",
      table.not_after.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("sessions_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    index("user_id_created_at_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("timestamptz_ops"),
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "sessions_user_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const refresh_tokensInAuth = auth.table(
  "refresh_tokens",
  {
    instance_id: uuid(),
    id: bigserial({ mode: "bigint" }).primaryKey().notNull(),
    token: varchar({ length: 255 }),
    user_id: varchar({ length: 255 }),
    revoked: boolean(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    parent: varchar({ length: 255 }),
    session_id: uuid(),
  },
  (table) => [
    index("refresh_tokens_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("refresh_tokens_instance_id_user_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("text_ops"),
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("refresh_tokens_parent_idx").using(
      "btree",
      table.parent.asc().nullsLast().op("text_ops"),
    ),
    index("refresh_tokens_session_id_revoked_idx").using(
      "btree",
      table.session_id.asc().nullsLast().op("bool_ops"),
      table.revoked.asc().nullsLast().op("bool_ops"),
    ),
    index("refresh_tokens_updated_at_idx").using(
      "btree",
      table.updated_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.session_id],
      foreignColumns: [sessionsInAuth.id],
      name: "refresh_tokens_session_id_fkey",
    }).onDelete("cascade"),
    unique("refresh_tokens_token_unique").on(table.token),
  ],
);
export const mfa_factorsInAuth = auth.table(
  "mfa_factors",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    friendly_name: text(),
    factor_type: factor_typeInAuth().notNull(),
    status: factor_statusInAuth().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    secret: text(),
    phone: text(),
    last_challenged_at: timestamp({ withTimezone: true, mode: "string" }),
    web_authn_credential: jsonb(),
    web_authn_aaguid: uuid(),
  },
  (table) => [
    index("factor_id_created_at_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("timestamptz_ops"),
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    uniqueIndex("mfa_factors_user_friendly_name_unique")
      .using(
        "btree",
        table.friendly_name.asc().nullsLast().op("uuid_ops"),
        table.user_id.asc().nullsLast().op("text_ops"),
      )
      .where(sql`(TRIM(BOTH FROM friendly_name) <> ''::text)`),
    index("mfa_factors_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    uniqueIndex("unique_phone_factor_per_user").using(
      "btree",
      table.user_id.asc().nullsLast().op("text_ops"),
      table.phone.asc().nullsLast().op("text_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "mfa_factors_user_id_fkey",
    }).onDelete("cascade"),
    unique("mfa_factors_last_challenged_at_key").on(table.last_challenged_at),
  ],
);
export const one_time_tokensInAuth = auth.table(
  "one_time_tokens",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    token_type: one_time_token_typeInAuth().notNull(),
    token_hash: text().notNull(),
    relates_to: text().notNull(),
    created_at: timestamp({ mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ mode: "string" }).defaultNow().notNull(),
  },
  (table) => [
    index("one_time_tokens_relates_to_hash_idx").using(
      "hash",
      table.relates_to.asc().nullsLast().op("text_ops"),
    ),
    index("one_time_tokens_token_hash_hash_idx").using(
      "hash",
      table.token_hash.asc().nullsLast().op("text_ops"),
    ),
    uniqueIndex("one_time_tokens_user_id_token_type_key").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
      table.token_type.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "one_time_tokens_user_id_fkey",
    }).onDelete("cascade"),
    check("one_time_tokens_token_hash_check", sql`char_length(token_hash) > 0`),
  ],
);
export const mfa_amr_claimsInAuth = auth.table(
  "mfa_amr_claims",
  {
    session_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    authentication_method: text().notNull(),
    id: uuid().primaryKey().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.session_id],
      foreignColumns: [sessionsInAuth.id],
      name: "mfa_amr_claims_session_id_fkey",
    }).onDelete("cascade"),
    unique("mfa_amr_claims_session_id_authentication_method_pkey").on(
      table.session_id,
      table.authentication_method,
    ),
  ],
);
export const mfa_challengesInAuth = auth.table(
  "mfa_challenges",
  {
    id: uuid().primaryKey().notNull(),
    factor_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    verified_at: timestamp({ withTimezone: true, mode: "string" }),
    ip_address: inet().notNull(),
    otp_code: text(),
    web_authn_session_data: jsonb(),
  },
  (table) => [
    index("mfa_challenge_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.factor_id],
      foreignColumns: [mfa_factorsInAuth.id],
      name: "mfa_challenges_auth_factor_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const sso_domainsInAuth = auth.table(
  "sso_domains",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    domain: text().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    uniqueIndex("sso_domains_domain_idx").using("btree", sql`lower(domain)`),
    index("sso_domains_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "sso_domains_sso_provider_id_fkey",
    }).onDelete("cascade"),
    check("domain not empty", sql`char_length(domain) > 0`),
  ],
);
export const employees = pgTable(
  "employees",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    first_name: text().notNull(),
    last_name: text().notNull(),
    email: text().notNull(),
    phone: text(),
    hire_date: date(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    short_address: text(),
    additional_number: text(),
    building_number: text(),
    street_name: text(),
    city: text(),
    region: text(),
    country: text(),
    zip_code: text(),
    termination_date: date(),
    is_active: boolean().default(true).notNull(),
    department_id: uuid(),
    position: text(),
    salary: numeric({ precision: 10, scale: 2 }),
    notes: text(),
  },
  (table) => [
    index("employees_department_id_idx").using(
      "btree",
      table.department_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("employees_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("employees_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.department_id],
      foreignColumns: [departments.id],
      name: "employees_department_id_departments_id_fk",
    }).onDelete("set null"),
  ],
);
export const department_locations = pgTable(
  "department_locations",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    department_id: uuid().notNull(),
    location_type: text().notNull(),
    location_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.department_id],
      foreignColumns: [departments.id],
      name: "department_locations_department_id_departments_id_fk",
    }).onDelete("cascade"),
    unique("unique_department_location").on(
      table.department_id,
      table.location_type,
      table.location_id,
    ),
    check(
      "location_type_check",
      sql`location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])`,
    ),
  ],
);
export const quotes = pgTable(
  "quotes",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    quote_number: text().notNull(),
    issue_date: date().notNull(),
    expiry_date: date().notNull(),
    status: text().default("draft").notNull(),
    subtotal: numeric({ precision: 10, scale: 2 }).default("0").notNull(),
    tax_rate: numeric({ precision: 5, scale: 2 }).default("0"),
    notes: text(),
    client_id: uuid().notNull(),
    user_id: uuid().notNull(),
    tax_amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN (0)::numeric
    ELSE round((subtotal * tax_rate), 2)
END`),
    total: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN subtotal
    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
END`),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("quotes_client_id_idx").using("btree", table.client_id.asc().nullsLast().op("uuid_ops")),
    index("quotes_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
    index("quotes_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.client_id],
      foreignColumns: [clients.id],
      name: "quotes_client_id_fkey",
    }).onDelete("cascade"),
    check(
      "quotes_status_check",
      sql`status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])`,
    ),
  ],
);
export const salaries = pgTable(
  "salaries",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    employee_id: uuid().notNull(),
    amount: numeric({ precision: 10, scale: 2 }).notNull(),
    currency: text().default("USD").notNull(),
    payment_frequency: text().default("monthly").notNull(),
    start_date: date().notNull(),
    end_date: date(),
  },
  (table) => [
    index("salaries_employee_id_idx").using(
      "btree",
      table.employee_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("salaries_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.employee_id],
      foreignColumns: [employees.id],
      name: "salaries_employee_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const departments = pgTable(
  "departments",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    description: text(),
    user_id: uuid().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    is_active: boolean().default(true).notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("departments_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("departments_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const jobs = pgTable(
  "jobs",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    title: varchar({ length: 255 }).notNull(),
    description: text(),
    requirements: text(),
    location: varchar({ length: 255 }),
    department: varchar({ length: 255 }),
    type: varchar({ length: 50 }).notNull(),
    salary: numeric({ precision: 10, scale: 2 }),
    is_active: boolean().default(true).notNull(),
    start_date: date(),
    end_date: date(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("jobs_department_idx").using("btree", table.department.asc().nullsLast().op("text_ops")),
    index("jobs_title_idx").using("btree", table.title.asc().nullsLast().op("text_ops")),
    index("jobs_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const vendors = pgTable(
  "vendors",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text().notNull(),
    phone: text().notNull(),
    company: text().notNull(),
    short_address: text().notNull(),
    additional_number: text(),
    building_number: text().notNull(),
    street_name: text().notNull(),
    city: text().notNull(),
    region: text().notNull(),
    country: text().notNull(),
    zip_code: text().notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("vendors_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("vendors_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("vendors_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const warehouses = pgTable(
  "warehouses",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    code: text().notNull(),
    short_address: text().notNull(),
    additional_number: text(),
    building_number: text().notNull(),
    street_name: text().notNull(),
    city: text().notNull(),
    region: text().notNull(),
    country: text().notNull(),
    zip_code: text().notNull(),
    capacity: numeric({ precision: 10, scale: 2 }),
    is_active: boolean().default(true).notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("warehouses_code_idx").using("btree", table.code.asc().nullsLast().op("text_ops")),
    index("warehouses_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("warehouses_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    unique("warehouses_code_key").on(table.code),
  ],
);
export const branches = pgTable(
  "branches",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    code: text(),
    short_address: text().notNull(),
    additional_number: text(),
    building_number: text().notNull(),
    street_name: text().notNull(),
    city: text().notNull(),
    region: text().notNull(),
    country: text().notNull(),
    zip_code: text().notNull(),
    phone: text(),
    email: text(),
    manager: text(),
    is_active: boolean().default(true).notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("branches_code_idx").using("btree", table.code.asc().nullsLast().op("text_ops")),
    index("branches_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("branches_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    unique("branches_code_key").on(table.code),
  ],
);
export const companies = pgTable(
  "companies",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text().notNull(),
    phone: text(),
    website: text(),
    short_address: text(),
    additional_number: text(),
    building_number: text(),
    street_name: text(),
    city: text(),
    region: text(),
    country: text(),
    zip_code: text(),
    industry: text(),
    size: text(),
    notes: text(),
    is_active: boolean().default(true).notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("companies_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("companies_is_active_idx").using(
      "btree",
      table.is_active.asc().nullsLast().op("bool_ops"),
    ),
    index("companies_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
  ],
);
export const quote_items = pgTable(
  "quote_items",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    description: text().notNull(),
    quantity: numeric({ precision: 10, scale: 2 }).default("1").notNull(),
    unit_price: numeric({ precision: 10, scale: 2 }).notNull(),
    amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`(quantity * unit_price)`),
    quote_id: uuid().notNull(),
    product_id: uuid(),
  },
  (table) => [
    index("quote_items_quote_id_idx").using(
      "btree",
      table.quote_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.product_id],
      foreignColumns: [products.id],
      name: "quote_items_product_id_fkey",
    }),
    foreignKey({
      columns: [table.quote_id],
      foreignColumns: [quotes.id],
      name: "quote_items_quote_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const clients = pgTable(
  "clients",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text(),
    phone: text().notNull(),
    short_address: text().notNull(),
    additional_number: text(),
    building_number: text().notNull(),
    street_name: text().notNull(),
    city: text().notNull(),
    region: text().notNull(),
    country: text().notNull(),
    zip_code: text().notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    company: uuid(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("clients_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("clients_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("clients_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.company],
      foreignColumns: [companies.id],
      name: "clients_company_fkey",
    }),
  ],
);
export const user_enterprise_roles = pgTable(
  "user_enterprise_roles",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    role_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
  },
  (table) => [
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "user_enterprise_roles_user_id_fkey",
    }),
    unique("user_enterprise_roles_user_id_enterprise_id_key").on(
      table.user_id,
      table.enterprise_id,
    ),
  ],
);
export const profiles = pgTable(
  "profiles",
  {
    id: uuid().primaryKey().notNull(),
    email: text(),
    full_name: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
    user_settings: jsonb(),
  },
  (table) => [
    foreignKey({
      columns: [table.id],
      foreignColumns: [usersInAuth.id],
      name: "profiles_id_fkey",
    }).onDelete("cascade"),
    unique("profiles_email_key").on(table.email),
  ],
);
export const roles = pgTable(
  "roles",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    name: text().notNull(),
    description: text(),
    is_system: boolean().default(false).notNull(),
    enterprise_id: uuid().references(() => enterprises.id, { onDelete: "cascade" }),
  },
  (table) => [
    unique("roles_name_key").on(table.name),
    index("idx_roles_enterprise_id").using("btree", table.enterprise_id),
    check(
      "roles_enterprise_id_check",
      sql`(is_system = true AND enterprise_id IS NULL) OR (is_system = false AND enterprise_id IS NOT NULL)`,
    ),
  ],
);
export const permissions = pgTable(
  "permissions",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    role_id: uuid().notNull(),
    permission: text().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.role_id],
      foreignColumns: [roles.id],
      name: "permissions_role_id_fkey",
    }).onDelete("cascade"),
    index("permissions_role_id_idx").using("btree", table.role_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const enterprises = pgTable(
  "enterprises",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    name: text().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [],
);
export const memberships = pgTable(
  "memberships",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    profile_id: uuid(),
    enterprise_id: uuid(),
    role_id: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "memberships_enterprise_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.profile_id],
      foreignColumns: [profiles.id],
      name: "memberships_profile_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.role_id],
      foreignColumns: [roles.id],
      name: "memberships_role_id_fkey",
    }).onDelete("restrict"),
    unique("memberships_profile_id_enterprise_id_key").on(table.profile_id, table.enterprise_id),
  ],
);
export const invoices = pgTable(
  "invoices",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    enterprise_id: uuid(),
    invoice_number: text().notNull(),
    issue_date: date().default(sql`CURRENT_DATE`),
    due_date: date(),
    status: text().default("draft").notNull(),
    subtotal: numeric({ precision: 10, scale: 2 }).default("0").notNull(),
    tax_rate: numeric({ precision: 5, scale: 2 }).default("0"),
    tax_amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN (0)::numeric
    ELSE round((subtotal * tax_rate), 2)
END`),
    total: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN subtotal
    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
END`),
    notes: text(),
    client_id: uuid().notNull(),
    created_by: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    index("invoices_client_id_idx").using(
      "btree",
      table.client_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("invoices_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
    index("invoices_invoice_number_idx").using(
      "btree",
      table.invoice_number.asc().nullsLast().op("text_ops"),
    ),
    foreignKey({
      columns: [table.client_id],
      foreignColumns: [clients.id],
      name: "invoices_client_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.created_by],
      foreignColumns: [profiles.id],
      name: "invoices_created_by_fkey",
    }),
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "invoices_enterprise_id_fkey",
    }).onDelete("cascade"),
    check(
      "invoices_status_check",
      sql`status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'partially_paid'::text, 'overdue'::text, 'void'::text])`,
    ),
  ],
);
export const expenses = pgTable(
  "expenses",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    enterprise_id: uuid(),
    description: text(),
    amount: numeric(),
    incurred_at: date().default(sql`CURRENT_DATE`),
    created_by: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.created_by],
      foreignColumns: [profiles.id],
      name: "expenses_created_by_fkey",
    }),
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "expenses_enterprise_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const user_roles = pgTable(
  "user_roles",
  {
    user_id: uuid().notNull(),
    role_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" })
      .default(sql`timezone('utc'::text, now())`)
      .notNull(),
  },
  (table) => [
    index("user_roles_enterprise_id_idx").using(
      "btree",
      table.enterprise_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("user_roles_role_id_idx").using("btree", table.role_id.asc().nullsLast().op("uuid_ops")),
    index("user_roles_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "user_roles_user_id_fkey",
    }).onDelete("cascade"),
    primaryKey({
      columns: [table.user_id, table.role_id, table.enterprise_id],
      name: "user_roles_pkey",
    }),
  ],
);
export const user_permissions_view = pgView("user_permissions_view", {
  profile_id: uuid(),
  enterprise_id: uuid(),
  permission: text(),
}).as(
  sql`SELECT m.profile_id, m.enterprise_id, p.permission FROM memberships m JOIN permissions p ON m.role_id = p.role_id`,
);
</file>

<file path="src/hooks/main.store.ts">
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { Pukla } from "@/lib/types";
interface MainStoreState {
  openCommandMenu: boolean;
  setOpenCommandMenu: (openCommandMenu: boolean) => void;
  puklas: Pukla[];
  setPuklas: (puklas: Pukla[]) => void;
  selectedPukla: Pukla | null;
  setSelectedPukla: (pukla: Pukla) => void;
  itemAction: {
    id: string;
    action: string | null;
  } | null;
  setItemAction: (id: string, action: string | null) => void;
  urlTooLong: boolean;
  setUrlTooLong: (urlTooLong: boolean) => void;
  linkContentHeight: { id: string; height: number };
  setLinkContentHeight: (contentHeight: { id: string; height: number }) => void;
  headerContentHeight: { id: string; height: number };
  setHeaderContentHeight: (contentHeight: { id: string; height: number }) => void;
}
export const useMainStore = create<MainStoreState>()(
  persist(
    (set) => ({
      openCommandMenu: false,
      setOpenCommandMenu: (openCommandMenu: boolean) => set({ openCommandMenu }),
      puklas: [],
      setPuklas: (puklas: Pukla[]) => set({ puklas }),
      selectedPukla: null,
      setSelectedPukla: (pukla: Pukla) => {
        set({ selectedPukla: pukla });
      },
      itemAction: null,
      setItemAction: (id, action) => set({ itemAction: { id, action } }),
      urlTooLong: false,
      setUrlTooLong: (urlTooLong) => set({ urlTooLong }),
      linkContentHeight: { id: "", height: 0 },
      setLinkContentHeight: (linkContentHeight) => set({ linkContentHeight }),
      headerContentHeight: { id: "", height: 0 },
      setHeaderContentHeight: (headerContentHeight) => set({ headerContentHeight }),
    }),
    {
      name: "main-store",
      partialize: (state) => ({
        selectedPukla: state.selectedPukla,
      }),
      // onRehydrateStorage: () => (state) => {
      //   console.log('Rehydrated main store:', state); // Debug log
      // },
    },
  ),
);
export default useMainStore;
</file>

<file path="src/hooks/use-breakpoint.ts">
import React, { useState, useEffect } from "react";
export const useBreakpoint = () => {
  // Initialize breakpoint with a null value.
  const [breakpoint, setBreakpoint] = useState<any>(null);
  useEffect(() => {
    // Check if window is defined (i.e., if running on the client side)
    if (typeof window !== "undefined") {
      // Define the resize function within the effect.
      const resize = () => {
        setBreakpoint(window.innerWidth);
      };
      // Call resize initially to set the breakpoint based on the initial window size.
      resize();
      // Set up the resize event listener.
      window.addEventListener("resize", resize);
      // Clean up the event listener when the component is unmounted.
      return () => {
        window.removeEventListener("resize", resize);
      };
    }
  }, []); // The empty array ensures this useEffect runs once, similar to componentDidMount.
  return breakpoint;
};
</file>

<file path="src/hooks/use-clipboard.ts">
import { useState } from "react";
export function useClipboard({ timeout = 2000 } = {}): {
  copy: (value: any) => void;
  reset: () => void;
  error: Error | null;
  copied: boolean;
} {
  const [error, setError] = useState<Error | null>(null);
  const [copied, setCopied] = useState<boolean>(false);
  const [copyTimeout, setCopyTimeout] = useState<NodeJS.Timeout | null>(null);
  const handleCopyResult = (value: boolean) => {
    clearTimeout(copyTimeout as NodeJS.Timeout | undefined);
    setCopyTimeout(setTimeout(() => setCopied(false), timeout));
    setCopied(value);
  };
  const copy = (valueToCopy: any) => {
    if ("clipboard" in navigator) {
      navigator.clipboard
        .writeText(valueToCopy)
        .then(() => handleCopyResult(true))
        .catch((err) => setError(err));
    } else {
      setError(new Error("useClipboard: navigator.clipboard is not supported"));
    }
  };
  const reset = () => {
    setCopied(false);
    setError(null);
    clearTimeout(copyTimeout as NodeJS.Timeout | undefined);
  };
  return { copy, reset, error, copied };
}
</file>

<file path="src/hooks/use-data-table-actions.ts">
import { useTranslations } from "next-intl";
import { toast } from "sonner";
interface UseDataTableActionsProps<T extends { id: string }> {
  data?: T[];
  setSelectedRows: (ids: string[]) => void;
  setIsDeleteDialogOpen: (isOpen: boolean) => void;
  setIsFormDialogOpen: (isOpen: boolean) => void;
  setActionableItem: (item: T | null) => void;
  duplicateMutation: (id: string, options?: any) => void;
  moduleName: string;
}
export function useDataTableActions<T extends { id: string }>({
  data,
  setSelectedRows,
  setIsDeleteDialogOpen,
  setIsFormDialogOpen,
  setActionableItem,
  duplicateMutation,
  moduleName,
}: UseDataTableActionsProps<T>) {
  const t = useTranslations();
  const handleAction = async (action: string, rowId: string) => {
    if (action === "edit") {
      setIsFormDialogOpen(true);
      setActionableItem(data?.find((item) => item.id === rowId) || null);
    }
    if (action === "delete") {
      setSelectedRows([rowId]);
      setIsDeleteDialogOpen(true);
    }
    if (action === "duplicate") {
      const toastId = toast.loading(t("General.loading_operation"), {
        description: t(`${moduleName}.loading.duplicating`),
      });
      await duplicateMutation(rowId, {
        onSuccess: () => {
          toast.success(t("General.successful_operation"), {
            description: t(`${moduleName}.success.duplicated`),
          });
          toast.dismiss(toastId);
        },
        onError: () => {
          toast.error(t("General.error_operation"), {
            description: t(`${moduleName}.error.duplicating`),
          });
          toast.dismiss(toastId);
        },
      });
    }
  };
  return { handleAction };
}
</file>

<file path="src/hooks/use-delete-handler.ts">
// hooks/useDeleteHandler.ts
import { UseMutationResult } from "@tanstack/react-query";
import { useTranslations } from "next-intl";
import { toast } from "sonner";
type MutationFn<TVariables> = UseMutationResult<any, Error, TVariables>["mutateAsync"];
interface DeleteHandlerOptions<TVariables> {
  loading: string;
  success: string;
  error: string;
  onSuccess?: (data: any, variables: TVariables) => void;
  onError?: (error: Error, variables: TVariables) => void;
}
export const useDeleteHandler = () => {
  const t = useTranslations();
  const createDeleteHandler = <TVariables = string[]>(
    mutationFn: MutationFn<TVariables>,
    options: DeleteHandlerOptions<TVariables>,
  ) => {
    return async (variables: TVariables) => {
      const toastId = toast.loading(t("General.loading_operation"), {
        description: t(options.loading),
      });
      try {
        const data = await mutationFn(variables);
        toast.success(t("General.successful_operation"), {
          description: t(options.success),
        });
        options.onSuccess?.(data, variables);
      } catch (error) {
        const err = error as Error;
        toast.error(t("General.error_operation"), {
          description: err.message || t(options.error),
        });
        options.onError?.(err, variables);
      } finally {
        toast.dismiss(toastId);
      }
    };
  };
  return { createDeleteHandler };
};
</file>

<file path="src/hooks/use-media-query.ts">
import { useEffect, useState } from "react";
export function useMediaQuery(query: string) {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    media.addEventListener("change", listener);
    return () => media.removeEventListener("change", listener);
  }, [matches, query]);
  return matches;
}
</file>

<file path="src/hooks/use-mobile.ts">
import * as React from "react";
const MOBILE_BREAKPOINT = 768;
export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);
  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);
  return !!isMobile;
}
</file>

<file path="src/hooks/use-permission.ts">
import { useRouter } from "next/router";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
export function usePermission(requiredPermission: string) {
  const router = useRouter();
  const profile = useUserStore((state) => state.profile);
  const hasPermission = useUserStore((state) => state.hasPermission(requiredPermission));
  const loading = useUserStore((state) => state.loading);
  const permissions = useUserStore((state) => state.permissions);
  if (!loading && !hasPermission) {
    toast.error("You don't have permission to access this page");
  }
  return { hasPermission, isLoading: loading };
}
</file>

<file path="src/hooks/use-profile.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useTranslations } from "next-intl";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
// Types for our profile data
type ProfileData = {
  id: string;
  full_name?: string;
  avatar_url?: string;
  address?: string;
  email?: string; // Email may come from profile or user
  username?: string;
  user_settings?: Record<string, any>;
  // Add other profile fields as needed
};
// Type for profile update data
type ProfileUpdateData = Partial<Omit<ProfileData, "id">>;
// Function to fetch profile data
const fetchProfile = async (profile_id: string): Promise<ProfileData> => {
  if (!profile_id) {
    throw new Error("Profile ID is required");
  }
  const response = await fetch(`/api/profile/info?profile_id=${profile_id}`);
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || "Failed to fetch profile");
  }
  const data = await response.json();
  return data.profile;
};
// Function to update profile data
const updateProfile = async ({
  profile_id,
  data,
}: {
  profile_id: string;
  data: ProfileUpdateData;
}): Promise<ProfileData> => {
  if (!profile_id) {
    throw new Error("Profile ID is required");
  }
  const response = await fetch(`/api/profile/update?profile_id=${profile_id}`, {
    method: "PATCH",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || "Failed to update profile");
  }
  const responseData = await response.json();
  return responseData.profile;
};
// Hook to fetch profile data
export function useProfile(profile_id: string) {
  return useQuery({
    queryKey: ["profile", profile_id],
    queryFn: () => {
      if (!profile_id) {
        throw new Error("Cannot fetch profile: No profile ID provided");
      }
      return fetchProfile(profile_id);
    },
    enabled: !!profile_id,
    staleTime: 60 * 1000, // Consider data fresh for 1 minute
    retry: (failureCount, error) => {
      // Don't retry if the error is due to missing profile_id
      if (error instanceof Error && error.message.includes("No profile ID provided")) {
        return false;
      }
      // Otherwise retry up to 3 times
      return failureCount < 3;
    },
  });
}
// Hook to update profile data
export function useUpdateProfile() {
  const queryClient = useQueryClient();
  const userStore = useUserStore();
  const t = useTranslations();
  return useMutation({
    mutationFn: updateProfile,
    onSuccess: (data) => {
      // Invalidate the profile query to refetch
      queryClient.invalidateQueries({ queryKey: ["profile", data.id] });
      // Also update the profile in the user store to keep both in sync
      // This helps with components that still use the user store
      if (userStore.profile) {
        // Create a compatible user store profile object by preserving original values
        // and overriding with new data
        const updatedProfile = {
          ...userStore.profile,
          full_name: data.full_name || userStore.profile.full_name,
          avatar_url: data.avatar_url || userStore.profile.avatar_url,
          address: data.address || userStore.profile.address,
          email: data.email || userStore.profile.email,
          username: data.username || userStore.profile.username,
          // Careful handling of user_settings to preserve the required fields
          user_settings: {
            currency: userStore.profile.user_settings.currency,
            calendar_type: userStore.profile.user_settings.calendar_type,
            timezone: data.user_settings?.timezone || userStore.profile.user_settings.timezone,
            notifications: userStore.profile.user_settings.notifications,
            // Preserve the navigation settings
            navigation:
              data.user_settings?.navigation || userStore.profile.user_settings.navigation,
            // Preserve hidden menu items
            hidden_menu_items:
              data.user_settings?.hidden_menu_items ||
              userStore.profile.user_settings.hidden_menu_items,
          },
        };
        userStore.setProfile(updatedProfile);
      }
      toast.success(t("Settings.saved_successfully"));
    },
    onError: (error) => {
      console.error("Error updating profile:", error);
      toast.error(t("Settings.error_saving"));
    },
  });
}
// For integrating with the existing user store when needed
export function useUserAndProfile(profile_id: string) {
  const { data: profile, isLoading, error } = useProfile(profile_id);
  const userStore = useUserStore();
  return {
    profile: profile || userStore.profile,
    user: userStore.user,
    isLoading,
    error,
  };
}
// Example of how to use these hooks in components:
/*
// For fetching profile data:
const { data: profile, isLoading, error } = useProfile(profile_id);
// For updating profile data:
const updateProfileMutation = useUpdateProfile();
const handleSubmit = (formData) => {
  updateProfileMutation.mutate({
    profile_id: "user-profile-id",
    data: {
      full_name: formData.name,
      email: formData.email,
      // other fields
    }
  });
};
*/
</file>

<file path="src/hooks/use-shortcuts.ts">
import { useEffect } from "react";
export type KeyboardModifiers = {
  alt: boolean;
  ctrl: boolean;
  meta: boolean;
  mod: boolean;
  shift: boolean;
};
export type Hotkey = KeyboardModifiers & {
  key?: string;
};
type CheckHotkeyMatch = (event: KeyboardEvent) => boolean;
export function parseHotkey(hotkey: string): Hotkey {
  const keys = hotkey
    .toLowerCase()
    .split("+")
    .map((part) => part.trim());
  const modifiers: KeyboardModifiers = {
    alt: keys.includes("alt"),
    ctrl: keys.includes("ctrl"),
    meta: keys.includes("meta"),
    mod: keys.includes("mod"),
    shift: keys.includes("shift"),
  };
  const reservedKeys = ["alt", "ctrl", "meta", "shift", "mod"];
  const freeKey = keys.find((key) => !reservedKeys.includes(key));
  return {
    ...modifiers,
    key: freeKey,
  };
}
function isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {
  const { alt, ctrl, meta, mod, shift, key } = hotkey;
  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;
  if (alt !== altKey) {
    return false;
  }
  if (mod) {
    if (!ctrlKey && !metaKey) {
      return false;
    }
  } else {
    if (ctrl !== ctrlKey) {
      return false;
    }
    if (meta !== metaKey) {
      return false;
    }
  }
  if (shift !== shiftKey) {
    return false;
  }
  if (
    key &&
    (pressedKey.toLowerCase() === key.toLowerCase() ||
      event.code.replace("Key", "").toLowerCase() === key.toLowerCase())
  ) {
    return true;
  }
  return false;
}
export function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {
  return (event) => isExactHotkey(parseHotkey(hotkey), event);
}
export interface HotkeyItemOptions {
  preventDefault?: boolean;
}
//   type HotkeyItem = [string, (event: any) => void, HotkeyItemOptions?];
export function getHotkeyHandler(hotkeys: HotkeyItem[]) {
  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {
    const _event = "nativeEvent" in event ? event.nativeEvent : event;
    hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {
      if (getHotkeyMatcher(hotkey)(_event)) {
        if (options.preventDefault) {
          event.preventDefault();
        }
        handler(_event);
      }
    });
  };
}
export type HotkeyItem = [
  string,
  (event: KeyboardEvent) => void,
  HotkeyItemOptions?,
];
function shouldFireEvent(
  event: KeyboardEvent,
  tagsToIgnore: string[],
  triggerOnContentEditable = false,
) {
  if (event.target instanceof HTMLElement) {
    if (triggerOnContentEditable) {
      return !tagsToIgnore.includes(event.target.tagName);
    }
    return (
      !event.target.isContentEditable &&
      !tagsToIgnore.includes(event.target.tagName)
    );
  }
  return true;
}
export function useShortcuts(
  hotkeys: HotkeyItem[],
  tagsToIgnore: string[] = ["INPUT", "TEXTAREA", "SELECT"],
  triggerOnContentEditable = false,
) {
  useEffect(() => {
    const keydownListener = (event: KeyboardEvent) => {
      hotkeys.forEach(
        ([hotkey, handler, options = { preventDefault: true }]) => {
          if (
            getHotkeyMatcher(hotkey)(event) &&
            shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)
          ) {
            if (options.preventDefault) {
              event.preventDefault();
            }
            handler(event);
          }
        },
      );
    };
    document.documentElement.addEventListener("keydown", keydownListener);
    return () =>
      document.documentElement.removeEventListener("keydown", keydownListener);
  }, [hotkeys]);
}
</file>

<file path="src/hooks/use-slider-with-input.ts">
"use client";
import { useCallback, useState } from "react";
type UseSliderWithInputProps = {
  minValue?: number;
  maxValue?: number;
  initialValue?: number[];
  defaultValue?: number[];
};
export function useSliderWithInput({
  minValue = 0,
  maxValue = 100,
  initialValue = [minValue],
  defaultValue = [minValue],
}: UseSliderWithInputProps) {
  const [sliderValue, setSliderValue] = useState(initialValue);
  const [inputValues, setInputValues] = useState(initialValue.map((v) => v.toString()));
  const validateAndUpdateValue = useCallback(
    (rawValue: string, index: number) => {
      if (rawValue === "" || rawValue === "-") {
        const newInputValues = [...inputValues];
        newInputValues[index] = "0";
        setInputValues(newInputValues);
        const newSliderValues = [...sliderValue];
        newSliderValues[index] = 0;
        setSliderValue(newSliderValues);
        return;
      }
      const numValue = parseFloat(rawValue);
      if (isNaN(numValue)) {
        const newInputValues = [...inputValues];
        newInputValues[index] = sliderValue[index].toString();
        setInputValues(newInputValues);
        return;
      }
      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue));
      if (sliderValue.length > 1) {
        if (index === 0) {
          clampedValue = Math.min(clampedValue, sliderValue[1]);
        } else {
          clampedValue = Math.max(clampedValue, sliderValue[0]);
        }
      }
      const newSliderValues = [...sliderValue];
      newSliderValues[index] = clampedValue;
      setSliderValue(newSliderValues);
      const newInputValues = [...inputValues];
      newInputValues[index] = clampedValue.toString();
      setInputValues(newInputValues);
    },
    [sliderValue, inputValues, minValue, maxValue],
  );
  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
      const newValue = e.target.value;
      if (newValue === "" || /^-?\d*\.?\d*$/.test(newValue)) {
        const newInputValues = [...inputValues];
        newInputValues[index] = newValue;
        setInputValues(newInputValues);
      }
    },
    [inputValues],
  );
  const handleSliderChange = useCallback((newValue: number[]) => {
    setSliderValue(newValue);
    setInputValues(newValue.map((v) => v.toString()));
  }, []);
  const resetToDefault = useCallback(() => {
    setSliderValue(defaultValue);
    setInputValues(defaultValue.map((v) => v.toString()));
  }, [defaultValue]);
  return {
    sliderValue,
    inputValues,
    validateAndUpdateValue,
    handleInputChange,
    handleSliderChange,
    resetToDefault,
  };
}
</file>

<file path="src/hooks/use-social-links-store.ts">
import { create } from "zustand";
type SocialLinkProps = {
  id?: string;
  link: string;
  platform: string;
};
interface SocialLinksStoreState {
  socialLinks: SocialLinkProps[];
  setSocialLinks: (newLinks: SocialLinkProps[]) => void;
  sortSocialLinks: (
    puklaId: string,
    socialLinks: any,
    sortSocialLinksHandler: any,
  ) => void;
  addSocialLink: (
    puklaId: string,
    newLink: SocialLinkProps,
    addSocialLinkHandler: any,
  ) => void;
  deleteSocialLink: (
    puklaId: string,
    socialLinkId: string,
    deleteSocialLinkHandler: any,
  ) => Promise<void>;
  updateSocialLink: (
    puklaId: string,
    socialLinkId: string,
    newLink: SocialLinkProps,
    updateSocialLinkHandler: any,
  ) => void;
}
export const useSocialLinksStore = create<SocialLinksStoreState>()(
  (set, get) => ({
    socialLinks: [],
    setSocialLinks: (newLinks) => {
      set({ socialLinks: newLinks });
    },
    sortSocialLinks: async (puklaId, socialLinks, sortSocialLinksHandler) => {
      set((state) => ({ socialLinks }));
      await sortSocialLinksHandler(puklaId, socialLinks);
    },
    addSocialLink: async (puklaId, newLink, addSocialLinkHandler) => {
      let newSocialLinkId = await addSocialLinkHandler(
        puklaId,
        newLink.platform,
        newLink.link,
      );
      set((state) => ({
        socialLinks: [
          { id: newSocialLinkId, ...newLink },
          ...state.socialLinks,
        ],
      }));
    },
    updateSocialLink: async (
      puklaId,
      socialLinkId,
      newLink,
      updateSocialLinkHandler,
    ) => {
      await updateSocialLinkHandler(
        puklaId,
        socialLinkId,
        newLink.platform,
        newLink.link,
      );
      set((state) => ({
        socialLinks: state.socialLinks.map((link) =>
          link.id === socialLinkId ? { id: socialLinkId, ...newLink } : link,
        ),
      }));
    },
    deleteSocialLink: async (
      puklaId,
      socialLinkId,
      deleteSocialLinkHandler,
    ) => {
      await deleteSocialLinkHandler(socialLinkId, puklaId);
      set((state) => ({
        socialLinks: state.socialLinks.filter(
          (link) => link.id !== socialLinkId,
        ),
      }));
    },
  }),
);
</file>

<file path="src/hooks/use-sticky-header.ts">
import { useState, useEffect } from "react";
// Define your custom hook
function useStickyHeader() {
  const [isSticky, setIsSticky] = useState(false);
  const handleScroll = () => {
    if (window.pageYOffset > 0) {
      setIsSticky(true);
    } else {
      setIsSticky(false);
    }
  };
  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);
  return isSticky;
}
export default useStickyHeader;
</file>

<file path="src/hooks/use-window-size.ts">
import { useEffect, useState } from "react";
interface WindowSize {
  width: number | undefined;
  height: number | undefined;
}
export const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState<WindowSize>({
    width: undefined,
    height: undefined,
  });
  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  return windowSize;
};
</file>

<file path="src/lib/constants/animations.ts">
import { Variants } from "motion/react";
import { AnimationType } from "../types";
type AnimationConfig = {
  [key in AnimationType]: {
    container: Variants;
    item: Variants;
    preview: Variants;
  };
};
export const ANIMATIONS: AnimationConfig = {
  none: {
    container: {
      initial: { opacity: 1 },
      animate: { opacity: 1, transition: { staggerChildren: 0 } },
    },
    item: {
      initial: { opacity: 1 },
      animate: { opacity: 1, transition: { duration: 0 } },
    },
    preview: {
      initial: { opacity: 1 },
      hover: { opacity: 1, transition: { duration: 0 } },
    },
  },
  slide_up: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0, y: 10 },
      animate: { opacity: 1, y: 0 },
    },
    preview: {
      initial: { y: 0, opacity: 1 },
      hover: { y: [10, 0], opacity: [0, 1], transition: { duration: 0.1 } },
    },
  },
  slide_down: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0, y: -10 },
      animate: { opacity: 1, y: 0 },
    },
    preview: {
      initial: { y: 0, opacity: 1 },
      hover: { y: [-10, 0], opacity: [0, 1], transition: { duration: 0.1 } },
    },
  },
  slide_left: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0, x: -10 },
      animate: { opacity: 1, x: 0 },
    },
    preview: {
      initial: { x: 0, opacity: 1 },
      hover: { x: [-10, 0], opacity: [0, 1], transition: { duration: 0.1 } },
    },
  },
  slide_right: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0, x: 10 },
      animate: { opacity: 1, x: 0 },
    },
    preview: {
      initial: { x: 0, opacity: 1 },
      hover: { x: [10, 0], opacity: [0, 1], transition: { duration: 0.1 } },
    },
  },
  fade: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1 },
      },
    },
    preview: {
      initial: { opacity: 1 },
      hover: { opacity: [0, 1], transition: { duration: 0.1 } },
    },
  },
  scale: {
    container: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.1, staggerChildren: 0.1 },
      },
    },
    item: {
      initial: { opacity: 0, scale: 0.8 },
      animate: {
        opacity: 1,
        scale: 1,
        transition: { duration: 0.1 },
      },
    },
    preview: {
      initial: { opacity: 1, scale: 1 },
      hover: {
        scale: [0.8, 1],
        opacity: [0, 1],
        transition: { duration: 0.1 },
      },
    },
  },
};
</file>

<file path="src/lib/constants/countries.ts">
export const countries = [
  // Gulf Countries (GCC) - Starting with Saudi Arabia
  {
    value: "sa",
    label: "Saudi Arabia",
    code: "+966",
    placeholder: "5X XXX XXXX",
  },
  {
    value: "ae",
    label: "United Arab Emirates",
    code: "+971",
    placeholder: "5X XXX XXXX",
  },
  {
    value: "kw",
    label: "Kuwait",
    code: "+965",
    placeholder: "5XXX XXXX",
  },
  {
    value: "qa",
    label: "Qatar",
    code: "+974",
    placeholder: "3XXX XXXX",
  },
  {
    value: "bh",
    label: "Bahrain",
    code: "+973",
    placeholder: "3XXX XXXX",
  },
  {
    value: "om",
    label: "Oman",
    code: "+968",
    placeholder: "9XXX XXXX",
  },
  // Other Arab Countries
  {
    value: "eg",
    label: "Egypt",
    code: "+20",
    placeholder: "1XX XXX XXXX",
  },
  {
    value: "jo",
    label: "Jordan",
    code: "+962",
    placeholder: "7XXX XXXX",
  },
  {
    value: "iq",
    label: "Iraq",
    code: "+964",
    placeholder: "7XX XXX XXXX",
  },
  {
    value: "sy",
    label: "Syria",
    code: "+963",
    placeholder: "9XX XXX XXX",
  },
  {
    value: "lb",
    label: "Lebanon",
    code: "+961",
    placeholder: "7X XXX XXX",
  },
  {
    value: "ye",
    label: "Yemen",
    code: "+967",
    placeholder: "7XX XXX XXX",
  },
  {
    value: "ps",
    label: "Palestine",
    code: "+970",
    placeholder: "5XX XXX XXX",
  },
  {
    value: "sd",
    label: "Sudan",
    code: "+249",
    placeholder: "9X XXX XXXX",
  },
  {
    value: "ly",
    label: "Libya",
    code: "+218",
    placeholder: "9X XXX XXXX",
  },
  {
    value: "tn",
    label: "Tunisia",
    code: "+216",
    placeholder: "2X XXX XXX",
  },
  {
    value: "dz",
    label: "Algeria",
    code: "+213",
    placeholder: "5XX XXX XXX",
  },
  {
    value: "ma",
    label: "Morocco",
    code: "+212",
    placeholder: "6XX XXX XXX",
  },
  {
    value: "mr",
    label: "Mauritania",
    code: "+222",
    placeholder: "3XXX XXXX",
  },
  {
    value: "so",
    label: "Somalia",
    code: "+252",
    placeholder: "6X XXX XXX",
  },
  {
    value: "dj",
    label: "Djibouti",
    code: "+253",
    placeholder: "7X XX XX XX",
  },
  {
    value: "km",
    label: "Comoros",
    code: "+269",
    placeholder: "3XX XXXX",
  },
  // Rest of the World (Alphabetically)
  {
    value: "af",
    label: "Afghanistan",
    code: "+93",
    placeholder: "7X XXX XXXX",
  },
  {
    value: "al",
    label: "Albania",
    code: "+355",
    placeholder: "6X XXX XXXX",
  },
  {
    value: "ad",
    label: "Andorra",
    code: "+376",
    placeholder: "3XX XXX",
  },
  {
    value: "ao",
    label: "Angola",
    code: "+244",
    placeholder: "9XX XXX XXX",
  },
  {
    value: "ar",
    label: "Argentina",
    code: "+54",
    placeholder: "11 XXXX XXXX",
  },
  {
    value: "am",
    label: "Armenia",
    code: "+374",
    placeholder: "XX XXX XXX",
  },
  {
    value: "au",
    label: "Australia",
    code: "+61",
    placeholder: "4XX XXX XXX",
  },
  {
    value: "at",
    label: "Austria",
    code: "+43",
    placeholder: "6XX XXX XXX",
  },
  {
    value: "az",
    label: "Azerbaijan",
    code: "+994",
    placeholder: "4X XXX XXXX",
  },
  {
    value: "bs",
    label: "Bahamas",
    code: "+1242",
    placeholder: "XXX XXXX",
  },
  {
    value: "bd",
    label: "Bangladesh",
    code: "+880",
    placeholder: "1XXX XXXXXX",
  },
  {
    value: "by",
    label: "Belarus",
    code: "+375",
    placeholder: "XX XXX XXXX",
  },
  {
    value: "be",
    label: "Belgium",
    code: "+32",
    placeholder: "4XX XX XX XX",
  },
  {
    value: "br",
    label: "Brazil",
    code: "+55",
    placeholder: "11 9XXXX XXXX",
  },
  {
    value: "bg",
    label: "Bulgaria",
    code: "+359",
    placeholder: "8XX XXX XXX",
  },
  {
    value: "kh",
    label: "Cambodia",
    code: "+855",
    placeholder: "1X XXX XXX",
  },
  {
    value: "ca",
    label: "Canada",
    code: "+1",
    placeholder: "(XXX) XXX-XXXX",
  },
  {
    value: "cn",
    label: "China",
    code: "+86",
    placeholder: "1XX XXXX XXXX",
  },
  {
    value: "dk",
    label: "Denmark",
    code: "+45",
    placeholder: "XX XX XX XX",
  },
  {
    value: "fi",
    label: "Finland",
    code: "+358",
    placeholder: "4X XXX XXXX",
  },
  {
    value: "fr",
    label: "France",
    code: "+33",
    placeholder: "6 XX XX XX XX",
  },
  {
    value: "de",
    label: "Germany",
    code: "+49",
    placeholder: "15X XXXXXXX",
  },
  {
    value: "gr",
    label: "Greece",
    code: "+30",
    placeholder: "6XX XXX XXXX",
  },
  {
    value: "hk",
    label: "Hong Kong",
    code: "+852",
    placeholder: "XXXX XXXX",
  },
  {
    value: "hu",
    label: "Hungary",
    code: "+36",
    placeholder: "3X XXX XXXX",
  },
  {
    value: "is",
    label: "Iceland",
    code: "+354",
    placeholder: "XXX XXXX",
  },
  {
    value: "in",
    label: "India",
    code: "+91",
    placeholder: "9XXXXXXXXX",
  },
  {
    value: "id",
    label: "Indonesia",
    code: "+62",
    placeholder: "8XX-XXX-XXX",
  },
  {
    value: "ir",
    label: "Iran",
    code: "+98",
    placeholder: "9XX XXX XXXX",
  },
  {
    value: "ie",
    label: "Ireland",
    code: "+353",
    placeholder: "8X XXX XXXX",
  },
  {
    value: "it",
    label: "Italy",
    code: "+39",
    placeholder: "3XX XXX XXXX",
  },
  {
    value: "jp",
    label: "Japan",
    code: "+81",
    placeholder: "90-XXXX-XXXX",
  },
  {
    value: "my",
    label: "Malaysia",
    code: "+60",
    placeholder: "1X-XXX XXXX",
  },
  {
    value: "mx",
    label: "Mexico",
    code: "+52",
    placeholder: "1XX XXX XXXX",
  },
  {
    value: "nl",
    label: "Netherlands",
    code: "+31",
    placeholder: "6 XXXXXXXX",
  },
  {
    value: "nz",
    label: "New Zealand",
    code: "+64",
    placeholder: "2X XXX XXXX",
  },
  {
    value: "no",
    label: "Norway",
    code: "+47",
    placeholder: "4XX XX XXX",
  },
  {
    value: "pk",
    label: "Pakistan",
    code: "+92",
    placeholder: "3XX XXXXXXX",
  },
  {
    value: "ph",
    label: "Philippines",
    code: "+63",
    placeholder: "9XX XXX XXXX",
  },
  {
    value: "pl",
    label: "Poland",
    code: "+48",
    placeholder: "5XX XXX XXX",
  },
  {
    value: "pt",
    label: "Portugal",
    code: "+351",
    placeholder: "9XX XXX XXX",
  },
  {
    value: "ro",
    label: "Romania",
    code: "+40",
    placeholder: "7XX XXX XXX",
  },
  {
    value: "ru",
    label: "Russia",
    code: "+7",
    placeholder: "9XX XXX-XX-XX",
  },
  {
    value: "sg",
    label: "Singapore",
    code: "+65",
    placeholder: "XXXX XXXX",
  },
  {
    value: "za",
    label: "South Africa",
    code: "+27",
    placeholder: "8X XXX XXXX",
  },
  {
    value: "kr",
    label: "South Korea",
    code: "+82",
    placeholder: "10-XXXX-XXXX",
  },
  {
    value: "es",
    label: "Spain",
    code: "+34",
    placeholder: "6XX XXX XXX",
  },
  {
    value: "se",
    label: "Sweden",
    code: "+46",
    placeholder: "7X-XXX XX XX",
  },
  {
    value: "ch",
    label: "Switzerland",
    code: "+41",
    placeholder: "7X XXX XX XX",
  },
  {
    value: "tw",
    label: "Taiwan",
    code: "+886",
    placeholder: "9XX XXX XXX",
  },
  {
    value: "th",
    label: "Thailand",
    code: "+66",
    placeholder: "8X XXX XXXX",
  },
  {
    value: "tr",
    label: "Turkey",
    code: "+90",
    placeholder: "5XX XXX XXXX",
  },
  {
    value: "gb",
    label: "United Kingdom",
    code: "+44",
    placeholder: "7XXX XXXXXX",
  },
  {
    value: "us",
    label: "United States",
    code: "+1",
    placeholder: "(XXX) XXX-XXXX",
  },
  {
    value: "vn",
    label: "Vietnam",
    code: "+84",
    placeholder: "9XX XXX XXX",
  },
];
</file>

<file path="src/lib/constants/currencies.ts">
export const currencies = ["sar", "usd"] as const;
</file>

<file path="src/lib/constants/invoice-consts.ts">
export const INVOICE_STATUSES = [
  "completed",
  "pending",
  "failed",
  "open",
  "active",
  "paid",
  "paused",
  "cancelled",
  "abandoned",
  "expired",
] as const;
export const INVOICE_RECURRENCE = [
  "daily",
  "weekly",
  "monthly",
  "quarterly",
  "semiyearly",
  "yearly",
];
export const INVOICE_CYCLES = [
  "1_day",
  "1_week",
  "1_month",
  "3_months",
  "6_months",
  "1_year",
];
</file>

<file path="src/lib/constants/locales.ts">
export const locales = [
  {
    code: "en",
    name: "English",
    nativeName: "English",
    flagCDN: "https://flagcdn.com/w40/us.png",
    locale: "en-US",
    isRTL: false,
  },
  {
    code: "ar",
    name: "Arabic",
    nativeName: "العربية",
    flagCDN: "https://flagcdn.com/w40/sa.png",
    locale: "ar",
    isRTL: true,
  },
  {
    code: "ur",
    name: "Urdu",
    nativeName: "اردو",
    flagCDN: "https://flagcdn.com/w40/pk.png",
    locale: "ur",
    isRTL: true,
  },
  {
    code: "hi",
    name: "Hindi",
    nativeName: "हिंदी",
    flagCDN: "https://flagcdn.com/w40/in.png",
    locale: "hi",
    isRTL: true,
  },
];
</file>

<file path="src/lib/constants/payment-consts.ts">
export type AcceptedPaymentMethods =
  | "apple_pay"
  | "credit_card"
  | "paypal"
  | "bank_transfer"
  | "tabby"
  | "stc";
</file>

<file path="src/lib/constants/product-consts.ts">
export const PRODUCT_STATUSES = ["active", "inactive"] as const;
export const PRODUCT_CATEGORIES = [
  "design",
  "hosting",
  "domain",
  "website",
  "email",
  "automation",
  "ssl",
  "other",
] as const;
</file>

<file path="src/lib/api-handler.ts">
import { SupabaseClient } from "@supabase/supabase-js";
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-props";
type Options = {
  tableName: string;
  customHandlers?: Partial<{
    GET: (
      supabase: SupabaseClient<any, "public", any>,
      user_id: string,
      req: NextApiRequest,
    ) => Promise<any>;
    POST: (
      supabase: SupabaseClient<any, "public", any>,
      user_id: string,
      enterprise_id: string,
      req: NextApiRequest,
    ) => Promise<any>;
    DELETE: (
      supabase: SupabaseClient<any, "public", any>,
      user_id: string,
      req: NextApiRequest,
    ) => Promise<any>;
  }>;
};
async function getUserEnterpriseId(
  supabase: SupabaseClient<any, "public", any>,
  user_id: string,
): Promise<string> {
  const { data: membership, error } = await supabase
    .from("memberships")
    .select("enterprise_id")
    .eq("profile_id", user_id)
    .maybeSingle();
  if (error) {
    console.error("Error fetching enterprise ID:", error);
    throw new Error("Failed to retrieve enterprise association");
  }
  if (!membership?.enterprise_id) {
    throw new Error("User is not associated with an enterprise");
  }
  return membership.enterprise_id;
}
export function createApiHandler({ tableName, customHandlers = {} }: Options) {
  return async function handler(req: NextApiRequest, res: NextApiResponse) {
    const supabase = createClient({ req, res, query: {}, resolvedUrl: "" });
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user?.id) {
      console.error("API Auth Error:", authError);
      return res.status(401).json({ message: "Unauthorized" });
    }
    const user_id = user.id;
    let enterprise_id: string | null = null;
    try {
      enterprise_id = await getUserEnterpriseId(supabase, user_id);
      switch (req.method) {
        case "GET":
          if (customHandlers.GET) {
            const data = await customHandlers.GET(supabase, user_id, req);
            return res.status(200).json(data);
          }
          const { data: listData, error: listError } = await supabase
            .from(tableName)
            .select("*")
            .eq("enterprise_id", enterprise_id)
            .order("created_at", { ascending: false });
          if (listError) throw listError;
          return res.status(200).json(listData);
        case "POST":
          if (customHandlers.POST) {
            const data = await customHandlers.POST(supabase, user_id, enterprise_id, req);
            return res.status(201).json(data);
          }
          const { data: createdData, error: createError } = await supabase
            .from(tableName)
            .insert({
              ...req.body,
              user_id,
              enterprise_id,
            })
            .select()
            .single();
          if (createError) throw createError;
          return res.status(201).json(createdData);
        case "DELETE":
          if (customHandlers.DELETE) {
            await customHandlers.DELETE(supabase, user_id, req);
            return res.status(204).end();
          }
          const { ids } = req.body;
          if (!Array.isArray(ids) || ids.length === 0) {
            return res
              .status(400)
              .json({ message: "Invalid request body: 'ids' array is required." });
          }
          const { error: deleteError } = await supabase
            .from(tableName)
            .delete()
            .in("id", ids)
            .eq("enterprise_id", enterprise_id);
          if (deleteError) throw deleteError;
          return res.status(204).end();
        default:
          res.setHeader("Allow", ["GET", "POST", "DELETE"]);
          return res.status(405).json({ message: `Method ${req.method} not allowed` });
      }
    } catch (error: any) {
      console.error(`Error in ${req.method} /api/resource/${tableName}:`, error);
      const message = error.message || `Error handling ${req.method} for ${tableName}`;
      const status = typeof error.status === "number" ? error.status : 400;
      return res.status(status).json({ message });
    }
  };
}
</file>

<file path="src/lib/breadcrumbs-list.ts">
// Define route mappings
type RouteMap = {
  [key: string]: {
    label: string;
    translationKey?: string;
  };
};
// Main route mapping
export const routeMap: RouteMap = {
  "/dashboard": { label: "Dashboard", translationKey: "Dashboard.title" },
  "/invoices": { label: "Invoices", translationKey: "Invoices.title" },
  "/quotes": { label: "Quotes", translationKey: "Quotes.title" },
  "/companies": { label: "Companies", translationKey: "Companies.title" },
  "/clients": { label: "Clients", translationKey: "Clients.title" },
  "/products": { label: "Products", translationKey: "Products.title" },
  "/employees": { label: "Employees", translationKey: "Employees.title" },
  "/employee-requests": { label: "Employee Requests", translationKey: "EmployeeRequests.title" },
  "/jobs": { label: "Jobs", translationKey: "Jobs.title" },
  "/joblistings": { label: "Job Listings", translationKey: "JobListings.title" },
  "/applicants": { label: "Applicants", translationKey: "Applicants.title" },
  "/settings": { label: "Settings", translationKey: "Settings.title" },
  "/vendors": { label: "Vendors", translationKey: "Vendors.title" },
  "/salaries": { label: "Salaries", translationKey: "Salaries.title" },
  "/reports": { label: "Reports", translationKey: "Reports.title" },
  "/warehouses": { label: "Warehouses", translationKey: "Warehouses.title" },
  "/branches": { label: "Branches", translationKey: "Branches.title" },
  "/departments": { label: "Departments", translationKey: "Departments.title" },
  "/offices": { label: "Offices", translationKey: "Offices.title" },
  "/expenses": { label: "Expenses", translationKey: "Expenses.title" },
  "/roles": { label: "Roles", translationKey: "Roles.title" },
};
// Dynamic route patterns and their handling
export const dynamicRoutePatterns = [
  {
    pattern: /^\/dashboard$/,
    breadcrumbs: [{ path: "/dashboard", labelKey: "Dashboard.title" }],
  },
  {
    pattern: /^\/invoices\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/invoices", labelKey: "Invoices.title" },
      { path: "", labelKey: "Invoices.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/invoices\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/invoices", labelKey: "Invoices.title" },
      { path: "", labelKey: "Invoices.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/quotes\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/quotes", labelKey: "Quotes.title" },
      { path: "/quotes/add", labelKey: "Quotes.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/clients\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/clients", labelKey: "Clients.title" },
      { path: "/clients/add", labelKey: "Clients.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/clients\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/clients", labelKey: "Clients.title" },
      { path: "", labelKey: "Clients.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/products\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/products", labelKey: "Products.title" },
      { path: "/products/add", labelKey: "Products.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/products\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/products", labelKey: "Products.title" },
      { path: "", labelKey: "Products.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/employees\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/employees", labelKey: "Employees.title" },
      { path: "/employees/add", labelKey: "Employees.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/employees\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/employees", labelKey: "Employees.title" },
      { path: "", labelKey: "Employees.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/employee-requests\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/employee-requests", labelKey: "EmployeeRequests.title" },
      { path: "/employee-requests/add", labelKey: "EmployeeRequests.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/employee-requests\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/employee-requests", labelKey: "EmployeeRequests.title" },
      { path: "", labelKey: "EmployeeRequests.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/jobs\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/jobs", labelKey: "Jobs.title" },
      { path: "/jobs/add", labelKey: "Jobs.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/jobs\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/jobs", labelKey: "Jobs.title" },
      { path: "", labelKey: "Jobs.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/warehouses\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/warehouses", labelKey: "Warehouses.title" },
      { path: "/warehouses/add", labelKey: "Warehouses.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/warehouses\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/warehouses", labelKey: "Warehouses.title" },
      { path: "", labelKey: "Warehouses.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/branches\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/branches", labelKey: "Branches.title" },
      { path: "/branches/add", labelKey: "Branches.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/branches\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/branches", labelKey: "Branches.title" },
      { path: "", labelKey: "Branches.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/companies\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/companies", labelKey: "Companies.title" },
      { path: "/companies/add", labelKey: "Companies.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/companies\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/companies", labelKey: "Companies.title" },
      { path: "", labelKey: "Companies.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/vendors\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/vendors", labelKey: "Vendors.title" },
      { path: "/vendors/add", labelKey: "Vendors.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/vendors\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/vendors", labelKey: "Vendors.title" },
      { path: "", labelKey: "Vendors.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/salaries\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/salaries", labelKey: "Salaries.title" },
      { path: "/salaries/add", labelKey: "Salaries.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/salaries\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/salaries", labelKey: "Salaries.title" },
      { path: "", labelKey: "Salaries.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/departments\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/departments", labelKey: "Departments.title" },
      { path: "/departments/add", labelKey: "Departments.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/departments\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/departments", labelKey: "Departments.title" },
      { path: "", labelKey: "Departments.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/offices\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/offices", labelKey: "Offices.title" },
      { path: "/offices/add", labelKey: "Offices.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/offices\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/offices", labelKey: "Offices.title" },
      { path: "", labelKey: "Offices.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/expenses\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/expenses", labelKey: "Expenses.title" },
      { path: "/expenses/add", labelKey: "Expenses.add_new", is_active: true },
    ],
  },
  {
    pattern: /^\/expenses\/edit\/(.+)$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/expenses", labelKey: "Expenses.title" },
      { path: "", labelKey: "Expenses.edit", is_active: true },
    ],
  },
  {
    pattern: /^\/roles\/add$/,
    breadcrumbs: [
      { path: "/dashboard", labelKey: "Dashboard.title" },
      { path: "/roles", labelKey: "Roles.title" },
    ],
  },
];
</file>

<file path="src/lib/command-list.ts">
import { ModulesOptions } from "../../tanad.config";
export const commandList = [
  {
    heading: "Administration.title",
    items: [
      {
        icon: ModulesOptions.dashboard.icon,
        label: ModulesOptions.dashboard.label,
        shortcut: "⌘D",
        href: ModulesOptions.dashboard.url,
      },
      {
        icon: ModulesOptions.companies.icon,
        label: ModulesOptions.companies.label,
        shortcut: "⌘C",
        href: ModulesOptions.companies.url,
      },
      {
        icon: ModulesOptions.clients.icon,
        label: ModulesOptions.clients.label,
        shortcut: "⌘C",
        href: ModulesOptions.clients.url,
      },
      {
        icon: ModulesOptions.vendors.icon,
        label: ModulesOptions.vendors.label,
        shortcut: "⌘V",
        href: ModulesOptions.vendors.url,
      },
    ],
  },
  {
    heading: "Sales.title",
    items: [
      {
        icon: ModulesOptions.invoices.icon,
        label: ModulesOptions.invoices.label,
        shortcut: "⌘I",
        href: ModulesOptions.invoices.url,
      },
      {
        icon: ModulesOptions.quotes.icon,
        label: ModulesOptions.quotes.label,
        shortcut: "⌘Q",
        href: ModulesOptions.quotes.url,
      },
      {
        icon: ModulesOptions.products.icon,
        label: ModulesOptions.products.label,
        shortcut: "⌘P",
        href: ModulesOptions.products.url,
      },
    ],
  },
  {
    heading: "Locations.title",
    items: [
      {
        icon: ModulesOptions.offices.icon,
        label: ModulesOptions.offices.label,
        shortcut: "⌘O",
        href: ModulesOptions.offices.url,
      },
      {
        icon: ModulesOptions.warehouses.icon,
        label: ModulesOptions.warehouses.label,
        shortcut: "⌘W",
        href: ModulesOptions.warehouses.url,
      },
      {
        icon: ModulesOptions.branches.icon,
        label: ModulesOptions.branches.label,
        shortcut: "⌘B",
        href: ModulesOptions.branches.url,
      },
    ],
  },
  {
    heading: "HumanResources.title",
    items: [
      {
        icon: ModulesOptions.employees.icon,
        label: ModulesOptions.employees.label,
        shortcut: "⌘E",
        href: ModulesOptions.employees.url,
      },
      {
        icon: ModulesOptions.employeeRequests.icon,
        label: ModulesOptions.employeeRequests.label,
        shortcut: "⌘R",
        href: ModulesOptions.employeeRequests.url,
      },
      {
        icon: ModulesOptions.jobs.icon,
        label: ModulesOptions.jobs.label,
        shortcut: "⌘J",
        href: ModulesOptions.jobs.url,
      },
      {
        icon: ModulesOptions.departments.icon,
        label: ModulesOptions.departments.label,
        shortcut: "⌘D",
        href: ModulesOptions.departments.url,
      },
      {
        icon: ModulesOptions.expenses.icon,
        label: ModulesOptions.expenses.label,
        shortcut: "⌘X",
        href: ModulesOptions.expenses.url,
      },
      {
        icon: ModulesOptions.salaries.icon,
        label: ModulesOptions.salaries.label,
        shortcut: "⌘S",
        href: ModulesOptions.salaries.url,
      },
    ],
  },
  {
    heading: "Navigation.organization",
    items: [
      {
        icon: ModulesOptions.users.icon,
        label: ModulesOptions.users.label,
        shortcut: "⌘U",
        href: ModulesOptions.users.url,
      },
      {
        icon: ModulesOptions.roles.icon,
        label: ModulesOptions.roles.label,
        shortcut: "⌘R",
        href: ModulesOptions.roles.url,
      },
      {
        icon: ModulesOptions.settings.icon,
        label: ModulesOptions.settings.label,
        shortcut: "⌘S",
        href: ModulesOptions.settings.url,
      },
    ],
  },
];
</file>

<file path="src/lib/constants.ts">
import { PuklaThemeProps } from "./types";
// Validation
export const DOMAIN_REGEX = /^[a-zA-Z0-9-]+$/; // Allows letters, numbers, and hyphens
export const MAX_SLUG_LENGTH = 32;
export const CACHE_KEY = (user_id: string) => `user_cache_${user_id}`;
export const FREE_PLAN_ID = "price_1QfPy8CVtUnAWEKBdr1JAb5w";
export const fakeAnalyticsData = [
  {
    country: "Saudi Arabia",
    city: "Riyadh",
    mobile: 847,
    desktop: 392,
    total: 1239,
  },
  {
    country: "Bahrain",
    city: "Manama",
    mobile: 283,
    desktop: 156,
    total: 439,
  },
  {
    country: "Kuwait",
    city: "Kuwait City",
    mobile: 412,
    desktop: 245,
    total: 657,
  },
  {
    country: "United Arab Emirates",
    city: "Dubai",
    mobile: 1256,
    desktop: 864,
    total: 2120,
  },
  {
    country: "Qatar",
    city: "Doha",
    mobile: 734,
    desktop: 428,
    total: 1162,
  },
  {
    country: "Saudi Arabia",
    city: "Jeddah",
    mobile: 623,
    desktop: 289,
    total: 912,
  },
  {
    country: "Oman",
    city: "Muscat",
    mobile: 342,
    desktop: 187,
    total: 529,
  },
];
export const blacklist = [
  "users",
  "user",
  "admins",
  "admin",
  "editor",
  "billing",
  "analytics",
  "analytic",
  "auth",
  "login",
  "log-in",
  "sign-in",
  "sign-up",
  "register",
  "logout",
  "profile",
  "settings",
  "account",
  "password",
  "email",
  "phone",
  "reset-password",
  "forgot-password",
  "verify-email",
  "verify-phone",
  "verify-password",
  "verify-email-code",
  "verify-phone-code",
  "verify-password-code",
  "theme",
  "themes",
  "feature",
  "features",
  "pricing",
  "contact",
  "contacts",
  "help",
  "report-ip",
  "report",
  "reports",
  "support",
  "terms",
  "privacy",
  "blog",
  "appeal",
  "dashboard",
  "dashboards",
  "appeals",
  "404",
  "sex",
  "porn",
  "adult",
  "nude",
  "nsfw",
  "xxx",
  "butt",
  "boobs",
  "pussy",
  "admin",
  "moderator",
  "mod",
  "root",
  "system",
  "support",
  "help",
  "staff",
  "official",
  "security",
  "test",
  "beta",
  "null",
  "void",
  "undefined",
  "fuck",
  "shit",
  "bitch",
  "asshole",
  "bastard",
  "cunt",
  "dick",
  "pussy",
  "nigger",
  "nigga",
  "faggot",
  "retard",
  "slut",
  "whore",
  "rape",
  "kill",
  "terrorist",
  "isis",
  "hitler",
  "nazi",
  "kkk",
  "pedo",
  "pedophile",
  "scam",
  "fraud",
  "hacker",
  "virus",
  "malware",
  "phish",
  "spam",
  "bot",
  "porn",
  "sex",
  "xxx",
  "cum",
  "suck",
  "blowjob",
  "anal",
  "deepthroat",
  "cock",
  "vagina",
  "boobs",
  "tits",
  "nipples",
  "milf",
  "gay",
  "lesbian",
  "trans",
  "tranny",
  "hooker",
  "escort",
  "stripper",
  "prostitute",
  "suicide",
  "selfharm",
  "cutting",
  "depression",
  "drugs",
  "cocaine",
  "heroin",
  "meth",
  "weed",
  "marijuana",
  "ecstasy",
  "lsd",
  "overdose",
  "alcoholic",
  "drunk",
  "hangover",
  "gambling",
  "casino",
  "lottery",
  "fake",
  "imposter",
  "clone",
  "impersonate",
  "fakeaccount",
  "deepfake",
  "racist",
  "homophobic",
  "bigot",
  "misogynist",
  "childabuse",
  "abuser",
  "domesticviolence",
  "molester",
  "stalker",
];
export const predefinedThemes: PuklaThemeProps[] = [
  {
    theme_name: "Default",
    is_free: true,
    button_color: "#000000",
    text_color: "#000000",
    background_color: "#ffffff",
    button_text_color: "#ffffff",
    button_hover_color: "#000000",
    button_border_color: "#000000",
    link_color: "#000000",
    primary_color: "#000000",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Ocean",
    is_free: true,
    button_color: "#2563eb",
    text_color: "#1e3a8a",
    background_color: "#dbeafe",
    button_text_color: "#ffffff",
    button_hover_color: "#1d4ed8",
    button_border_color: "#1d4ed8",
    link_color: "#2563eb",
    primary_color: "#2563eb",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Sunset",
    is_free: true,
    button_color: "#ea580c",
    text_color: "#7c2d12",
    background_color: "#ffedd5",
    button_text_color: "#ffffff",
    button_hover_color: "#c2410c",
    button_border_color: "#c2410c",
    link_color: "#ea580c",
    primary_color: "#ea580c",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Forest",
    is_free: false,
    button_color: "#166534",
    text_color: "#14532d",
    background_color: "#dcfce7",
    button_text_color: "#ffffff",
    button_hover_color: "#15803d",
    button_border_color: "#15803d",
    link_color: "#166534",
    primary_color: "#166534",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Royal",
    is_free: false,
    button_color: "#7e22ce",
    text_color: "#581c87",
    background_color: "#f3e8ff",
    button_text_color: "#ffffff",
    button_hover_color: "#6b21a8",
    button_border_color: "#6b21a8",
    link_color: "#7e22ce",
    primary_color: "#7e22ce",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Cherry",
    is_free: false,
    button_color: "#be123c",
    text_color: "#881337",
    background_color: "#ffe4e6",
    button_text_color: "#ffffff",
    button_hover_color: "#9f1239",
    button_border_color: "#9f1239",
    link_color: "#be123c",
    primary_color: "#be123c",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Midnight",
    is_free: false,
    button_color: "#1e293b",
    text_color: "#0f172a",
    background_color: "#f1f5f9",
    button_text_color: "#ffffff",
    button_hover_color: "#334155",
    button_border_color: "#334155",
    link_color: "#1e293b",
    primary_color: "#1e293b",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Desert",
    is_free: false,
    button_color: "#a16207",
    text_color: "#854d0e",
    background_color: "#fef9c3",
    button_text_color: "#ffffff",
    button_hover_color: "#ca8a04",
    button_border_color: "#ca8a04",
    link_color: "#a16207",
    primary_color: "#a16207",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Emerald",
    is_free: false,
    button_color: "#047857",
    text_color: "#065f46",
    background_color: "#d1fae5",
    button_text_color: "#ffffff",
    button_hover_color: "#059669",
    button_border_color: "#059669",
    link_color: "#047857",
    primary_color: "#047857",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Rose Gold",
    is_free: false,
    button_color: "#be185d",
    text_color: "#9d174d",
    background_color: "#fdf2f8",
    button_text_color: "#ffffff",
    button_hover_color: "#db2777",
    button_border_color: "#db2777",
    link_color: "#be185d",
    primary_color: "#be185d",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Forest",
    is_free: false,
    button_color: "#166534",
    text_color: "#14532d",
    background_color: "#dcfce7",
    button_text_color: "#ffffff",
    button_hover_color: "#15803d",
    button_border_color: "#15803d",
    link_color: "#166534",
    primary_color: "#166534",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Autumn",
    is_free: false,
    button_color: "#b45309",
    text_color: "#92400e",
    background_color: "#fff7ed",
    button_text_color: "#ffffff",
    button_hover_color: "#d97706",
    button_border_color: "#d97706",
    link_color: "#b45309",
    primary_color: "#b45309",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Slate",
    is_free: false,
    button_color: "#475569",
    text_color: "#334155",
    background_color: "#f8fafc",
    button_text_color: "#ffffff",
    button_hover_color: "#64748b",
    button_border_color: "#64748b",
    link_color: "#475569",
    primary_color: "#475569",
    border_color: "#000000",
    border_radius: "8px",
  },
  {
    theme_name: "Indigo",
    is_free: false,
    button_color: "#4338ca",
    text_color: "#3730a3",
    background_color: "#eef2ff",
    button_text_color: "#ffffff",
    button_hover_color: "#4f46e5",
    button_border_color: "#4f46e5",
    link_color: "#4338ca",
    primary_color: "#4338ca",
    border_color: "#000000",
    border_radius: "8px",
  },
];
</file>

<file path="src/lib/dummy-factory.ts">
export const generateDummySalary = () => {
  const form = (window as any).salaryForm;
  if (form) {
    // form.setValue("employee_id", "1");
    form.setValue("salary", "100000");
    form.setValue("employee_name", "John Doe");
    form.setValue("pay_period_start", "2021-01-01");
    form.setValue("pay_period_end", "2021-01-31");
    form.setValue("payment_date", "2021-01-31");
    form.setValue("gross_amount", 100000);
    form.setValue("net_amount", 10000);
    form.setValue(
      "deductions",
      JSON.stringify({
        tax: 10000,
        insurance: 20000,
        retirement: 30000,
      }),
    );
  }
};
export const generateDummyEmployee = () => {
  const form = (window as any).employeeForm;
  if (form) {
    form.setValue("first_name", "John");
    form.setValue("last_name", "Doe");
    form.setValue("email", "john.doe@example.com");
    form.setValue("phone", "1234567890");
    form.setValue("position", "Software Engineer");
    form.setValue("hire_date", new Date());
    form.setValue("salary", "100000");
    form.setValue("status", "active");
    form.setValue("notes", "This is a note");
  }
};
</file>

<file path="src/lib/dummy-generator.ts">
// This will generate fake emails, fake names, fake numbers etc
export const generateDummyData = () => {
  const fakeFirstNames = [
    "John",
    "Jane",
    "Jim",
    "Jill",
    "Jack",
    "Jill",
    "Jim",
    "Jill",
    "Jim",
    "Jill",
  ];
  const fakeLastNames = [
    "Doe",
    "Smith",
    "Johnson",
    "Williams",
    "Brown",
    "Jones",
    "Garcia",
    "Miller",
    "Davis",
    "Rodriguez",
  ];
  const fakeEmails = [
    "john@example.com",
    "jane@example.com",
    "jim@example.com",
    "jill@example.com",
    "jack@example.com",
  ];
  const fakeNumbers = ["1234567890", "0987654321", "1234567890", "0987654321", "1234567890"];
  const fakeCompanies = ["Company 1", "Company 2", "Company 3", "Company 4", "Company 5"];
  const fakeAddresses = [
    "1234 Dummy St",
    "5678 Fake Ave",
    "9012 Main St",
    "3456 Maple Rd",
    "7890 Oak Blvd",
  ];
  const fakeCities = ["New York", "Los Angeles", "Chicago", "Houston", "Miami"];
  const fakeStates = ["NY", "CA", "IL", "TX", "FL"];
  const fakeZipCodes = ["10001", "90038", "60601", "77001", "33131"];
  const fakeDescriptions = [
    "Description 1",
    "Description 2",
    "Description 3",
    "Description 4",
    "Description 5",
  ];
  const fakeLocations = ["Office", "Branch", "Warehouse"];
  const fakeJobTitles = [
    "Software Engineer",
    "Product Manager",
    "Sales Manager",
    "Marketing Manager",
    "HR Manager",
  ];
  const fakeJobDescriptions = [
    "Description 1",
    "Description 2",
    "Description 3",
    "Description 4",
    "Description 5",
  ];
  const fakeJobRequirements = [
    "Requirement 1",
    "Requirement 2",
    "Requirement 3",
    "Requirement 4",
    "Requirement 5",
  ];
  const fakeJobLocations = ["Office", "Branch", "Warehouse"];
  const fakeJobDepartments = ["Sales", "Marketing", "HR", "IT", "Finance"];
  const fakeJobTypes = ["Full-Time", "Part-Time", "Contract", "Temporary"];
  const fakeJobSalaries = ["100000", "50000", "75000", "120000", "80000"];
  const fakeJobIsActive = [true, false];
  const fakeEmployeeStatus = ["active", "inactive", "on_leave", "terminated"];
  const fakeEmployeeDepartments = ["Sales", "Marketing", "HR", "IT", "Finance"];
  const fakeEmployeePositions = [
    "Software Engineer",
    "Product Manager",
    "Sales Manager",
    "Marketing Manager",
    "HR Manager",
  ];
  const fakeEmployeeSalaries = ["100000", "50000", "75000", "120000", "80000"];
  const fakeEmployeeNotes = ["Note 1", "Note 2", "Note 3", "Note 4", "Note 5"];
  const fakeExpenseCategories = ["Office Supplies", "Marketing", "HR", "IT", "Finance"];
  const generateRandomDate = () => {
    const start_date = new Date("2021-01-01");
    const end_date = new Date();
    return new Date(
      start_date.getTime() + Math.random() * (end_date.getTime() - start_date.getTime()),
    );
  };
  return {
    pick: (array: any[]) => array[Math.floor(Math.random() * array.length)],
    stringNumber: String(Math.random().toString(36).substring(2, 15)),
    expense_category:
      fakeExpenseCategories[Math.floor(Math.random() * fakeExpenseCategories.length)],
    randomString: Math.random().toString(36).substring(2, 15),
    randomNumber: Math.floor(Math.random() * 1000000),
    randomDate: generateRandomDate(),
    employee_status: fakeEmployeeStatus[Math.floor(Math.random() * fakeEmployeeStatus.length)],
    employee_department:
      fakeEmployeeDepartments[Math.floor(Math.random() * fakeEmployeeDepartments.length)],
    employee_position:
      fakeEmployeePositions[Math.floor(Math.random() * fakeEmployeePositions.length)],
    employee_hire_date: generateRandomDate(),
    employee_salary: fakeEmployeeSalaries[Math.floor(Math.random() * fakeEmployeeSalaries.length)],
    employee_notes: fakeEmployeeNotes[Math.floor(Math.random() * fakeEmployeeNotes.length)],
    job_location: fakeJobLocations[Math.floor(Math.random() * fakeJobLocations.length)],
    job_department: fakeJobDepartments[Math.floor(Math.random() * fakeJobDepartments.length)],
    job_type: fakeJobTypes[Math.floor(Math.random() * fakeJobTypes.length)],
    job_salary: fakeJobSalaries[Math.floor(Math.random() * fakeJobSalaries.length)],
    job_is_active: fakeJobIsActive[Math.floor(Math.random() * fakeJobIsActive.length)],
    job_start_date: generateRandomDate(),
    job_end_date: generateRandomDate(),
    job_title: fakeJobTitles[Math.floor(Math.random() * fakeJobTitles.length)],
    job_description: fakeJobDescriptions[Math.floor(Math.random() * fakeJobDescriptions.length)],
    requirements: fakeJobRequirements[Math.floor(Math.random() * fakeJobRequirements.length)],
    first_name: fakeFirstNames[Math.floor(Math.random() * fakeFirstNames.length)],
    last_name: fakeLastNames[Math.floor(Math.random() * fakeLastNames.length)],
    full_name: `${fakeFirstNames[Math.floor(Math.random() * fakeFirstNames.length)]} ${fakeLastNames[Math.floor(Math.random() * fakeLastNames.length)]}`,
    description: fakeDescriptions[Math.floor(Math.random() * fakeDescriptions.length)],
    email: fakeEmails[Math.floor(Math.random() * fakeEmails.length)],
    phone: fakeNumbers[Math.floor(Math.random() * fakeNumbers.length)],
    company: fakeCompanies[Math.floor(Math.random() * fakeCompanies.length)],
    address: fakeAddresses[Math.floor(Math.random() * fakeAddresses.length)],
    city: fakeCities[Math.floor(Math.random() * fakeCities.length)],
    state: fakeStates[Math.floor(Math.random() * fakeStates.length)],
    zip_code: fakeZipCodes[Math.floor(Math.random() * fakeZipCodes.length)],
    locations: fakeLocations[Math.floor(Math.random() * fakeLocations.length)],
  };
};
</file>

<file path="src/lib/filter-utils.ts">
import { FilterCondition } from "@/types/common.type";
export const applyFilters = <T>(
  data: T[],
  filterConditions: FilterCondition[],
  filterCaseSensitive: boolean,
) => {
  if (!filterConditions.length) return data;
  return data.filter((item) => {
    return filterConditions.reduce((pass, condition, index) => {
      let matches = false;
      const value = item[condition.field as keyof T];
      const filterValue = condition.value;
      if (condition.operator === "isEmpty") {
        matches = !value;
      } else if (condition.operator === "isNotEmpty") {
        matches = Boolean(value);
      } else if (typeof value === "string") {
        const stringValue = String(value);
        const compareValue = filterCaseSensitive ? stringValue : stringValue.toLowerCase();
        const compareFilter = filterCaseSensitive ? filterValue : filterValue.toLowerCase();
        switch (condition.operator) {
          case "equals":
            matches = compareValue === compareFilter;
            break;
          case "contains":
            matches = compareValue.includes(compareFilter);
            break;
          case "startsWith":
            matches = compareValue.startsWith(compareFilter);
            break;
          case "endsWith":
            matches = compareValue.endsWith(compareFilter);
            break;
        }
      } else if (typeof value === "number") {
        const numValue = Number(filterValue);
        switch (condition.operator) {
          case "equals":
            matches = value === numValue;
            break;
          case "greaterThan":
            matches = value > numValue;
            break;
          case "lessThan":
            matches = value < numValue;
            break;
          case "between":
            const [min, max] = filterValue.split(",").map(Number);
            matches = value >= min && value <= max;
            break;
        }
      } else if (value && typeof value === "object" && "getTime" in value) {
        const dateValue = new Date(value as unknown as Date);
        const filterDate = new Date(filterValue);
        switch (condition.operator) {
          case "equals":
            matches = dateValue.getTime() === filterDate.getTime();
            break;
          case "before":
            matches = dateValue < filterDate;
            break;
          case "after":
            matches = dateValue > filterDate;
            break;
          case "between":
            const [start, end] = filterValue.split(",").map((d) => new Date(d.trim()));
            matches = dateValue >= start && dateValue <= end;
            break;
        }
      }
      return index === 0
        ? matches
        : condition.conjunction === "and"
          ? pass && matches
          : pass || matches;
    }, true);
  });
};
</file>

<file path="src/lib/operations.ts">
import { toast } from "sonner";
import { createClient } from "@/utils/supabase/component";
import { LinkItemProps, Pukla } from "./types";
type OperationOptions = {
  toasts: {
    error?: string;
    success?: string;
  };
};
export const checkExistingSlug = async (slug: string) => {
  const supabase = createClient();
  const { data, error } = await supabase.from("puklas").select("*").eq("slug", slug).single();
  return data;
};
export const fetchPuklasWithLinkCount = async (user_id: string, options?: OperationOptions) => {
  const supabase = createClient();
  const { data, error } = await supabase
    .from("puklas")
    .select(
      `
      *,
      pukla_links (id, item_type)
      `,
    )
    .eq("user_id", user_id);
  if (error) {
    console.error("Error fetching puklas with link count:", error);
    toast.error(options?.toasts?.error || "An error occurred");
    return [];
  }
  // Map the data to include the link count
  const puklasWithLinkCount = data.map((pukla) => ({
    ...pukla,
    link_count: pukla.pukla_links?.filter((item: any) => item.item_type === "link").length || 0,
  }));
  return puklasWithLinkCount;
};
export const fetchPuklas = async (user_id: string, options: OperationOptions) => {
  const supabase = createClient();
  const { data, error } = await supabase.from("puklas").select("*").eq("user_id", user_id);
  if (error) {
    console.error("Error fetching pukla links:", error);
    toast.error(options.toasts.error);
    return [];
  }
  return data || []; // Return an empty array if no links exist
};
export const fetchPukla = async (puklaId: string, options: OperationOptions) => {
  const supabase = createClient();
  const { data, error } = await supabase.from("puklas").select("*").eq("id", puklaId).single();
  if (error) {
    console.error("Error fetching pukla:", error);
    toast.error(options.toasts.error);
    return null;
  }
  return data;
};
export const deletePukla = async (id: string, options: OperationOptions) => {
  const supabase = createClient();
  const { data, error } = await supabase.from("puklas").delete().eq("id", id);
  if (error) {
    console.error("Error deleting pukla:", error);
    toast.error(options.toasts.error);
    return [];
  } else {
    toast.success(options.toasts.success);
  }
  return data;
};
export const fetchPuklaItems = async (puklaId: string | undefined, options: OperationOptions) => {
  const supabase = createClient();
  if (!puklaId) {
    console.error("No puklaId provided to fetchPuklaItems");
    return [];
  }
  const { data, error } = await supabase
    .from("pukla_links")
    .select("*")
    .eq("pukla_id", puklaId)
    .order("position", { ascending: true });
  if (error) {
    console.error("Error fetching pukla links:", error);
    toast.error(options.toasts.error);
    return [];
  }
  return data || [];
};
export const deletePuklaItem = async (id: string, puklaId: string, options: OperationOptions) => {
  const supabase = createClient();
  try {
    // Get the position of the item being deleted
    const { data: itemData } = await supabase
      .from("pukla_links")
      .select("position")
      .eq("id", id)
      .single();
    if (!itemData) throw new Error("Item not found");
    // Delete the item
    const { error: deleteError } = await supabase.from("pukla_links").delete().eq("id", id);
    if (deleteError) throw deleteError;
    // Update positions of remaining items
    const { error: updateError } = await supabase.rpc("update_positions_after_delete", {
      p_pukla_id: puklaId,
      p_deleted_position: itemData.position,
    });
    if (updateError) throw updateError;
    toast.success(options.toasts.success);
  } catch (error) {
    console.error("Error deleting pukla link:", error);
    toast.error(options.toasts.error);
    throw error;
  }
};
export const updateItemPositions = async (
  puklaId: string,
  updates: { id: string; position: number }[],
  options: OperationOptions,
) => {
  const supabase = createClient();
  try {
    const promises = updates.map(({ id, position }) =>
      supabase.from("pukla_links").update({ position }).eq("id", id),
    );
    await Promise.all(promises);
    toast.success(options.toasts.success);
  } catch (error) {
    console.error("Error updating positions:", error);
    toast.error(options.toasts.error);
    throw error;
  }
};
export const updateItemStatus = async (
  id: string,
  is_enabled: boolean,
  options: OperationOptions,
) => {
  const supabase = createClient();
  try {
    const { error } = await supabase.from("pukla_links").update({ is_enabled }).eq("id", id);
    if (error) throw error;
    toast.success(options.toasts.success);
  } catch (error) {
    console.error("Error updating item status:", error);
    toast.error(options.toasts.error);
    throw error;
  }
};
export const updateLink = async (
  id: string,
  data: Partial<LinkItemProps>,
  options: OperationOptions,
) => {
  const supabase = createClient();
  try {
    const { error } = await supabase.from("pukla_links").update(data).eq("id", id);
    if (error) throw error;
    toast.success(options.toasts.success);
  } catch (error) {
    console.error("Error updating link:", error);
    toast.error(options.toasts.error);
    throw error;
  }
};
export const fetchAllPuklas = async (options: OperationOptions) => {
  const supabase = createClient();
  const { data, error } = await supabase.from("puklas").select("slug, updated_at");
  if (error) throw error;
  return data;
};
export const createPukla = async (data: Partial<Pukla>, user_id: string) => {
  const supabase = createClient();
  const { data: pukla, error } = await supabase
    .from("puklas")
    .insert([{ ...data, user_id: user_id }])
    .select()
    .single();
  if (error) {
    throw error;
  }
  return pukla;
};
export const addLinkToPukla = async (puklaId: string, data: Partial<LinkItemProps>) => {
  const supabase = createClient();
  const { data: link, error } = await supabase
    .from("pukla_links")
    .insert([{ ...data, pukla_id: puklaId }])
    .select()
    .single();
  if (error) {
    throw error;
  }
  return link;
};
</file>

<file path="src/lib/prisma.ts">
import { PrismaClient } from "@prisma/client";
const globalForPrisma = global as unknown as {
  prisma: PrismaClient;
};
let prisma: PrismaClient;
if (process.env.NODE_ENV === "production") {
  prisma = new PrismaClient();
} else {
  if (!globalForPrisma.prisma) {
    globalForPrisma.prisma = new PrismaClient();
  }
  prisma = globalForPrisma.prisma;
}
export default prisma;
</file>

<file path="src/lib/sidebar-list.ts">
import {
  Users,
  Settings,
  LucideIcon,
  LayoutDashboard,
  Package,
  BarChart,
  CreditCard,
  Briefcase,
  MapPin,
  SaudiRiyal,
  ShieldPlus,
  FileUser,
} from "lucide-react";
import { ModulesOptions } from "../../tanad.config";
export type SidebarMenuGroupProps = {
  title: string;
  items: {
    title: string;
    translationKey: string;
    url: string;
    icon?: LucideIcon;
    is_active?: boolean;
    action?: string;
    requiredPermission?: string;
    items?: {
      title: string;
      translationKey: string;
      is_active?: boolean;
      url: string;
      action?: string;
      requiredPermission?: string;
    }[];
  }[];
};
type Submenu = {
  href: string;
  label: string;
  translationKey: string;
  active?: boolean;
  plusAction?: string;
};
type Menu = {
  href: string;
  label: string;
  translationKey: string;
  active?: boolean;
  icon: LucideIcon;
  submenus?: Submenu[];
};
type Group = {
  groupLabel?: string;
  groupLabelTranslationKey?: string;
  icon: LucideIcon;
  menus: Menu[];
};
type SimplifiedMenuItem = {
  title: string;
  items?: SimplifiedMenuItem[];
};
type SimplifiedMenu = {
  group: string;
  items: SimplifiedMenuItem[];
};
let simplifiedMenu: SimplifiedMenu = {
  group: "Administration",
  items: [
    { title: "Dashboard" },
    { title: "Analytics" },
    {
      title: "Contacts",
      items: [
        { title: "All Contacts" },
        { title: "Companies" },
        { title: "Clients" },
        { title: "Vendors" },
      ],
    },
    {
      title: "Locations",
      items: [{ title: "Offices" }, { title: "Warehouses" }, { title: "Branches" }],
    },
    {
      title: "Sales",
      items: [{ title: "Products" }, { title: "Invoices" }, { title: "Quotes" }],
    },
    {
      title: "Human Resources",
      items: [{ title: "Employees" }, { title: "Departments" }, { title: "Salaries" }],
    },
    {
      title: "Settings",
      items: [{ title: "Users" }, { title: "Billing" }, { title: "Settings" }],
    },
  ],
};
// Main menu items
function getAdministrationMenus(pathname: string): SidebarMenuGroupProps["items"] {
  return [
    {
      title: "Dashboard",
      translationKey: "Dashboard.title",
      url: "/dashboard",
      icon: LayoutDashboard,
      is_active: pathname.startsWith("/dashboard"),
    },
    {
      title: "Analytics",
      translationKey: "Analytics.title",
      url: "/analytics",
      icon: BarChart,
      is_active: pathname.startsWith("/analytics"),
      requiredPermission: "analytics.read",
    },
    {
      title: "Contacts",
      translationKey: "Contacts.title",
      url: "/contacts",
      icon: Users,
      is_active: pathname.startsWith("/contacts"),
      requiredPermission: "contacts.read",
      items: [
        {
          title: "All Contacts",
          translationKey: "Contacts.all",
          is_active: pathname === "/contacts",
          url: "/contacts",
          requiredPermission: "contacts.read",
        },
        {
          title: ModulesOptions.companies.label,
          translationKey: ModulesOptions.companies.label,
          is_active: pathname === ModulesOptions.companies.url,
          action: ModulesOptions.companies.url + "/add",
          url: ModulesOptions.companies.url,
          requiredPermission: "companies.read",
        },
        {
          title: ModulesOptions.clients.label,
          translationKey: ModulesOptions.clients.label,
          is_active: pathname.startsWith(ModulesOptions.clients.url),
          action: ModulesOptions.clients.url + "/add",
          url: ModulesOptions.clients.url,
          requiredPermission: "clients.read",
        },
        {
          title: ModulesOptions.vendors.label,
          translationKey: ModulesOptions.vendors.label,
          is_active: pathname.startsWith(ModulesOptions.vendors.url),
          action: ModulesOptions.vendors.url + "/add",
          url: ModulesOptions.vendors.url,
          requiredPermission: "vendors.read",
        },
      ],
    },
    {
      title: "Locations",
      translationKey: "Locations.title",
      url: "/locations",
      icon: MapPin,
      is_active: pathname.startsWith("/warehouses") || pathname.startsWith("/branches"),
      items: [
        {
          title: ModulesOptions.offices.label,
          translationKey: ModulesOptions.offices.label,
          url: ModulesOptions.offices.url,
          action: ModulesOptions.offices.url + "/add",
          is_active: pathname.startsWith(ModulesOptions.offices.url),
          requiredPermission: "offices.read",
        },
        {
          title: ModulesOptions.warehouses.label,
          translationKey: ModulesOptions.warehouses.label,
          url: ModulesOptions.warehouses.url,
          action: ModulesOptions.warehouses.url + "/add",
          is_active: pathname.startsWith(ModulesOptions.warehouses.url),
          requiredPermission: "warehouses.read",
        },
        {
          title: ModulesOptions.branches.label,
          translationKey: ModulesOptions.branches.label,
          url: ModulesOptions.branches.url,
          action: ModulesOptions.branches.url + "/add",
          is_active: pathname.startsWith(ModulesOptions.branches.url),
          requiredPermission: "branches.read",
        },
      ],
    },
  ];
}
// Accounting menu items
function getAccountingMenus(pathname: string): SidebarMenuGroupProps["items"] {
  return [
    {
      title: ModulesOptions.sales.label,
      translationKey: ModulesOptions.sales.label,
      url: "",
      icon: ModulesOptions.sales.icon,
      is_active: pathname.startsWith("/products"),
      items: [
        {
          title: ModulesOptions.invoices.label,
          translationKey: ModulesOptions.invoices.label,
          is_active: pathname.startsWith(ModulesOptions.invoices.url),
          url: ModulesOptions.invoices.url,
          action: ModulesOptions.invoices.url + "/add",
          requiredPermission: "invoices.read",
        },
        {
          title: ModulesOptions.quotes.label,
          translationKey: ModulesOptions.quotes.label,
          is_active: pathname.startsWith(ModulesOptions.quotes.url),
          url: ModulesOptions.quotes.url,
          action: ModulesOptions.quotes.url + "/add",
          requiredPermission: "quotes.read",
        },
        {
          title: ModulesOptions.expenses.label,
          translationKey: ModulesOptions.expenses.label,
          is_active: pathname.startsWith(ModulesOptions.expenses.url),
          url: ModulesOptions.expenses.url,
          action: ModulesOptions.expenses.url + "/add",
          requiredPermission: "expenses.read",
        },
      ],
    },
    {
      title: "Storage",
      translationKey: "Storage.title",
      url: "",
      icon: Package,
      is_active: pathname.startsWith("/products"),
      items: [
        {
          title: ModulesOptions.purchases.label,
          translationKey: ModulesOptions.purchases.label,
          is_active: pathname.startsWith(ModulesOptions.purchases.url),
          url: ModulesOptions.purchases.url,
          action: ModulesOptions.purchases.url + "/add",
          requiredPermission: "purchases.read",
        },
        {
          title: ModulesOptions.products.label,
          translationKey: ModulesOptions.products.label,
          is_active: pathname.startsWith(ModulesOptions.products.url),
          url: ModulesOptions.products.url,
          action: ModulesOptions.products.url + "/add",
          requiredPermission: "products.read",
        },
        {
          title: ModulesOptions.warehouses.label,
          translationKey: ModulesOptions.warehouses.label,
          is_active: pathname.startsWith(ModulesOptions.warehouses.url),
          url: ModulesOptions.warehouses.url,
          action: ModulesOptions.warehouses.url + "/add",
          requiredPermission: "warehouses.read",
        },
      ],
    },
  ];
}
// HR menu items
function getHrMenus(pathname: string): SidebarMenuGroupProps["items"] {
  return [
    {
      title: ModulesOptions.employees.label,
      translationKey: ModulesOptions.employees.label,
      url: ModulesOptions.employees.url,
      icon: ModulesOptions.employees.icon,
      is_active: pathname.startsWith(ModulesOptions.employees.url),
      requiredPermission: "human_resources.read",
      items: [
        {
          title: ModulesOptions.employees.label,
          translationKey: "Employees.allEmployees",
          url: ModulesOptions.employees.url,
          action: ModulesOptions.employees.url + "/add",
          is_active: pathname === ModulesOptions.employees.url,
          requiredPermission: "employees.read",
        },
        {
          title: ModulesOptions.departments.label,
          translationKey: ModulesOptions.departments.label,
          url: ModulesOptions.departments.url,
          action: ModulesOptions.departments.url + "/add",
          is_active: pathname.startsWith(ModulesOptions.departments.url),
          requiredPermission: "departments.read",
        },
        {
          title: ModulesOptions.salaries.label,
          translationKey: ModulesOptions.salaries.label,
          url: ModulesOptions.salaries.url,
          action: ModulesOptions.salaries.url + "/add",
          is_active: pathname === ModulesOptions.salaries.url,
          requiredPermission: "salaries.read",
        },
        // {
        //   title: "Leave",
        //   translationKey: "Leave.title",
        //   url: "/leave",
        //   action: "/leave/add",
        //   is_active: pathname === "/leave",
        // },
        // {
        //   title: "Holidays",
        //   translationKey: "Holidays.title",
        //   url: "/holidays",
        //   action: "/holidays/add",
        //   is_active: pathname === "/holidays",
        // },
        // {
        //   title: "Reports",
        //   translationKey: "Reports.title",
        //   url: "/reports",
        //   is_active: pathname === "/reports",
        // },
        {
          title: ModulesOptions.employeeRequests.label,
          translationKey: ModulesOptions.employeeRequests.label,
          url: ModulesOptions.employeeRequests.url,
          action: ModulesOptions.employeeRequests.url + "/add",
          is_active: pathname.startsWith(ModulesOptions.employeeRequests.url),
          requiredPermission: "employee_requests.read",
        },
      ],
    },
    {
      title: "Recruitment",
      translationKey: "Recruitment.title",
      url: "",
      icon: FileUser,
      is_active: pathname.startsWith("/recruitment"),
      requiredPermission: "recruitment.read",
      items: [
        {
          title: ModulesOptions.job_listings.label,
          translationKey: ModulesOptions.job_listings.label,
          url: ModulesOptions.job_listings.url,
          action: ModulesOptions.job_listings.url + "/add",
          is_active: pathname === ModulesOptions.job_listings.url,
          requiredPermission: "job_listings.read",
        },
        {
          title: ModulesOptions.jobs.label,
          translationKey: ModulesOptions.jobs.label,
          url: ModulesOptions.jobs.url,
          action: ModulesOptions.jobs.url + "/add",
          is_active: pathname === ModulesOptions.jobs.url,
          requiredPermission: "jobs.read",
        },
        {
          title: ModulesOptions.applicants.label,
          translationKey: ModulesOptions.applicants.label,
          url: ModulesOptions.applicants.url,
          action: ModulesOptions.applicants.url + "/add",
          is_active: pathname === ModulesOptions.applicants.url,
          requiredPermission: "applicants.read",
        },
      ],
    },
    // {
    //   href: "/attendance",
    //   label: "Attendance",
    //   translationKey: "Attendance.title",
    //   icon: Tag,
    //   active: pathname === "/attendance",
    // },
  ];
}
// Settings menu items
function getSettingsMenus(pathname: string): SidebarMenuGroupProps["items"] {
  return [
    {
      title: ModulesOptions.users.label,
      translationKey: ModulesOptions.users.label,
      icon: ModulesOptions.users.icon,
      url: ModulesOptions.users.url,
      is_active: pathname === ModulesOptions.users.url,
    },
    {
      title: ModulesOptions.roles.label,
      translationKey: ModulesOptions.roles.label,
      icon: ModulesOptions.roles.icon,
      url: ModulesOptions.roles.url,
      is_active: pathname === ModulesOptions.roles.url,
    },
    // {
    //   title: "Billing",
    //   translationKey: "Billing.title",
    //   icon: CreditCard,
    //   url: "/billing",
    //   is_active: pathname === "/billing",
    // },
    // {
    //   title: "Settings",
    //   translationKey: "Settings.title",
    //   icon: Settings,
    //   url: "/settings",
    //   is_active: pathname === "/settings",
    // },
  ];
}
export function getMenuList(pathname?: string): Record<string, SidebarMenuGroupProps["items"]> {
  return {
    Administration: getAdministrationMenus(pathname || ""),
    Accounting: getAccountingMenus(pathname || ""),
    HumanResources: getHrMenus(pathname || ""),
    Settings: getSettingsMenus(pathname || ""),
  };
}
/**
 * Apply custom order from user preferences to the default menu list
 * @param defaultMenuList - The default menu list from getMenuList
 * @param savedNavigation - The saved navigation order from user settings
 * @returns A new menu list with items reordered according to saved preferences
 */
export function applyCustomMenuOrder(
  defaultMenuList: Record<string, SidebarMenuGroupProps["items"]>,
  savedNavigation: Record<string, Array<{ title: string }>>,
): Record<string, SidebarMenuGroupProps["items"]> {
  const resultMenu = { ...defaultMenuList };
  // For each group in the saved navigation
  Object.keys(savedNavigation).forEach((groupName) => {
    if (defaultMenuList[groupName] && savedNavigation[groupName]) {
      // Create an array to hold the reordered items
      const orderedItems: SidebarMenuGroupProps["items"] = [];
      // First add items that exist in both saved navigation and default menu
      savedNavigation[groupName].forEach((savedItem: { title: string }) => {
        const originalItem = defaultMenuList[groupName].find(
          (item) => item.title === savedItem.title,
        );
        if (originalItem) {
          orderedItems.push(originalItem);
        }
      });
      // Then add any items that exist in the default menu but not in saved navigation
      defaultMenuList[groupName].forEach((defaultItem) => {
        if (!orderedItems.some((item) => item.title === defaultItem.title)) {
          orderedItems.push(defaultItem);
        }
      });
      // Replace the default menu with the ordered one
      resultMenu[groupName] = orderedItems;
    }
  });
  return resultMenu;
}
// Mapper function to convert simplified menu to the existing format
function mapSimplifiedMenuToSidebarMenu(
  menu: SimplifiedMenu,
  pathname: string = "",
): Record<string, SidebarMenuGroupProps["items"]> {
  const getIcon = (title: string): LucideIcon => {
    const iconMap: Record<string, LucideIcon> = {
      Dashboard: LayoutDashboard,
      Analytics: BarChart,
      Contacts: Users,
      Locations: MapPin,
      Sales: Package,
      "Human Resources": Users,
      Settings: Settings,
      Billing: CreditCard,
    };
    return iconMap[title] || Users; // Default to Users icon if not found
  };
  const mapMenuItem = (
    item: SimplifiedMenuItem,
    parentUrl: string = "",
  ): SidebarMenuGroupProps["items"][0] => {
    const baseUrl = parentUrl || `/${item.title.toLowerCase().replace(/\s+/g, "-")}`;
    const mappedItem = {
      title: item.title,
      translationKey: `${item.title.replace(/\s+/g, "")}.title`,
      url: baseUrl,
      icon: getIcon(item.title),
      is_active: pathname.startsWith(baseUrl),
    };
    if (item.items) {
      return {
        ...mappedItem,
        items: item.items.map((subItem) => ({
          title: subItem.title,
          translationKey: `${subItem.title.replace(/\s+/g, "")}.title`,
          url: `${baseUrl}${subItem.title === "All " + item.title ? "" : "/" + subItem.title.toLowerCase().replace(/\s+/g, "-")}`,
          action: `${baseUrl}${subItem.title === "All " + item.title ? "" : "/" + subItem.title.toLowerCase().replace(/\s+/g, "-")}/add`,
          is_active: pathname.startsWith(
            `${baseUrl}${subItem.title === "All " + item.title ? "" : "/" + subItem.title.toLowerCase().replace(/\s+/g, "-")}`,
          ),
        })),
      };
    }
    return mappedItem;
  };
  const result: Record<string, SidebarMenuGroupProps["items"]> = {
    [menu.group]: menu.items.map((item) => mapMenuItem(item)),
  };
  return result;
}
// Example usage:
// const mappedMenu = mapSimplifiedMenuToSidebarMenu(simplifiedMenu);
</file>

<file path="src/lib/sort-utils.ts">
const models = [
  "clients",
  "vendors",
  "offices",
  "warehouses",
  "branches",
  "invoices",
  "products",
  "employees",
  "employee-requests",
  "salaries",
  "jobs",
  "companies",
  "departments",
  "job-listings",
  "expenses",
  "purchases",
  "quotes",
  "roles",
  "users",
];
interface SortOptions {
  caseSensitive?: boolean;
  nullsFirst?: boolean;
}
// Generic sort function that can be used for any model
function sortData<T>(
  items: T[],
  sortRules: { field: string; direction: string }[],
  options: SortOptions = {},
): T[] {
  if (!sortRules.length) return items;
  const { caseSensitive = false, nullsFirst = false } = options;
  return [...items].sort((a, b) => {
    for (const rule of sortRules) {
      // Handle nested fields like company_details.name
      const getNestedValue = (obj: T, path: string) => {
        return path.split(".").reduce((o: any, p) => o?.[p] ?? null, obj);
      };
      const aRawValue = getNestedValue(a, rule.field);
      const bRawValue = getNestedValue(b, rule.field);
      // Handle null/undefined values
      if (aRawValue === null || aRawValue === undefined || aRawValue === "") {
        if (bRawValue === null || bRawValue === undefined || bRawValue === "") {
          continue; // Both are null/empty, try next rule
        }
        return nullsFirst ? -1 : 1;
      }
      if (bRawValue === null || bRawValue === undefined || bRawValue === "") {
        return nullsFirst ? 1 : -1;
      }
      // Determine the type of the values and compare accordingly
      const aType = typeof aRawValue;
      const bType = typeof bRawValue;
      // If types don't match, convert both to strings
      if (aType !== bType) {
        const aStr = String(aRawValue);
        const bStr = String(bRawValue);
        const aCompare = caseSensitive ? aStr : aStr.toLowerCase();
        const bCompare = caseSensitive ? bStr : bStr.toLowerCase();
        if (aCompare < bCompare) return rule.direction === "asc" ? -1 : 1;
        if (aCompare > bCompare) return rule.direction === "asc" ? 1 : -1;
        continue;
      }
      // Handle different types
      switch (aType) {
        case "number":
          const aDiff = (aRawValue as number) - (bRawValue as number);
          if (aDiff !== 0) return rule.direction === "asc" ? aDiff : -aDiff;
          break;
        case "boolean":
          if (aRawValue !== bRawValue) {
            return rule.direction === "asc" ? (aRawValue ? 1 : -1) : aRawValue ? -1 : 1;
          }
          break;
        case "string":
          const aStr = aRawValue as string;
          const bStr = bRawValue as string;
          const aCompare = caseSensitive ? aStr : aStr.toLowerCase();
          const bCompare = caseSensitive ? bStr : bStr.toLowerCase();
          if (aCompare < bCompare) return rule.direction === "asc" ? -1 : 1;
          if (aCompare > bCompare) return rule.direction === "asc" ? 1 : -1;
          break;
        default:
          // For dates or other types, convert to string
          const aVal = String(aRawValue);
          const bVal = String(bRawValue);
          if (aVal < bVal) return rule.direction === "asc" ? -1 : 1;
          if (aVal > bVal) return rule.direction === "asc" ? 1 : -1;
          break;
      }
    }
    return 0;
  });
}
// The sorting factory to handle any of our models accurately and correctly.
/**
 * A factory function to sort an array of items based on specified sorting rules.
 *
 * @template T - The type of the items in the array.
 * @param model - The name of the model to validate against a predefined list of models.
 * @param items - The array of items to be sorted.
 * @param sortRules - An array of sorting rules, where each rule specifies a field and a direction ("asc" or "desc").
 * @param options - Optional sorting options to customize the behavior of the sorting process.
 * @returns A new array of items sorted according to the provided rules.
 * @throws {Error} If the provided model is not supported.
 *
 * @example
 * ```typescript
 * const items = [
 *   { name: 'Alice', age: 30 },
 *   { name: 'Bob', age: 25 },
 *   { name: 'Charlie', age: 35 },
 * ];
 *
 * const sortRules = [
 *   { field: 'age', direction: 'asc' },
 * ];
 *
 * const sortedItems = applySort('userModel', items, sortRules);
 * console.log(sortedItems);
 * // Output: [
 * //   { name: 'Bob', age: 25 },
 * //   { name: 'Alice', age: 30 },
 * //   { name: 'Charlie', age: 35 },
 * // ]
 * ```
 */
export const applySort = <T>(
  model: string,
  items: T[],
  sortRules: { field: string; direction: string }[],
  options: SortOptions = {},
): T[] => {
  if (!models.includes(model)) {
    throw new Error(
      `Unsupported model: ${model}, please add it to the models array in src/lib/sort-utils.ts`,
    );
  }
  return sortData<T>(items, sortRules, options);
};
</file>

<file path="src/lib/types.ts">
import React from "react";
import type { User } from "@supabase/supabase-js";
export type ThemeType = "light" | "dark";
export type LangType = "ar" | "en";
export interface Profile {
  first_name: string;
  last_name: string;
  phone: string;
  address: string;
  city: string;
  state: string;
  zip: string;
}
export interface UserSettings {
  currency: string;
  calendar_type: string;
}
export type TanadUser = User & {
  id: string;
  email: string;
  phone: string;
  address: string;
  full_name: string;
  profile: Profile;
  subscribed_to: string;
  stripe_customer_id: string;
  user_settings: UserSettings;
  username?: string;
  price_id?: string;
  avatar_url?: string;
};
export type Pukla = {
  id: string;
  title: string;
  slug: string;
  bio?: string;
  avatar_url?: string;
  created_at: string;
  link_count?: number;
  theme: PuklaThemeProps;
  settings: PuklaSettings;
  layout?: "1-col" | "2-col" | "3-col";
};
type ValidationTexts = {
  required?: string;
  invalid?: string;
};
export type TextInputType = ValidationTexts & {
  label?: string;
  placeholder?: string;
};
export type ContactSettings = {
  whatsapp?: string;
  twitter?: string;
  instagram?: string;
  mail?: string;
  // Add other contact types as needed
  [key: string]: string | undefined; // This is an index signature for any other dynamic keys
};
export type IconComponents = {
  [key in keyof ContactSettings]: React.JSX.Element;
};
export type LinkLayoutType =
  | "default"
  | "double-height"
  | "half-width"
  | "square";
export type IconPosition = "start" | "end";
export interface ThumbnailIcon {
  name: string;
  position: IconPosition;
}
export interface LinkItemProps {
  id: string;
  url?: string;
  title: string;
  is_draft?: boolean;
  is_editing?: boolean;
  is_enabled?: boolean;
  is_favorite?: boolean;
  is_expanded?: boolean;
  isDeleting?: boolean;
  item_type?: string;
  item_layout?: LinkLayoutType;
  item_highlight?: HighlightAnimation;
  position?: number;
  is_password_protected?: boolean;
  is_age_restricted?: boolean;
  min_age?: number;
  password?: string;
  item_thumbnail?: {
    thumbnail_type?: "icon" | "image";
    thumbnail_icon?: ThumbnailIcon;
    thumbnail_image?: string;
    position?: IconPosition;
  } | null;
}
export interface HeaderItemProps {
  id: string;
  url?: string;
  item_type?: "header";
  title?: string;
  is_draft?: boolean;
  is_editing?: boolean;
  is_enabled?: boolean;
  is_expanded?: boolean;
  is_favorite?: boolean;
  puklaId?: string;
}
export type LinkTypes =
  | "undecided"
  | "header"
  | "delivery-apps"
  | "link"
  | "youtube"
  | "facebook"
  | "twitter"
  | "instagram"
  | "linkedin"
  | "pinterest"
  | "github";
export type LinkActionOptions =
  | "edit"
  | "delete"
  | "favorite"
  | "redirect"
  | "analytics"
  | "highlight"
  | "schedule"
  | "embed";
export type SingleHeaderProps = {
  id: string;
  url?: string;
  title?: string;
  is_favorite?: boolean;
  is_enabled?: boolean;
  is_expanded?: boolean;
  is_draft?: boolean;
  is_editing?: boolean;
  children?: React.ReactNode;
};
export interface PuklaThemeProps {
  is_free?: boolean;
  theme_name: string;
  link_color: string;
  text_color: string;
  button_color: string;
  primary_color: string;
  background_color: string;
  button_text_color: string;
  button_hover_color: string;
  button_border_color: string;
  background_image?: string;
  overlay_color?: string;
  overlay_opacity?: number;
  border_color: string;
  border_radius: string;
  avatar_border_radius?: string;
}
export type PuklaSettings = {
  hide_avatar?: boolean;
  hide_watermark?: boolean;
  hide_title?: boolean;
  hide_bio?: boolean;
  avatar_shape?:
    | "circle"
    | "square"
    | "horizontal_rectangle"
    | "vertical_rectangle";
  animation?: AnimationType;
  social_links?: { platform: string; url: string }[];
  socials_position?: "top" | "bottom";
};
export type AnimationType =
  | "none"
  | "slide_up"
  | "slide_down"
  | "slide_left"
  | "slide_right"
  | "fade"
  | "scale";
export type HighlightAnimation = "outline" | "border" | "scale" | "none";
</file>

<file path="src/lib/utils.ts">
import { cva } from "class-variance-authority";
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
export function generateId() {
  return Math.random().toString(36).substring(2, 15);
}
export const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center gap-1 justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 ",
);
export const thumbnails: string[] = [
  "/assets/thumbnails/pukla-design-1.png",
  "/assets/thumbnails/pukla-design-2.png",
  "/assets/thumbnails/pukla-design-3.png",
  "/assets/thumbnails/pukla-design-4.png",
  "/assets/thumbnails/pukla-design-5.png",
  "/assets/thumbnails/pukla-design-6.png",
  "/assets/thumbnails/pukla-design-7.png",
];
export const appIcons2 = [
  { name: "hungerstation", size: "square" },
  { name: "jahez", size: "square" },
  { name: "tiktok", size: "square" },
  { name: "mrsool", size: "square" },
  { name: "phone", size: "square" },
];
export const appIcons1 = [
  { name: "carriage", size: "square" },
  { name: "to-you", size: "rect" },
  { name: "talabat", size: "square" },
  { name: "telegram", size: "square" },
  { name: "linkedin", size: "square" },
];
export const appIcons3 = [
  { name: "discord", size: "square" },
  { name: "facebook", size: "square" },
  { name: "threads", size: "square" },
  { name: "wssel", size: "rect" },
  { name: "x", size: "square" },
];
export const appIcons4 = [
  { name: "snapchat", size: "square" },
  { name: "instagram", size: "square" },
  { name: "twitch", size: "square" },
  { name: "mail", size: "square" },
  { name: "whatsapp", size: "square" },
];
export const plan1Price: any = {
  usd: { monthly: 9.99, annually: 9.99 * 12 },
  sar: { monthly: 37.46, annually: 37.46 * 12 },
};
export const plan2Price: any = {
  usd: { monthly: 5, annually: 4 * 12 },
  sar: { monthly: 18.75, annually: 15 * 12 },
};
export const plan3Price: any = {
  usd: { monthly: 9, annually: 7.5 * 12 },
  sar: { monthly: 33.75, annually: 28.13 * 12 },
};
/**
 * Converts a hex color to RGB values
 */
const hexToRGB = (hex: string) => {
  // Remove the hash if present
  hex = hex.replace("#", "");
  // Handle both short and long hex formats
  const r = parseInt(hex.length === 3 ? hex[0] + hex[0] : hex.slice(0, 2), 16);
  const g = parseInt(hex.length === 3 ? hex[1] + hex[1] : hex.slice(2, 4), 16);
  const b = parseInt(hex.length === 3 ? hex[2] + hex[2] : hex.slice(4, 6), 16);
  return { r, g, b };
};
/**
 * Calculates relative luminance using the WCAG formula
 * Returns a value between 0 (darkest) and 1 (lightest)
 */
const calculateLuminance = (r: number, g: number, b: number) => {
  const [rs, gs, bs] = [r / 255, g / 255, b / 255].map((val) => {
    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
  });
  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
};
/**
 * Determines whether to use light or dark logo based on background color
 * @param backgroundColor - Hex color code (with or without #)
 * @returns boolean - true for light logo, false for dark logo
 */
export const shouldUseLightContent = (backgroundColor: string): boolean => {
  if (!backgroundColor) return true;
  try {
    const rgb = hexToRGB(backgroundColor);
    const luminance = calculateLuminance(rgb.r, rgb.g, rgb.b);
    // Use light logo if background is dark (luminance < 0.5)
    return luminance < 0.5;
  } catch (error) {
    console.error("Error processing background color:", error);
    return true; // Default to light logo on error
  }
};
</file>

<file path="src/modules/branch/branch.card.tsx">
import { Mail, MapPin, Phone, User } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Branch } from "@/branch/branch.type";
const BranchCard = ({ branch }: { branch: Branch }) => {
  const t = useTranslations("Branches");
  return (
    <Card key={branch.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold">{branch.name}</h3>
            <p className="text-sm text-gray-500">Code: {branch.code}</p>
          </div>
          <Badge variant={branch.is_active ? "default" : "secondary"}>
            {branch.is_active ? t("status.active") : t("status.inactive")}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {branch.manager && (
            <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
              <User className="h-4 w-4" />
              <span>{branch.manager}</span>
            </div>
          )}
          {branch.email && (
            <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
              <Mail className="h-4 w-4" />
              <a href={`mailto:${branch.email}`} className="hover:text-primary">
                {branch.email}
              </a>
            </div>
          )}
          {branch.phone && (
            <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
              <Phone className="h-4 w-4" />
              <a href={`tel:${branch.phone}`} className="hover:text-primary">
                {branch.phone}
              </a>
            </div>
          )}
          <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
            <MapPin className="mt-1 h-4 w-4" />
            <div>
              <p>{branch.address}</p>
              <p>{`${branch.city}, ${branch.state} ${branch.zip_code}`}</p>
            </div>
          </div>
          {branch.notes && (
            <p className="mt-2 border-t pt-2 text-sm text-gray-500 dark:text-gray-400">
              {branch.notes}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default BranchCard;
</file>

<file path="src/modules/branch/branch.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Switch } from "@/ui/switch";
import { Textarea } from "@/ui/textarea";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import useUserStore from "@/stores/use-user-store";
import { useCreateBranch, useUpdateBranch } from "./branch.hooks";
import useBranchStore from "./branch.store";
import { BranchUpdateData } from "./branch.type";
export const createBranchSchema = (t: (key: string) => string) => {
  const baseBranchSchema = z.object({
    name: z.string().min(1, t("Branches.form.name.required")),
    code: z.string().min(1, t("Branches.form.code.required")),
    phone: z.string().optional().or(z.literal("")),
    email: z.string().email().optional().or(z.literal("")),
    manager: z.string().optional().or(z.literal("")),
    is_active: z.boolean().default(true),
    notes: z.string().optional().or(z.literal("")),
  });
  const addressSchema = createAddressSchema(t);
  return baseBranchSchema.merge(addressSchema);
};
export type BranchFormValues = z.input<ReturnType<typeof createBranchSchema>>;
export interface BranchFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: BranchUpdateData | null;
  editMode?: boolean;
}
export function BranchForm({ id, onSuccess, defaultValues, editMode = false }: BranchFormProps) {
  const t = useTranslations();
  const { user } = useUserStore();
  const { mutate: createBranch } = useCreateBranch();
  const { mutate: updateBranch } = useUpdateBranch();
  const isLoading = useBranchStore((state) => state.isLoading);
  const setIsLoading = useBranchStore((state) => state.setIsLoading);
  const form = useForm<BranchFormValues>({
    resolver: zodResolver(createBranchSchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      code: defaultValues?.code || "",
      short_address: defaultValues?.short_address || "",
      building_number: defaultValues?.building_number || "",
      street_name: defaultValues?.street_name || "",
      city: defaultValues?.city || "",
      region: defaultValues?.region || "",
      country: defaultValues?.country || "",
      zip_code: defaultValues?.zip_code || "",
      phone: defaultValues?.phone || "",
      email: defaultValues?.email || "",
      manager: defaultValues?.manager || "",
      is_active: defaultValues?.is_active || true,
      notes: defaultValues?.notes || "",
    },
  });
  const handleSubmit = async (data: BranchFormValues) => {
    setIsLoading(true);
    if (!user?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode) {
        await updateBranch(
          {
            id: defaultValues?.id || "",
            data: {
              name: data.name.trim(),
              code: data.code?.trim() || "",
              phone: data.phone?.trim() || null,
              email: data.email?.trim() || null,
              manager: data.manager?.trim() || null,
              notes: data.notes?.trim() || null,
              is_active: data.is_active || true,
            },
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createBranch(
          {
            name: data.name.trim(),
            code: data.code.trim(),
            phone: data.phone?.trim() || null,
            email: data.email?.trim() || null,
            manager: data.manager?.trim() || null,
            notes: data.notes?.trim() || null,
            is_active: data.is_active || true,
            user_id: user?.id,
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  // Expose form methods for external use (like dummy data)
  if (typeof window !== "undefined") {
    (window as any).branchForm = form;
  }
  return (
    <Form {...form}>
      <form id={id || "branch-form"} onSubmit={form.handleSubmit(handleSubmit)}>
        <div className="mx-auto flex max-w-2xl flex-col gap-4 p-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Branches.form.name.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Branches.form.name.placeholder")}
                      {...field}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Branches.form.code.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Branches.form.code.placeholder")}
                      {...field}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Branches.form.phone.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="tel"
                      placeholder={t("Branches.form.phone.placeholder")}
                      {...field}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Branches.form.email.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="email"
                      placeholder={t("Branches.form.email.placeholder")}
                      {...field}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="manager"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Branches.form.manager.label")}</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Branches.form.manager.placeholder")}
                      {...field}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Branches.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Branches.form.notes.placeholder")}
                    className="min-h-[120px]"
                    {...field}
                    disabled={isLoading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <AddressFormSection
          title={t("Branches.form.address.label")}
          control={form.control}
          isLoading={isLoading}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/branch/branch.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createBranch,
  deleteBranch,
  fetchBranchById,
  fetchBranches,
  updateBranch,
  bulkDeleteBranches,
  duplicateBranch,
} from "@/branch/branch.service";
import type { Branch, BranchCreateData } from "@/branch/branch.type";
// Query keys for branches
export const branchKeys = {
  all: ["branches"] as const,
  lists: () => [...branchKeys.all, "list"] as const,
  list: (filters: any) => [...branchKeys.lists(), { filters }] as const,
  details: () => [...branchKeys.all, "detail"] as const,
  detail: (id: string) => [...branchKeys.details(), id] as const,
};
// Hook to fetch all branches
export function useBranches() {
  return useQuery({
    queryKey: branchKeys.lists(),
    queryFn: fetchBranches,
  });
}
// Hook to fetch a single branch by ID
export function useBranch(id: string) {
  return useQuery({
    queryKey: branchKeys.detail(id),
    queryFn: () => fetchBranchById(id),
    enabled: !!id, // Only run query if id is truthy
  });
}
// Hook for creating a new branch
export function useCreateBranch() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newBranch: Omit<Branch, "id" | "created_at"> & { user_id: string }) => {
      // Map user_id to user_id for the service function
      const { user_id, ...rest } = newBranch;
      const branchData: BranchCreateData = {
        ...rest,
        user_id: user_id,
      };
      return createBranch(branchData);
    },
    onSuccess: () => {
      // Invalidate the list query to refetch
      queryClient.invalidateQueries({ queryKey: branchKeys.lists() });
    },
  });
}
// Hook for updating an existing branch
export function useUpdateBranch() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Branch> }) => updateBranch(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: branchKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: branchKeys.lists() });
    },
  });
}
// Hook for duplicating a branch
export function useDuplicateBranch() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateBranch(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: branchKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: branchKeys.lists() });
    },
  });
}
// Hook for deleting a branch
export function useDeleteBranch() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteBranch(id),
    onSuccess: (_, variables) => {
      // Invalidate the list and remove the specific detail query from cache
      queryClient.invalidateQueries({ queryKey: branchKeys.lists() });
      queryClient.removeQueries({ queryKey: branchKeys.detail(variables) });
    },
  });
}
// Hook for bulk deleting branches
export function useBulkDeleteBranches() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteBranches,
    onSuccess: () => {
      // Invalidate the list query
      queryClient.invalidateQueries({ queryKey: branchKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/branch/branch.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/branch/branch.service.ts">
import { Branch, BranchCreateData } from "@/branch/branch.type";
export async function fetchBranches(): Promise<Branch[]> {
  try {
    const response = await fetch("/api/resource/branches");
    if (!response.ok) {
      console.error("Failed to fetch branches:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching branches:", error);
    return [];
  }
}
export async function fetchBranchById(id: string): Promise<Branch> {
  const response = await fetch(`/api/resource/branches/${id}`);
  if (!response.ok) {
    throw new Error(`Branch with id ${id} not found`);
  }
  return response.json();
}
export async function createBranch(branch: BranchCreateData): Promise<Branch> {
  const response = await fetch("/api/resource/branches", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(branch),
  });
  if (!response.ok) {
    throw new Error("Failed to create branch");
  }
  return response.json();
}
export async function updateBranch(
  id: string,
  branch: Partial<Omit<Branch, "id" | "created_at">>,
): Promise<Branch> {
  const response = await fetch(`/api/resource/branches/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(branch),
  });
  if (!response.ok) {
    throw new Error(`Failed to update branch with id ${id}`);
  }
  return response.json();
}
export async function duplicateBranch(id: string): Promise<Branch> {
  const response = await fetch(`/api/resource/branches/${id}/duplicate`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!response.ok) {
    throw new Error("Failed to duplicate branch");
  }
  return response.json();
}
export async function deleteBranch(id: string): Promise<void> {
  const response = await fetch(`/api/resource/branches/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete branch with id ${id}`);
  }
}
export async function bulkDeleteBranches(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/branches", {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete branches");
  }
}
</file>

<file path="src/modules/branch/branch.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Branch } from "./branch.type";
const searchBranchFn = (branch: Branch, searchQuery: string) =>
  branch.name.toLowerCase().includes(searchQuery.toLowerCase());
const useBranchStore = createGenericStore<Branch>("branches", searchBranchFn);
export default useBranchStore;
</file>

<file path="src/modules/branch/branch.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import useBranchStore from "@/branch/branch.store";
import { Branch } from "@/branch/branch.type";
import useUserStore from "@/stores/use-user-store";
import { useUpdateBranch } from "./branch.hooks";
const nameSchema = z.string().min(1, "Required");
const codeSchema = z.string().min(1, "Required");
const addressSchema = z.string().min(1, "Required");
const citySchema = z.string().min(1, "Required");
const stateSchema = z.string().min(1, "Required");
const zipCodeSchema = z.string().min(1, "Required");
const phoneSchema = z.string().nullable();
const emailSchema = z.string().email().nullable();
const managerSchema = z.string().nullable();
const isActiveSchema = z.boolean();
const BranchesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Branch>) => {
  const t = useTranslations();
  const { mutate: updateBranch } = useUpdateBranch();
  const selectedRows = useBranchStore((state) => state.selectedRows);
  const setSelectedRows = useBranchStore((state) => state.setSelectedRows);
  const canEditBranch = useUserStore((state) => state.hasPermission("branches.update"));
  const canDuplicateBranch = useUserStore((state) => state.hasPermission("branches.duplicate"));
  const canViewBranch = useUserStore((state) => state.hasPermission("branches.view"));
  const canArchiveBranch = useUserStore((state) => state.hasPermission("branches.archive"));
  const canDeleteBranch = useUserStore((state) => state.hasPermission("branches.delete"));
  // Create a selection state object for the table
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Branch>[] = [
    { accessorKey: "name", header: t("Branches.form.name.label"), validationSchema: nameSchema },
    { accessorKey: "code", header: t("Branches.form.code.label"), validationSchema: codeSchema },
    {
      accessorKey: "address",
      header: t("Branches.form.address.label"),
      validationSchema: addressSchema,
    },
    { accessorKey: "city", header: t("Branches.form.city.label"), validationSchema: citySchema },
    { accessorKey: "state", header: t("Branches.form.state.label"), validationSchema: stateSchema },
    {
      accessorKey: "zip_code",
      header: t("Branches.form.zip_code.label"),
      validationSchema: zipCodeSchema,
    },
    { accessorKey: "phone", header: t("Branches.form.phone.label"), validationSchema: phoneSchema },
    { accessorKey: "email", header: t("Branches.form.email.label"), validationSchema: emailSchema },
    {
      accessorKey: "manager",
      header: t("Branches.form.manager.label"),
      validationSchema: managerSchema,
    },
    {
      accessorKey: "is_active",
      header: t("Branches.form.is_active.label"),
      cell: ({ row }) => (row.getValue("is_active") ? t("active") : t("inactive")),
      validationSchema: isActiveSchema,
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "branch_id") return;
    await updateBranch({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Branch[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const branchTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Branch) => row.id,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditBranch}
      canDuplicateAction={canDuplicateBranch}
      canViewAction={canViewBranch}
      canArchiveAction={canArchiveBranch}
      canDeleteAction={canDeleteBranch}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={branchTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default BranchesTable;
</file>

<file path="src/modules/branch/branch.type.ts">
import { AddressProps } from "@/types/common.type";
export interface BranchProps {
  id: string;
  name: string;
  code?: string;
  phone?: string | null;
  email?: string | null;
  manager?: string | null;
  is_active: boolean;
  notes?: string | null;
  created_at: string;
}
export interface Branch extends BranchProps, AddressProps {}
export type BranchCreateData = Omit<Branch, "id" | "created_at"> & { user_id: string };
export type BranchUpdateData = Omit<Branch, "created_at" | "user_id">;
</file>

<file path="src/modules/client/client.card.tsx">
import { Mail, Phone, Building2, MapPin } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Client } from "./client.type";
const ClientCard = ({ client }: { client: Client }) => {
  return (
    <Card key={client.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">{client.name}</h3>
        <p className="text-sm text-gray-500">{client.company_details?.name || "Unknown Company"}</p>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Mail className="h-4 w-4" />
            <a href={`mailto:${client.email}`} className="hover:text-primary">
              {client.email}
            </a>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Phone className="h-4 w-4" />
            <a href={`tel:${client.phone}`} className="hover:text-primary">
              {client.phone}
            </a>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Building2 className="h-4 w-4" />
            <span>{client.company_details?.name || "Unknown Company"}</span>
          </div>
          <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
            <MapPin className="mt-1 h-4 w-4" />
            <div>
              <p>{client.address}</p>
              <p>{`${client.city}, ${client.state} ${client.zip_code}`}</p>
            </div>
          </div>
          {client.notes && (
            <p className="mt-2 border-t pt-2 text-sm text-gray-500 dark:text-gray-400">
              {client.notes}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default ClientCard;
</file>

<file path="src/modules/client/client.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { ComboboxAdd } from "@/ui/combobox-add";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import { useCreateClient, useUpdateClient } from "@/client/client.hooks";
import useClientStore from "@/client/client.store";
import { ClientUpdateData } from "@/client/client.type";
import { CompanyForm } from "@/company/company.form";
import { useCompanies } from "@/company/company.hooks";
import useUserStore from "@/stores/use-user-store";
export const createClientSchema = (t: (key: string) => string) => {
  const baseClientSchema = z.object({
    name: z.string().min(1, t("Clients.form.validation.name_required")),
    email: z
      .string()
      .min(1, t("Clients.form.validation.email_required"))
      .email(t("Clients.form.validation.email_invalid")),
    phone: z.string().min(1, t("Clients.form.validation.phone_required")),
    company: z.string().nullish(),
    notes: z.string().optional(),
  });
  const addressSchema = createAddressSchema(t);
  return baseClientSchema.merge(addressSchema);
};
export type ClientFormValues = z.input<ReturnType<typeof createClientSchema>>;
interface ClientFormProps {
  id?: string;
  onSuccess?: () => void;
  loading?: boolean;
  defaultValues?: ClientUpdateData | null;
  editMode?: boolean;
}
export function ClientForm({
  id,
  onSuccess,
  loading = false,
  defaultValues,
  editMode = false,
}: ClientFormProps) {
  const t = useTranslations();
  const locale = useLocale();
  const { profile, membership } = useUserStore();
  const { data: companies, isLoading: companiesLoading } = useCompanies();
  const { mutateAsync: createClient, isPending: isCreating } = useCreateClient();
  const { mutateAsync: updateClient, isPending: isUpdating } = useUpdateClient();
  const [isCompanyDialogOpen, setIsCompanyDialogOpen] = useState(false);
  const isLoading = useClientStore((state) => state.isLoading);
  const setIsLoading = useClientStore((state) => state.setIsLoading);
  const form = useForm<ClientFormValues>({
    resolver: zodResolver(createClientSchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      email: defaultValues?.email || "",
      phone: defaultValues?.phone || "",
      company: defaultValues?.company || undefined,
      short_address: defaultValues?.short_address || "",
      building_number: defaultValues?.building_number || "",
      street_name: defaultValues?.street_name || "",
      city: defaultValues?.city || "",
      region: defaultValues?.region || "",
      country: defaultValues?.country || "",
      zip_code: defaultValues?.zip_code || "",
      notes: defaultValues?.notes || "",
    },
  });
  // Expose form methods for external use (like dummy data)
  if (typeof window !== "undefined") {
    (window as any).clientForm = form;
  }
  // Format companies for ComboboxAdd
  const companyOptions =
    companies?.map((company) => ({
      label: company.name,
      value: company.id,
    })) || [];
  const handleSubmit = async (data: ClientFormValues) => {
    setIsLoading(true);
    if (!profile?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode && defaultValues) {
        await updateClient(
          {
            id: defaultValues.id,
            client: {
              name: data.name.trim(),
              email: data.email.trim(),
              phone: data.phone.trim(),
              company: data.company || undefined,
              short_address: data.short_address?.trim() || undefined,
              building_number: data.building_number?.trim() || undefined,
              street_name: data.street_name?.trim() || undefined,
              city: data.city?.trim() || undefined,
              region: data.region?.trim() || undefined,
              country: data.country?.trim() || undefined,
              zip_code: data.zip_code?.trim() || undefined,
              notes: data.notes?.trim() || null,
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createClient(
          {
            name: data.name.trim(),
            email: data.email.trim(),
            phone: data.phone.trim(),
            company: data.company || undefined,
            short_address: data.short_address?.trim() || undefined,
            building_number: data.building_number?.trim() || undefined,
            street_name: data.street_name?.trim() || undefined,
            city: data.city?.trim() || undefined,
            region: data.region?.trim() || undefined,
            country: data.country?.trim() || undefined,
            zip_code: data.zip_code?.trim() || undefined,
            notes: data.notes?.trim() || null,
            enterprise_id: membership?.enterprise_id || "",
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  return (
    <>
      <Form {...form}>
        <form
          id={id || "client-form"}
          onSubmit={form.handleSubmit(handleSubmit)}
          className="space-y-4"
        >
          <div className="grid grid-cols-1 gap-4 md:grid-cols-1">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Clients.form.name.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Clients.form.name.placeholder")}
                      {...field}
                      disabled={loading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="company"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Clients.form.company.label")}</FormLabel>
                  <FormControl>
                    <ComboboxAdd
                      direction={locale === "ar" ? "rtl" : "ltr"}
                      data={companyOptions}
                      isLoading={companiesLoading}
                      defaultValue={field.value || ""}
                      onChange={(value) => field.onChange(value || null)}
                      texts={{
                        placeholder: t("Clients.form.company.placeholder"),
                        searchPlaceholder: t("Clients.form.company.search_placeholder"),
                        noItems: t("Clients.form.company.no_companies"),
                      }}
                      addText={t("Companies.add_new")}
                      onAddClick={() => setIsCompanyDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-1">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Clients.form.email.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      type="email"
                      placeholder={t("Clients.form.email.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Clients.form.phone.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      type="tel"
                      placeholder={t("Clients.form.phone.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <AddressFormSection
            title={t("Clients.form.address")}
            control={form.control}
            isLoading={isLoading}
          />
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Clients.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea placeholder={t("Clients.form.notes.placeholder")} rows={4} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <FormDialog
        open={isCompanyDialogOpen}
        onOpenChange={setIsCompanyDialogOpen}
        title={t("Companies.add_new")}
        formId="company-form"
      >
        <CompanyForm id="company-form" onSuccess={() => setIsCompanyDialogOpen(false)} />
      </FormDialog>
    </>
  );
}
</file>

<file path="src/modules/client/client.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createClient,
  deleteClient,
  fetchClientById,
  fetchClients,
  updateClient,
  bulkDeleteClients,
  duplicateClient,
} from "@/client/client.service";
import { Client, ClientCreateData } from "@/client/client.type";
export const clientKeys = {
  all: ["clients"] as const,
  lists: () => [...clientKeys.all, "list"] as const,
  list: (filters: any) => [...clientKeys.lists(), { filters }] as const,
  details: () => [...clientKeys.all, "detail"] as const,
  detail: (id: string) => [...clientKeys.details(), id] as const,
};
// Hooks
export function useClients() {
  return useQuery({
    queryKey: clientKeys.lists(),
    queryFn: fetchClients,
  });
}
export function useClient(id: string) {
  return useQuery({
    queryKey: clientKeys.detail(id),
    queryFn: () => fetchClientById(id),
    enabled: !!id,
  });
}
export function useCreateClient() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newClient: Omit<Client, "id" | "created_at">) =>
      createClient(newClient as ClientCreateData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: clientKeys.lists() });
    },
  });
}
export function useUpdateClient() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({
      id,
      client,
    }: {
      id: string;
      client: Partial<Omit<Client, "id" | "created_at">>;
    }) => updateClient(id, client),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: clientKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: clientKeys.lists() });
    },
  });
}
export function useDuplicateClient() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateClient(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: clientKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: clientKeys.lists() });
    },
  });
}
export function useDeleteClient() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteClient(id),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: clientKeys.lists() });
      queryClient.removeQueries({ queryKey: clientKeys.detail(variables) });
    },
  });
}
// Hook for bulk deleting clients
export function useBulkDeleteClients() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteClients,
    onSuccess: () => {
      // Invalidate the list query
      queryClient.invalidateQueries({ queryKey: clientKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/client/client.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "General.created_at" },
  { value: "name", translationKey: "Clients.form.name.label" },
  { value: "email", translationKey: "Clients.form.email.label" },
  { value: "phone", translationKey: "Clients.form.phone.label" },
  { value: "company", translationKey: "Clients.form.company.label" },
  { value: "company_details.name", translationKey: "Clients.form.company_name.label" },
  { value: "address", translationKey: "Clients.form.address.label" },
  { value: "city", translationKey: "Clients.form.city.label" },
  { value: "state", translationKey: "Clients.form.state.label" },
  { value: "zip_code", translationKey: "Clients.form.zip_code.label" },
];
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Clients.form.created_at.label", type: "date" },
  { id: "name", translationKey: "Clients.form.name.label", type: "text" },
  { id: "email", translationKey: "Clients.form.email.label", type: "text" },
  { id: "phone", translationKey: "Clients.form.phone.label", type: "text" },
  { id: "address", translationKey: "Clients.form.address.label", type: "text" },
  { id: "city", translationKey: "Clients.form.city.label", type: "text" },
  { id: "state", translationKey: "Clients.form.state.label", type: "text" },
  { id: "zip_code", translationKey: "Clients.form.zip_code.label", type: "text" },
];
</file>

<file path="src/modules/client/client.service.ts">
import { Client, ClientCreateData } from "@/client/client.type";
export async function fetchClients(): Promise<Client[]> {
  try {
    const response = await fetch("/api/resource/clients");
    if (!response.ok) {
      console.error("Failed to fetch clients:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching clients:", error);
    return [];
  }
}
export async function fetchClientById(id: string): Promise<Client> {
  const response = await fetch(`/api/resource/clients/${id}`);
  if (!response.ok) {
    throw new Error(`Client with id ${id} not found`);
  }
  return response.json();
}
export async function createClient(client: ClientCreateData): Promise<Client> {
  const response = await fetch("/api/resource/clients", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(client),
  });
  if (!response.ok) {
    throw new Error("Failed to create client");
  }
  return response.json();
}
export async function updateClient(id: string, client: Partial<Client>): Promise<Client> {
  const response = await fetch(`/api/resource/clients/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(client),
  });
  if (!response.ok) {
    throw new Error(`Failed to update client with id ${id}`);
  }
  return response.json();
}
export async function duplicateClient(id: string): Promise<Client> {
  const response = await fetch(`/api/resource/clients/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate client with id ${id}`);
  }
  return response.json();
}
export async function deleteClient(id: string): Promise<void> {
  const response = await fetch(`/api/resource/clients/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete client with id ${id}`);
  }
}
export async function bulkDeleteClients(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/clients", {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete clients");
  }
}
</file>

<file path="src/modules/client/client.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Client } from "./client.type";
const searchClientFn = (client: Client, searchQuery: string) =>
  client.name.toLowerCase().includes(searchQuery.toLowerCase());
const useClientStore = createGenericStore<Client>("clients", searchClientFn);
export default useClientStore;
</file>

<file path="src/modules/client/client.table.tsx">
import { useTranslations } from "next-intl";
import { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateClient } from "@/client/client.hooks";
import useClientStore from "@/client/client.store";
import { Client } from "@/client/client.type";
import useUserStore from "@/stores/use-user-store";
const ClientsTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Client>) => {
  const t = useTranslations();
  const { mutate: updateClient } = useUpdateClient();
  const selectedRows = useClientStore((state) => state.selectedRows);
  const setSelectedRows = useClientStore((state) => state.setSelectedRows);
  const canEditClient = useUserStore((state) => state.hasPermission("clients.update"));
  const canDuplicateClient = useUserStore((state) => state.hasPermission("clients.duplicate"));
  const canViewClient = useUserStore((state) => state.hasPermission("clients.view"));
  const canArchiveClient = useUserStore((state) => state.hasPermission("clients.archive"));
  const canDeleteClient = useUserStore((state) => state.hasPermission("clients.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Client>[] = [
    {
      accessorKey: "name",
      header: t("Clients.form.name.label"),
      validationSchema: z.string().min(1, t("Clients.form.name.required")),
    },
    {
      accessorKey: "email",
      header: t("Clients.form.email.label"),
      validationSchema: z.string().email(t("Clients.form.email.invalid")),
    },
    {
      accessorKey: "phone",
      header: t("Clients.form.phone.label"),
      validationSchema: z.string().min(1, t("Clients.form.phone.required")),
    },
    {
      accessorKey: "address",
      header: t("Clients.form.address.label"),
      validationSchema: z.string().min(1, t("Clients.form.address.required")),
    },
    {
      accessorKey: "city",
      header: t("Clients.form.city.label"),
      validationSchema: z.string().min(1, t("Clients.form.city.required")),
    },
    {
      accessorKey: "state",
      header: t("Clients.form.state.label"),
      validationSchema: z.string().min(1, t("Clients.form.state.required")),
    },
    {
      accessorKey: "zip_code",
      header: t("Clients.form.zip_code.label"),
      validationSchema: z.string().min(1, t("Clients.form.zip_code.required")),
    },
    {
      accessorKey: "notes",
      header: t("Clients.form.notes.label"),
      validationSchema: z.string().optional(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "client_id") return;
    await updateClient({ id: rowId, client: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Client[]) => {
      const newSelectedIds = rows.map((row: Client) => row.id!);
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  const clientTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Client) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditClient}
      canDuplicateAction={canDuplicateClient}
      canViewAction={canViewClient}
      canArchiveAction={canArchiveClient}
      canDeleteAction={canDeleteClient}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={clientTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default ClientsTable;
</file>

<file path="src/modules/client/client.type.ts">
import { AddressProps } from "@/types/common.type";
import { Company } from "@/company/company.type";
export interface ClientProps {
  id: string;
  name: string;
  email: string;
  phone: string;
  company?: string;
  company_details?: Company;
  notes: string | null;
  created_at: string;
  enterprise_id: string;
}
export interface Client extends ClientProps, AddressProps {}
export type ClientCreateData = Omit<Client, "id" | "created_at" | "company_details"> & {
  user_id: string;
};
export type ClientUpdateData = Omit<Client, "created_at" | "user_id">;
</file>

<file path="src/modules/company/company.card.tsx">
import { Mail, Phone, Globe, MapPin, Building2 } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Company } from "@/company/company.type";
const CompanyCard = ({ company }: { company: Company }) => {
  const t = useTranslations();
  return (
    <Card key={company.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <h3 className="text-lg font-semibold">{company.name}</h3>
            {company.industry && <p className="text-sm text-gray-500">{company.industry}</p>}
          </div>
          <Badge variant={company.is_active ? "default" : "secondary"}>
            {company.is_active ? t("Companies.active") : t("Companies.inactive")}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Mail className="h-4 w-4" />
            <a href={`mailto:${company.email}`} className="hover:text-primary">
              {company.email}
            </a>
          </div>
          {company.phone && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Phone className="h-4 w-4" />
              <a href={`tel:${company.phone}`} className="hover:text-primary">
                {company.phone}
              </a>
            </div>
          )}
          {company.website && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Globe className="h-4 w-4" />
              <a
                href={
                  company.website.startsWith("http")
                    ? company.website
                    : `https://${company.website}`
                }
                target="_blank"
                rel="noopener noreferrer"
                className="hover:text-primary"
              >
                {company.website}
              </a>
            </div>
          )}
          {(company.address || company.city || company.state) && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <MapPin className="h-4 w-4" />
              <span>
                {[company.address, company.city, company.state].filter(Boolean).join(", ")}
                {company.zip_code && ` ${company.zip_code}`}
              </span>
            </div>
          )}
          {company.size && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Building2 className="h-4 w-4" />
              <span>{company.size} employees</span>
            </div>
          )}
          {company.notes && (
            <p className="mt-2 border-t pt-2 text-sm text-gray-500">{company.notes}</p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default CompanyCard;
</file>

<file path="src/modules/company/company.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { DocumentFile } from "@/ui/documents-uploader";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import PhoneInput from "@/components/ui/phone-input";
import { uploadDocument } from "@/services/documents";
import { ModuleFormProps } from "@/types/common.type";
import { useCreateCompany, useUpdateCompany } from "@/company/company.hooks";
import useCompanyStore from "@/company/company.store";
import { Company } from "@/company/company.type";
import useUserStore from "@/stores/use-user-store";
export const createCompanySchema = (t: (key: string) => string) => {
  const baseCompanySchema = z.object({
    name: z.string().min(1, t("Companies.form.validation.name_required")),
    email: z
      .string()
      .min(1, t("Companies.form.validation.email_required"))
      .email(t("Companies.form.validation.email_invalid")),
    phone: z.string().optional(),
    website: z.string().optional(),
    industry: z.string().optional(),
    size: z.string().optional(),
    notes: z.string().optional(),
    is_active: z.boolean().default(true),
  });
  const addressSchema = createAddressSchema(t);
  return baseCompanySchema.merge(addressSchema);
};
export type CompanyFormValues = z.input<ReturnType<typeof createCompanySchema>>;
export function CompanyForm({
  id,
  onSuccess,
  loading = false,
  defaultValues,
  editMode = false,
}: ModuleFormProps<Company>) {
  const t = useTranslations();
  const { locale } = useRouter();
  const { profile, membership } = useUserStore();
  const { mutateAsync: createCompany, isPending: isCreating } = useCreateCompany();
  const { mutateAsync: updateCompany, isPending: isUpdating } = useUpdateCompany();
  const [pendingDocuments, setPendingDocuments] = useState<DocumentFile[]>([]);
  const isLoading = useCompanyStore((state) => state.isLoading);
  const setIsLoading = useCompanyStore((state) => state.setIsLoading);
  const form = useForm<CompanyFormValues>({
    resolver: zodResolver(createCompanySchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      email: defaultValues?.email || "",
      phone: defaultValues?.phone || "",
      website: defaultValues?.website || "",
      industry: defaultValues?.industry || "",
      size: defaultValues?.size || "",
      notes: defaultValues?.notes || "",
      is_active: defaultValues?.is_active || true,
      short_address: defaultValues?.short_address || "",
      additional_number: defaultValues?.additional_number || "",
      building_number: defaultValues?.building_number || "",
      street_name: defaultValues?.street_name || "",
      city: defaultValues?.city || "",
      region: defaultValues?.region || "",
      country: defaultValues?.country || "",
      zip_code: defaultValues?.zip_code || "",
    },
  });
  const uploadDocuments = async (companyId: string) => {
    if (!pendingDocuments.length) return;
    const toastId = toast.loading(t("Documents.uploading"), {
      description: `0/${pendingDocuments.length} ${t("Documents.files_uploaded")}`,
    });
    try {
      let uploadedCount = 0;
      for (const doc of pendingDocuments) {
        await uploadDocument({
          ...doc,
          entity_id: companyId,
          entity_type: "company",
        });
        uploadedCount++;
        toast.loading(t("Documents.uploading"), {
          id: toastId,
          description: `${uploadedCount}/${pendingDocuments.length} ${t("Documents.files_uploaded")}`,
        });
      }
      toast.success(t("Documents.upload_complete"), { id: toastId });
      setPendingDocuments([]);
    } catch (error) {
      console.error("Error uploading documents:", error);
      toast.error(t("Documents.upload_error"), {
        id: toastId,
        description: error instanceof Error ? error.message : undefined,
      });
    }
  };
  const handleSubmit = async (data: CompanyFormValues) => {
    setIsLoading(true);
    if (!profile?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode && defaultValues) {
        if (!defaultValues.id) {
          console.error("Company ID missing in edit mode");
          toast.error(t("Companies.error.missing_id"));
          setIsLoading(false);
          return;
        }
        await updateCompany(
          {
            id: defaultValues.id,
            company: {
              name: data.name.trim(),
              email: data.email.trim(),
              phone: data.phone?.trim() || undefined,
              website: data.website?.trim() || undefined,
              industry: data.industry?.trim() || undefined,
              size: data.size?.trim() || undefined,
              notes: data.notes?.trim() || undefined,
              is_active: data.is_active ?? true,
              short_address: data.short_address?.trim() || undefined,
              building_number: data.building_number?.trim() || undefined,
              street_name: data.street_name?.trim() || undefined,
              city: data.city?.trim() || undefined,
              region: data.region?.trim() || undefined,
              country: data.country?.trim() || undefined,
              zip_code: data.zip_code?.trim() || undefined,
              additional_number: data.additional_number?.trim() || undefined,
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createCompany(
          {
            enterprise_id: membership?.enterprise_id || "",
            name: data.name.trim(),
            email: data.email.trim(),
            phone: data.phone?.trim() || undefined,
            website: data.website?.trim() || undefined,
            industry: data.industry?.trim() || undefined,
            size: data.size?.trim() || undefined,
            notes: data.notes?.trim() || undefined,
            is_active: data.is_active ?? true,
            user_id: profile?.id || "",
            short_address: data.short_address?.trim() || undefined,
            building_number: data.building_number?.trim() || undefined,
            street_name: data.street_name?.trim() || undefined,
            city: data.city?.trim() || undefined,
            region: data.region?.trim() || undefined,
            country: data.country?.trim() || undefined,
            zip_code: data.zip_code?.trim() || undefined,
            additional_number: data.additional_number?.trim() || undefined,
          },
          {
            onSuccess: async (response) => {
              if (response?.id) {
                await uploadDocuments(response.id);
              }
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  if (typeof window !== "undefined") {
    (window as any).companyForm = form;
  }
  return (
    <Form {...form}>
      <form id={id} onSubmit={form.handleSubmit(handleSubmit)}>
        <div className="mx-auto flex max-w-2xl flex-col gap-4 p-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.name.label")}</FormLabel>
                  <FormControl>
                    <Input
                      disabled={isLoading}
                      placeholder={t("Companies.form.name.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.email.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="email"
                      dir="ltr"
                      disabled={isLoading}
                      placeholder={t("Companies.form.email.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.phone.label")}</FormLabel>
                  <FormControl>
                    <PhoneInput value={field.value || ""} onChange={field.onChange} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="website"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.website.label")}</FormLabel>
                  <FormControl>
                    <Input
                      dir="ltr"
                      disabled={isLoading}
                      placeholder={t("Companies.form.website.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="industry"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.industry.label")}</FormLabel>
                  <FormControl>
                    <Input
                      disabled={isLoading}
                      placeholder={t("Companies.form.industry.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="size"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Companies.form.size.label")}</FormLabel>
                  <FormControl>
                    <Input
                      disabled={isLoading}
                      placeholder={t("Companies.form.size.placeholder")}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Companies.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    disabled={isLoading}
                    placeholder={t("Companies.form.notes.placeholder")}
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <AddressFormSection
          title={t("Companies.form.address.label")}
          control={form.control}
          isLoading={isLoading}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/company/company.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createCompany,
  deleteCompany,
  bulkDeleteCompanies,
  fetchCompanyById,
  fetchCompanies,
  updateCompany,
  duplicateCompany,
} from "@/company/company.service";
import type { Company, CompanyCreateData, CompanyUpdateData } from "@/company/company.type";
// Query keys for companies
export const companyKeys = {
  all: ["companies"] as const,
  lists: () => [...companyKeys.all, "list"] as const,
  list: (filters: any) => [...companyKeys.lists(), { filters }] as const,
  details: () => [...companyKeys.all, "detail"] as const,
  detail: (id: string) => [...companyKeys.details(), id] as const,
};
// Hook to fetch all companies
export function useCompanies() {
  return useQuery({
    queryKey: companyKeys.lists(),
    queryFn: fetchCompanies,
  });
}
// Hook to fetch a single company
export function useCompany(id: string) {
  return useQuery({
    queryKey: companyKeys.detail(id),
    queryFn: () => fetchCompanyById(id),
    enabled: !!id,
  });
}
// Hook to create a company
export function useCreateCompany() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (company: CompanyCreateData) => createCompany(company),
    onSuccess: (newCompany: Company) => {
      const previousCompanies = queryClient.getQueryData(companyKeys.lists()) || [];
      queryClient.setQueryData(companyKeys.lists(), [
        ...(Array.isArray(previousCompanies) ? previousCompanies : []),
        newCompany,
      ]);
    },
  });
}
// Hook to update a company
export function useUpdateCompany() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, company }: { id: string; company: CompanyUpdateData }) =>
      updateCompany(id, company),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: companyKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: companyKeys.lists() });
    },
  });
}
// Hook to duplicate a company
export function useDuplicateCompany() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateCompany(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: companyKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: companyKeys.lists() });
    },
  });
}
// Hook to delete a company
export function useDeleteCompany() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteCompany,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: companyKeys.lists() });
      queryClient.removeQueries({ queryKey: companyKeys.detail(variables) });
    },
  });
}
// Hook to bulk delete companies
export function useBulkDeleteCompanies() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteCompanies,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: companyKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/company/company.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "name", translationKey: "Companies.form.name.label" },
  { value: "created_at", translationKey: "Companies.form.created_at.label" },
  { value: "updated_at", translationKey: "Companies.form.updated_at.label" },
  { value: "is_active", translationKey: "Companies.form.is_active.label" },
  { value: "industry", translationKey: "Companies.form.industry.label" },
  { value: "size", translationKey: "Companies.form.size.label" },
  { value: "notes", translationKey: "Companies.form.notes.label" },
];
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Companies.form.created_at.label", type: "date" },
  { id: "name", translationKey: "Companies.form.name.label", type: "text" },
  { id: "email", translationKey: "Companies.form.email.label", type: "text" },
  { id: "phone", translationKey: "Companies.form.phone.label", type: "text" },
  { id: "website", translationKey: "Companies.form.website.label", type: "text" },
  { id: "address", translationKey: "Companies.form.address.label", type: "text" },
  { id: "city", translationKey: "Companies.form.city.label", type: "text" },
  { id: "state", translationKey: "Companies.form.state.label", type: "text" },
  { id: "zip_code", translationKey: "Companies.form.zip_code.label", type: "text" },
  { id: "industry", translationKey: "Companies.form.industry.label", type: "text" },
  { id: "size", translationKey: "Companies.form.size.label", type: "text" },
  { id: "notes", translationKey: "Companies.form.notes.label", type: "text" },
];
</file>

<file path="src/modules/company/company.service.ts">
import { Company } from "@/company/company.type";
export async function fetchCompanies(): Promise<Company[]> {
  const response = await fetch("/api/resource/companies");
  if (!response.ok) {
    throw new Error("Failed to fetch companies");
  }
  return response.json();
}
export async function fetchCompanyById(id: string): Promise<Company> {
  const response = await fetch(`/api/resource/companies/${id}`);
  if (!response.ok) {
    throw new Error(`Company with id ${id} not found`);
  }
  return response.json();
}
export async function createCompany(company: Omit<Company, "id" | "created_at">): Promise<Company> {
  const response = await fetch("/api/resource/companies", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(company),
  });
  if (!response.ok) {
    throw new Error("Failed to create company");
  }
  return response.json();
}
export async function updateCompany(id: string, updates: Partial<Company>): Promise<Company> {
  const response = await fetch(`/api/resource/companies/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update company with id ${id}`);
  }
  return response.json();
}
export async function duplicateCompany(id: string): Promise<Company> {
  const response = await fetch(`/api/resource/companies/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate company with id ${id}`);
  }
  return response.json();
}
export async function deleteCompany(id: string): Promise<void> {
  const response = await fetch(`/api/resource/companies/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete company with id ${id}`);
  }
}
export async function bulkDeleteCompanies(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/companies", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete companies");
  }
}
</file>

<file path="src/modules/company/company.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Company } from "./company.type";
const searchCompanyFn = (company: Company, searchQuery: string) =>
  company.name.toLowerCase().includes(searchQuery.toLowerCase());
const useCompanyStore = createGenericStore<Company>("companies", searchCompanyFn);
export default useCompanyStore;
</file>

<file path="src/modules/company/company.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateCompany } from "@/company/company.hooks";
import useCompanyStore from "@/company/company.store";
import { Company } from "@/company/company.type";
import useUserStore from "@/stores/use-user-store";
const CompaniesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Company>) => {
  const t = useTranslations();
  const { mutate: updateCompany } = useUpdateCompany();
  const canEditCompany = useUserStore((state) => state.hasPermission("companies.update"));
  const canDuplicateCompany = useUserStore((state) => state.hasPermission("companies.duplicate"));
  const canViewCompany = useUserStore((state) => state.hasPermission("companies.view"));
  const canArchiveCompany = useUserStore((state) => state.hasPermission("companies.archive"));
  const canDeleteCompany = useUserStore((state) => state.hasPermission("companies.delete"));
  const selectedRows = useCompanyStore((state) => state.selectedRows);
  const setSelectedRows = useCompanyStore((state) => state.setSelectedRows);
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Company>[] = [
    {
      accessorKey: "name",
      header: t("Companies.form.name.label"),
      validationSchema: z.string().min(1, t("Companies.form.name.required")),
    },
    {
      accessorKey: "industry",
      header: t("Companies.form.industry.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "email",
      header: t("Companies.form.email.label"),
      validationSchema: z.string().email(t("Companies.form.email.invalid")),
    },
    {
      accessorKey: "phone",
      header: t("Companies.form.phone.label"),
      cell: ({ row }) => {
        return <span dir="ltr"> {row.original.phone}</span>;
      },
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "website",
      header: t("Companies.form.website.label"),
      validationSchema: z.string().url(t("Companies.form.website.invalid")),
    },
    {
      accessorKey: "address",
      header: t("Companies.form.address.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "city",
      header: t("Companies.form.city.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "state",
      header: t("Companies.form.state.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "zip_code",
      header: t("Companies.form.zip_code.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "size",
      header: t("Companies.form.size.label"),
      validationSchema: z.number().min(0, t("Companies.form.size.invalid")),
    },
    {
      accessorKey: "is_active",
      header: t("Companies.form.is_active.label"),
      validationSchema: z.boolean(),
    },
    {
      accessorKey: "notes",
      header: t("Companies.form.notes.label"),
      validationSchema: z.string().optional(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateCompany({ id: rowId, company: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Company[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const companyTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Company) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditCompany}
      canDuplicateAction={canDuplicateCompany}
      canViewAction={canViewCompany}
      canArchiveAction={canArchiveCompany}
      canDeleteAction={canDeleteCompany}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={companyTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default CompaniesTable;
</file>

<file path="src/modules/company/company.type.ts">
import { AddressProps } from "@/types/common.type";
export interface CompanyProps {
  id: string;
  name: string;
  email: string;
  phone?: string;
  website?: string;
  industry?: string;
  size?: string;
  notes?: string;
  is_active: boolean;
  enterprise_id: string;
  created_at: string;
  user_id: string;
}
export interface Company extends CompanyProps, AddressProps {}
export type CompanyCreateData = Omit<Company, "id" | "created_at"> & { user_id: string };
export type CompanyUpdateData = Partial<Company>;
</file>

<file path="src/modules/department/department.card.tsx">
import { useTranslations } from "next-intl";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Department } from "@/department/department.type";
const DepartmentCard = ({ department }: { department: Department }) => {
  const t = useTranslations();
  return (
    <Card key={department.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">{department.name}</h3>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {department.description || t("Departments.no_description")}
          </p>
          <p className="text-xs text-gray-500">
            {t("General.created_at")}: {new Date(department.created_at).toLocaleDateString()}
          </p>
        </div>
      </CardContent>
    </Card>
  );
};
export default DepartmentCard;
</file>

<file path="src/modules/department/department.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { BuildingIcon, StoreIcon, WarehouseIcon } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { MultiSelect, MultiSelectOption } from "@/ui/multi-select";
import { Textarea } from "@/ui/textarea";
import { useOffices } from "@/office/office.hooks";
import { useBranches } from "@/branch/branch.hooks";
import { useCreateDepartment, useUpdateDepartment } from "@/department/department.hooks";
import useDepartmentStore from "@/department/department.store";
import { DepartmentCreateData, DepartmentUpdateData } from "@/department/department.type";
import { useWarehouses } from "@/warehouse/warehouse.hooks";
import useUserStore from "@/stores/use-user-store";
type LocationValue = {
  id: string;
  type: "office" | "branch" | "warehouse";
};
type LocationOption = MultiSelectOption<LocationValue> & {
  metadata: { type: LocationValue["type"] };
};
export const createDepartmentSchema = (t: (key: string) => string) =>
  z.object({
    name: z.string().min(1, t("Departments.form.validation.name_required")),
    description: z.string().optional(),
    locations: z
      .array(
        z.object({
          id: z.string(),
          type: z.enum(["office", "branch", "warehouse"]),
        }),
      )
      .min(1, t("Departments.form.validation.locations_required")),
  });
export type DepartmentFormValues = z.infer<ReturnType<typeof createDepartmentSchema>>;
interface DepartmentFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: DepartmentUpdateData | null;
  editMode?: boolean;
}
export default function DepartmentForm({
  id,
  onSuccess,
  defaultValues,
  editMode = false,
}: DepartmentFormProps) {
  const t = useTranslations();
  const user = useUserStore((state) => state.user);
  const { mutateAsync: createDepartment } = useCreateDepartment();
  const { mutate: updateDepartment } = useUpdateDepartment();
  const setIsLoading = useDepartmentStore((state) => state.setIsLoading);
  const { data: offices, isLoading: isOfficesLoading } = useOffices();
  const { data: branches, isLoading: isBranchesLoading } = useBranches();
  const { data: warehouses, isLoading: isWarehousesLoading } = useWarehouses();
  const locale = useLocale();
  const [locationOptions, setLocationOptions] = useState<LocationOption[]>([]);
  const form = useForm<DepartmentFormValues>({
    resolver: zodResolver(createDepartmentSchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      description: defaultValues?.description || "",
      locations:
        defaultValues?.locations?.map((loc) => ({
          id: loc.location_id,
          type: loc.location_type,
        })) || [],
    },
  });
  useEffect(() => {
    const options: LocationOption[] = [
      ...(offices?.map((office) => ({
        id: office.id,
        label: office.name,
        value: { id: office.id, type: "office" as const },
        metadata: { type: "office" as const },
      })) || []),
      ...(branches?.map((branch) => ({
        id: branch.id,
        label: branch.name,
        value: { id: branch.id, type: "branch" as const },
        metadata: { type: "branch" as const },
      })) || []),
      ...(warehouses?.map((warehouse) => ({
        id: warehouse.id,
        label: warehouse.name,
        value: { id: warehouse.id, type: "warehouse" as const },
        metadata: { type: "warehouse" as const },
      })) || []),
    ];
    setLocationOptions(options);
  }, [offices, branches, warehouses]);
  const renderLocationOption = (option: MultiSelectOption<LocationValue>) => {
    const type = (option as LocationOption).metadata?.type;
    const typeLabel = type ? t(`Locations.types.${type}`) : "";
    let typeIcon;
    switch (type) {
      case "office":
        typeIcon = <BuildingIcon className="!text-muted-foreground !size-3" />;
        break;
      case "branch":
        typeIcon = <StoreIcon className="!text-muted-foreground !size-3" />;
        break;
      case "warehouse":
        typeIcon = <WarehouseIcon className="!text-muted-foreground !size-3" />;
        break;
    }
    return (
      <div className="flex flex-col">
        <span className="text-muted-foreground flex items-center gap-2 text-xs capitalize">
          {typeIcon}
          {typeLabel}
        </span>
        <span>{option.label}</span>
      </div>
    );
  };
  const handleSubmit = async (data: DepartmentFormValues) => {
    setIsLoading(true);
    if (!user?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode) {
        try {
          const locations = data.locations.map((location) => ({
            department_id: id!,
            location_id: location.id,
            location_type: location.type,
            user_id: user.id,
          }));
          await updateDepartment({
            id: id!,
            data: {
              name: data.name,
              description: data.description || null,
              user_id: user.id,
              is_active: true,
              locations,
            },
          });
          toast.success(t("General.successful_operation"), {
            description: t("Departments.success.updated"),
          });
          if (onSuccess) {
            onSuccess();
          }
        } catch (error) {
          console.error("Error updating department:", error);
          toast.error(t("General.error_occurred"), {
            description: t("Departments.error.updating"),
          });
        }
      } else {
        try {
          const createData: DepartmentCreateData = {
            name: data.name,
            description: data.description || null,
            user_id: user.id,
            is_active: true,
            locations: data.locations.map((location) => ({
              department_id: id!,
              location_id: location.id,
              location_type: location.type,
              user_id: user.id,
            })),
          };
          await createDepartment(createData);
          toast.success(t("General.successful_operation"), {
            description: t("Departments.success.created"),
          });
          if (onSuccess) {
            onSuccess();
          }
        } catch (error) {
          console.error("Error creating department:", error);
          toast.error(t("General.error_occurred"), {
            description: t("Departments.error.creating"),
          });
        }
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save department:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Departments.error.create"),
      });
    }
  };
  if (typeof window !== "undefined") {
    (window as any).departmentForm = form;
  }
  return (
    <Form {...form}>
      <form id={id} onSubmit={form.handleSubmit(handleSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Departments.form.name.label")}</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Departments.form.description.label")}</FormLabel>
              <FormControl>
                <Textarea {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="locations"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Departments.form.locations.label")}</FormLabel>
              <FormControl>
                <MultiSelect<LocationValue>
                  loading={isOfficesLoading || isBranchesLoading || isWarehousesLoading}
                  dir={locale === "ar" ? "rtl" : "ltr"}
                  options={locationOptions}
                  onValueChange={(values) => {
                    field.onChange(values);
                  }}
                  defaultValue={field.value}
                  placeholder={t("Departments.form.locations.placeholder")}
                  variant="inverted"
                  animation={2}
                  maxCount={3}
                  renderOption={renderLocationOption}
                  getValueKey={(value) => value.id}
                  isValueEqual={(a, b) => a.id === b.id && a.type === b.type}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/department/department.hooks.ts">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  fetchDepartments,
  createDepartment,
  updateDepartment,
  deleteDepartment,
  duplicateDepartment,
  bulkDeleteDepartments,
  fetchDepartmentById,
  fetchDepartmentsWithLocations,
  createDepartmentWithLocations,
} from "./department.service";
import type { Department, DepartmentCreateData } from "./department.type";
export const departmentKeys = {
  all: ["departments"] as const,
  lists: () => [...departmentKeys.all, "list"] as const,
  list: (filters: any) => [...departmentKeys.lists(), { filters }] as const,
  details: () => [...departmentKeys.all, "detail"] as const,
  detail: (id: string) => [...departmentKeys.details(), id] as const,
};
// List Query Hook
export const useDepartments = () => {
  return useQuery({
    queryKey: departmentKeys.lists(),
    queryFn: fetchDepartments,
  });
};
// Hook to fetch a single department
export const useDepartment = (id: string) => {
  return useQuery({
    queryKey: departmentKeys.detail(id),
    queryFn: () => fetchDepartmentById(id),
    enabled: !!id,
  });
};
// Create Mutation Hook
export const useCreateDepartment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    // mutationFn: (data: DepartmentCreateData) => createDepartment(data),
    mutationFn: (data: DepartmentCreateData) => createDepartmentWithLocations(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: departmentKeys.lists() });
    },
  });
};
// Update Mutation Hook
export const useUpdateDepartment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Department> }) =>
      updateDepartment(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: departmentKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: departmentKeys.lists() });
    },
  });
};
// Duplicate Mutation Hook
export const useDuplicateDepartment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateDepartment(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: departmentKeys.lists() });
    },
  });
};
// Delete Mutation Hook
export const useDeleteDepartment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteDepartment(id),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: departmentKeys.lists() });
      queryClient.removeQueries({ queryKey: departmentKeys.detail(variables) });
    },
  });
};
// Hook to bulk delete departments
export function useBulkDeleteDepartments() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteDepartments,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: departmentKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/department/department.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/department/department.service.ts">
import { Department, DepartmentCreateData } from "@/department/department.type";
export async function fetchDepartmentsWithLocations(): Promise<Department[]> {
  try {
    const [departmentsRes, relRes] = await Promise.all([
      fetch("/api/resource/departments"),
      fetch("/api/resource/departmentLocations"), // or similar
    ]);
    if (!departmentsRes.ok || !relRes.ok) throw new Error("Failed to load data");
    const departments = await departmentsRes.json();
    const relations = await relRes.json(); // includes department_id, location_id, location_type
    // Optional: fetch all locations in one go and map by ID/type
    const allLocationIds = [...new Set(relations.map((r: any) => r.location_id))];
    const locationsRes = await fetch(
      "/api/resource/departmentLocations?ids=" + allLocationIds.join(","),
    );
    const locations = await locationsRes.json(); // Assume includes office/branch/warehouse in one response
    const locationMap = Object.fromEntries(locations.map((loc: any) => [loc.id, loc]));
    return departments.map((dept: any) => ({
      ...dept,
      locations: relations
        .filter((r: any) => r.department_id === dept.id)
        .map((r: any) => ({
          ...r,
          location: locationMap[r.location_id],
        })),
    }));
  } catch (error) {
    console.error("Error fetching departments with locations:", error);
    return [];
  }
}
export async function fetchDepartments(): Promise<Department[]> {
  const response = await fetch("/api/resource/departments");
  if (!response.ok) {
    throw new Error("Failed to fetch departments");
  }
  return response.json();
}
export async function fetchDepartmentById(id: string): Promise<Department> {
  const response = await fetch(`/api/resource/departments/${id}`);
  if (!response.ok) {
    throw new Error(`Department with id ${id} not found`);
  }
  return response.json();
}
export async function createDepartmentWithLocations(
  department: DepartmentCreateData,
): Promise<Department> {
  // Step 1: Create department
  const deptRes = await fetch("/api/resource/departments", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      name: department.name,
      description: department.description,
      user_id: department.user_id,
      is_active: department.is_active,
    }),
  });
  if (!deptRes.ok) {
    throw new Error("Failed to create department");
  }
  const createdDept: Department = await deptRes.json();
  // Step 2: Create department-location relations
  const relationRes = await fetch("/api/resource/departmentLocations", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(
      department.locations.map((location) => ({
        department_id: createdDept.id,
        location_id: location.location_id,
        type: location.location_type,
        user_id: department.user_id,
      })),
    ),
  });
  if (!relationRes.ok) {
    throw new Error("Failed to create department-location relations");
  }
  // Step 3: Fetch the created department with its locations
  const deptWithLocations = await fetchDepartmentById(createdDept.id);
  return deptWithLocations;
}
export async function createDepartment(department: DepartmentCreateData): Promise<Department> {
  const response = await fetch("/api/resource/departments", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(department),
  });
  if (!response.ok) {
    throw new Error("Failed to create department");
  }
  return response.json();
}
export async function updateDepartment(
  id: string,
  updates: Partial<Department>,
): Promise<Department> {
  const response = await fetch(`/api/resource/departments/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update department with id ${id}`);
  }
  return response.json();
}
export async function duplicateDepartment(id: string): Promise<Department> {
  const response = await fetch(`/api/resource/departments/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate department with id ${id}`);
  }
  return response.json();
}
export async function deleteDepartment(id: string): Promise<void> {
  const response = await fetch(`/api/resource/departments/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete department with id ${id}`);
  }
}
export async function bulkDeleteDepartments(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/departments", {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete departments");
  }
}
</file>

<file path="src/modules/department/department.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Department } from "./department.type";
const searchDepartmentFn = (department: Department, searchQuery: string) =>
  department.name.toLowerCase().includes(searchQuery.toLowerCase());
const useDepartmentStore = createGenericStore<Department>("departments", searchDepartmentFn);
export default useDepartmentStore;
</file>

<file path="src/modules/department/department.table.tsx">
import { Row } from "@tanstack/react-table";
import { X } from "lucide-react";
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import { Button } from "@/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { useOffices } from "@/office/office.hooks";
import { useBranches } from "@/branch/branch.hooks";
import { useUpdateDepartment } from "@/department/department.hooks";
import useDepartmentStore from "@/department/department.store";
import { Department } from "@/department/department.type";
import { useWarehouses } from "@/warehouse/warehouse.hooks";
import useUserStore from "@/stores/use-user-store";
interface DepartmentsTableProps {
  data: Department[];
  isLoading?: boolean;
  error?: Error | null;
  onActionClicked: (action: string, rowId: string) => void;
}
const DepartmentsTable = ({ data, isLoading, error, onActionClicked }: DepartmentsTableProps) => {
  const t = useTranslations();
  const { mutateAsync: updateDepartment } = useUpdateDepartment();
  const { data: offices } = useOffices();
  const { data: branches } = useBranches();
  const { data: warehouses } = useWarehouses();
  const canEditDepartment = useUserStore((state) => state.hasPermission("departments.update"));
  const canDuplicateDepartment = useUserStore((state) =>
    state.hasPermission("departments.duplicate"),
  );
  const canViewDepartment = useUserStore((state) => state.hasPermission("departments.view"));
  const canArchiveDepartment = useUserStore((state) => state.hasPermission("departments.archive"));
  const canDeleteDepartment = useUserStore((state) => state.hasPermission("departments.delete"));
  const selectedRows = useDepartmentStore((state) => state.selectedRows);
  const setSelectedRows = useDepartmentStore((state) => state.setSelectedRows);
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Department>[] = [
    {
      accessorKey: "name",
      header: t("Departments.form.name.label"),
      validationSchema: z.string().min(1, t("Departments.form.name.required")),
      className: "min-w-[200px]",
    },
    {
      accessorKey: "description",
      header: t("Departments.form.description.label"),
      validationSchema: z.string().min(1, t("Departments.form.description.required")),
      className: "min-w-[250px]",
    },
    {
      accessorKey: "locations",
      header: t("Departments.form.locations.label"),
      validationSchema: z.array(z.string()).min(1, t("Departments.form.locations.required")),
      className: "min-w-[200px]",
      cell: ({ row }) => {
        const locations = row.original.locations || [];
        if (locations.length === 0) {
          return t("Departments.form.locations.noLocations");
        } else if (locations.length === 1) {
          return getLocationName(locations[0].location_id);
        } else {
          return (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-4 !p-0 !text-xs">
                  {t("Departments.form.locations.multipleLocations", { count: locations.length })}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {locations.map((location) => (
                  <DropdownMenuItem key={location.location_id} className="flex justify-between">
                    <span>{getLocationName(location.location_id)}</span>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleRemoveLocation(row, location.location_id);
                      }}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          );
        }
      },
    },
    {
      accessorKey: "created_at",
      header: t("Departments.form.created_at.label"),
      validationSchema: z.string().min(1, t("Departments.form.created_at.required")),
      className: "min-w-[180px]",
    },
    {
      accessorKey: "updated_at",
      header: t("Departments.form.updated_at.label"),
      validationSchema: z.string().min(1, t("Departments.form.updated_at.required")),
      className: "min-w-[180px]",
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateDepartment({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Department[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  const getLocationName = (location_id: string) => {
    const office = offices?.find((o) => o.id === location_id);
    if (office) return office.name;
    const branch = branches?.find((b) => b.id === location_id);
    if (branch) return branch.name;
    const warehouse = warehouses?.find((w) => w.id === location_id);
    if (warehouse) return warehouse.name;
    return location_id;
  };
  const handleRemoveLocation = async (row: Row<Department>, location_id: string) => {
    const locations = row.original.locations || [];
    const updatedLocations = locations.filter((location) => location.location_id !== location_id);
    await updateDepartment({ id: row.original.id, data: { locations: updatedLocations } });
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const departmentTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Department) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditDepartment}
      canDuplicateAction={canDuplicateDepartment}
      canViewAction={canViewDepartment}
      canArchiveAction={canArchiveDepartment}
      canDeleteAction={canDeleteDepartment}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={departmentTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default DepartmentsTable;
</file>

<file path="src/modules/department/department.type.ts">
import { Branch } from "../branch/branch.type";
import { Office } from "../office/office.type";
import { Warehouse } from "../warehouse/warehouse.type";
export interface Department {
  id: string;
  name: string;
  description: string | null;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
  locations: Array<{
    department_id: string;
    location_id: string;
    location_type: "office" | "branch" | "warehouse";
    user_id: string;
  }>;
}
export type DepartmentLocation = {
  id: string;
  department_id: string;
  location_type: "office" | "branch" | "warehouse";
  location_id: string;
  created_at: string;
};
export type DepartmentCreateData = Omit<
  Department,
  "id" | "created_at" | "updated_at" | "locations"
> & {
  user_id: string;
  locations: Array<{
    department_id: string;
    location_id: string;
    location_type: "office" | "branch" | "warehouse";
    user_id: string;
  }>;
};
export type DepartmentUpdateData = Partial<Department>;
</file>

<file path="src/modules/employee/employee.card.tsx">
import { useTranslations } from "next-intl";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Employee } from "@/employee/employee.types";
const EmployeeCard = ({ employee }: { employee: Employee }) => {
  const t = useTranslations();
  return (
    <Card key={employee.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">
          {employee.first_name} {employee.last_name}
        </h3>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <p className="text-sm text-gray-600 dark:text-gray-400">{employee.email}</p>
          <p className="text-sm text-gray-600 dark:text-gray-400">{employee.position}</p>
          <p className="text-xs text-gray-500">
            {t("General.created_at")}: {new Date(employee.created_at).toLocaleDateString()}
          </p>
        </div>
      </CardContent>
    </Card>
  );
};
export default EmployeeCard;
</file>

<file path="src/modules/employee/employee.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { ComboboxAdd } from "@/ui/combobox-add";
import { CurrencyInput } from "@/ui/currency-input";
import { DatePicker } from "@/ui/date-picker";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Textarea } from "@/ui/textarea";
import { createClient } from "@/utils/supabase/component";
import DepartmentForm from "@/department/department.form";
import { useDepartments } from "@/department/department.hooks";
import useDepartmentStore from "@/department/department.store";
import { useCreateEmployee, useUpdateEmployee } from "@/employee/employee.hooks";
import useEmployeeStore from "@/employee/employee.store";
import useUserStore from "@/stores/use-user-store";
const createEmployeeFormSchema = (t: (key: string) => string) => {
  const supabase = createClient();
  return z.object({
    first_name: z.string().min(1, t("Employees.form.first_name.required")),
    last_name: z.string().min(1, t("Employees.form.last_name.required")),
    email: z
      .string()
      .email(t("Employees.form.email.invalid"))
      .refine(async (email) => {
        const { user } = useUserStore.getState();
        if (!user?.id) return true; // If no user, skip validation
        const { data, error } = await supabase
          .from("employees")
          .select("id")
          .eq("email", email)
          .eq("user_id", user.id)
          .single();
        return !data;
      }, t("Employees.form.email.duplicate")),
    phone: z.string().optional(),
    position: z.string().min(1, t("Employees.form.position.required")),
    department: z.string().nullable(),
    hire_date: z.date({
      required_error: t("Employees.form.hire_date.required"),
    }),
    salary: z
      .string()
      .optional()
      .refine(
        (val) => !val || (!isNaN(parseFloat(val)) && parseFloat(val) >= 0),
        t("Employees.form.salary.invalid"),
      ),
    status: z.enum(["active", "inactive", "on_leave", "terminated"]),
    notes: z.string().optional(),
  });
};
export type EmployeeFormValues = z.infer<ReturnType<typeof createEmployeeFormSchema>>;
interface EmployeeFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: EmployeeFormValues;
  editMode?: boolean;
}
export function EmployeeForm({ id, onSuccess, defaultValues, editMode }: EmployeeFormProps) {
  const t = useTranslations();
  const user = useUserStore((state) => state.user);
  const { mutate: createEmployee } = useCreateEmployee();
  const { mutate: updateEmployee } = useUpdateEmployee();
  const isDepartmentSaving = useDepartmentStore((state) => state.isLoading);
  const setIsDepartmentSaving = useDepartmentStore((state) => state.setIsLoading);
  const [isDepartmentDialogOpen, setIsDepartmentDialogOpen] = useState(false);
  const { data: departments, isLoading: departmentsLoading } = useDepartments();
  const locale = useLocale();
  const setLoadingSave = useEmployeeStore((state) => state.setIsLoading);
  const loadingSave = useEmployeeStore((state) => state.isLoading);
  const form = useForm<EmployeeFormValues>({
    resolver: zodResolver(createEmployeeFormSchema(t)),
    defaultValues: {
      first_name: defaultValues?.first_name || "",
      last_name: defaultValues?.last_name || "",
      email: defaultValues?.email || "",
      phone: defaultValues?.phone || "",
      position: defaultValues?.position || "",
      department: defaultValues?.department || null,
      hire_date: defaultValues?.hire_date || undefined,
      salary: defaultValues?.salary || "",
      status: defaultValues?.status || "active",
      notes: defaultValues?.notes || "",
    },
  });
  // Format departments for ComboboxAdd
  const departmentOptions =
    departments?.map((department) => ({
      label: department.name,
      value: department.id,
    })) || [];
  const handleSubmit = async (data: EmployeeFormValues) => {
    setLoadingSave(true);
    try {
      if (editMode) {
        await updateEmployee({
          id: id!,
          updates: {
            first_name: data.first_name.trim(),
            last_name: data.last_name.trim(),
            email: data.email.trim(),
            phone: data.phone?.trim() || undefined,
            position: data.position.trim(),
            hire_date: data.hire_date?.toISOString(),
            salary: data.salary ? parseFloat(data.salary) : undefined,
            status: data.status,
            notes: data.notes?.trim() || undefined,
            department_id: data.department || undefined,
          },
        });
        toast.success(t("General.successful_operation"), {
          description: t("Employees.success.updated"),
        });
        onSuccess?.();
      } else {
        await createEmployee({
          first_name: data.first_name.trim(),
          last_name: data.last_name.trim(),
          email: data.email.trim(),
          phone: data.phone?.trim() || undefined,
          position: data.position.trim(),
          hire_date: data.hire_date?.toISOString(),
          salary: data.salary ? parseFloat(data.salary) : undefined,
          status: data.status,
          notes: data.notes?.trim() || undefined,
          department_id: data.department || undefined,
        });
        toast.success(t("General.successful_operation"), {
          description: t("Employees.success.created"),
        });
        onSuccess?.();
      }
    } catch (error) {
      console.error(error);
      setLoadingSave(false);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Employees.error.create"),
      });
      throw error;
    }
  };
  if (typeof window !== "undefined") {
    (window as any).employeeForm = form;
  }
  return (
    <>
      <Form {...form}>
        <form
          id={id}
          onSubmit={async (e) => {
            e.preventDefault();
            setLoadingSave(true);
            const isValid = await form.trigger();
            if (!isValid) {
              setLoadingSave(false);
              return;
            }
            form.handleSubmit(handleSubmit)(e);
          }}
          className="space-y-4"
        >
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="first_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.first_name.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Employees.form.first_name.placeholder")}
                      disabled={loadingSave}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.last_name.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Employees.form.last_name.placeholder")}
                      disabled={loadingSave}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.email.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      type="email"
                      placeholder={t("Employees.form.email.placeholder")}
                      disabled={loadingSave}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.phone.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="tel"
                      placeholder={t("Employees.form.phone.placeholder")}
                      disabled={loadingSave}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="position"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.position.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Employees.form.position.placeholder")}
                      disabled={loadingSave}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="department"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.department.label")}</FormLabel>
                  <FormControl>
                    <ComboboxAdd
                      direction={locale === "ar" ? "rtl" : "ltr"}
                      data={departmentOptions}
                      isLoading={departmentsLoading}
                      defaultValue={field.value || ""}
                      onChange={(value) => field.onChange(value || null)}
                      texts={{
                        placeholder: t("Employees.form.department.placeholder"),
                        searchPlaceholder: t("Departments.search_departments"),
                        noItems: t("Employees.form.department.no_departments"),
                      }}
                      addText={t("Departments.add_new")}
                      onAddClick={() => setIsDepartmentDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="hire_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.hire_date.label")} *</FormLabel>
                  <FormControl>
                    <DatePicker
                      date={field.value}
                      onSelect={field.onChange}
                      placeholder={t("Employees.form.hire_date.placeholder")}
                      disabled={loadingSave}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="salary"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Employees.form.salary.label")}</FormLabel>
                  <FormControl>
                    <CurrencyInput
                      showCommas={true}
                      value={field.value ? parseFloat(field.value) : undefined}
                      onChange={(value) => field.onChange(value?.toString() || "")}
                      placeholder={t("Employees.form.salary.placeholder")}
                      disabled={loadingSave}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Employees.form.status.label")}</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  disabled={loadingSave}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder={t("Employees.form.status.placeholder")} />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="active">{t("Employees.form.status.active")}</SelectItem>
                    <SelectItem value="inactive">{t("Employees.form.status.inactive")}</SelectItem>
                    <SelectItem value="on_leave">{t("Employees.form.status.on_leave")}</SelectItem>
                    <SelectItem value="terminated">
                      {t("Employees.form.status.terminated")}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Employees.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Employees.form.notes.placeholder")}
                    className="min-h-[100px]"
                    disabled={loadingSave}
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <FormDialog
        open={isDepartmentDialogOpen}
        onOpenChange={setIsDepartmentDialogOpen}
        title={t("Departments.add_new")}
        formId="department-form"
        cancelText={t("General.cancel")}
        submitText={t("General.save")}
        loadingSave={isDepartmentSaving}
      >
        <DepartmentForm
          id="department-form"
          onSuccess={() => {
            setIsDepartmentDialogOpen(false);
            setIsDepartmentSaving(false);
          }}
        />
      </FormDialog>
    </>
  );
}
</file>

<file path="src/modules/employee/employee.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { departmentKeys } from "@/department/department.hooks";
import {
  createEmployee,
  deleteEmployee,
  duplicateEmployee,
  fetchEmployeeById,
  fetchEmployees,
  updateEmployee,
} from "@/employee/employee.service";
import { Employee, EmployeeCreateData } from "@/employee/employee.types";
export const employeeKeys = {
  all: ["employees"] as const,
  lists: () => [...employeeKeys.all, "list"] as const,
  list: (filters: any) => [...employeeKeys.lists(), { filters }] as const,
  details: () => [...employeeKeys.all, "detail"] as const,
  detail: (id: string) => [...employeeKeys.details(), id] as const,
};
// Hook for fetching all employees
export const useEmployees = () => {
  return useQuery({
    queryKey: employeeKeys.lists(),
    queryFn: fetchEmployees,
    staleTime: 10000, // Consider data fresh for 10 seconds
  });
};
// Hook for fetching a single employee by ID
export const useEmployee = (id: string) => {
  return useQuery({
    queryKey: employeeKeys.detail(id),
    queryFn: () => fetchEmployeeById(id),
    enabled: !!id,
  });
};
// Hook for adding a new employee
export const useCreateEmployee = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (employee: EmployeeCreateData) => createEmployee(employee),
    onSuccess: (newEmployee) => {
      const previousEmployees = queryClient.getQueryData(employeeKeys.lists()) || [];
      queryClient.setQueryData(employeeKeys.lists(), [
        ...(Array.isArray(previousEmployees) ? previousEmployees : []),
        newEmployee,
      ]);
    },
  });
};
// Hook for duplicating an employee
export const useDuplicateEmployee = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateEmployee(id),
  });
};
// Hook for updating an employee with optimistic updates
export const useUpdateEmployee = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: Partial<Employee> }) =>
      updateEmployee(id, updates),
    onMutate: async ({ id, updates }) => {
      // Cancel any outgoing refetches
      await queryClient.cancelQueries({ queryKey: employeeKeys.lists() });
      await queryClient.cancelQueries({ queryKey: employeeKeys.detail(id) });
      // Snapshot the previous values
      const previousEmployees = queryClient.getQueryData(employeeKeys.lists());
      const previousEmployee = queryClient.getQueryData(employeeKeys.detail(id));
      // Prepare updates to apply optimistically
      const optimisticUpdates = { ...updates };
      // Handle department_id changes to also update the department name for UI
      if (updates.department_id !== undefined) {
        try {
          // Get the current departments from the cache
          const departments: any = queryClient.getQueryData(departmentKeys.lists());
          if (departments && Array.isArray(departments)) {
            // Find the department with the matching ID
            const department = departments.find((d: any) => d.id === updates.department_id);
            if (department) {
              // Set the department name for the optimistic update
              optimisticUpdates.department = department.name;
            }
          }
        } catch (error) {
          console.error("Error getting department name for optimistic update:", error);
        }
      }
      // Optimistically update the cache
      queryClient.setQueryData(employeeKeys.lists(), (old: Employee[] | undefined) => {
        if (!old) return old;
        return old.map((employee) => {
          if (employee.id === id) {
            return { ...employee, ...optimisticUpdates };
          }
          return employee;
        });
      });
      if (previousEmployee) {
        queryClient.setQueryData(employeeKeys.detail(id), (old: Employee | undefined) => {
          if (!old) return old;
          return { ...old, ...optimisticUpdates };
        });
      }
      return { previousEmployees, previousEmployee };
    },
    onSuccess: (updatedEmployee, { id }) => {
      // Manually update the cache with the new data instead of invalidating
      queryClient.setQueryData(employeeKeys.lists(), (old: Employee[] | undefined) => {
        if (!old) return [updatedEmployee];
        return old.map((employee) => (employee.id === id ? updatedEmployee : employee));
      });
      // Also update the individual employee query data if it exists
      queryClient.setQueryData(employeeKeys.detail(id), updatedEmployee);
    },
    onError: (err, { id }, context) => {
      // Roll back to the previous values if mutation fails
      if (context?.previousEmployees) {
        queryClient.setQueryData(employeeKeys.lists(), context.previousEmployees);
      }
      if (context?.previousEmployee) {
        queryClient.setQueryData(employeeKeys.detail(id), context.previousEmployee);
      }
    },
    // Don't invalidate queries on settle - we're manually updating the cache
  });
};
// Hook for deleting an employee
export const useDeleteEmployee = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteEmployee(id),
    onMutate: async (id) => {
      // Cancel any outgoing refetches
      await queryClient.cancelQueries({ queryKey: employeeKeys.lists() });
      // Snapshot the previous value
      const previousEmployees = queryClient.getQueryData(employeeKeys.lists());
      // Optimistically remove the employee from the list
      queryClient.setQueryData(employeeKeys.lists(), (old: Employee[] | undefined) => {
        if (!old) return old;
        return old.filter((employee) => employee.id !== id);
      });
      return { previousEmployees };
    },
    onError: (_, __, context) => {
      // Roll back to the previous value if mutation fails
      if (context?.previousEmployees) {
        queryClient.setQueryData(employeeKeys.lists(), context.previousEmployees);
      }
    },
    onSettled: () => {
      // Always refetch to ensure cache consistency
      queryClient.invalidateQueries({ queryKey: employeeKeys.lists() });
    },
  });
};
export function useBulkDeleteEmployees() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: async (ids: string[]) => {
      const response = await fetch("/api/employees/bulk-delete", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ids }),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to delete offices");
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: employeeKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/employee/employee.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/employee/employee.service.ts">
import { createClient } from "@/utils/supabase/component";
import { Employee, EmployeeCreateData } from "@/employee/employee.types";
import useUserStore from "@/stores/use-user-store";
export async function fetchEmployees(): Promise<Employee[]> {
  const supabase = createClient();
  const user = useUserStore.getState().user;
  if (!user?.id) {
    console.error("No authenticated user found in fetchEmployees");
    throw new Error("No authenticated user");
  }
  const { data, error } = await supabase
    .from("employees")
    .select(
      `
      *,
      department:departments (
        name
      )
    `,
    )
    .eq("user_id", user.id);
  if (error) {
    console.error("Error fetching employees:", error);
    throw error;
  }
  // Transform the data to match our Employee type
  return data.map((employee: any) => ({
    id: employee.id,
    first_name: employee.first_name,
    last_name: employee.last_name,
    email: employee.email,
    phone: employee.phone,
    position: employee.position,
    department: employee.department?.name || null,
    department_id: employee.department_id,
    hire_date: employee.hire_date,
    salary: employee.salary,
    status: employee.status,
    notes: employee.notes,
    created_at: employee.created_at,
    updated_at: employee.updated_at,
  }));
}
export async function fetchEmployeeById(id: string): Promise<Employee> {
  const supabase = createClient();
  const { data, error } = await supabase
    .from("employees")
    .select(
      `
      *,
      department:departments (
        name
      )
    `,
    )
    .eq("id", id)
    .single();
  if (error) throw error;
  // Transform the data to match our Employee type
  return {
    id: data.id,
    first_name: data.first_name,
    last_name: data.last_name,
    email: data.email,
    phone: data.phone,
    position: data.position,
    department: data.department?.name || null,
    department_id: data.department_id,
    hire_date: data.hire_date,
    salary: data.salary,
    status: data.status,
    notes: data.notes,
    created_at: data.created_at,
    updated_at: data.updated_at,
  };
}
export async function updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee> {
  const user = useUserStore.getState().user;
  if (!user?.id) {
    throw new Error("No authenticated user");
  }
  // Convert from snake_case to camelCase for the database
  const employeeData: Record<string, any> = {};
  // Map from snake_case interface to camelCase database fields
  Object.entries(updates).forEach(([key, value]) => {
    // Special case for department_id
    if (key === "department_id") {
      employeeData["department_id"] = value;
    }
    // Skip department field as it's a virtual field
    else if (key === "department") {
      // Skip this field as it's handled by the join
    } else if (key === "status") {
      employeeData["status"] = value;
    }
    // Fields that should remain with snake_case in the database
    else if (["first_name", "last_name", "phone"].includes(key)) {
      employeeData[key] = value;
    }
    // All other fields: convert from snake_case to camelCase
    else if (key.includes("_")) {
      // Convert snake_case to camelCase
      const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
      employeeData[camelKey] = value;
    }
    // For fields already in camelCase, keep as is
    else {
      employeeData[key] = value;
    }
  });
  const response = await fetch(`/api/employees/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      ...employeeData,
      user_id: user.id,
    }),
  });
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || "Failed to update employee");
  }
  const updatedEmployee = await response.json();
  // Transform the data back to snake_case for our application
  return {
    id: updatedEmployee.id,
    first_name: updatedEmployee.first_name,
    last_name: updatedEmployee.last_name,
    email: updatedEmployee.email,
    phone: updatedEmployee.phone,
    position: updatedEmployee.position,
    department: updatedEmployee.department?.name || null,
    department_id: updatedEmployee.department_id,
    hire_date: updatedEmployee.hire_date,
    salary: updatedEmployee.salary,
    status: updatedEmployee.status,
    notes: updatedEmployee.notes,
    created_at: updatedEmployee.created_at,
    updated_at: updatedEmployee.updated_at,
  };
}
export async function createEmployee(newEmployee: EmployeeCreateData): Promise<Employee> {
  try {
    const response = await fetch("/api/employees/create", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newEmployee),
    });
    if (!response.ok) {
      throw new Error("Failed to create employee");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating employee:", error);
    throw new Error("Failed to create employee");
  }
}
export async function duplicateEmployee(id: string): Promise<Employee> {
  const response = await fetch(`/api/employees/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error("Failed to duplicate employee");
  }
  return response.json();
}
// export async function createEmployee(
//   employee: Omit<Employee, "id" | "created_at" | "updated_at">,
// ): Promise<Employee> {
//   const supabase = createClient();
//   const user = useUserStore.getState().user;
//   if (!user?.id) {
//     throw new Error("No authenticated user");
//   }
//   // Convert from snake_case to camelCase for the database
//   const employeeData: Record<string, any> = {};
//   // Map from snake_case interface to camelCase database fields
//   Object.entries(employee).forEach(([key, value]) => {
//     // Special case for department_id
//     if (key === "department_id") {
//       employeeData["department_id"] = value;
//     }
//     // Skip department field as it's a virtual field
//     else if (key === "department") {
//       // Skip this field as it's handled by the join
//     } else if (key === "status") {
//       employeeData["status"] = value;
//     }
//     // Fields that should remain with snake_case in the database
//     else if (["first_name", "last_name", "phone"].includes(key)) {
//       employeeData[key] = value;
//     }
//     // All other fields: convert from snake_case to camelCase
//     else if (key.includes("_")) {
//       // Convert snake_case to camelCase
//       const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
//       employeeData[camelKey] = value;
//     }
//     // For fields already in camelCase, keep as is
//     else {
//       employeeData[key] = value;
//     }
//   });
//   // Add the user_id to the employee data
//   employeeData.user_id = user.id;
//   const { data, error } = await supabase
//     .from("employees")
//     .insert([employeeData])
//     .select(
//       `
//       *,
//       department:departments (
//         name
//       )
//     `,
//     )
//     .single();
//   if (error) throw error;
//   // Transform the data back to snake_case for our application
//   return {
//     id: data.id,
//     first_name: data.first_name,
//     last_name: data.last_name,
//     email: data.email,
//     phone: data.phone,
//     position: data.position,
//     department: data.department?.name || null,
//     department_id: data.department_id,
//     hire_date: data.hire_date,
//     salary: data.salary,
//     status: data.status,
//     notes: data.notes,
//     created_at: data.created_at,
//     updated_at: data.updated_at,
//   };
// }
export async function deleteEmployee(id: string): Promise<void> {
  const supabase = createClient();
  const { error } = await supabase.from("employees").delete().eq("id", id);
  if (error) throw error;
}
</file>

<file path="src/modules/employee/employee.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Employee } from "./employee.types";
const searchEmployeeFn = (employee: Employee, searchQuery: string) =>
  employee.first_name.toLowerCase().includes(searchQuery.toLowerCase());
const useEmployeeStore = createGenericStore<Employee>("employees", searchEmployeeFn);
export default useEmployeeStore;
</file>

<file path="src/modules/employee/employee.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback, useEffect, useState } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useDepartments } from "@/department/department.hooks";
import { useUpdateEmployee } from "@/employee/employee.hooks";
import useEmployeeStore from "@/employee/employee.store";
import { Employee } from "@/employee/employee.types";
import useUserStore from "@/stores/use-user-store";
const EmployeesTable = ({
  data,
  isLoading,
  error,
  onActionClicked,
}: ModuleTableProps<Employee>) => {
  const t = useTranslations();
  const { data: departments } = useDepartments();
  const { mutateAsync: updateEmployee } = useUpdateEmployee();
  const selectedRows = useEmployeeStore((state) => state.selectedRows);
  const setSelectedRows = useEmployeeStore((state) => state.setSelectedRows);
  const canEditEmployee = useUserStore((state) => state.hasPermission("employees.update"));
  const canDuplicateEmployee = useUserStore((state) => state.hasPermission("employees.duplicate"));
  const canViewEmployee = useUserStore((state) => state.hasPermission("employees.view"));
  const canArchiveEmployee = useUserStore((state) => state.hasPermission("employees.archive"));
  const canDeleteEmployee = useUserStore((state) => state.hasPermission("employees.delete"));
  const [currentData, setCurrentData] = useState<Employee[]>(data);
  const [pendingUpdates, setPendingUpdates] = useState<Record<string, Partial<Employee>>>({});
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Employee>[] = [
    {
      accessorKey: "first_name",
      header: t("Employees.form.first_name.label"),
      validationSchema: z.string().min(1, t("Employees.form.first_name.required")),
    },
    {
      accessorKey: "last_name",
      header: t("Employees.form.last_name.label"),
      validationSchema: z.string().min(1, t("Employees.form.last_name.required")),
    },
    {
      accessorKey: "email",
      header: t("Employees.form.email.label"),
      validationSchema: z.string().email(t("Employees.form.email.invalid")),
    },
    {
      accessorKey: "phone",
      header: t("Employees.form.phone.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "position",
      header: t("Employees.form.position.label"),
      validationSchema: z.string().min(1, t("Employees.form.position.required")),
    },
    {
      accessorKey: "department_id",
      header: t("Employees.form.department.label"),
      validationSchema: z.string().optional(),
      cellType: "select",
      options: departments?.map((department) => ({
        label: department.name,
        value: department.id,
      })),
      cell: ({ row }) => {
        const department = departments?.find((d) => d.id === row.original.department_id);
        return department?.name || "";
      },
    },
    {
      accessorKey: "status",
      header: t("Employees.form.status.label"),
      validationSchema: z.enum(["active", "inactive", "on_leave", "terminated"]),
      cellType: "select",
      options: [
        { label: t("Employees.form.status.active"), value: "active" },
        { label: t("Employees.form.status.inactive"), value: "inactive" },
        { label: t("Employees.form.status.on_leave"), value: "on_leave" },
        { label: t("Employees.form.status.terminated"), value: "terminated" },
      ],
    },
  ];
  useEffect(() => {
    setCurrentData(data);
  }, [data]);
  const handleRowSelectionChange = useCallback(
    (rows: Employee[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  // Create a memoized handleEdit function
  const handleEdit = useCallback(
    (rowId: string, columnId: string, value: unknown) => {
      let updates: Partial<Employee> = {};
      if (columnId === "department_id") {
        // For department changes, handle department_id and department name
        const department_id = value as string;
        const department = departments?.find((d) => d.id === department_id);
        if (department) {
          updates = {
            department_id: department_id,
            department: department.name, // Set both department_id and department name
          };
        } else {
          updates = {
            department_id: null,
            department: null,
          };
        }
      } else if (columnId === "status") {
        updates.status = value as "active" | "inactive" | "on_leave" | "terminated";
      } else {
        // For other fields, directly update
        updates = { [columnId]: value };
      }
      // Track this update in our pending updates
      setPendingUpdates((prev) => ({
        ...prev,
        [rowId]: { ...(prev[rowId] || {}), ...updates },
      }));
      // Immediately apply to our current data view
      setCurrentData((current) =>
        current.map((employee) => (employee.id === rowId ? { ...employee, ...updates } : employee)),
      );
      // Send to the server
      updateEmployee(
        { id: rowId, updates },
        {
          onSuccess: () => {
            // On success, clear this item from pending updates
            setPendingUpdates((prev) => {
              const { [rowId]: _, ...rest } = prev;
              return rest;
            });
          },
          onError: () => {
            // On error, revert this specific update
            setPendingUpdates((prev) => {
              const { [rowId]: _, ...rest } = prev;
              return rest;
            });
            // Also revert our current data view for this row
            setCurrentData((current) =>
              current.map((employee) =>
                employee.id === rowId
                  ? data.find((e) => e.id === rowId) || employee // Revert to original
                  : employee,
              ),
            );
          },
        },
      );
    },
    [data, departments, updateEmployee],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const employeeTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Employee) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditEmployee}
      canDuplicateAction={canDuplicateEmployee}
      canViewAction={canViewEmployee}
      canArchiveAction={canArchiveEmployee}
      canDeleteAction={canDeleteEmployee}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={employeeTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default EmployeesTable;
</file>

<file path="src/modules/employee/employee.types.ts">
export interface Employee {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string;
  position: string;
  department?: string | null;
  department_id?: string | null;
  hire_date: string;
  salary?: number;
  status: "active" | "inactive" | "on_leave" | "terminated";
  notes?: string;
  created_at: string;
  updated_at: string;
}
export type EmployeeCreateData = Omit<Employee, "id" | "created_at" | "updated_at"> & {
  user_id?: string;
};
</file>

<file path="src/modules/employee-request/employee-request.card.tsx">
import { useTranslations } from "next-intl";
import { Card, CardContent } from "@/ui/card";
import { EmployeeRequest } from "@/employee-request/employee-request.type";
const EmployeeRequestCard = ({ employeeRequest }: { employeeRequest: EmployeeRequest }) => {
  const t = useTranslations("EmployeeRequests");
  return (
    <Card key={employeeRequest.id} className="transition-shadow hover:shadow-lg">
      <CardContent className="pt-6">
        <div className="mb-4 flex items-center justify-between">
          <h3 className="text-lg font-semibold">{employeeRequest.title}</h3>
          <div className="space-x-2">
            <span className="text-sm text-gray-500">{employeeRequest.type}</span>
            <span
              className={`inline-block rounded-full px-2 py-1 text-xs ${
                employeeRequest.status === "approved"
                  ? "bg-green-100 text-green-800"
                  : employeeRequest.status === "rejected"
                    ? "bg-red-100 text-red-800"
                    : "bg-gray-100 text-gray-800"
              }`}
            >
              {employeeRequest.status}
            </span>
          </div>
        </div>
        <p className="mb-2 text-sm text-gray-600">
          {employeeRequest.description || t("no_description")}
        </p>
        <div className="text-sm text-gray-500">
          <p>Employee name here</p>
          {/* <p>{t("employee_label", { name: employeeRequest.employee_name })}</p> */}
          {employeeRequest.start_date && (
            <p>
              {t("date_range", {
                start: new Date(employeeRequest.start_date).toLocaleDateString(),
                end: employeeRequest.end_date
                  ? new Date(employeeRequest.end_date).toLocaleDateString()
                  : t("not_specified"),
              })}
            </p>
          )}
          {employeeRequest.amount && (
            <p>{t("amount_label", { amount: employeeRequest.amount.toFixed(2) })}</p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default EmployeeRequestCard;
</file>

<file path="src/modules/employee-request/employee-request.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/ui/button";
import { Calendar } from "@/ui/calendar";
import { ComboboxAdd } from "@/ui/combobox-add";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Textarea } from "@/ui/textarea";
import { cn } from "@/lib/utils";
import { EmployeeForm } from "@/employee/employee.form";
import { useEmployees } from "@/employee/employee.hooks";
import useEmployeeStore from "@/employee/employee.store";
import useEmployeeRequestsStore from "@/employee-request/employee-request.store";
const createRequestSchema = (t: (key: string) => string) =>
  z.object({
    employee_id: z
      .string({ message: t("EmployeeRequests.form.employee.required") })
      .nonempty({ message: t("EmployeeRequests.form.employee.required") })
      .uuid({ message: t("EmployeeRequests.form.employee.required") }),
    type: z.enum(["leave", "expense", "document", "other"]),
    status: z.enum(["pending", "approved", "rejected"]).default("pending"),
    title: z.string({ message: t("EmployeeRequests.form.title.required") }).min(1),
    description: z.string().optional(),
    start_date: z.date().optional(),
    end_date: z.date().optional(),
    amount: z.number().optional(),
    // attachments: z.array(z.any()).default([]),
    notes: z.string().optional(),
  });
export type EmployeeRequestFormValues = z.input<ReturnType<typeof createRequestSchema>>;
interface EmployeeRequestFormProps {
  id?: string;
  employee_id?: string;
  onSubmit: (data: EmployeeRequestFormValues) => void;
  loading?: boolean;
}
const EmployeeRequestForm = ({ id, employee_id, onSubmit }: EmployeeRequestFormProps) => {
  const t = useTranslations();
  const locale = useLocale();
  const { data: employees = [], isLoading: employeesLoading } = useEmployees();
  const setIsLoadingCreateEmployee = useEmployeeStore((state) => state.setIsLoading);
  const isLoadingCreateEmployee = useEmployeeStore((state) => state.isLoading);
  const [isEmployeeDialogOpen, setIsEmployeeDialogOpen] = useState(false);
  const isLoadingSave = useEmployeeRequestsStore((state) => state.isLoading);
  const setIsLoadingSave = useEmployeeRequestsStore((state) => state.setIsLoading);
  const form = useForm<EmployeeRequestFormValues>({
    resolver: zodResolver(createRequestSchema(t)),
    mode: "onChange",
    defaultValues: {
      employee_id: employee_id || "",
      type: "leave",
      status: "pending",
      title: "",
      description: "",
      start_date: undefined,
      end_date: undefined,
      amount: undefined,
      // attachments: [],
      notes: "",
    },
  });
  // Format employees for ComboboxAdd
  const employeeOptions = employees.map((emp) => {
    return {
      label: `${emp.first_name} ${emp.last_name}`,
      value: emp.email,
      id: emp.id,
    };
  });
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      setIsLoadingSave(true);
      const isValid = await form.trigger();
      if (!isValid) {
        setIsLoadingSave(false);
        return;
      }
      await form.handleSubmit(onSubmit)();
    } catch (error) {
      setIsLoadingSave(false);
      console.error("Error submitting form:", error);
    }
  };
  const requestTypes = [
    { label: t("EmployeeRequests.form.type.leave"), value: "leave" },
    { label: t("EmployeeRequests.form.type.expense"), value: "expense" },
    { label: t("EmployeeRequests.form.type.document"), value: "document" },
    { label: t("EmployeeRequests.form.type.other"), value: "other" },
  ] as const;
  if (typeof window !== "undefined") {
    (window as any).employeeRequestForm = form;
  }
  return (
    <>
      <Form {...form}>
        <form id={id || "employee-request-form"} onSubmit={handleSubmit} className="space-y-4">
          <FormField
            control={form.control}
            name="employee_id"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.employee.label")} *</FormLabel>
                <FormControl>
                  <ComboboxAdd
                    direction={locale === "ar" ? "rtl" : "ltr"}
                    data={employeeOptions}
                    disabled={isLoadingSave}
                    isLoading={employeesLoading}
                    defaultValue={field.value}
                    valueKey={"id"}
                    onChange={(value) => {
                      field.onChange(value || null);
                    }}
                    renderOption={(item) => {
                      return (
                        <div className="flex flex-col">
                          <span>{item.label}</span>
                          <span className="text-muted-foreground text-sm">{item.value}</span>
                        </div>
                      );
                    }}
                    texts={{
                      placeholder: t("EmployeeRequests.form.employee.placeholder"),
                      searchPlaceholder: t("Employees.search_employees"),
                      noItems: t("EmployeeRequests.form.employee.no_employees"),
                    }}
                    addText={t("Employees.add_new")}
                    onAddClick={() => setIsEmployeeDialogOpen(true)}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.type.label")}</FormLabel>
                <FormControl>
                  <Select
                    disabled={isLoadingSave}
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder={t("EmployeeRequests.form.type.placeholder")} />
                    </SelectTrigger>
                    <SelectContent>
                      {requestTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.title.label")}</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    placeholder={t("EmployeeRequests.form.title.placeholder")}
                    disabled={isLoadingSave}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.description.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    {...field}
                    placeholder={t("EmployeeRequests.form.description.placeholder")}
                    disabled={isLoadingSave}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="start_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("EmployeeRequests.form.date_range.start")}</FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full justify-start text-left font-normal",
                            !field.value && "text-muted-foreground",
                          )}
                          disabled={isLoadingSave}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? format(field.value, "PPP") : t("General.pick_date")}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="end_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("EmployeeRequests.form.date_range.end")}</FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full justify-start text-left font-normal",
                            !field.value && "text-muted-foreground",
                          )}
                          disabled={isLoadingSave}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? format(field.value, "PPP") : t("General.pick_date")}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="amount"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.amount.label")}</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    step="0.01"
                    {...field}
                    onChange={(e) => field.onChange(e.target.valueAsNumber)}
                    placeholder={t("EmployeeRequests.form.amount.placeholder")}
                    disabled={isLoadingSave}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("EmployeeRequests.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    {...field}
                    placeholder={t("EmployeeRequests.form.notes.placeholder")}
                    disabled={isLoadingSave}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <FormDialog
        open={isEmployeeDialogOpen}
        onOpenChange={setIsEmployeeDialogOpen}
        title={t("Employees.add_new")}
        formId="employee-form"
        loadingSave={isLoadingCreateEmployee}
      >
        <EmployeeForm
          id="employee-form"
          onSuccess={() => {
            setIsEmployeeDialogOpen(false);
            setIsLoadingCreateEmployee(false);
          }}
        />
      </FormDialog>
    </>
  );
};
export default EmployeeRequestForm;
</file>

<file path="src/modules/employee-request/employee-request.hooks.ts">
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import {
  createEmployeeRequest,
  deleteEmployeeRequest,
  fetchEmployeeRequestById,
  fetchEmployeeRequests,
  updateEmployeeRequest,
  bulkDeleteEmployeeRequests,
  duplicateEmployeeRequest,
} from "./employee-request.service";
import { EmployeeRequest } from "./employee-request.type";
export const employeeRequestKeys = {
  all: ["employeeRequests"] as const,
  lists: () => [...employeeRequestKeys.all, "list"] as const,
  list: (filters: any) => [...employeeRequestKeys.lists(), { filters }] as const,
  details: () => [...employeeRequestKeys.all, "detail"] as const,
  detail: (id: string) => [...employeeRequestKeys.details(), id] as const,
};
export function useEmployeeRequests() {
  return useQuery({
    queryKey: employeeRequestKeys.lists(),
    queryFn: fetchEmployeeRequests,
  });
}
export function useEmployeeRequest(id: string) {
  return useQuery({
    queryKey: employeeRequestKeys.detail(id),
    queryFn: () => fetchEmployeeRequestById(id),
    enabled: !!id,
  });
}
export function useCreateEmployeeRequest() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (employeeRequest: EmployeeRequest) => createEmployeeRequest(employeeRequest),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: employeeRequestKeys.lists() });
    },
  });
}
export function useDuplicateEmployeeRequest() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateEmployeeRequest(id),
  });
}
export function useUpdateEmployeeRequest() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<EmployeeRequest> }) =>
      updateEmployeeRequest(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: employeeRequestKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: employeeRequestKeys.lists() });
    },
  });
}
export function useDeleteEmployeeRequest() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteEmployeeRequest,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: employeeRequestKeys.lists() });
      queryClient.removeQueries({ queryKey: employeeRequestKeys.detail(variables) });
    },
  });
}
export function useBulkDeleteEmployeeRequests() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteEmployeeRequests,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: employeeRequestKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/employee-request/employee-request.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "title", translationKey: "EmployeeRequests.form.title.label", type: "text" },
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
  { value: "title", translationKey: "EmployeeRequests.form.title.label" },
];
</file>

<file path="src/modules/employee-request/employee-request.service.ts">
import { EmployeeRequest, EmployeeRequestCreateData } from "./employee-request.type";
export async function fetchEmployeeRequests(): Promise<EmployeeRequest[]> {
  try {
    const response = await fetch("/api/employee-requests");
    if (!response.ok) {
      throw new Error("Failed to fetch employee requests");
    }
    const data = await response.json();
    return data.requests || [];
  } catch (error) {
    console.error("Error fetching employee requests:", error);
    throw new Error("Failed to fetch employee requests");
  }
}
export async function fetchEmployeeRequestById(id: string): Promise<EmployeeRequest> {
  try {
    const response = await fetch(`/api/employee-requests/${id}`);
    if (!response.ok) {
      throw new Error(`Employee request with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error fetching employee request ${id}:`, error);
    throw new Error(`Failed to fetch employee request with id ${id}`);
  }
}
export async function createEmployeeRequest(
  employeeRequest: EmployeeRequestCreateData,
): Promise<EmployeeRequest> {
  try {
    const response = await fetch("/api/employee-requests", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(employeeRequest),
    });
    if (!response.ok) {
      throw new Error("Failed to create employee request");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating employee request:", error);
    throw new Error("Failed to create employee request");
  }
}
export async function duplicateEmployeeRequest(id: string): Promise<EmployeeRequest> {
  const response = await fetch(`/api/employee-requests/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error("Failed to duplicate employee request");
  }
  return response.json();
}
export async function updateEmployeeRequest(
  id: string,
  updates: Partial<EmployeeRequest>,
): Promise<EmployeeRequest> {
  try {
    const response = await fetch(`/api/employee-requests/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updates),
    });
    if (!response.ok) {
      throw new Error(`Failed to update employee request with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error updating employee request ${id}:`, error);
    throw new Error(`Failed to update employee request with id ${id}`);
  }
}
export async function deleteEmployeeRequest(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/employee-requests/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) {
      throw new Error(`Failed to delete employee request with id ${id}`);
    }
  } catch (error) {
    console.error(`Error deleting employee request ${id}:`, error);
    throw new Error(`Failed to delete employee request with id ${id}`);
  }
}
export async function bulkDeleteEmployeeRequests(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/employee-requests/bulk-delete", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete employee requests");
    }
  } catch (error) {
    console.error("Error deleting employee requests:", error);
    throw new Error("Failed to delete employee requests");
  }
}
</file>

<file path="src/modules/employee-request/employee-request.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { EmployeeRequest } from "./employee-request.type";
const searchEmployeeRequestFn = (employeeRequest: EmployeeRequest, searchQuery: string) =>
  employeeRequest.title.toLowerCase().includes(searchQuery.toLowerCase());
const useEmployeeRequestStore = createGenericStore<EmployeeRequest>(
  "employee-requests",
  searchEmployeeRequestFn,
);
export default useEmployeeRequestStore;
</file>

<file path="src/modules/employee-request/employee-request.table.tsx">
import { format } from "date-fns";
import { useTranslations } from "next-intl";
import React from "react";
import { z } from "zod";
import { Badge } from "@/ui/badge";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateEmployeeRequest } from "@/employee-request/employee-request.hooks";
import useEmployeeRequestsStore from "@/employee-request/employee-request.store";
import { EmployeeRequest } from "@/employee-request/employee-request.type";
import useUserStore from "@/stores/use-user-store";
const EmployeeRequestsTable = ({
  data,
  isLoading,
  error,
  onActionClicked,
}: ModuleTableProps<EmployeeRequest>) => {
  const t = useTranslations();
  const { mutate: updateEmployeeRequest } = useUpdateEmployeeRequest();
  const setSelectedRows = useEmployeeRequestsStore((state) => state.setSelectedRows);
  const selectedRows = useEmployeeRequestsStore((state) => state.selectedRows);
  const canEditEmployeeRequest = useUserStore((state) =>
    state.hasPermission("employee-requests.update"),
  );
  const canDuplicateEmployeeRequest = useUserStore((state) =>
    state.hasPermission("employee-requests.duplicate"),
  );
  const canViewEmployeeRequest = useUserStore((state) =>
    state.hasPermission("employee-requests.view"),
  );
  const canArchiveEmployeeRequest = useUserStore((state) =>
    state.hasPermission("employee-requests.archive"),
  );
  const canDeleteEmployeeRequest = useUserStore((state) =>
    state.hasPermission("employee-requests.delete"),
  );
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<EmployeeRequest>[] = [
    {
      accessorKey: "type",
      header: t("EmployeeRequests.form.type.label"),
      cell: ({ row }: { row: { original: EmployeeRequest } }) => (
        <Badge variant="outline" className="capitalize">
          {row.original.type}
        </Badge>
      ),
    },
    {
      accessorKey: "title",
      header: t("EmployeeRequests.form.title.label"),
      validationSchema: z.string().min(1, t("EmployeeRequests.form.title.required")),
    },
    {
      accessorKey: "status",
      header: t("EmployeeRequests.form.status.label"),
      cell: ({ row }: { row: { original: EmployeeRequest } }) => {
        const variant =
          row.original.status === "approved"
            ? "secondary"
            : row.original.status === "rejected"
              ? "destructive"
              : "default";
        return (
          <Badge variant={variant} className="capitalize">
            {row.original.status}
          </Badge>
        );
      },
    },
    {
      accessorKey: "start_date",
      header: t("EmployeeRequests.form.date_range.start"),
      cell: ({ row }: { row: { original: EmployeeRequest } }) =>
        row.original.start_date ? format(new Date(row.original.start_date), "PP") : "-",
    },
    {
      accessorKey: "end_date",
      header: t("EmployeeRequests.form.date_range.end"),
      cell: ({ row }: { row: { original: EmployeeRequest } }) =>
        row.original.end_date ? format(new Date(row.original.end_date), "PP") : "-",
    },
    {
      accessorKey: "amount",
      header: t("EmployeeRequests.form.amount.label"),
      cell: ({ row }: { row: { original: EmployeeRequest } }) =>
        row.original.amount ? `$${row.original.amount.toFixed(2)}` : "-",
    },
    {
      accessorKey: "description",
      header: t("EmployeeRequests.form.description.label"),
      validationSchema: z.string().nullable(),
    },
    {
      accessorKey: "notes",
      header: t("EmployeeRequests.form.notes.label"),
      validationSchema: z.string().nullable(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateEmployeeRequest({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = (rows: EmployeeRequest[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const employeeRequestTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: EmployeeRequest) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditEmployeeRequest}
      canDuplicateAction={canDuplicateEmployeeRequest}
      canViewAction={canViewEmployeeRequest}
      canArchiveAction={canArchiveEmployeeRequest}
      canDeleteAction={canDeleteEmployeeRequest}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={employeeRequestTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default EmployeeRequestsTable;
</file>

<file path="src/modules/employee-request/employee-request.type.ts">
export interface EmployeeRequest {
  id: string;
  employee_id: string;
  type: "leave" | "expense" | "document" | "other";
  status: "pending" | "approved" | "rejected";
  title: string;
  description?: string;
  start_date?: string;
  end_date?: string;
  amount?: number;
  attachments?: string[];
  notes?: string;
  created_at: string;
  updated_at: string;
}
export type EmployeeRequestCreateData = Omit<EmployeeRequest, "id" | "created_at" | "updated_at">;
export type EmployeeRequestUpdateData = Partial<EmployeeRequestCreateData>;
</file>

<file path="src/modules/expense/expense.card.tsx">
import { Calendar, DollarSign, FileText, Tag } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Expense } from "@/expense/expense.type";
const ExpenseCard = ({ expense }: { expense: Expense }) => {
  const t = useTranslations();
  return (
    <Card key={expense.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold">{expense.expense_number}</h3>
            <p className="text-sm text-gray-500">{expense.category}</p>
          </div>
          <Badge
            variant={
              expense.status === "paid"
                ? "default"
                : expense.status === "overdue"
                  ? "destructive"
                  : "secondary"
            }
          >
            {t(`Expenses.form.status.${expense.status}`)}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <DollarSign className="h-4 w-4" />
            <span>
              {new Intl.NumberFormat("en-US", {
                style: "currency",
                currency: "USD",
              }).format(expense.amount)}
            </span>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Calendar className="h-4 w-4" />
            <span>
              {t("Expenses.form.issue_date.label")}:{" "}
              {new Date(expense.issue_date).toLocaleDateString()}
            </span>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Calendar className="h-4 w-4" />
            <span>
              {t("Expenses.form.due_date.label")}: {new Date(expense.due_date).toLocaleDateString()}
            </span>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Tag className="h-4 w-4" />
            <span>{expense.category}</span>
          </div>
          {expense.notes && (
            <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
              <FileText className="mt-1 h-4 w-4" />
              <p>{expense.notes}</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default ExpenseCard;
</file>

<file path="src/modules/expense/expense.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { CurrencyInput } from "@/ui/currency-input";
import { DatePicker } from "@/ui/date-picker";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Textarea } from "@/ui/textarea";
import useUserStore from "@/stores/use-user-store";
import { useCreateExpense, useUpdateExpense, useDuplicateExpense } from "./expense.hooks";
import useExpenseStore from "./expense.store";
import { ExpenseUpdateData } from "./expense.type";
export const createExpenseSchema = (t: (key: string) => string) =>
  z.object({
    expense_number: z.string().min(1, t("Expenses.form.expense_number.required")),
    issue_date: z.date({ required_error: t("Expenses.form.issue_date.required") }),
    due_date: z.date({ required_error: t("Expenses.form.due_date.required") }),
    status: z.enum(["pending", "paid", "overdue"]).default("pending"),
    amount: z.number().min(0, t("Expenses.form.amount.required")),
    category: z.string().min(1, t("Expenses.form.category.required")),
    notes: z.string().optional().or(z.literal("")),
    client_id: z.string().optional(),
  });
export type ExpenseFormValues = z.input<ReturnType<typeof createExpenseSchema>>;
export interface ExpenseFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: ExpenseUpdateData | null;
  editMode?: boolean;
}
export function ExpenseForm({ id, onSuccess, defaultValues, editMode = false }: ExpenseFormProps) {
  const t = useTranslations();
  const user = useUserStore((state) => state.user);
  const { mutate: createExpense } = useCreateExpense();
  const { mutate: updateExpense } = useUpdateExpense();
  const isLoading = useExpenseStore((state) => state.isLoading);
  const setIsLoading = useExpenseStore((state) => state.setIsLoading);
  const form = useForm<ExpenseFormValues>({
    resolver: zodResolver(createExpenseSchema(t)),
    defaultValues: {
      expense_number: defaultValues?.expense_number || "",
      issue_date: defaultValues?.issue_date || undefined,
      due_date: defaultValues?.due_date || undefined,
      status: defaultValues?.status || "pending",
      amount: defaultValues?.amount || 0,
      category: defaultValues?.category || "",
      notes: defaultValues?.notes || "",
      client_id: defaultValues?.client_id || "",
    },
  });
  const handleSubmit = async (data: ExpenseFormValues) => {
    setIsLoading(true);
    if (!user?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode) {
        await updateExpense({
          id: defaultValues?.id || "",
          data: data,
        });
      } else {
        await createExpense(
          {
            expense_number: data.expense_number.trim(),
            issue_date: data.issue_date,
            due_date: data.due_date,
            amount: data.amount,
            category: data.category.trim(),
            ...(data.client_id?.trim() ? { client_id: data.client_id.trim() } : {}),
            status: data.status || "pending",
            notes: data.notes?.trim(),
            user_id: user?.id,
          },
          {
            onSuccess: () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Expenses.error.creating"),
      });
    }
  };
  if (typeof window !== "undefined") {
    (window as any).expenseForm = form;
  }
  return (
    <Form {...form}>
      <form
        id={id || "expense-form"}
        onSubmit={form.handleSubmit(handleSubmit)}
        className="space-y-4"
      >
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="expense_number"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.expense_number.label")} *</FormLabel>
                <FormControl>
                  <Input
                    placeholder={t("Expenses.form.expense_number.placeholder")}
                    {...field}
                    disabled={isLoading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="category"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.category.label")} *</FormLabel>
                <FormControl>
                  <Input
                    placeholder={t("Expenses.form.category.placeholder")}
                    {...field}
                    disabled={isLoading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="issue_date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.issue_date.label")} *</FormLabel>
                <FormControl>
                  <DatePicker
                    date={field.value ? new Date(field.value) : undefined}
                    onSelect={field.onChange}
                    placeholder={t("Expenses.form.issue_date.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="due_date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.due_date.label")} *</FormLabel>
                <FormControl>
                  <DatePicker
                    date={field.value ? new Date(field.value) : undefined}
                    onSelect={field.onChange}
                    placeholder={t("Expenses.form.due_date.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="amount"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.amount.label")} *</FormLabel>
                <FormControl>
                  <CurrencyInput
                    showCommas={true}
                    value={field.value ? parseFloat(String(field.value)) : undefined}
                    onChange={(value) => field.onChange(value?.toString() || "")}
                    placeholder={t("Expenses.form.amount.placeholder")}
                    disabled={isLoading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Expenses.form.status.label")} *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  disabled={isLoading}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder={t("Expenses.form.status.placeholder")} />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="pending">{t("Expenses.form.status.pending")}</SelectItem>
                    <SelectItem value="paid">{t("Expenses.form.status.paid")}</SelectItem>
                    <SelectItem value="overdue">{t("Expenses.form.status.overdue")}</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        {/* <FormField
          control={form.control}
          name="client_id"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Expenses.form.client_id.label")} *</FormLabel>
              <FormControl>
                <Input
                  placeholder={t("Expenses.form.client_id.placeholder")}
                  {...field}
                  disabled={isLoading}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        /> */}
        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Expenses.form.notes.label")}</FormLabel>
              <FormControl>
                <Textarea
                  placeholder={t("Expenses.form.notes.placeholder")}
                  {...field}
                  disabled={isLoading}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/expense/expense.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createExpense,
  deleteExpense,
  bulkDeleteExpenses,
  fetchExpenseById,
  fetchExpenses,
  updateExpense,
  duplicateExpense,
} from "@/expense/expense.service";
import type { Expense, ExpenseCreateData } from "@/expense/expense.type";
// Query keys for expenses
export const expenseKeys = {
  all: ["expenses"] as const,
  lists: () => [...expenseKeys.all, "list"] as const,
  list: (filters: any) => [...expenseKeys.lists(), { filters }] as const,
  details: () => [...expenseKeys.all, "detail"] as const,
  detail: (id: string) => [...expenseKeys.details(), id] as const,
};
// Hook to fetch all expenses
export function useExpenses() {
  return useQuery({
    queryKey: expenseKeys.lists(),
    queryFn: fetchExpenses,
  });
}
// Hook to fetch a single expense
export function useExpense(id: string) {
  return useQuery({
    queryKey: expenseKeys.detail(id),
    queryFn: () => fetchExpenseById(id),
    enabled: !!id,
  });
}
// Hook to create a expense
export function useCreateExpense() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (expense: ExpenseCreateData) => createExpense(expense),
    onSuccess: (newExpense: Expense) => {
      const previousExpenses = queryClient.getQueryData(expenseKeys.lists()) || [];
      queryClient.setQueryData(expenseKeys.lists(), [
        ...(Array.isArray(previousExpenses) ? previousExpenses : []),
        newExpense,
      ]);
    },
  });
}
// Hook to update a expense
export function useUpdateExpense() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Expense> }) => updateExpense(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: expenseKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: expenseKeys.lists() });
    },
  });
}
// Hook to duplicate a expense
export function useDuplicateExpense() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateExpense(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: expenseKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: expenseKeys.lists() });
    },
  });
}
// Hook to delete a expense
export function useDeleteExpense() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteExpense,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: expenseKeys.lists() });
      queryClient.removeQueries({ queryKey: expenseKeys.detail(variables) });
    },
  });
}
// Hook to bulk delete expenses
export function useBulkDeleteExpenses() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteExpenses,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: expenseKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/expense/expense.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
  { id: "expense_number", translationKey: "Expenses.form.expense_number.label", type: "text" },
  { id: "issue_date", translationKey: "Expenses.form.issue_date.label", type: "date" },
  { id: "due_date", translationKey: "Expenses.form.due_date.label", type: "date" },
  { id: "status", translationKey: "Expenses.form.status.label", type: "text" },
  { id: "amount", translationKey: "Expenses.form.amount.label", type: "number" },
  { id: "category", translationKey: "Expenses.form.category.label", type: "text" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
  { value: "expense_number", translationKey: "Expenses.form.expense_number.label" },
  { value: "issue_date", translationKey: "Expenses.form.issue_date.label" },
  { value: "due_date", translationKey: "Expenses.form.due_date.label" },
  { value: "status", translationKey: "Expenses.form.status.label" },
  { value: "amount", translationKey: "Expenses.form.amount.label" },
  { value: "category", translationKey: "Expenses.form.category.label" },
];
</file>

<file path="src/modules/expense/expense.service.ts">
import { Expense } from "./expense.type";
export async function fetchExpenses(): Promise<Expense[]> {
  const response = await fetch("/api/resource/expenses");
  if (!response.ok) {
    throw new Error("Failed to fetch expenses");
  }
  return response.json();
}
export async function fetchExpenseById(id: string): Promise<Expense> {
  const response = await fetch(`/api/resource/expenses/${id}`);
  if (!response.ok) {
    throw new Error(`Expense with id ${id} not found`);
  }
  return response.json();
}
export async function createExpense(expense: Omit<Expense, "id" | "created_at">): Promise<Expense> {
  const response = await fetch("/api/resource/expenses", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(expense),
  });
  if (!response.ok) {
    throw new Error("Failed to create expense");
  }
  return response.json();
}
export async function updateExpense(id: string, updates: Partial<Expense>): Promise<Expense> {
  const response = await fetch(`/api/resource/expenses/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update expense with id ${id}`);
  }
  return response.json();
}
export async function duplicateExpense(id: string): Promise<Expense> {
  const response = await fetch(`/api/resource/expenses/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate expense with id ${id}`);
  }
  return response.json();
}
export async function deleteExpense(id: string): Promise<void> {
  const response = await fetch(`/api/resource/expenses/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete expense with id ${id}`);
  }
}
export async function bulkDeleteExpenses(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/expenses", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete expenses");
  }
}
</file>

<file path="src/modules/expense/expense.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Expense } from "./expense.type";
const searchExpenseFn = (expense: Expense, searchQuery: string) =>
  expense.expense_number.toLowerCase().includes(searchQuery.toLowerCase());
const useExpenseStore = createGenericStore<Expense>("expenses", searchExpenseFn);
export default useExpenseStore;
</file>

<file path="src/modules/expense/expense.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateExpense } from "@/expense/expense.hooks";
import useExpenseStore from "@/expense/expense.store";
import { Expense } from "@/expense/expense.type";
import useUserStore from "@/stores/use-user-store";
const ExpensesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Expense>) => {
  const t = useTranslations();
  const { mutate: updateExpense } = useUpdateExpense();
  const selectedRows = useExpenseStore((state) => state.selectedRows);
  const setSelectedRows = useExpenseStore((state) => state.setSelectedRows);
  const canEditExpense = useUserStore((state) => state.hasPermission("expenses.update"));
  const canDuplicateExpense = useUserStore((state) => state.hasPermission("expenses.duplicate"));
  const canViewExpense = useUserStore((state) => state.hasPermission("expenses.view"));
  const canArchiveExpense = useUserStore((state) => state.hasPermission("expenses.archive"));
  const canDeleteExpense = useUserStore((state) => state.hasPermission("expenses.delete"));
  // Create a selection state object for the table
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Expense>[] = [
    {
      accessorKey: "expense_number",
      header: t("Expenses.form.expense_number.label"),
      validationSchema: z.string().min(1, t("Expenses.form.expense_number.required")),
    },
    {
      accessorKey: "issue_date",
      header: t("Expenses.form.issue_date.label"),
      validationSchema: z.string().min(1, t("Expenses.form.issue_date.required")),
    },
    {
      accessorKey: "due_date",
      header: t("Expenses.form.due_date.label"),
      validationSchema: z.string().min(1, t("Expenses.form.due_date.required")),
    },
    {
      accessorKey: "status",
      header: t("Expenses.form.status.label"),
      validationSchema: z.string().min(1, t("Expenses.form.status.required")),
      cell: ({ row }) => t(`Expenses.form.status.${row.getValue("status")}`),
    },
    {
      accessorKey: "amount",
      header: t("Expenses.form.amount.label"),
      validationSchema: z.number().min(0, t("Expenses.form.amount.required")),
      cell: ({ row }) => {
        const amount = row.getValue("amount");
        return new Intl.NumberFormat("en-US", {
          style: "currency",
          currency: "USD",
        }).format(amount as number);
      },
    },
    {
      accessorKey: "category",
      header: t("Expenses.form.category.label"),
      validationSchema: z.string().min(1, t("Expenses.form.category.required")),
    },
    {
      accessorKey: "notes",
      header: t("Expenses.form.notes.label"),
      validationSchema: z.string().nullable(),
    },
    {
      accessorKey: "client_id",
      header: t("Expenses.form.client_id.label"),
      validationSchema: z.string().min(1, t("Expenses.form.client_id.required")),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "expense_id") return;
    await updateExpense({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Expense[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const expenseTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Expense) => row.id,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditExpense}
      canDuplicateAction={canDuplicateExpense}
      canViewAction={canViewExpense}
      canArchiveAction={canArchiveExpense}
      canDeleteAction={canDeleteExpense}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={expenseTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default ExpensesTable;
</file>

<file path="src/modules/expense/expense.type.ts">
export interface Expense {
  id: string;
  created_at: string;
  expense_number: string;
  issue_date: Date;
  due_date: Date;
  status: "pending" | "paid" | "overdue";
  amount: number;
  category: string;
  notes?: string;
  client_id?: string;
  user_id: string;
}
// Define an explicit type for branch creation data
export type ExpenseCreateData = Omit<Expense, "id" | "created_at"> & { user_id: string };
export type ExpenseUpdateData = Omit<Expense, "created_at" | "user_id">;
</file>

<file path="src/modules/invoice/invoice.card.tsx">
import { format } from "date-fns";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Invoice } from "@/invoice/invoice.type";
function getInvoiceStatusColor(status: string): string {
  switch (status.toLowerCase()) {
    case "paid":
      return "bg-green-100 text-green-800";
    case "pending":
      return "bg-yellow-100 text-yellow-800";
    case "overdue":
      return "bg-red-100 text-red-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
}
const InvoiceCard = ({ invoice }: { invoice: Invoice }) => {
  const t = useTranslations("Invoices");
  return (
    <Card key={invoice.id} className="transition-shadow hover:shadow-lg">
      <CardHeader className="flex flex-row items-start justify-between">
        <div>
          <h3 className="text-lg font-semibold">
            {t("invoice_number", { number: invoice.invoice_number })}
          </h3>
          <p className="text-sm text-gray-500">{invoice.client?.company}</p>
        </div>
        <Badge className={getInvoiceStatusColor(invoice.status)}>
          {t(`status.${invoice.status.toLowerCase()}`)}
        </Badge>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("issue_date")}</span>
            <span className="text-sm">{format(new Date(invoice.issue_date), "MMM dd, yyyy")}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("due_date")}</span>
            <span className="text-sm">{format(new Date(invoice.due_date), "MMM dd, yyyy")}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("amount")}</span>
            <span className="text-lg font-bold">${invoice.total.toFixed(2)}</span>
          </div>
          <div className="border-t pt-2">
            <p className="text-sm text-gray-500">
              {invoice.client?.name} • {invoice.client?.email}
            </p>
          </div>
        </div>
        <div className="mt-4 flex justify-end">
          <Button variant="outline" size="sm" asChild>
            <Link href={`/pay/${invoice.id}`} target="_blank">
              Preview
            </Link>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
export default InvoiceCard;
</file>

<file path="src/modules/invoice/invoice.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { flexRender, getCoreRowModel, useReactTable } from "@tanstack/react-table";
import { PlusCircle, Trash2 } from "lucide-react";
import { useTranslations, useLocale } from "next-intl";
import { useRouter } from "next/router";
import { useState, useEffect, useMemo } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Button } from "@/ui/button";
import { ComboboxAdd } from "@/ui/combobox-add";
import { DatePicker } from "@/ui/date-picker";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/ui/table";
import { Textarea } from "@/ui/textarea";
import { createClient } from "@/utils/supabase/component";
import { ClientForm } from "@/client/client.form";
const createInvoiceSchema = (t: (key: string) => string) =>
  z.object({
    client_id: z.string().min(1, t("Invoices.form.client_id.required")),
    invoice_number: z.string().min(1, t("Invoices.form.invoice_number.required")),
    issue_date: z.date({
      required_error: t("Invoices.form.issue_date.required"),
    }),
    due_date: z.date({
      required_error: t("Invoices.form.due_date.required"),
    }),
    status: z.string().min(1, t("Invoices.form.status.required")),
    subtotal: z.number().min(0, t("Invoices.form.subtotal.required")),
    tax_rate: z.number().min(0, t("Invoices.form.tax_rate.required")),
    notes: z.string().optional(),
    items: z
      .array(
        z.object({
          product_id: z.string().optional(),
          description: z.string().min(1, t("Invoices.form.description.required")),
          quantity: z
            .string()
            .min(1, t("Invoices.form.quantity.required"))
            .refine(
              (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,
              t("Invoices.form.quantity.required"),
            ),
          unit_price: z
            .string()
            .min(1, t("Invoices.form.price.required"))
            .refine(
              (val) => !isNaN(parseFloat(val)) && parseFloat(val) >= 0,
              t("Invoices.form.price.required"),
            ),
        }),
      )
      .min(1, t("Invoices.form.items.required"))
      .refine(
        (items) => items.every((item) => item.description?.trim() !== "" || item.product_id),
        t("Invoices.form.items.required"),
      ),
  });
export type InvoiceFormValues = z.infer<ReturnType<typeof createInvoiceSchema>>;
interface InvoiceFormProps {
  id?: string;
  loading?: boolean;
  onSubmit: (data: InvoiceFormValues) => Promise<void>;
}
export function InvoiceForm({ id, loading: externalLoading, onSubmit }: InvoiceFormProps) {
  const supabase = createClient();
  const router = useRouter();
  const [loading, setLoading] = useState(externalLoading || false);
  const [clients, setClients] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isNewProductDialogOpen, setIsNewProductDialogOpen] = useState(false);
  const [user_id, setuser_id] = useState<string | undefined>();
  const [clientsLoading, setClientsLoading] = useState(true);
  const [productsLoading, setProductsLoading] = useState(true);
  const t = useTranslations();
  const locale = useLocale();
  const form = useForm<InvoiceFormValues>({
    resolver: zodResolver(createInvoiceSchema(t)),
    defaultValues: {
      client_id: "",
      invoice_number: "",
      issue_date: new Date(),
      due_date: undefined,
      status: "draft",
      subtotal: 0,
      tax_rate: 0,
      notes: "",
      items: [{ product_id: "", description: "", quantity: "1", unit_price: "0" }],
    },
  });
  useEffect(() => {
    // Get the current user ID and fetch clients
    const getClients = async () => {
      setClientsLoading(true);
      // Get user ID
      const { data: userData } = await supabase.auth.getUser();
      if (userData.user) {
        setuser_id(userData.user.id);
      }
      // Fetch clients
      try {
        const { data, error } = await supabase
          .from("clients")
          .select("id, name, company")
          .order("name");
        if (error) throw error;
        setClients(data || []);
      } catch (error) {
        console.error("Error fetching clients:", error);
        toast.error(t("General.error_operation"), {
          description: t("General.error_load_clients"),
        });
      } finally {
        setClientsLoading(false);
      }
    };
    // Fetch products
    const fetchProducts = async () => {
      setProductsLoading(true);
      try {
        const { data, error } = await supabase
          .from("products")
          .select("id, name, description, price")
          .order("name");
        if (error) throw error;
        setProducts(data || []);
      } catch (error) {
        console.error("Error fetching products:", error);
        toast.error(t("General.error_operation"), {
          description: t("General.error_load_products"),
        });
      } finally {
        setProductsLoading(false);
      }
    };
    fetchProducts();
    getClients();
  }, [t]);
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "items",
  });
  // Add this new function to calculate subtotal
  const calculateSubtotal = (items: any[]) => {
    return items.reduce((sum, item) => {
      const quantity = parseFloat(item.quantity) || 0;
      const price = parseFloat(item.unit_price) || 0;
      return sum + quantity * price;
    }, 0);
  };
  // Watch items and tax_rate for changes to update totals
  const items = form.watch("items");
  const tax_rate = form.watch("tax_rate");
  useEffect(() => {
    const subtotal = calculateSubtotal(items);
    form.setValue("subtotal", subtotal);
  }, [items, form]);
  // const handleClientAdded = async () => {
  //   // Close the dialog
  //   setIsDialogOpen(false);
  //   // Refresh the clients list
  //   try {
  //     const { data, error } = await supabase
  //       .from("clients")
  //       .select("id, name, company")
  //       .order("name");
  //     if (error) throw error;
  //     setClients(data || []);
  //     // Show success message
  //     toast.success(t("General.successful_operation"), {
  //       description: t("client_added"),
  //     });
  //   } catch (error) {
  //     console.error("Error refreshing clients:", error);
  //   }
  // };
  const handleProductSelection = (index: number, product_id: string) => {
    const selectedProduct = products.find((product) => product.id === product_id);
    if (selectedProduct) {
      form.setValue(`items.${index}.unit_price`, selectedProduct.price.toString());
      form.setValue(`items.${index}.description`, selectedProduct.description || "");
    }
  };
  // Format clients for ComboboxAdd
  const clientOptions = clients.map((client) => ({
    label: client.company ? `${client.name} (${client.company})` : client.name,
    value: client.id,
  }));
  // Format products for ComboboxAdd
  const productOptions = products.map((product) => ({
    label: `${product.name} ($${parseFloat(product.price).toFixed(2)})`,
    value: product.id,
  }));
  // Define table columns for the products
  const columns = useMemo(
    () => [
      {
        id: "product",
        header: t("Invoices.products.product"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.product_id`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <ComboboxAdd
                      data={productOptions}
                      isLoading={productsLoading}
                      defaultValue={field.value}
                      onChange={(value) => {
                        field.onChange(value);
                        handleProductSelection(index, value);
                      }}
                      texts={{
                        placeholder: t("Invoices.products.select_product"),
                        searchPlaceholder: t("Invoices.products.search_products"),
                        noItems: t("Invoices.products.no_products_found"),
                      }}
                      addText={t("Invoices.products.add_new_product")}
                      onAddClick={() => setIsNewProductDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "quantity",
        header: t("Invoices.products.quantity"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.quantity`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input type="number" min="1" step="1" {...field} className="w-24" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "unit_price",
        header: t("Invoices.products.unit_price"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.unit_price`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      placeholder="0.00"
                      {...field}
                      className="w-32"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "description",
        header: t("Forms.description.label"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.description`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input placeholder={t("Forms.description.placeholder")} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "subtotal",
        header: t("Invoices.products.subtotal"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <div className="text-right">
              $
              {form.watch(`items.${index}.quantity`) && form.watch(`items.${index}.unit_price`)
                ? (
                    parseFloat(form.watch(`items.${index}.quantity`) || "0") *
                    parseFloat(form.watch(`items.${index}.unit_price`) || "0")
                  ).toFixed(2)
                : "0.00"}
            </div>
          );
        },
      },
      {
        id: "actions",
        header: "",
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            fields.length > 1 && (
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => remove(index)}
                className="size-8 p-0"
              >
                <Trash2 className="size-4 text-red-500" />
              </Button>
            )
          );
        },
      },
    ],
    [form, fields, productOptions, productsLoading, handleProductSelection, remove],
  );
  // Set up the table
  const data = useMemo(() => fields.map((_, i) => ({ index: i })), [fields]);
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });
  if (typeof window !== "undefined") {
    (window as any).invoiceForm = form;
  }
  return (
    <>
      <Form {...form}>
        <form
          id={id || "invoice-form"}
          onSubmit={form.handleSubmit(onSubmit)}
          className="space-y-4"
        >
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="client_id"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.client.label")} *</FormLabel>
                  <FormControl>
                    <ComboboxAdd
                      data={clientOptions}
                      isLoading={clientsLoading}
                      defaultValue={field.value}
                      onChange={(value) => field.onChange(value || null)}
                      texts={{
                        placeholder: t("Invoices.form.client.select_client"),
                        searchPlaceholder: t("Invoices.form.client.search_clients"),
                        noItems: t("Invoices.form.client.no_clients"),
                      }}
                      addText={t("Invoices.form.client.add_new_client")}
                      onAddClick={() => setIsDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="invoice_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.invoice_number.label")} *</FormLabel>
                  <FormControl>
                    <Input placeholder={t("Invoices.form.invoice_number.placeholder")} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="subtotal"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.subtotal.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      value={field.value.toFixed(2)}
                      readOnly
                      disabled
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="tax_rate"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.tax_rate.label")} (%)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      max="100"
                      {...field}
                      onChange={(e) => {
                        const value = parseFloat(e.target.value);
                        field.onChange(isNaN(value) ? 0 : value);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="issue_date"
              render={({ field: { value, onChange, ...field } }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.issue_date.label")} *</FormLabel>
                  <FormControl>
                    <DatePicker
                      date={value}
                      onSelect={onChange}
                      placeholder={t("Invoices.form.issue_date.placeholder")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="due_date"
              render={({ field: { value, onChange, ...field } }) => (
                <FormItem>
                  <FormLabel>{t("Invoices.form.due_date.label")} *</FormLabel>
                  <FormControl>
                    <DatePicker
                      date={value}
                      onSelect={onChange}
                      placeholder={t("Invoices.form.due_date.placeholder")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Invoices.form.status.label")} *</FormLabel>
                <Select
                  defaultValue={field.value}
                  onValueChange={field.onChange}
                  dir={locale === "ar" ? "rtl" : "ltr"}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder={t("Invoices.form.status.placeholder")} />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="draft">{t("Invoices.form.status.draft")}</SelectItem>
                    <SelectItem value="pending">{t("Invoices.form.status.pending")}</SelectItem>
                    <SelectItem value="paid">{t("Invoices.form.status.paid")}</SelectItem>
                    <SelectItem value="overdue">{t("Invoices.form.status.overdue")}</SelectItem>
                    <SelectItem value="cancelled">{t("Invoices.form.status.cancelled")}</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Products Section with Table */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">{t("Invoices.products.title")}</h3>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() =>
                  append({ product_id: "", description: "", quantity: "1", unit_price: "" })
                }
              >
                <PlusCircle className="mr-2 size-4" />
                {t("Invoices.products.add_product")}
              </Button>
            </div>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableHead key={header.id}>
                          {flexRender(header.column.columnDef.header, header.getContext())}
                        </TableHead>
                      ))}
                    </TableRow>
                  ))}
                </TableHeader>
                <TableBody>
                  {table.getRowModel().rows.length ? (
                    table.getRowModel().rows.map((row) => (
                      <TableRow key={row.id}>
                        {row.getVisibleCells().map((cell) => (
                          <TableCell key={cell.id}>
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={columns.length} className="h-24 text-center">
                        {t("products.no_products")}
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </div>
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Invoices.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea placeholder={t("Invoices.form.notes.placeholder")} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="mt-4 text-right">
            <div className="text-sm text-gray-600">
              Tax Amount: ${((form.watch("subtotal") * form.watch("tax_rate")) / 100).toFixed(2)}
            </div>
            <div className="text-lg font-semibold">
              Total: $
              {(
                form.watch("subtotal") +
                (form.watch("subtotal") * form.watch("tax_rate")) / 100
              ).toFixed(2)}
            </div>
          </div>
        </form>
      </Form>
      <FormDialog
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        title={t("add_new_client")}
        formId="client-form"
        cancelText={t("cancel")}
        submitText={t("save")}
      >
        <ClientForm id="client-form" />
      </FormDialog>
      <Dialog open={isNewProductDialogOpen} onOpenChange={setIsNewProductDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>{t("products.add_new_product")}</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="col-span-2">
                <FormLabel>{t("products.name")} *</FormLabel>
                <Input id="name" placeholder={`${t("products.name")}...`} />
              </div>
              <div>
                <FormLabel>{t("price")} *</FormLabel>
                <Input id="price" type="number" min="0" step="0.01" placeholder="0.00" />
              </div>
              <div>
                <FormLabel>{t("stock_quantity")}</FormLabel>
                <Input id="stock_quantity" type="number" min="0" step="1" placeholder="0" />
              </div>
              <div className="col-span-2">
                <FormLabel>{t("description")}</FormLabel>
                <Textarea id="description" placeholder={t("products.product_description")} />
              </div>
            </div>
            <div className="mt-4 flex justify-end">
              <Button
                type="button"
                onClick={() => setIsNewProductDialogOpen(false)}
                variant="outline"
                className="mr-2"
              >
                {t("cancel")}
              </Button>
              <Button
                type="button"
                onClick={() => {
                  // In a real implementation, this would save the product
                  toast.info("Product creation functionality not yet implemented");
                  setIsNewProductDialogOpen(false);
                }}
              >
                {t("products.save_product")}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
</file>

<file path="src/modules/invoice/invoice.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  bulkDeleteInvoices,
  createInvoice,
  deleteInvoice,
  fetchInvoiceById,
  fetchInvoices,
  updateInvoice,
  duplicateInvoice,
} from "@/invoice/invoice.service";
import { Invoice } from "@/invoice/invoice.type";
// Query keys
export const invoiceKeys = {
  all: ["invoices"] as const,
  lists: () => [...invoiceKeys.all, "list"] as const,
  list: (filters: any) => [...invoiceKeys.lists(), { filters }] as const,
  details: () => [...invoiceKeys.all, "detail"] as const,
  detail: (id: string) => [...invoiceKeys.details(), id] as const,
};
// Hooks
export function useInvoices() {
  return useQuery({
    queryKey: invoiceKeys.lists(),
    queryFn: fetchInvoices,
  });
}
export function useInvoice(id: string) {
  return useQuery({
    queryKey: invoiceKeys.detail(id),
    queryFn: () => fetchInvoiceById(id),
    enabled: !!id,
  });
}
export function useCreateInvoice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: createInvoice,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: invoiceKeys.lists() });
    },
  });
}
export function useDuplicateInvoice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: duplicateInvoice,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: invoiceKeys.lists() });
    },
  });
}
export function useUpdateInvoice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Invoice> }) => updateInvoice(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: invoiceKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: invoiceKeys.lists() });
    },
  });
}
export function useDeleteInvoice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteInvoice,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: invoiceKeys.lists() });
      queryClient.removeQueries({ queryKey: invoiceKeys.detail(variables) });
    },
  });
}
export function useBulkDeleteInvoices() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteInvoices,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: invoiceKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/invoice/invoice.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/invoice/invoice.service.ts">
import { Invoice } from "@/invoice/invoice.type";
export async function fetchInvoices(): Promise<Invoice[]> {
  const response = await fetch("/api/resource/invoices");
  if (!response.ok) {
    throw new Error("Failed to fetch invoices");
  }
  return response.json();
}
export async function fetchInvoiceById(id: string): Promise<Invoice> {
  const response = await fetch(`/api/resource/invoices/${id}`);
  if (!response.ok) {
    throw new Error("Failed to fetch invoice");
  }
  return response.json();
}
export async function createInvoice(invoice: Omit<Invoice, "id" | "created_at">): Promise<Invoice> {
  const response = await fetch("/api/resource/invoices", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(invoice),
  });
  if (!response.ok) {
    throw new Error("Failed to create invoice");
  }
  return response.json();
}
export async function duplicateInvoice(id: string): Promise<Invoice> {
  const response = await fetch(`/api/resource/invoices/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error("Failed to duplicate invoice");
  }
  return response.json();
}
export async function updateInvoice(id: string, invoice: Partial<Invoice>): Promise<Invoice> {
  const response = await fetch(`/api/resource/invoices/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(invoice),
  });
  if (!response.ok) {
    throw new Error("Failed to update invoice");
  }
  return response.json();
}
export async function deleteInvoice(id: string): Promise<void> {
  const response = await fetch(`/api/resource/invoices/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error("Failed to delete invoice");
  }
}
export async function bulkDeleteInvoices(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/resource/invoices/bulk-delete", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete invoices");
    }
  } catch (error) {
    console.error("Error deleting invoices:", error);
    throw new Error("Failed to delete invoices");
  }
}
</file>

<file path="src/modules/invoice/invoice.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Invoice } from "./invoice.type";
const searchInvoiceFn = (invoice: Invoice, searchQuery: string) =>
  invoice.invoice_number.toLowerCase().includes(searchQuery.toLowerCase());
const useInvoiceStore = createGenericStore<Invoice>("invoices", searchInvoiceFn);
export default useInvoiceStore;
</file>

<file path="src/modules/invoice/invoice.table.tsx">
import { format, parseISO } from "date-fns";
import { useTranslations } from "next-intl";
import Link from "next/link";
import React from "react";
import { z } from "zod";
import { Button } from "@/ui/button";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateInvoice } from "@/invoice/invoice.hooks";
import useInvoiceStore from "@/invoice/invoice.store";
import { Invoice } from "@/invoice/invoice.type";
import useUserStore from "@/stores/use-user-store";
const formatDate = (dateStr: string) => {
  try {
    // If the date includes time information, take only the date part
    const datePart = dateStr.split("T")[0];
    return format(parseISO(datePart), "MMM dd, yyyy");
  } catch (error) {
    console.error("Error formatting date:", dateStr, error);
    return "Invalid Date";
  }
};
const InvoicesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Invoice>) => {
  const t = useTranslations("Invoices");
  const { mutateAsync: updateInvoice } = useUpdateInvoice();
  const selectedRows = useInvoiceStore((state) => state.selectedRows);
  const setSelectedRows = useInvoiceStore((state) => state.setSelectedRows);
  const canEditInvoice = useUserStore((state) => state.hasPermission("invoices.update"));
  const canDuplicateInvoice = useUserStore((state) => state.hasPermission("invoices.duplicate"));
  const canViewInvoice = useUserStore((state) => state.hasPermission("invoices.view"));
  const canArchiveInvoice = useUserStore((state) => state.hasPermission("invoices.archive"));
  const canDeleteInvoice = useUserStore((state) => state.hasPermission("invoices.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Invoice>[] = [
    {
      accessorKey: "invoice_number",
      header: t("form.invoice_number.label"),
      validationSchema: z.string().min(1, t("Invoices.form.invoice_number.required")),
    },
    {
      accessorKey: "client.company",
      header: t("form.client.label"),
      cell: ({ row }) => row.original.client?.company || "N/A",
    },
    {
      accessorKey: "issue_date",
      header: t("form.issue_date.label"),
      validationSchema: z.string().min(1, t("Invoices.form.issue_date.required")),
      cell: ({ row }) => formatDate(row.original.issue_date),
    },
    {
      accessorKey: "due_date",
      header: t("form.due_date.label"),
      validationSchema: z.string().min(1, t("Invoices.form.due_date.required")),
      cell: ({ row }) => formatDate(row.original.due_date),
    },
    {
      accessorKey: "total",
      header: t("form.total.label"),
      validationSchema: z.number().min(0, t("Invoices.form.total.required")),
      cell: ({ row }) => {
        const total =
          typeof row.original.total === "string"
            ? parseFloat(row.original.total)
            : row.original.total;
        return `$${Number(total).toFixed(2)}`;
      },
    },
    {
      accessorKey: "status",
      header: t("form.status.label"),
      validationSchema: z.string().min(1, t("Invoices.form.status.required")),
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const invoice = row.original;
        return (
          <div className="flex space-x-2">
            <Button variant="outline" size="sm" asChild>
              <Link href={`/pay/${invoice.id}`} target="_blank">
                {t("actions.preview")}
              </Link>
            </Button>
          </div>
        );
      },
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    let processedValue = value;
    if (columnId === "issue_date" || columnId === "due_date") {
      processedValue = new Date(value as string).toISOString();
    }
    await updateInvoice({ id: rowId, data: { [columnId]: processedValue } });
  };
  const handleRowSelectionChange = (rows: Invoice[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const invoiceTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Invoice) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditInvoice}
      canDuplicateAction={canDuplicateInvoice}
      canViewAction={canViewInvoice}
      canArchiveAction={canArchiveInvoice}
      canDeleteAction={canDeleteInvoice}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={invoiceTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default InvoicesTable;
</file>

<file path="src/modules/invoice/invoice.type.ts">
import { Client } from "@/client/client.type";
export type Invoice = {
  id: string;
  user_id: string;
  invoice_number: string;
  issue_date: string;
  due_date: string;
  status: "paid" | "pending" | "overdue";
  subtotal: number;
  tax_rate?: number;
  total: number;
  notes?: string;
  client_id?: string;
  client?: Client;
  created_at: string;
};
export type InvoiceCreateData = Omit<Invoice, "id" | "created_at" | "client">;
</file>

<file path="src/modules/job/job.card.tsx">
import { format } from "date-fns";
import { Calendar, DollarSign, MapPin, Building2 } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Job } from "@/job/job.type";
const JobCard = ({ job }: { job: Job }) => {
  const t = useTranslations();
  return (
    <Card key={job.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <h3 className="text-lg font-semibold">{job.title}</h3>
            <p className="text-sm text-gray-500">{job.type}</p>
          </div>
          <Badge variant={job.is_active ? "default" : "secondary"}>
            {job.is_active ? "Active" : "Inactive"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {job.department && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Building2 className="h-4 w-4" />
              <span>{job.department}</span>
            </div>
          )}
          {job.location && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <MapPin className="h-4 w-4" />
              <span>{job.location}</span>
            </div>
          )}
          {job.start_date && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Calendar className="h-4 w-4" />
              <span>Starts {format(new Date(job.start_date), "MMM dd, yyyy")}</span>
            </div>
          )}
          {job.salary && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <DollarSign className="h-4 w-4" />
              <span>${job.salary.toLocaleString()}</span>
            </div>
          )}
          {job.description && (
            <p className="mt-2 line-clamp-2 border-t pt-2 text-sm text-gray-500">
              {job.description}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default JobCard;
</file>

<file path="src/modules/job/job.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { DatePicker } from "@/ui/date-picker";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Switch } from "@/ui/switch";
import { Textarea } from "@/ui/textarea";
import { useCreateJob, useUpdateJob } from "@/job/job.hooks";
import useJobStore from "@/job/job.store";
import { JobUpdateData } from "@/job/job.type";
import useUserStore from "@/stores/use-user-store";
interface JobFormProps {
  id?: string;
  onSuccess?: () => void;
  loading?: boolean;
  defaultValues?: JobUpdateData | null;
  editMode?: boolean;
}
const createJobFormSchema = (t: (key: string) => string) =>
  z.object({
    title: z.string().min(1, t("Jobs.form.title.required")),
    description: z.string().optional(),
    requirements: z.string().optional(),
    location: z.string().optional(),
    department: z.string().optional(),
    type: z.string().min(1, t("Jobs.form.type.required")),
    salary: z
      .string()
      .optional()
      .refine(
        (val) => !val || (!isNaN(parseFloat(val)) && parseFloat(val) >= 0),
        t("Jobs.form.salary.invalid"),
      ),
    start_date: z.date().optional(),
    end_date: z.date().optional(),
    is_active: z.boolean(),
  });
export type JobFormValues = z.infer<ReturnType<typeof createJobFormSchema>>;
export function JobForm({ id, defaultValues, editMode = false, onSuccess }: JobFormProps) {
  const t = useTranslations();
  const user = useUserStore((state) => state.user);
  const { mutate: createJob } = useCreateJob();
  const { mutate: updateJob } = useUpdateJob();
  const isLoading = useJobStore((state) => state.isLoading);
  const setIsLoading = useJobStore((state) => state.setIsLoading);
  const form = useForm<JobFormValues>({
    resolver: zodResolver(createJobFormSchema(t)),
    defaultValues: {
      title: defaultValues?.title || "",
      description: defaultValues?.description || "",
      requirements: defaultValues?.requirements || "",
      location: defaultValues?.location || "",
      department: defaultValues?.department || "",
      type: defaultValues?.type || "Full-time",
      salary: String(defaultValues?.salary) || undefined,
      start_date: defaultValues?.start_date ? new Date(defaultValues.start_date) : undefined,
      end_date: defaultValues?.end_date ? new Date(defaultValues.end_date) : undefined,
      is_active: defaultValues?.is_active || true,
    },
  });
  const handleSubmit = async (data: JobFormValues) => {
    setIsLoading(true);
    if (!user?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode) {
        await updateJob(
          {
            id: defaultValues?.id || "",
            data: {
              title: data.title.trim(),
              description: data.description?.trim() || null,
              requirements: data.requirements?.trim() || null,
              location: data.location?.trim() || null,
              department: data.department?.trim() || null,
              type: data.type.trim(),
              salary: data.salary ? parseFloat(data.salary) : null,
              is_active: data.is_active,
              start_date: data.start_date?.toISOString() || null,
              end_date: data.end_date?.toISOString() || null,
            },
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createJob(
          {
            title: data.title.trim(),
            description: data.description?.trim() || null,
            requirements: data.requirements?.trim() || null,
            location: data.location?.trim() || null,
            department: data.department?.trim() || null,
            type: data.type.trim(),
            salary: data.salary ? parseFloat(data.salary) : null,
            is_active: data.is_active,
            start_date: data.start_date?.toISOString() || null,
            end_date: data.end_date?.toISOString() || null,
            user_id: user?.id,
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  // Expose form methods for external use (like dummy data)
  if (typeof window !== "undefined") {
    (window as any).jobForm = form;
  }
  return (
    <Form {...form}>
      <form id={id} onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.title.label")} *</FormLabel>
                <FormControl>
                  <Input placeholder={t("Jobs.form.title.placeholder")} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.type.label")} *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  value={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder={t("Jobs.form.type.placeholder")} />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="Full-time">{t("Jobs.form.type.full_time")}</SelectItem>
                    <SelectItem value="Part-time">{t("Jobs.form.type.part_time")}</SelectItem>
                    <SelectItem value="Contract">{t("Jobs.form.type.contract")}</SelectItem>
                    <SelectItem value="Internship">{t("Jobs.form.type.internship")}</SelectItem>
                    <SelectItem value="Temporary">{t("Jobs.form.type.temporary")}</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="department"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.department.label")}</FormLabel>
                <FormControl>
                  <Input placeholder={t("Jobs.form.department.placeholder")} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.location.label")}</FormLabel>
                <FormControl>
                  <Input placeholder={t("Jobs.form.location.placeholder")} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="start_date"
            render={({ field: { value, onChange, ...field } }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.start_date.label")}</FormLabel>
                <FormControl>
                  <DatePicker
                    date={value}
                    onSelect={onChange}
                    placeholder={t("Jobs.form.start_date.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="end_date"
            render={({ field: { value, onChange, ...field } }) => (
              <FormItem>
                <FormLabel>{t("Jobs.form.end_date.label")}</FormLabel>
                <FormControl>
                  <DatePicker
                    date={value}
                    onSelect={onChange}
                    placeholder={t("Jobs.form.end_date.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="salary"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Jobs.form.salary.label")}</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  step="0.01"
                  min="0"
                  placeholder={t("Jobs.form.salary.placeholder")}
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Jobs.form.description.label")}</FormLabel>
              <FormControl>
                <Textarea
                  placeholder={t("Jobs.form.description.placeholder")}
                  className="min-h-[100px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="requirements"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Jobs.form.requirements.label")}</FormLabel>
              <FormControl>
                <Textarea
                  placeholder={t("Jobs.form.requirements.placeholder")}
                  className="min-h-[100px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="is_active"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
              <div className="space-y-0.5">
                <FormLabel className="text-base">{t("Jobs.form.is_active.label")}</FormLabel>
              </div>
              <FormControl>
                <Switch checked={field.value} onCheckedChange={field.onChange} />
              </FormControl>
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/job/job.hooks.ts">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  fetchJobs,
  fetchJobById,
  createJob,
  updateJob,
  deleteJob,
  bulkDeleteJobs,
  duplicateJob,
} from "@/job/job.service";
import { Job, JobCreateData } from "@/job/job.type";
export const jobKeys = {
  all: ["jobs"] as const,
  lists: () => [...jobKeys.all, "list"] as const,
  list: (filters: any) => [...jobKeys.lists(), { filters }] as const,
  details: () => [...jobKeys.all, "detail"] as const,
  detail: (id: string) => [...jobKeys.details(), id] as const,
};
export function useJobs() {
  return useQuery({
    queryKey: jobKeys.lists(),
    queryFn: fetchJobs,
  });
}
export function useJob(id: string) {
  return useQuery({
    queryKey: jobKeys.detail(id),
    queryFn: () => fetchJobById(id),
    enabled: !!id,
  });
}
export function useCreateJob() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (job: JobCreateData) => createJob(job),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: jobKeys.lists() });
    },
  });
}
export function useUpdateJob() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Job> }) => updateJob(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: jobKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: jobKeys.lists() });
    },
  });
}
// Hook to duplicate a job
export function useDuplicateJob() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateJob(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: jobKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: jobKeys.lists() });
    },
  });
}
export function useDeleteJob() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteJob,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: jobKeys.lists() });
      queryClient.removeQueries({ queryKey: jobKeys.detail(variables) });
    },
  });
}
export function useBulkDeleteJobs() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteJobs,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: jobKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/job/job.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "title", translationKey: "Jobs.form.title.label", type: "text" as const },
  { id: "description", translationKey: "Jobs.form.description.label", type: "text" as const },
  { id: "salary", translationKey: "Jobs.form.salary.label", type: "text" as const },
  { id: "type", translationKey: "Jobs.form.type.label", type: "text" as const },
  { id: "created_at", translationKey: "Jobs.form.created_at.label", type: "date" as const },
  { id: "updated_at", translationKey: "Jobs.form.updated_at.label", type: "date" as const },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Jobs.form.created_at.label" },
  { value: "title", translationKey: "Jobs.form.title.label" },
  { value: "description", translationKey: "Jobs.form.description.label" },
  { value: "requirements", translationKey: "Jobs.form.requirements.label" },
  { value: "location", translationKey: "Jobs.form.location.label" },
  { value: "department", translationKey: "Jobs.form.department.label" },
  { value: "type", translationKey: "Jobs.form.type.label" },
  { value: "salary", translationKey: "Jobs.form.salary.label" },
  { value: "is_active", translationKey: "Jobs.form.is_active.label" },
  { value: "start_date", translationKey: "Jobs.form.start_date.label" },
  { value: "end_date", translationKey: "Jobs.form.end_date.label" },
];
</file>

<file path="src/modules/job/job.service.ts">
import { Job, JobCreateData } from "@/job/job.type";
export async function fetchJobs(): Promise<Job[]> {
  try {
    const response = await fetch("/api/resource/jobs");
    if (!response.ok) {
      console.error("Failed to fetch jobs:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching jobs:", error);
    return [];
  }
}
export async function fetchJobById(id: string): Promise<Job> {
  try {
    const response = await fetch(`/api/resource/jobs/${id}`);
    if (!response.ok) {
      throw new Error(`Job with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error fetching job ${id}:`, error);
    throw new Error(`Failed to fetch job with id ${id}`);
  }
}
export async function createJob(job: JobCreateData): Promise<Job> {
  try {
    const response = await fetch("/api/resource/jobs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(job),
    });
    if (!response.ok) {
      throw new Error("Failed to create job");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating job:", error);
    throw new Error("Failed to create job");
  }
}
export async function updateJob(id: string, updates: Partial<Job>): Promise<Job> {
  try {
    const response = await fetch(`/api/resource/jobs/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updates),
    });
    if (!response.ok) {
      throw new Error(`Failed to update job with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error updating job ${id}:`, error);
    throw new Error(`Failed to update job with id ${id}`);
  }
}
export async function duplicateJob(id: string): Promise<Job> {
  const response = await fetch(`/api/resource/jobs/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate job with id ${id}`);
  }
  return response.json();
}
export async function deleteJob(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/resource/jobs/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) {
      throw new Error(`Failed to delete job with id ${id}`);
    }
  } catch (error) {
    console.error(`Error deleting job ${id}:`, error);
    throw new Error(`Failed to delete job with id ${id}`);
  }
}
export async function bulkDeleteJobs(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/resource/jobs", {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete jobs");
    }
  } catch (error) {
    console.error("Error deleting jobs:", error);
    throw new Error("Failed to delete jobs");
  }
}
</file>

<file path="src/modules/job/job.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Job } from "./job.type";
const searchJobFn = (job: Job, searchQuery: string) =>
  job.title.toLowerCase().includes(searchQuery.toLowerCase());
const useJobStore = createGenericStore<Job>("jobs", searchJobFn);
export default useJobStore;
</file>

<file path="src/modules/job/job.table.tsx">
import { type CellContext } from "@tanstack/react-table";
import { useTranslations } from "next-intl";
import React from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateJob } from "@/job/job.hooks";
import useJobsStore from "@/job/job.store";
import { Job } from "@/job/job.type";
import useUserStore from "@/stores/use-user-store";
const JobTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Job>) => {
  const t = useTranslations();
  const { mutateAsync: updateJob } = useUpdateJob();
  const setSelectedRows = useJobsStore((state) => state.setSelectedRows);
  const selectedRows = useJobsStore((state) => state.selectedRows);
  const canEditJob = useUserStore((state) => state.hasPermission("jobs.update"));
  const canDuplicateJob = useUserStore((state) => state.hasPermission("jobs.duplicate"));
  const canViewJob = useUserStore((state) => state.hasPermission("jobs.view"));
  const canArchiveJob = useUserStore((state) => state.hasPermission("jobs.archive"));
  const canDeleteJob = useUserStore((state) => state.hasPermission("jobs.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Job>[] = [
    {
      accessorKey: "title",
      header: t("Jobs.form.title.label"),
      validationSchema: z.string().min(1, t("Jobs.form.title.required")),
    },
    {
      accessorKey: "type",
      header: t("Jobs.form.type.label"),
      validationSchema: z.string().min(1, t("Jobs.form.type.required")),
    },
    {
      accessorKey: "department",
      header: t("Jobs.form.department.label"),
      validationSchema: z.string().min(1, t("Jobs.form.department.required")),
    },
    {
      accessorKey: "location",
      header: t("Jobs.form.location.label"),
      validationSchema: z.string().min(1, t("Jobs.form.location.required")),
    },
    {
      accessorKey: "salary",
      header: t("Jobs.form.salary.label"),
      validationSchema: z.number().min(0, t("Jobs.form.salary.required")),
      cell: (props: CellContext<Job, unknown>) =>
        props.row.original.salary ? `$${Number(props.row.original.salary).toFixed(2)}` : "N/A",
    },
    {
      accessorKey: "is_active",
      header: t("Jobs.form.is_active.label"),
      validationSchema: z.boolean(),
      cell: (props: CellContext<Job, unknown>) => (props.row.original.is_active ? "Yes" : "No"),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateJob({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = (rows: Job[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const jobTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Job) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditJob}
      canDuplicateAction={canDuplicateJob}
      canViewAction={canViewJob}
      canArchiveAction={canArchiveJob}
      canDeleteAction={canDeleteJob}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={jobTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default JobTable;
</file>

<file path="src/modules/job/job.type.ts">
export interface Job {
  id: string;
  title: string;
  description: string | null;
  requirements: string | null;
  location: string | null;
  department: string | null;
  type: string;
  salary: number | null;
  is_active: boolean;
  start_date: string | null;
  end_date: string | null;
  created_at: string;
  updated_at: string;
  user_id: string;
}
export type JobCreateData = Omit<Job, "id" | "created_at" | "updated_at" | "user_id"> & {
  user_id?: string;
};
export type JobUpdateData = Partial<Job>;
</file>

<file path="src/modules/job-listing/job-listing.card.tsx">
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { JobListing } from "@/job-listing/job-listing.type";
const JobListingCard = ({ jobListing }: { jobListing: JobListing }) => {
  return (
    <Card key={jobListing.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <h3 className="text-lg font-semibold">{jobListing.title}</h3>
            <p className="text-sm text-gray-500">{jobListing.jobs?.length || 0} jobs</p>
          </div>
          <Badge variant={jobListing.is_active ? "default" : "secondary"}>
            {jobListing.is_active ? "Active" : "Inactive"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {jobListing.description && (
            <p className="text-sm text-gray-600">{jobListing.description}</p>
          )}
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <span>Created: {new Date(jobListing.created_at).toLocaleDateString()}</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
export default JobListingCard;
</file>

<file path="src/modules/job-listing/job-listing.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { useJobs } from "@/job/job.hooks";
import { Job } from "@/job/job.type";
import { useCreateJobListing, useUpdateJobListing } from "@/job-listing/job-listing.hooks";
import useJobListingsStore from "@/job-listing/job-listing.store";
import { JobListingUpdateData } from "@/job-listing/job-listing.type";
import useUserStore from "@/stores/use-user-store";
interface JobListingFormProps {
  id?: string;
  onSuccess?: () => void;
  loading?: boolean;
  defaultValues?: JobListingUpdateData | null;
  editMode?: boolean;
}
export const createJobListingFormSchema = (t: (key: string) => string) =>
  z.object({
    title: z.string().min(1, t("JobListings.form.title.required")),
    description: z.string().optional(),
    jobs: z.array(z.string()).min(1, t("JobListings.form.jobs.required")),
  });
export type JobListingFormValues = z.infer<ReturnType<typeof createJobListingFormSchema>>;
export function JobListingForm({
  id,
  onSuccess,
  loading = false,
  defaultValues,
  editMode = false,
}: JobListingFormProps) {
  const t = useTranslations();
  const { data: jobs, isLoading: isLoadingJobs } = useJobs();
  const { mutateAsync: createJobListing, isPending: isCreating } = useCreateJobListing();
  const { mutateAsync: updateJobListing, isPending: isUpdating } = useUpdateJobListing();
  const [selectedJobs, setSelectedJobs] = useState<string[]>([]);
  const { profile, membership } = useUserStore();
  const isLoading = useJobListingsStore((state) => state.isLoading);
  const setIsLoading = useJobListingsStore((state) => state.setIsLoading);
  const form = useForm<JobListingFormValues>({
    resolver: zodResolver(createJobListingFormSchema(t)),
    defaultValues: {
      title: "",
      description: "",
      jobs: [],
    },
  });
  const handleJobSelect = (job_id: string) => {
    setSelectedJobs((prev) => {
      if (prev.includes(job_id)) {
        return prev.filter((id) => id !== job_id);
      }
      return [...prev, job_id];
    });
    form.setValue("jobs", selectedJobs);
  };
  const handleSubmit = async (data: JobListingFormValues) => {
    setIsLoading(true);
    if (!profile?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode && defaultValues) {
        if (!defaultValues.id) {
          console.error("Job Listing ID missing in edit mode");
          toast.error(t("JobListings.error.missing_id"));
          setIsLoading(false);
          return;
        }
        await updateJobListing(
          {
            id: defaultValues.id,
            jobListing: {
              title: data.title.trim(),
              description: data.description?.trim() || null,
              jobs: data.jobs,
              user_id: profile?.id || "",
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createJobListing(
          {
            id: "",
            title: data.title.trim(),
            description: data.description?.trim() || null,
            jobs: data.jobs,
            user_id: profile?.id || "",
            is_active: true,
            slug: "",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  return (
    <Form {...form}>
      <form id={id} onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Jobs.form.title.label")} *</FormLabel>
              <FormControl>
                <Input placeholder={t("Jobs.form.title.placeholder")} {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Jobs.form.description.label")}</FormLabel>
              <FormControl>
                <Textarea
                  placeholder={t("Jobs.form.description.placeholder")}
                  className="min-h-[100px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="jobs"
          render={() => (
            <FormItem>
              <FormLabel>{t("Jobs.title")} *</FormLabel>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {jobs?.map((job: Job) => (
                  <div
                    key={job.id}
                    className={`cursor-pointer rounded-lg border p-4 transition-all ${
                      selectedJobs.includes(job.id)
                        ? "border-primary bg-primary/5"
                        : "hover:shadow-md"
                    }`}
                    onClick={() => handleJobSelect(job.id)}
                  >
                    <div className="flex items-start justify-between">
                      <div>
                        <h4 className="font-semibold">{job.title}</h4>
                        <p className="text-sm text-gray-500">{job.type}</p>
                      </div>
                      {selectedJobs.includes(job.id) && (
                        <div className="bg-primary h-4 w-4 rounded-full" />
                      )}
                    </div>
                    <div className="mt-2 space-y-1">
                      {job.department && <p className="text-sm text-gray-600">{job.department}</p>}
                      {job.location && <p className="text-sm text-gray-600">{job.location}</p>}
                      {job.salary && <p className="text-sm text-gray-600">{job.salary}</p>}
                    </div>
                  </div>
                ))}
              </div>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/job-listing/job-listing.hooks.ts">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  fetchJobListings,
  bulkDeleteJobListings,
  createJobListing,
  updateJobListing,
  duplicateJobListing,
  fetchJobListingById,
} from "@/job-listing/job-listing.service";
import { JobListing } from "@/job-listing/job-listing.type";
export const jobListingKeys = {
  all: ["jobListings"] as const,
  lists: () => [...jobListingKeys.all, "list"] as const,
  list: (filters: any) => [...jobListingKeys.lists(), { filters }] as const,
  details: () => [...jobListingKeys.all, "detail"] as const,
  detail: (id: string) => [...jobListingKeys.details(), id] as const,
};
export function useJobListings() {
  return useQuery({
    queryKey: jobListingKeys.lists(),
    queryFn: fetchJobListings,
  });
}
// Hook to fetch a single job listing
export function useJobListing(id: string) {
  return useQuery({
    queryKey: jobListingKeys.detail(id),
    queryFn: () => fetchJobListingById(id),
    enabled: !!id,
  });
}
export function useCreateJobListing() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (data: JobListing) => createJobListing(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: jobListingKeys.lists() });
    },
  });
}
export function useDuplicateJobListing() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateJobListing(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: jobListingKeys.lists() });
    },
  });
}
export function useBulkDeleteJobListings() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (ids: string[]) => bulkDeleteJobListings(ids),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: jobListingKeys.lists() });
    },
  });
}
export function useUpdateJobListing() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({
      id,
      jobListing,
    }: {
      id: string;
      jobListing: Partial<Omit<JobListing, "id" | "created_at">>;
    }) => updateJobListing(id, jobListing),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: jobListingKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: jobListingKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/job-listing/job-listing.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/job-listing/job-listing.service.ts">
import { JobListing } from "@/job-listing/job-listing.type";
import useUserStore from "@/stores/use-user-store";
import { Company } from "../company/company.type";
export async function fetchJobListings(): Promise<JobListing[]> {
  try {
    const user = useUserStore.getState().user;
    if (!user?.id) {
      throw new Error("User ID is required");
    }
    const response = await fetch("/api/resources/job-listings", {
      headers: {
        "x-user-id": user.id,
      },
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to fetch job listings");
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching job listings:", error);
    throw error;
  }
}
export async function bulkDeleteJobListings(ids: string[]): Promise<void> {
  try {
    const user = useUserStore.getState().user;
    if (!user?.id) {
      throw new Error("User ID is required");
    }
    const response = await fetch("/api/resources/job-listings/bulk-delete", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-user-id": user.id,
      },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to delete job listings");
    }
  } catch (error) {
    console.error("Error deleting job listings:", error);
    throw error;
  }
}
export async function createJobListing(data: JobListing): Promise<JobListing> {
  try {
    const user = useUserStore.getState().user;
    if (!user?.id) {
      throw new Error("User ID is required");
    }
    const response = await fetch("/api/resources/job-listings/create", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-user-id": user.id,
      },
      body: JSON.stringify({
        ...data,
        description: data.description ?? null,
      }),
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to create job listing");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating job listing:", error);
    throw error;
  }
}
export async function fetchJobListingById(id: string): Promise<JobListing> {
  const response = await fetch(`/api/resource/job-listings/${id}`);
  if (!response.ok) {
    throw new Error(`Job listing with id ${id} not found`);
  }
  return response.json();
}
export async function duplicateJobListing(id: string): Promise<JobListing> {
  try {
    const response = await fetch(`/api/resources/job-listings/${id}/duplicate`, {
      method: "POST",
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to duplicate job listing");
    }
    return response.json();
  } catch (error) {
    console.error("Error duplicating job listing:", error);
    throw error;
  }
}
export async function updateJobListing(id: string, jobListing: Partial<JobListing>) {
  try {
    const response = await fetch(`/api/resources/job-listings/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(jobListing),
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || `Failed to update job listing with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error("Error updating job listing:", error);
    throw error;
  }
}
</file>

<file path="src/modules/job-listing/job-listing.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { JobListing } from "./job-listing.type";
const searchJobListingFn = (jobListing: JobListing, searchQuery: string) =>
  jobListing.title.toLowerCase().includes(searchQuery.toLowerCase());
const useJobListingStore = createGenericStore<JobListing>("job-listings", searchJobListingFn);
export default useJobListingStore;
</file>

<file path="src/modules/job-listing/job-listing.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import useUserStore from "@/stores/use-user-store";
import { useUpdateJobListing } from "./job-listing.hooks";
import useJobListingsStore from "./job-listing.store";
import { JobListing } from "./job-listing.type";
const JobListingsTable = ({
  data,
  isLoading,
  error,
  onActionClicked,
}: ModuleTableProps<JobListing>) => {
  const t = useTranslations();
  const { mutate: updateJobListing } = useUpdateJobListing();
  const selectedRows = useJobListingsStore((state) => state.selectedRows);
  const setSelectedRows = useJobListingsStore((state) => state.setSelectedRows);
  const canEditJobListing = useUserStore((state) => state.hasPermission("job-listings.update"));
  const canDuplicateJobListing = useUserStore((state) =>
    state.hasPermission("job-listings.duplicate"),
  );
  const canViewJobListing = useUserStore((state) => state.hasPermission("job-listings.view"));
  const canArchiveJobListing = useUserStore((state) => state.hasPermission("job-listings.archive"));
  const canDeleteJobListing = useUserStore((state) => state.hasPermission("job-listings.delete"));
  // Create a selection state object for the table
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<JobListing>[] = [
    {
      accessorKey: "title",
      header: t("JobListings.form.title.label"),
      validationSchema: z.string().min(1, t("JobListings.form.title.required")),
    },
    {
      accessorKey: "description",
      header: t("JobListings.form.description.label"),
      validationSchema: z.string().min(1, t("JobListings.form.description.required")),
    },
    {
      accessorKey: "is_active",
      header: t("JobListings.form.is_active.label"),
      validationSchema: z.boolean(),
    },
    {
      accessorKey: "slug",
      header: t("JobListings.form.slug.label"),
      validationSchema: z.string().min(1, t("JobListings.form.slug.required")),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "job_listing_id") return;
    await updateJobListing({ id: rowId, jobListing: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: JobListing[]) => {
      const newSelectedIds = rows.map((row) => row.id!);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const jobListingTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: JobListing) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditJobListing}
      canDuplicateAction={canDuplicateJobListing}
      canViewAction={canViewJobListing}
      canArchiveAction={canArchiveJobListing}
      canDeleteAction={canDeleteJobListing}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={jobListingTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default JobListingsTable;
</file>

<file path="src/modules/job-listing/job-listing.type.ts">
import { Job } from "@/job/job.type";
export interface JobListing {
  id: string;
  title: string;
  description: string | null;
  is_active: boolean;
  slug: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  jobs?: (Job | string)[]; // Optional array of related jobs
}
export interface JobListingJob {
  id: string;
  job_listing_id: string;
  job_id: string;
  created_at: string;
  job?: Job; // Optional related job
}
export interface JobListingFormValues {
  title: string;
  description?: string;
  jobs?: string[];
  user_id?: string;
}
export type JobListingUpdateData = Partial<JobListing>;
</file>

<file path="src/modules/office/office.card.tsx">
import { Mail, Phone, MapPin, Building2 } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Office } from "@/office/office.type";
const OfficeCard = ({ office }: { office: Office }) => {
  return (
    <Card key={office.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">{office.name}</h3>
        <p className="text-sm text-gray-500">{office.email || "Unknown Email"}</p>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Mail className="h-4 w-4" />
            <a href={`mailto:${office.email}`} className="hover:text-primary">
              {office.email}
            </a>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Phone className="h-4 w-4" />
            <a href={`tel:${office.phone}`} className="hover:text-primary">
              {office.phone}
            </a>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Building2 className="h-4 w-4" />
            <span>{office.address}</span>
          </div>
          <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
            <MapPin className="mt-1 h-4 w-4" />
            <div>
              <p>{office.address}</p>
              <p>{`${office.city}, ${office.state} ${office.zip_code}`}</p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
export default OfficeCard;
</file>

<file path="src/modules/office/office.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import CodeInput from "@/components/ui/code-input";
import PhoneInput from "@/components/ui/phone-input";
import { Textarea } from "@/components/ui/textarea";
import useUserStore from "@/stores/use-user-store";
import { useCreateOffice, useOffices, useUpdateOffice } from "./office.hooks";
import useOfficeStore from "./office.store";
import { OfficeUpdateData } from "./office.type";
const createOfficeSchema = (t: (key: string) => string) => {
  const baseOfficeSchema = z.object({
    name: z.string().min(1, t("Offices.form.name.required")),
    code: z.string().min(1, t("Offices.form.code.required")),
    email: z.string().email().optional().or(z.literal("")),
    phone: z.string().optional().or(z.literal("")),
    notes: z.string().optional().or(z.literal("")),
  });
  const addressSchema = createAddressSchema(t);
  return baseOfficeSchema.merge(addressSchema);
};
export type OfficeFormValues = z.input<ReturnType<typeof createOfficeSchema>>;
interface OfficeFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: OfficeUpdateData | null;
  editMode?: boolean;
}
export function OfficeForm({ id, onSuccess, defaultValues, editMode }: OfficeFormProps) {
  const t = useTranslations();
  const { data: offices } = useOffices();
  const { mutateAsync: createOffice, isPending: isCreating } = useCreateOffice();
  const { mutateAsync: updateOffice, isPending: isUpdating } = useUpdateOffice();
  const membership = useUserStore((state) => state.membership);
  const isLoading = useOfficeStore((state) => state.isLoading);
  const setIsLoading = useOfficeStore((state) => state.setIsLoading);
  const form = useForm<OfficeFormValues>({
    resolver: zodResolver(createOfficeSchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      code: defaultValues?.code || "",
      email: defaultValues?.email || "",
      phone: defaultValues?.phone || "",
      short_address: defaultValues?.short_address || "",
      building_number: defaultValues?.building_number || "",
      street_name: defaultValues?.street_name || "",
      city: defaultValues?.city || "",
      region: defaultValues?.region || "",
      country: defaultValues?.country || "",
      zip_code: defaultValues?.zip_code || "",
    },
  });
  const handleSubmit = async (data: OfficeFormValues) => {
    setIsLoading(true);
    try {
      if (editMode && defaultValues) {
        if (!defaultValues.id) {
          console.error("Office ID missing in edit mode");
          toast.error(t("Offices.error.missing_id"));
          setIsLoading(false);
          return;
        }
        await updateOffice(
          {
            id: defaultValues.id,
            office: {
              name: data.name.trim(),
              code: data.code.trim(),
              short_address: data.short_address?.trim() || undefined,
              building_number: data.building_number?.trim() || undefined,
              street_name: data.street_name?.trim() || undefined,
              city: data.city?.trim() || undefined,
              region: data.region?.trim() || undefined,
              country: data.country?.trim() || undefined,
              zip_code: data.zip_code?.trim() || undefined,
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) onSuccess();
            },
          },
        );
      } else {
        if (!membership?.enterprise_id) {
          toast.error(t("General.error_operation"), {
            description: t("Offices.error.no_enterprise"),
          });
          setIsLoading(false);
          return;
        }
        await createOffice(
          {
            name: data.name.trim(),
            code: data.code.trim(),
            short_address: data.short_address?.trim() || undefined,
            building_number: data.building_number?.trim() || undefined,
            street_name: data.street_name?.trim() || undefined,
            city: data.city?.trim() || undefined,
            region: data.region?.trim() || undefined,
            country: data.country?.trim() || undefined,
            zip_code: data.zip_code?.trim() || undefined,
            enterprise_id: membership.enterprise_id,
            is_active: true,
          },
          {
            onSuccess: async (response) => {
              if (onSuccess) onSuccess();
            },
          },
        );
      }
    } catch (error) {
      console.error("Error in office form:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Offices.error.creating"),
      });
      setIsLoading(false);
    }
  };
  // Expose form methods for external use (like dummy data)
  if (typeof window !== "undefined") {
    (window as any).officeForm = form;
  }
  return (
    <Form {...form}>
      <form id={id || "office-form"} onSubmit={form.handleSubmit(handleSubmit)}>
        <div className="mx-auto flex max-w-2xl flex-col gap-4 p-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Offices.form.name.label")}</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      disabled={isLoading}
                      placeholder={t("Offices.form.name.placeholder")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Offices.form.code.label")}</FormLabel>
                  <FormControl>
                    <CodeInput
                      onSerial={() => {
                        const nextNumber = (offices?.length || 0) + 1;
                        const paddedNumber = String(nextNumber).padStart(4, "0");
                        form.setValue("code", `OF-${paddedNumber}`);
                      }}
                      onRandom={() => {
                        const randomChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                        let randomCode = "";
                        for (let i = 0; i < 5; i++) {
                          randomCode += randomChars.charAt(
                            Math.floor(Math.random() * randomChars.length),
                          );
                        }
                        form.setValue("code", `OF-${randomCode}`);
                      }}
                    >
                      <Input
                        {...field}
                        disabled={isLoading}
                        placeholder={t("Offices.form.code.placeholder")}
                      />
                    </CodeInput>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Offices.form.email.label")}</FormLabel>
                <FormControl>
                  <Input
                    dir="ltr"
                    {...field}
                    type="email"
                    disabled={isLoading}
                    placeholder={t("Offices.form.email.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phone"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Offices.form.phone.label")}</FormLabel>
                <FormControl>
                  <PhoneInput
                    value={field.value || ""}
                    onChange={(value) => field.onChange(value || null)}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Vendors.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Vendors.form.notes.placeholder")}
                    {...field}
                    value={field.value ?? ""}
                    disabled={isLoading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <AddressFormSection
          title={t("Offices.form.address.label")}
          control={form.control}
          isLoading={isLoading}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/office/office.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createOffice,
  deleteOffice,
  bulkDeleteOffices,
  fetchOfficeById,
  fetchOffices,
  updateOffice,
  duplicateOffice,
} from "@/office/office.service";
import type { Office, OfficeCreateData, OfficeUpdateData } from "@/office/office.type";
// Query keys for offices
export const officeKeys = {
  all: ["offices"] as const,
  lists: () => [...officeKeys.all, "list"] as const,
  list: (filters: any) => [...officeKeys.lists(), { filters }] as const,
  details: () => [...officeKeys.all, "detail"] as const,
  detail: (id: string) => [...officeKeys.details(), id] as const,
};
// Hook to fetch all offices
export function useOffices() {
  return useQuery({
    queryKey: officeKeys.lists(),
    queryFn: fetchOffices,
  });
}
// Hook to fetch a single office
export function useOffice(id: string) {
  return useQuery({
    queryKey: officeKeys.detail(id),
    queryFn: () => fetchOfficeById(id),
    enabled: !!id,
  });
}
// Hook to create a office
export function useCreateOffice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (office: OfficeCreateData) => createOffice(office),
    onSuccess: (newOffice: Office) => {
      const previousOffices = queryClient.getQueryData(officeKeys.lists()) || [];
      queryClient.setQueryData(officeKeys.lists(), [
        ...(Array.isArray(previousOffices) ? previousOffices : []),
        newOffice,
      ]);
    },
  });
}
// Hook to update a office
export function useUpdateOffice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, office }: { id: string; office: OfficeUpdateData }) =>
      updateOffice(id, office),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: officeKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: officeKeys.lists() });
    },
  });
}
// Hook to duplicate a office
export function useDuplicateOffice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateOffice(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: officeKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: officeKeys.lists() });
    },
  });
}
// Hook to delete a office
export function useDeleteOffice() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteOffice,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: officeKeys.lists() });
      queryClient.removeQueries({ queryKey: officeKeys.detail(variables) });
    },
  });
}
// Hook to bulk delete offices
export function useBulkDeleteOffices() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteOffices,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: officeKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/office/office.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/office/office.service.ts">
import { Office, OfficeCreateData } from "@/office/office.type";
export async function fetchOffices(): Promise<Office[]> {
  try {
    const response = await fetch("/api/resource/offices");
    if (!response.ok) {
      console.error("Failed to fetch offices:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching offices:", error);
    return [];
  }
}
export async function fetchOfficeById(id: string): Promise<Office> {
  try {
    const response = await fetch(`/api/resource/offices/${id}`);
    if (!response.ok) {
      throw new Error(`Office with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching office by id:", error);
    throw error;
  }
}
export async function createOffice(office: OfficeCreateData): Promise<Office> {
  try {
    const response = await fetch("/api/resource/offices", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(office),
    });
    if (!response.ok) {
      throw new Error("Failed to create office");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating office:", error);
    throw error;
  }
}
export async function updateOffice(id: string, updates: Partial<Office>): Promise<Office> {
  const response = await fetch(`/api/resource/offices/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update office with id ${id}`);
  }
  return response.json();
}
export async function duplicateOffice(id: string): Promise<Office> {
  const response = await fetch(`/api/resource/offices/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate office with id ${id}`);
  }
  return response.json();
}
export async function deleteOffice(id: string): Promise<void> {
  const response = await fetch(`/api/resource/offices/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete office with id ${id}`);
  }
}
export async function bulkDeleteOffices(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/offices", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete offices");
  }
}
</file>

<file path="src/modules/office/office.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Office } from "./office.type";
const searchOfficeFn = (office: Office, searchQuery: string) =>
  office.name.toLowerCase().includes(searchQuery.toLowerCase());
const useOfficeStore = createGenericStore<Office>("offices", searchOfficeFn);
export default useOfficeStore;
</file>

<file path="src/modules/office/office.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateOffice } from "@/office/office.hooks";
import useOfficeStore from "@/office/office.store";
import { Office } from "@/office/office.type";
import useUserStore from "@/stores/use-user-store";
const OfficesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Office>) => {
  const t = useTranslations();
  const { mutate: updateOffice } = useUpdateOffice();
  const selectedRows = useOfficeStore((state) => state.selectedRows);
  const setSelectedRows = useOfficeStore((state) => state.setSelectedRows);
  const canEditOffice = useUserStore((state) => state.hasPermission("offices.update"));
  const canDuplicateOffice = useUserStore((state) => state.hasPermission("offices.duplicate"));
  const canViewOffice = useUserStore((state) => state.hasPermission("offices.view"));
  const canArchiveOffice = useUserStore((state) => state.hasPermission("offices.archive"));
  const canDeleteOffice = useUserStore((state) => state.hasPermission("offices.delete"));
  // Create a selection state object for the table
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Office>[] = [
    {
      accessorKey: "name",
      header: t("Offices.form.name.label"),
      validationSchema: z.string().min(1, t("Offices.form.name.required")),
    },
    {
      accessorKey: "email",
      header: t("Offices.form.email.label"),
      validationSchema: z.string().email(t("Offices.form.email.invalid")),
    },
    {
      accessorKey: "phone",
      header: t("Offices.form.phone.label"),
      validationSchema: z.string().min(1, t("Offices.form.phone.required")),
    },
    {
      accessorKey: "address",
      header: t("Offices.form.address.label"),
      validationSchema: z.string().min(1, t("Offices.form.address.required")),
    },
    {
      accessorKey: "city",
      header: t("Offices.form.city.label"),
      validationSchema: z.string().min(1, t("Offices.form.city.required")),
    },
    {
      accessorKey: "state",
      header: t("Offices.form.state.label"),
      validationSchema: z.string().min(1, t("Offices.form.state.required")),
    },
    {
      accessorKey: "zip_code",
      header: t("Offices.form.zip_code.label"),
      validationSchema: z.string().min(1, t("Offices.form.zip_code.required")),
    },
    {
      accessorKey: "notes",
      header: t("Offices.form.notes.label"),
      validationSchema: z.string().optional(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "office_id") return;
    await updateOffice({ id: rowId, office: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Office[]) => {
      const newSelectedIds = rows.map((row) => row.id!);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const officeTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Office) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditOffice}
      canDuplicateAction={canDuplicateOffice}
      canViewAction={canViewOffice}
      canArchiveAction={canArchiveOffice}
      canDeleteAction={canDeleteOffice}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={officeTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default OfficesTable;
</file>

<file path="src/modules/office/office.type.ts">
import { AddressProps } from "@/types/common.type";
export interface OfficeProps {
  id: string;
  name: string;
  code: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  enterprise_id: string;
}
export interface Office extends OfficeProps, AddressProps {}
export type OfficeCreateData = Omit<Office, "id" | "created_at" | "updated_at"> & {
  user_id?: string;
};
export type OfficeUpdateData = Partial<Office>;
</file>

<file path="src/modules/onboarding/onboarding.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2 } from "lucide-react";
import { useTranslations } from "next-intl";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { FlippableInput } from "@/components/ui/flippable-input";
import { useCreateEnterprise } from "./onboarding.hooks";
export const createEnterpriseSchema = (t: (key: string) => string) =>
  z.object({
    name: z.string().min(1, t("OnBoarding.form.enterprise_name.required")),
    email: z.string().email(t("OnBoarding.form.email.invalid")),
    industry: z.string(),
    size: z.string(),
  });
export type EnterpriseFormValues = z.input<ReturnType<typeof createEnterpriseSchema>>;
export function OnboardingForm() {
  const t = useTranslations();
  const { mutate: createEnterprise, isPending } = useCreateEnterprise();
  const form = useForm<EnterpriseFormValues>({
    resolver: zodResolver(createEnterpriseSchema(t)),
    defaultValues: {
      name: "",
      email: "",
      industry: "",
      size: "",
    },
  });
  const onSubmit = async (data: EnterpriseFormValues) => {
    try {
      await createEnterprise(data);
    } catch (error: any) {
      console.error("Error invoking create enterprise mutation:", error);
    }
  };
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("OnBoarding.form.enterprise_name.label")}</FormLabel>
              <FormControl>
                <FlippableInput
                  {...field}
                  placeholder={t("OnBoarding.form.enterprise_name.placeholder")}
                  disabled={isPending}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("OnBoarding.form.email.label")}</FormLabel>
              <FormControl>
                <Input
                  type="email"
                  {...field}
                  placeholder={t("OnBoarding.form.email.placeholder")}
                  disabled={isPending}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="industry"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("OnBoarding.form.industry.label")}</FormLabel>
              <FormControl>
                <Input
                  {...field}
                  placeholder={t("OnBoarding.form.industry.placeholder")}
                  disabled={isPending}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="size"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("OnBoarding.form.size.label")}</FormLabel>
              <FormControl>
                <Input
                  {...field}
                  placeholder={t("OnBoarding.form.size.placeholder")}
                  disabled={isPending}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={isPending}>
          {isPending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
          {t("OnBoarding.form.create_enterprise")}
        </Button>
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/onboarding/onboarding.hooks.ts">
import { useMutation } from "@tanstack/react-query";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
import { OnboardingService } from "./onboarding.service";
import type { EnterpriseCreateData, Enterprise } from "./onboarding.type";
export function useCreateEnterprise() {
  const router = useRouter();
  return useMutation<Enterprise, Error, EnterpriseCreateData>({
    mutationFn: (data: EnterpriseCreateData) => OnboardingService.createEnterprise(data),
    onSuccess: async (createdEnterprise) => {
      toast.success("Enterprise created successfully");
      await useUserStore.getState().fetchUserAndProfile();
      router.push("/dashboard");
    },
    onError: (error: Error) => {
      toast.error(error.message);
    },
  });
}
</file>

<file path="src/modules/onboarding/onboarding.service.ts">
import { createClient } from "@/utils/supabase/component";
import type { EnterpriseCreateData, Enterprise } from "./onboarding.type";
export class OnboardingService {
  // Remove TABLE_NAME, not needed for RPC
  // private static readonly TABLE_NAME = "user_enterprises";
  static async createEnterprise(data: EnterpriseCreateData) {
    const supabase = createClient();
    try {
      // Call the RPC function instead of direct insert
      const { data: enterpriseData, error } = await supabase
        .rpc("create_enterprise", {
          enterprise_name: data.name,
          // Pass other data if the RPC function expects it
          // description: data.description,
          // logo: data.logo,
          // email: data.email,
          // industry: data.industry,
          // size: data.size,
        })
        // Assume RPC returns the necessary data matching the Enterprise type
        // If it returns only an ID, we might need another fetch here.
        .select()
        .single();
      if (error) throw error;
      if (!enterpriseData) throw new Error("RPC did not return enterprise data");
      // No need to update profile here if the RPC handles it.
      // If RPC *doesn't* handle profile update (e.g., needs_onboarding flag),
      // we might need to add that back.
      // Assuming enterpriseData matches the required Enterprise type
      return enterpriseData as Enterprise;
    } catch (error) {
      console.error("Error in createEnterprise RPC call:", error);
      throw error;
    }
  }
}
</file>

<file path="src/modules/onboarding/onboarding.type.ts">
import type { enterprises } from "@/db/schema";
export type Enterprise = {
  id: string;
  name: string;
  email: string;
  industry: string;
  size: string;
  created_at: string;
};
export type EnterpriseCreateData = Pick<Enterprise, "name" | "email" | "industry" | "size">;
export const INDUSTRY_OPTIONS = [
  { label: "Technology", value: "technology" },
  { label: "Healthcare", value: "healthcare" },
  { label: "Finance", value: "finance" },
  { label: "Education", value: "education" },
  { label: "Manufacturing", value: "manufacturing" },
  { label: "Retail", value: "retail" },
  { label: "Other", value: "other" },
];
export const SIZE_OPTIONS = [
  { label: "1-10", value: "1-10" },
  { label: "11-50", value: "11-50" },
  { label: "51-200", value: "51-200" },
  { label: "201-500", value: "201-500" },
  { label: "501-1000", value: "501-1000" },
  { label: "1000+", value: "1000+" },
];
</file>

<file path="src/modules/permission/permission.hooks.ts">
import { useQuery } from "@tanstack/react-query";
import { app_permission } from "@/db/schema";
export interface Permission {
  id: string;
  name: string;
  description: string;
  category: string;
}
// Query key
const PERMISSIONS_QUERY_KEY = "permissions";
// Helper function to format permission name
function formatPermissionName(permission: string): string {
  const [category, action] = permission.split('.');
  return `${action.charAt(0).toUpperCase() + action.slice(1)} ${category}`;
}
// Helper function to get permission description
function getPermissionDescription(permission: string): string {
  const [category, action] = permission.split('.');
  return `Permission to ${action} ${category}`;
}
// Helper function to structure permissions
function structurePermissions(): Permission[] {
  return app_permission.enumValues.map((permission) => {
    const [category] = permission.split('.');
    return {
      id: permission,
      name: formatPermissionName(permission),
      description: getPermissionDescription(permission),
      category: category.charAt(0).toUpperCase() + category.slice(1),
    };
  });
}
export function usePermissions() {
  return useQuery({
    queryKey: [PERMISSIONS_QUERY_KEY],
    queryFn: () => structurePermissions(),
  });
}
</file>

<file path="src/modules/product/product.card.tsx">
import { useTranslations } from "next-intl";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Product } from "@/product/product.type";
const ProductCard = ({ product }: { product: Product }) => {
  const t = useTranslations("Products");
  return (
    <Card key={product.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">{product.name}</h3>
      </CardHeader>
      <CardContent>
        <p className="mb-2 text-gray-600 dark:text-gray-400">
          {product.description || t("no_description")}
        </p>
        <p className="text-lg font-bold">${Number(product.price).toFixed(2)}</p>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          {t("sku_label", { value: product.sku || "N/A" })}
        </p>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          {t("stock_label", {
            value: product.stock_quantity || 0,
          })}
        </p>
      </CardContent>
    </Card>
  );
};
export default ProductCard;
</file>

<file path="src/modules/product/product.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { RefObject, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { CurrencyInput } from "@/ui/currency-input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
export const createProductSchema = (t: (key: string) => string) =>
  z.object({
    name: z.string().min(1, t("Products.form.name.required")),
    description: z.string().optional(),
    price: z
      .string()
      .min(1, t("Products.form.price.required"))
      .refine(
        (val) => !isNaN(parseFloat(val)) && parseFloat(val) >= 0,
        t("Products.form.price.invalid"),
      ),
    sku: z.string().optional(),
    stock_quantity: z
      .string()
      .min(1, t("Products.form.stock_quantity.required"))
      .refine(
        (val) => !isNaN(parseInt(val)) && parseInt(val) >= 0,
        t("Products.form.stock_quantity.invalid"),
      ),
  });
export type ProductFormValues = z.input<ReturnType<typeof createProductSchema>>;
interface ProductFormProps {
  id?: string;
  loading?: boolean;
  onSubmit: (data: ProductFormValues) => void;
}
export function ProductForm({ id, onSubmit, loading }: ProductFormProps) {
  const t = useTranslations();
  const form = useForm<ProductFormValues>({
    resolver: zodResolver(createProductSchema(t)),
    defaultValues: {
      name: "",
      description: "",
      price: "",
      sku: "",
      stock_quantity: "",
    },
  });
  if (typeof window !== "undefined") {
    (window as any).productForm = form;
  }
  return (
    <Form {...form}>
      <form id={id || "product-form"} onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <input type="submit" hidden />
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Products.form.name.label")} *</FormLabel>
              <FormControl>
                <Input
                  placeholder={t("Products.form.name.placeholder")}
                  {...field}
                  disabled={loading}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Products.form.description.label")}</FormLabel>
              <FormControl>
                <Textarea
                  placeholder={t("Products.form.description.placeholder")}
                  rows={4}
                  {...field}
                  disabled={loading}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <FormField
            control={form.control}
            name="price"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Products.form.price.label")} *</FormLabel>
                <FormControl>
                  <CurrencyInput
                    showCommas={true}
                    value={field.value ? parseFloat(String(field.value)) : undefined}
                    onChange={(value) => field.onChange(value?.toString() || "")}
                    placeholder={t("Products.form.price.placeholder")}
                    disabled={loading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="stock_quantity"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Products.form.stock_quantity.label")} *</FormLabel>
                <FormControl>
                  <Input type="number" min="0" placeholder="0" {...field} disabled={loading} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="sku"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Products.form.sku.label")}</FormLabel>
              <FormControl>
                <Input
                  placeholder={t("Products.form.sku.placeholder")}
                  {...field}
                  disabled={loading}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/product/product.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  bulkDeleteProducts,
  createProduct,
  deleteProduct,
  fetchProductById,
  fetchProducts,
  updateProduct,
  duplicateProduct,
} from "@/product/product.service";
import type { Product } from "@/product/product.type";
// Query keys for products
export const productKeys = {
  all: ["products"] as const,
  lists: () => [...productKeys.all, "list"] as const,
  list: (filters: any) => [...productKeys.lists(), { filters }] as const,
  details: () => [...productKeys.all, "detail"] as const,
  detail: (id: string) => [...productKeys.details(), id] as const,
};
// Hook to fetch all products
export function useProducts() {
  return useQuery({
    queryKey: productKeys.lists(),
    queryFn: fetchProducts,
  });
}
// Hook to fetch a single product by ID
export function useProduct(id: string) {
  return useQuery({
    queryKey: productKeys.detail(id),
    queryFn: () => fetchProductById(id),
    enabled: !!id, // Only run query if id is truthy
  });
}
// Hook for creating a new product
export function useCreateProduct() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newProduct: Omit<Product, "id" | "created_at">) => {
      return createProduct(newProduct);
    },
    onSuccess: () => {
      // Invalidate the list query to refetch
      queryClient.invalidateQueries({ queryKey: productKeys.lists() });
    },
  });
}
// Hook for duplicating a product
export function useDuplicateProduct() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateProduct(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: productKeys.lists() });
    },
  });
}
// Hook for updating an existing product
export function useUpdateProduct() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Omit<Product, "id" | "created_at">> }) =>
      updateProduct(id, data),
    onSuccess: (data: Product) => {
      queryClient.invalidateQueries({ queryKey: productKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: productKeys.lists() });
    },
  });
}
// Hook for deleting a product
export function useDeleteProduct() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteProduct(id),
    onSuccess: (_, variables) => {
      // Invalidate the list and remove the specific detail query from cache
      queryClient.invalidateQueries({ queryKey: productKeys.lists() });
      queryClient.removeQueries({ queryKey: productKeys.detail(variables) });
    },
  });
}
export function useBulkDeleteProducts() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteProducts,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: productKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/product/product.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/product/product.service.ts">
import { Product } from "@/product/product.type";
export async function fetchProducts(): Promise<Product[]> {
  const response = await fetch("/api/resources/products");
  if (!response.ok) {
    throw new Error("Failed to fetch products");
  }
  return response.json();
}
export async function fetchProductById(id: string): Promise<Product> {
  const response = await fetch(`/api/resources/products/${id}`);
  if (!response.ok) {
    throw new Error("Failed to fetch product");
  }
  return response.json();
}
export async function createProduct(product: Omit<Product, "id" | "created_at">): Promise<Product> {
  try {
    const response = await fetch("/api/resources/products", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(product),
    });
    if (!response.ok) {
      throw new Error("Failed to create product");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating product:", error);
    throw error;
  }
}
export async function duplicateProduct(id: string): Promise<Product> {
  const response = await fetch(`/api/resources/products/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error("Failed to duplicate product");
  }
  return response.json();
}
export async function updateProduct(
  id: string,
  product: Partial<Omit<Product, "id" | "created_at">>,
): Promise<Product> {
  const response = await fetch(`/api/resources/products/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(product),
  });
  if (!response.ok) {
    throw new Error("Failed to update product");
  }
  return response.json();
}
export async function deleteProduct(id: string): Promise<void> {
  const response = await fetch(`/api/resources/products/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error("Failed to delete product");
  }
}
export async function bulkDeleteProducts(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/products", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete products");
  }
}
</file>

<file path="src/modules/product/product.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Product } from "./product.type";
const searchProductFn = (product: Product, searchQuery: string) =>
  product.name.toLowerCase().includes(searchQuery.toLowerCase());
const useProductStore = createGenericStore<Product>("products", searchProductFn);
export default useProductStore;
</file>

<file path="src/modules/product/product.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateProduct } from "@/product/product.hooks";
import useProductStore from "@/product/product.store";
import { Product } from "@/product/product.type";
import useUserStore from "@/stores/use-user-store";
const ProductsTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Product>) => {
  const t = useTranslations();
  const selectedRows = useProductStore((state) => state.selectedRows);
  const setSelectedRows = useProductStore((state) => state.setSelectedRows);
  const { mutateAsync: updateProduct } = useUpdateProduct();
  const canEditProduct = useUserStore((state) => state.hasPermission("products.update"));
  const canDuplicateProduct = useUserStore((state) => state.hasPermission("products.duplicate"));
  const canViewProduct = useUserStore((state) => state.hasPermission("products.view"));
  const canArchiveProduct = useUserStore((state) => state.hasPermission("products.archive"));
  const canDeleteProduct = useUserStore((state) => state.hasPermission("products.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Product>[] = [
    {
      accessorKey: "name",
      header: t("Products.form.name.label"),
      validationSchema: z.string().min(1, t("Products.form.name.required")),
    },
    {
      accessorKey: "description",
      header: t("Products.form.description.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "price",
      header: t("Products.form.price.label"),
      validationSchema: z.number().min(0, t("Products.form.price.required")),
    },
    {
      accessorKey: "sku",
      header: t("Products.form.sku.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "stock_quantity",
      header: t("Products.form.stock_quantity.label"),
      validationSchema: z.number().min(0, t("Products.form.stock_quantity.required")),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateProduct({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Product[]) => {
      const newSelectedIds = rows.map((row) => row.id!);
      // Only update if the selection has actually changed
      const currentSelection = new Set(selectedRows);
      const newSelection = new Set(newSelectedIds);
      if (
        newSelection.size !== currentSelection.size ||
        !Array.from(newSelection).every((id) => currentSelection.has(id))
      ) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const productTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Product) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditProduct}
      canDuplicateAction={canDuplicateProduct}
      canViewAction={canViewProduct}
      canArchiveAction={canArchiveProduct}
      canDeleteAction={canDeleteProduct}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={productTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default ProductsTable;
</file>

<file path="src/modules/product/product.type.ts">
import { PRODUCT_CATEGORIES, PRODUCT_STATUSES } from "@/lib/constants/product-consts";
export type ProductStatus = (typeof PRODUCT_STATUSES)[number];
export type ProductCategory = (typeof PRODUCT_CATEGORIES)[number];
export type Product = {
  id: string;
  name: string;
  description?: string | null;
  price: number;
  sku?: string | null;
  stock_quantity?: number;
  user_id: string;
  created_at?: string;
  updated_at?: string;
};
export type ProductProps = {
  id: string;
  name: string;
  description?: string | null;
  price: number;
  sku?: string | null;
  stock_quantity?: number | null;
  user_id: string;
  created_at?: string | null;
  updated_at?: string | null;
};
export type NoteProps = {
  _id?: string;
  title?: string;
  description?: string;
  content?: any;
  author?: string;
  created_at?: string;
  updated_at?: string;
};
export type ProductCreateData = Omit<Product, "id" | "created_at"> & { user_id: string };
</file>

<file path="src/modules/quote/quote.card.tsx">
import { format } from "date-fns";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Quote } from "@/quote/quote.type";
function getQuoteStatusColor(status: string): string {
  switch (status.toLowerCase()) {
    case "accepted":
      return "bg-green-100 text-green-800";
    case "sent":
      return "bg-blue-100 text-blue-800";
    case "rejected":
      return "bg-red-100 text-red-800";
    case "expired":
      return "bg-gray-100 text-gray-800";
    case "draft":
    default:
      return "bg-yellow-100 text-yellow-800";
  }
}
const QuoteCard = ({ quote }: { quote: Quote }) => {
  const t = useTranslations("Quotes");
  return (
    <Card key={quote.id} className="transition-shadow hover:shadow-lg">
      <CardHeader className="flex flex-row items-start justify-between">
        <div>
          <h3 className="text-lg font-semibold">
            {t("quote_number", { number: quote.quote_number })}
          </h3>
          <p className="text-sm text-gray-500">{quote.clients?.company}</p>
        </div>
        <Badge className={getQuoteStatusColor(quote.status)}>
          {t(`status.${quote.status.toLowerCase()}`)}
        </Badge>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("issue_date")}</span>
            <span className="text-sm">{format(new Date(quote.issue_date), "MMM dd, yyyy")}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("expiry_date")}</span>
            <span className="text-sm">{format(new Date(quote.expiry_date), "MMM dd, yyyy")}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">{t("amount")}</span>
            <span className="text-lg font-bold">
              $
              {(
                (quote.subtotal || 0) +
                ((quote.subtotal || 0) * (quote.tax_rate || 0)) / 100
              ).toFixed(2)}
            </span>
          </div>
          <div className="border-t pt-2">
            <p className="text-sm text-gray-500">
              {quote.clients?.name} • {quote.clients?.email}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
export default QuoteCard;
</file>

<file path="src/modules/quote/quote.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { flexRender, getCoreRowModel, useReactTable } from "@tanstack/react-table";
import { format } from "date-fns";
import { PlusCircle, Trash2 } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import { useEffect, useMemo, useState, RefObject } from "react";
import { useFieldArray, useForm } from "react-hook-form";
import { toast } from "sonner";
import { z } from "zod";
import { Button } from "@/ui/button";
import { ComboboxAdd } from "@/ui/combobox-add";
import { DatePicker } from "@/ui/date-picker";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/ui/table";
import { Textarea } from "@/ui/textarea";
import { createClient } from "@/utils/supabase/component";
import { ClientForm, type ClientFormValues } from "@/client/client.form";
import { Client } from "@/client/client.type";
import { Product } from "@/product/product.type";
export interface QuoteItem {
  product_id?: string;
  description: string;
  quantity: string;
  unit_price: string;
}
export interface QuoteFormValues {
  client_id: string;
  quote_number: string;
  issue_date: string;
  expiry_date: string;
  status: string;
  tax_rate: number;
  subtotal?: number;
  notes?: string;
  items: QuoteItem[];
}
export interface QuoteFormProps {
  id?: string;
  formRef?: RefObject<HTMLFormElement>;
  loading?: boolean;
  user_id?: string | undefined;
  onSubmit: (data: QuoteFormValues) => void;
  hideFormButtons?: boolean;
}
export function QuoteForm({
  id,
  formRef,
  loading,
  user_id,
  onSubmit,
  hideFormButtons,
}: QuoteFormProps) {
  const supabase = createClient();
  const t = useTranslations();
  const locale = useLocale();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [clients, setClients] = useState<Client[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isNewProductDialogOpen, setIsNewProductDialogOpen] = useState(false);
  const [clientsLoading, setClientsLoading] = useState(true);
  const [productsLoading, setProductsLoading] = useState(true);
  const quoteSchema = z.object({
    client_id: z.string().min(1, t("Quotes.validation.client_required")),
    quote_number: z.string().min(1, t("Quotes.validation.quote_number_required")),
    issue_date: z.string().min(1, t("Quotes.validation.issue_date_required")),
    expiry_date: z.string().min(1, t("Quotes.validation.expiry_date_required")),
    status: z.string().min(1, t("Quotes.validation.status_required")),
    tax_rate: z.number().min(0, t("Quotes.validation.tax_rate_positive")),
    notes: z.string().optional(),
    items: z
      .array(
        z.object({
          product_id: z.string().optional(),
          description: z.string().min(1, t("Quotes.validation.item_description_required")),
          quantity: z
            .string()
            .min(1, t("Quotes.validation.item_quantity_required"))
            .refine(
              (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,
              t("Quotes.validation.item_quantity_positive"),
            ),
          unit_price: z
            .string()
            .min(1, t("Quotes.validation.item_price_required"))
            .refine(
              (val) => !isNaN(parseFloat(val)) && parseFloat(val) >= 0,
              t("Quotes.validation.item_price_positive"),
            ),
        }),
      )
      .min(1, t("Quotes.validation.items_required"))
      .refine(
        (items) => items.every((item) => item.description?.trim() !== "" || item.product_id),
        t("Quotes.validation.item_description_or_product"),
      ),
  });
  const form = useForm<z.input<typeof quoteSchema>>({
    resolver: zodResolver(quoteSchema),
    defaultValues: {
      client_id: "",
      quote_number: "",
      issue_date: "",
      expiry_date: "",
      status: "draft",
      tax_rate: 0,
      notes: "",
      items: [],
    },
  });
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "items",
  });
  const items = form.watch("items") || [];
  const tax_rate = form.watch("tax_rate") || 0;
  const subtotal = items.reduce((acc: number, item: QuoteItem) => {
    const quantity = parseFloat(item.quantity || "0");
    const unit_price = parseFloat(item.unit_price || "0");
    return acc + quantity * unit_price;
  }, 0);
  const tax = (subtotal * tax_rate) / 100;
  const total = subtotal + tax;
  useEffect(() => {
    // Get the current user ID and fetch clients
    const getClients = async () => {
      setClientsLoading(true);
      // Fetch clients with all fields and company details
      try {
        const { data, error } = await supabase
          .from("clients")
          .select(
            `
            *,
            company_details:companies (name)
          `,
          )
          .order("name");
        if (error) throw error;
        setClients(data as Client[]);
      } catch (error) {
        console.error("Error fetching clients:", error);
        toast.error(t("Quotes.error.load_clients"));
      } finally {
        setClientsLoading(false);
      }
    };
    getClients();
  }, [t]);
  useEffect(() => {
    // Fetch products
    const fetchProducts = async () => {
      setProductsLoading(true);
      try {
        const { data, error } = await supabase.from("products").select("*").order("name");
        if (error) throw error;
        setProducts(data || []);
      } catch (error) {
        console.error("Error fetching products:", error);
        toast.error(t("Quotes.error.load_products"));
      } finally {
        setProductsLoading(false);
      }
    };
    fetchProducts();
  }, []);
  // Calculate subtotal whenever items change
  useEffect(() => {
    const calculateSubtotal = () => {
      const subtotal = items.reduce((acc: number, item: QuoteItem) => {
        const quantity = parseFloat(item.quantity || "0");
        const unit_price = parseFloat(item.unit_price || "0");
        return acc + quantity * unit_price;
      }, 0);
    };
    calculateSubtotal();
  }, [items]);
  const clientOptions = useMemo(
    () =>
      clients.map((client) => ({
        value: client.id,
        label: `${client.name}`,
      })),
    [clients],
  );
  const productOptions = useMemo(
    () =>
      products.map((product) => ({
        value: product.id,
        label: product.name,
        description: product.description,
        price: product.price,
      })),
    [products],
  );
  const handleClientAdded = async (data: ClientFormValues) => {
    try {
      const { data: newClient, error } = await supabase
        .from("clients")
        .insert([
          {
            ...data,
            user_id: user_id,
          },
        ])
        .select("*")
        .single();
      if (error) throw error;
      setClients((prev) => [...prev, newClient]);
      form.setValue("client_id", newClient.id);
      setIsDialogOpen(false);
    } catch (error) {
      console.error("Error creating client:", error);
      toast.error(t("Quotes.error.create_client"));
    }
  };
  const handleProductSelection = (index: number, product_id: string) => {
    const product = products.find((p) => p.id === product_id);
    if (product) {
      form.setValue(`items.${index}.description`, product.description || "");
      form.setValue(`items.${index}.unit_price`, product.price.toString());
    }
  };
  const calculateSubtotal = (items: QuoteItem[]) => {
    return items.reduce((acc: number, item: QuoteItem) => {
      const quantity = parseFloat(item.quantity) || 0;
      const unit_price = parseFloat(item.unit_price) || 0;
      return acc + quantity * unit_price;
    }, 0);
  };
  // Define table columns for the products
  const columns = useMemo(
    () => [
      {
        id: "product",
        header: t("Quotes.products.product"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.product_id`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <ComboboxAdd
                      data={productOptions}
                      isLoading={productsLoading}
                      defaultValue={field.value}
                      onChange={(value) => {
                        field.onChange(value);
                        handleProductSelection(index, value);
                      }}
                      texts={{
                        placeholder: t("Quotes.products.select_product"),
                        searchPlaceholder: t("Quotes.products.search_products"),
                        noItems: t("Quotes.products.no_products_found"),
                      }}
                      addText={t("Quotes.products.add_new_product")}
                      onAddClick={() => setIsNewProductDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "quantity",
        header: t("Quotes.products.quantity"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.quantity`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input type="number" min="1" step="1" {...field} className="w-24" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "unit_price",
        header: t("Quotes.products.unit_price"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.unit_price`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      placeholder="0.00"
                      {...field}
                      className="w-32"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "description",
        header: t("Quotes.products.description"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <FormField
              control={form.control}
              name={`items.${index}.description`}
              render={({ field }) => (
                <FormItem className="space-y-0">
                  <FormControl>
                    <Input placeholder={t("Quotes.products.product_description")} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          );
        },
      },
      {
        id: "subtotal",
        header: t("Quotes.products.subtotal"),
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            <div className="text-right">
              $
              {form.watch(`items.${index}.quantity`) && form.watch(`items.${index}.unit_price`)
                ? (
                    parseFloat(form.watch(`items.${index}.quantity`) || "0") *
                    parseFloat(form.watch(`items.${index}.unit_price`) || "0")
                  ).toFixed(2)
                : "0.00"}
            </div>
          );
        },
      },
      {
        id: "actions",
        header: "",
        cell: ({ row }: any) => {
          const index = row.index;
          return (
            fields.length > 1 && (
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => remove(index)}
                className="h-8 w-8 p-0"
              >
                <Trash2 className="h-4 w-4 text-red-500" />
              </Button>
            )
          );
        },
      },
    ],
    [form, fields, productOptions, productsLoading, handleProductSelection, remove, t],
  );
  // Set up the table
  const data = useMemo(() => fields.map((_, i) => ({ index: i })), [fields]);
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });
  // Remove the subtotal form field since it's calculated
  const SubtotalDisplay = () => (
    <div className="flex flex-col space-y-2">
      <span className="text-sm font-medium">{t("Quotes.products.subtotal")}</span>
      <Input type="text" value={`${subtotal.toFixed(2)}`} readOnly disabled />
    </div>
  );
  return (
    <>
      <Form {...form}>
        <form
          id={id}
          ref={formRef}
          onSubmit={form.handleSubmit((data) => {
            const formattedData: QuoteFormValues = {
              ...data,
              items: data.items.map((item) => ({
                ...item,
                quantity: item.quantity,
                unit_price: item.unit_price,
              })),
            };
            onSubmit(formattedData);
          })}
          className="space-y-4"
        >
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="client_id"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Quotes.form.client.label")} *</FormLabel>
                  <FormControl>
                    <ComboboxAdd
                      data={clientOptions}
                      isLoading={clientsLoading}
                      defaultValue={field.value}
                      onChange={(value) => field.onChange(value || null)}
                      renderOption={(option) => {
                        return (
                          <div className="flex items-center gap-2">
                            <span>{option.label}</span>
                            <span className="text-sm text-gray-500">{option.description}</span>
                          </div>
                        );
                      }}
                      texts={{
                        placeholder: t("Quotes.form.client.placeholder"),
                        searchPlaceholder: t("Quotes.clients.search_clients"),
                        noItems: t("Quotes.clients.no_clients"),
                      }}
                      addText={t("Clients.add_new")}
                      onAddClick={() => setIsDialogOpen(true)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="quote_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Quotes.form.quote_number.label")} *</FormLabel>
                  <FormControl>
                    <Input placeholder={t("Quotes.form.quote_number.placeholder")} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <SubtotalDisplay />
            <FormField
              control={form.control}
              name="tax_rate"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Quotes.tax_rate")} (%)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      max="100"
                      {...field}
                      onChange={(e) => {
                        const value = parseFloat(e.target.value);
                        field.onChange(isNaN(value) ? 0 : value);
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="issue_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Quotes.form.issue_date.label")} *</FormLabel>
                  <DatePicker
                    date={field.value ? new Date(field.value) : undefined}
                    onSelect={(date) => field.onChange(date ? format(date, "yyyy-MM-dd") : "")}
                    placeholder={t("Quotes.form.issue_date.placeholder")}
                  />
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="expiry_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Quotes.form.expiry_date.label")} *</FormLabel>
                  <DatePicker
                    date={field.value ? new Date(field.value) : undefined}
                    onSelect={(date) => field.onChange(date ? format(date, "yyyy-MM-dd") : "")}
                    placeholder={t("Quotes.form.expiry_date.placeholder")}
                  />
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Quotes.form.status.title")} *</FormLabel>
                <Select
                  defaultValue={field.value}
                  onValueChange={field.onChange}
                  dir={locale === "ar" ? "rtl" : "ltr"}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder={t("Quotes.form.status.placeholder")} />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="draft">{t("Quotes.form.status.draft")}</SelectItem>
                    <SelectItem value="sent">{t("Quotes.form.status.sent")}</SelectItem>
                    <SelectItem value="accepted">{t("Quotes.form.status.accepted")}</SelectItem>
                    <SelectItem value="rejected">{t("Quotes.form.status.rejected")}</SelectItem>
                    <SelectItem value="expired">{t("Quotes.form.status.expired")}</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Products Section with Table */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">{t("Quotes.products.title")}</h3>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() =>
                  append({ product_id: "", description: "", quantity: "1", unit_price: "" })
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" />
                {t("Quotes.products.add_product")}
              </Button>
            </div>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableHead key={header.id}>
                          {flexRender(header.column.columnDef.header, header.getContext())}
                        </TableHead>
                      ))}
                    </TableRow>
                  ))}
                </TableHeader>
                <TableBody>
                  {table.getRowModel().rows.length ? (
                    table.getRowModel().rows.map((row) => (
                      <TableRow key={row.id}>
                        {row.getVisibleCells().map((cell) => (
                          <TableCell key={cell.id}>
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={columns.length} className="h-24 text-center">
                        {t("Quotes.products.no_products")}
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </div>
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Quotes.notes")}</FormLabel>
                <FormControl>
                  <Textarea placeholder={t("Quotes.enter_notes")} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid gap-4 md:grid-cols-3">
            <div className="flex items-center justify-between md:col-start-2">
              <span className="text-sm font-medium">{t("Quotes.subtotal")}</span>
              <span className="text-sm">${subtotal.toFixed(2)}</span>
            </div>
            <div className="flex items-center justify-between md:col-start-2">
              <span className="text-sm font-medium">{t("Quotes.tax")}</span>
              <span className="text-sm">${tax.toFixed(2)}</span>
            </div>
            <div className="flex items-center justify-between md:col-start-2">
              <span className="text-sm font-medium">{t("Quotes.total")}</span>
              <span className="text-sm font-bold">${total.toFixed(2)}</span>
            </div>
          </div>
          {!hideFormButtons && (
            <div className="flex justify-end">
              <Button type="submit" disabled={isLoading}>
                {isLoading ? t("Quotes.submitting") : t("Quotes.create_quote")}
              </Button>
            </div>
          )}
        </form>
      </Form>
      <FormDialog
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        title={t("Clients.add_new")}
        formId="client-form"
        cancelText={t("General.cancel")}
        submitText={t("General.save")}
      >
        <ClientForm id="client-form" />
      </FormDialog>
    </>
  );
}
</file>

<file path="src/modules/quote/quote.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createQuote,
  deleteQuote,
  fetchQuoteById,
  fetchQuotes,
  updateQuote,
  bulkDeleteQuotes,
  duplicateQuote,
} from "@/quote/quote.service";
import { Quote } from "@/quote/quote.type";
export const quoteKeys = {
  all: ["quotes"] as const,
  lists: () => [...quoteKeys.all, "list"] as const,
  list: (filters: any) => [...quoteKeys.lists(), { filters }] as const,
  details: () => [...quoteKeys.all, "detail"] as const,
  detail: (id: string) => [...quoteKeys.details(), id] as const,
};
// Hook to fetch all quotes
export function useQuotes() {
  return useQuery({
    queryKey: quoteKeys.lists(),
    queryFn: fetchQuotes,
  });
}
// Hook to fetch a single quote by ID
export function useQuote(id: string) {
  return useQuery({
    queryKey: quoteKeys.detail(id),
    queryFn: () => fetchQuoteById(id),
    enabled: !!id, // Only run query if id is truthy
  });
}
// Hook for creating a new quote
export function useCreateQuote() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newQuote: Omit<Quote, "id" | "created_at">) => createQuote(newQuote),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: quoteKeys.lists() });
    },
  });
}
// Hook for duplicating a quote
export function useDuplicateQuote() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateQuote(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: quoteKeys.lists() });
    },
  });
}
// Hook for updating a quote
export function useUpdateQuote() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Quote> }) => updateQuote(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: quoteKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: quoteKeys.lists() });
    },
  });
}
// Hook for deleting a quote
export function useDeleteQuote() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteQuote,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: quoteKeys.lists() });
      queryClient.removeQueries({ queryKey: quoteKeys.detail(variables) });
    },
  });
}
// Hook for bulk deleting quotes
export const useBulkDeleteQuotes = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteQuotes,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: quoteKeys.lists() });
    },
  });
};
</file>

<file path="src/modules/quote/quote.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/quote/quote.service.ts">
import { Quote, QuoteItem, QuoteCreateData, QuoteItemCreateData } from "@/quote/quote.type";
export async function fetchQuotes(): Promise<Quote[]> {
  try {
    const response = await fetch("/api/resources/quotes");
    if (!response.ok) {
      throw new Error("Failed to fetch quotes");
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching quotes:", error);
    throw new Error("Failed to fetch quotes");
  }
}
export async function fetchQuoteById(id: string): Promise<Quote> {
  try {
    const response = await fetch(`/api/resources/quotes/${id}`);
    if (!response.ok) {
      throw new Error("Failed to fetch quote");
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching quote:", error);
    throw new Error("Failed to fetch quote");
  }
}
export async function createQuote(newQuote: QuoteCreateData): Promise<Quote> {
  try {
    const response = await fetch("/api/resources/quotes", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newQuote),
    });
    if (!response.ok) {
      throw new Error("Failed to create quote");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating quote:", error);
    throw new Error("Failed to create quote");
  }
}
export async function duplicateQuote(id: string): Promise<Quote> {
  try {
    const response = await fetch(`/api/resources/quotes/${id}/duplicate`, {
      method: "POST",
    });
    if (!response.ok) {
      throw new Error("Failed to duplicate quote");
    }
    return response.json();
  } catch (error) {
    console.error("Error duplicating quote:", error);
    throw new Error("Failed to duplicate quote");
  }
}
export async function updateQuote(id: string, updates: Partial<Quote>): Promise<Quote> {
  try {
    const response = await fetch(`/api/resources/quotes/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updates),
    });
    if (!response.ok) {
      throw new Error("Failed to update quote");
    }
    return response.json();
  } catch (error) {
    console.error("Error updating quote:", error);
    throw new Error("Failed to update quote");
  }
}
export async function deleteQuote(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/resources/quotes/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) {
      throw new Error("Failed to delete quote");
    }
  } catch (error) {
    console.error("Error deleting quote:", error);
    throw new Error("Failed to delete quote");
  }
}
export async function bulkDeleteQuotes(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/resources/quotes/bulk-delete", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete quotes");
    }
  } catch (error) {
    console.error("Error deleting quotes:", error);
    throw new Error("Failed to delete quotes");
  }
}
// Quote Items API endpoints
export async function createQuoteItem(quoteItem: QuoteItemCreateData) {
  try {
    const dbQuoteItem = {
      quote_id: quoteItem.quote_id,
      description: quoteItem.description,
      quantity: quoteItem.quantity.toString(),
      unit_price: quoteItem.unit_price.toString(),
    };
    const response = await fetch("/api/resources/quote-items", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(dbQuoteItem),
    });
    if (!response.ok) {
      throw new Error("Failed to create quote item");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating quote item:", error);
    throw new Error("Failed to create quote item");
  }
}
export async function updateQuoteItem(id: string, quoteItem: Partial<QuoteItem>) {
  try {
    const dbQuoteItem = {
      ...(quoteItem.quote_id && { quote_id: quoteItem.quote_id }),
      ...(quoteItem.description && { description: quoteItem.description }),
      ...(quoteItem.quantity && { quantity: quoteItem.quantity.toString() }),
      ...(quoteItem.unit_price && { unit_price: quoteItem.unit_price.toString() }),
    };
    const response = await fetch(`/api/resources/quote-items/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(dbQuoteItem),
    });
    if (!response.ok) {
      throw new Error(`Failed to update quote item with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error updating quote item ${id}:`, error);
    throw new Error(`Failed to update quote item with id ${id}`);
  }
}
export async function deleteQuoteItem(id: string) {
  try {
    const response = await fetch(`/api/resources/quote-items/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (!response.ok) {
      throw new Error(`Failed to delete quote item with id ${id}`);
    }
  } catch (error) {
    console.error(`Error deleting quote item ${id}:`, error);
    throw new Error(`Failed to delete quote item with id ${id}`);
  }
}
</file>

<file path="src/modules/quote/quote.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Quote } from "./quote.type";
const searchQuoteFn = (quote: Quote, searchQuery: string) =>
  quote.quote_number.toLowerCase().includes(searchQuery.toLowerCase());
const useQuoteStore = createGenericStore<Quote>("quotes", searchQuoteFn);
export default useQuoteStore;
</file>

<file path="src/modules/quote/quote.table.tsx">
import { type CellContext } from "@tanstack/react-table";
import { format } from "date-fns";
import { useTranslations } from "next-intl";
import React from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateQuote } from "@/quote/quote.hooks";
import useQuotesStore from "@/quote/quote.store";
import { Quote } from "@/quote/quote.type";
import useUserStore from "@/stores/use-user-store";
const QuotesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Quote>) => {
  const t = useTranslations();
  const { mutateAsync: updateQuote } = useUpdateQuote();
  const setSelectedRows = useQuotesStore((state) => state.setSelectedRows);
  const selectedRows = useQuotesStore((state) => state.selectedRows);
  const canEditQuote = useUserStore((state) => state.hasPermission("quotes.update"));
  const canDuplicateQuote = useUserStore((state) => state.hasPermission("quotes.duplicate"));
  const canViewQuote = useUserStore((state) => state.hasPermission("quotes.view"));
  const canArchiveQuote = useUserStore((state) => state.hasPermission("quotes.archive"));
  const canDeleteQuote = useUserStore((state) => state.hasPermission("quotes.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Quote>[] = [
    {
      accessorKey: "quote_number",
      header: t("Quotes.quote_number"),
      validationSchema: z.string().min(1, t("Quotes.quote_number.required")),
    },
    {
      accessorKey: "client_id",
      header: t("Companies.title"),
      cell: (props: CellContext<Quote, unknown>) => props.row.original.clients?.company || "N/A",
    },
    {
      accessorKey: "issue_date",
      header: t("Quotes.issue_date"),
      cell: (props: CellContext<Quote, unknown>) => {
        try {
          return format(new Date(props.row.original.issue_date), "MMM dd, yyyy");
        } catch (e) {
          return t("General.invalid_date");
        }
      },
    },
    {
      accessorKey: "expiry_date",
      header: t("Quotes.expiry_date"),
      cell: (props: CellContext<Quote, unknown>) => {
        try {
          return format(new Date(props.row.original.expiry_date), "MMM dd, yyyy");
        } catch (e) {
          return t("General.invalid_date");
        }
      },
    },
    {
      accessorKey: "status",
      header: t("Quotes.status.title"),
      validationSchema: z.enum(["draft", "sent", "accepted", "rejected", "expired"]),
    },
    {
      accessorKey: "subtotal",
      header: t("Quotes.subtotal"),
      validationSchema: z.number().min(0, t("Quotes.subtotal.required")),
      cell: (props: CellContext<Quote, unknown>) =>
        `$${Number(props.row.original.subtotal || 0).toFixed(2)}`,
    },
    {
      accessorKey: "tax_rate",
      header: t("Quotes.tax_rate"),
      validationSchema: z.number().min(0, t("Quotes.tax_rate.required")),
      cell: (props: CellContext<Quote, unknown>) => `${props.row.original.tax_rate || 0}%`,
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    if (columnId === "client_id") return;
    await updateQuote({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = (rows: Quote[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const quoteTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Quote) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditQuote}
      canDuplicateAction={canDuplicateQuote}
      canViewAction={canViewQuote}
      canArchiveAction={canArchiveQuote}
      canDeleteAction={canDeleteQuote}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={quoteTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default QuotesTable;
</file>

<file path="src/modules/quote/quote.type.ts">
import { Client } from "@/client/client.type";
export interface Quote {
  id: string;
  created_at: string;
  quote_number: string;
  issue_date: string;
  expiry_date: string;
  subtotal: number;
  tax_rate: number;
  tax_amount: number;
  total: number;
  status: string;
  notes?: string;
  client_id: string;
  clients?: Client;
}
export interface QuoteItem {
  id: string;
  quote_id: string;
  product_id?: string;
  description: string;
  quantity: number;
  unit_price: number;
}
export type QuoteCreateData = Omit<Quote, "id" | "created_at" | "clients"> & {
  user_id?: string;
};
export type QuoteItemCreateData = Omit<QuoteItem, "id">;
</file>

<file path="src/modules/role/role.card.tsx">
import { MoreHorizontal } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/ui/dropdown-menu";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { ScrollArea } from "@/ui/scroll-area";
import { app_permission } from "@/db/schema";
import useUserStore from "@/stores/use-user-store";
import { predefinedRoles } from "./role.options";
import type { Role, RoleWithPermissions } from "./role.type";
interface RoleCardProps {
  role: RoleWithPermissions;
  onActionClick?: (action: string, id: string) => void;
  disableActions?: boolean;
}
const getAllPermissionsByCategory = () => {
  const grouped: Record<string, string[]> = {};
  app_permission.enumValues.forEach((perm) => {
    const [category] = perm.split(".");
    if (!grouped[category]) {
      grouped[category] = [];
    }
    grouped[category].push(perm);
  });
  return grouped;
};
const allPermissionsByCategory = getAllPermissionsByCategory();
export default function RoleCard({ role, onActionClick, disableActions = false }: RoleCardProps) {
  const t = useTranslations();
  const locale = useLocale();
  const canUpdateRoles = useUserStore((state) => state.hasPermission("roles.update"));
  const canDuplicateRoles = useUserStore((state) => state.hasPermission("roles.duplicate"));
  const canDeleteRoles = useUserStore((state) => state.hasPermission("roles.delete"));
  const assignedPermissionsByCategory = (role.permissions || []).reduce(
    (acc, perm) => {
      const [category] = perm.split(".");
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(perm);
      return acc;
    },
    {} as Record<string, string[]>,
  );
  return (
    <Card className="relative">
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-lg">
              {role.is_system ? predefinedRoles(t, role.name)?.name : role.name}
              {role.is_system && (
                <Badge variant="secondary" className="ms-2">
                  {t("Roles.predefined.system")}
                </Badge>
              )}
            </CardTitle>
            <CardDescription>
              {role.is_system
                ? predefinedRoles(t, role.name)?.description
                : role.description || null}
            </CardDescription>
          </div>
          {!disableActions && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-8 w-8 p-0">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {canUpdateRoles && (
                  <DropdownMenuItem onClick={() => onActionClick?.("edit", role.id)}>
                    {t("General.edit")}
                  </DropdownMenuItem>
                )}
                {canDuplicateRoles && (
                  <DropdownMenuItem onClick={() => onActionClick?.("duplicate", role.id)}>
                    {t("General.duplicate")}
                  </DropdownMenuItem>
                )}
                {canDeleteRoles && (
                  <DropdownMenuItem
                    className="text-destructive"
                    onClick={() => onActionClick?.("delete", role.id)}
                  >
                    {t("General.delete")}
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div>
            <h4 className="text-sm font-medium">{t("Roles.permissions.title")}</h4>
            <div className="text-muted-foreground flex flex-wrap gap-1 pt-1 text-sm">
              {Object.keys(allPermissionsByCategory).length > 0 ? (
                Object.entries(allPermissionsByCategory)
                  .filter(([category]) => assignedPermissionsByCategory[category]?.length > 0)
                  .map(([category]) => {
                    const assignedPerms = assignedPermissionsByCategory[category] || [];
                    const assignedCount = assignedPerms.length;
                    const displayCategory = category.charAt(0).toUpperCase() + category.slice(1);
                    return (
                      <Popover key={category}>
                        <PopoverTrigger asChild>
                          <Badge variant="secondary" className="cursor-pointer font-normal">
                            {t(`${displayCategory}.title`)} ({assignedCount})
                          </Badge>
                        </PopoverTrigger>
                        <PopoverContent className="w-fit p-0" dir={locale === "ar" ? "rtl" : "ltr"}>
                          <ScrollArea className="h-auto max-h-48">
                            <div className="p-4">
                              <h5 className="mb-2 text-sm leading-none font-medium">
                                {t(`${displayCategory}.title`)}
                              </h5>
                              <ul className="space-y-1 text-center text-xs">
                                {assignedPerms.map((perm) => (
                                  <li key={perm}>{t(`Roles.permissions.${perm.split(".")[1]}`)}</li>
                                ))}
                              </ul>
                            </div>
                          </ScrollArea>
                        </PopoverContent>
                      </Popover>
                    );
                  })
              ) : (
                <span>{t("Roles.no_permissions")}</span>
              )}
              {(!role.permissions || role.permissions.length === 0) && (
                <span>{t("Roles.no_permissions")}</span>
              )}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/modules/role/role.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { Plus, Shield } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/ui/accordion";
import { Button } from "@/ui/button";
import { Checkbox } from "@/ui/checkbox";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { ScrollArea } from "@/ui/scroll-area";
import { Textarea } from "@/ui/textarea";
import useUserStore from "@/stores/use-user-store";
import { usePermissions } from "../permission/permission.hooks";
// Assuming Permission type looks like { id: string; name: string }
// import type { Permission } from "../permission/permission.type";
import type { Permission } from "../permission/permission.hooks";
import { useCreateRole, useUpdateRole } from "./role.hooks";
import useRoleStore from "./role.store";
const createRoleSchema = (t: (key: string) => string) =>
  z.object({
    name: z
      .string()
      .min(1, t("Roles.form.name.required"))
      .regex(/^[a-z0-9_]+$/, {
        message: "Role name must contain only lowercase letters, numbers, and underscores",
      }),
    description: z.string().nullable(),
    permissions: z.array(z.string()),
  });
type FormData = z.infer<ReturnType<typeof createRoleSchema>>;
interface RoleFormProps {
  id?: string;
  defaultValues?: {
    name: string;
    description: string | null;
    permissions: string[];
  };
  onSuccess?: () => void;
  editMode?: boolean;
  formId?: string;
}
export function RoleForm({ id, defaultValues, onSuccess, editMode, formId }: RoleFormProps) {
  const t = useTranslations();
  const locale = useLocale();
  const enterprise = useUserStore((state) => state.enterprise);
  const enterpriseId = enterprise?.id;
  const { mutateAsync: createRole, isPending: isCreating } = useCreateRole();
  const { mutateAsync: updateRole, isPending: isUpdating } = useUpdateRole();
  const { data: permissions = [] } = usePermissions();
  const [selectedPermissions, setSelectedPermissions] = useState<string[]>(
    defaultValues?.permissions || [],
  );
  const isLoading = useRoleStore((state) => state.isLoading);
  const setIsLoading = useRoleStore((state) => state.setIsLoading);
  // Group permissions by resource (first part of 'resource.action' from permission.id)
  const permissionsByCategory = permissions.reduce<
    Record<string, Array<Permission>> // Use the imported Permission type
  >((acc, permission) => {
    // Use permission.category which is already derived in the hook
    const displayCategory = permission.category;
    if (!acc[displayCategory]) {
      acc[displayCategory] = [];
    }
    // Push the *entire permission object*
    acc[displayCategory].push(permission);
    return acc;
  }, {});
  const form = useForm<FormData>({
    resolver: zodResolver(createRoleSchema(t)),
    defaultValues: {
      name: defaultValues?.name || "",
      description: defaultValues?.description || null,
      permissions: [], // form field itself is not directly used for permission state
    },
  });
  // Toggle permission selection (expects permission id in resource.action format)
  const togglePermission = (permissionId: string) => {
    setSelectedPermissions((current) => {
      if (current.includes(permissionId)) {
        return current.filter((p) => p !== permissionId);
      } else {
        return [...current, permissionId];
      }
    });
  };
  // Toggle all permissions in a category (expects display category name)
  const toggleCategoryPermissions = (category: string) => {
    const categoryPermissions = permissionsByCategory[category] || [];
    // Check selection status based on permission.id (resource.action string)
    const allSelected = categoryPermissions.every((p) => selectedPermissions.includes(p.id));
    setSelectedPermissions((current) => {
      if (allSelected) {
        // Filter out permissions belonging to this category (using permission.id)
        return current.filter((pId) => !categoryPermissions.some((cp) => cp.id === pId));
      } else {
        // Add permissions from this category that are not already selected (using permission.id)
        const toAdd = categoryPermissions.filter((p) => !current.includes(p.id)).map((p) => p.id); // Add the resource.action string (permission.id)
        return [...current, ...toAdd];
      }
    });
  };
  const onSubmit = async (formData: FormData) => {
    // Directly use the selectedPermissions state which holds the correct format
    const permissionsToSubmit = selectedPermissions;
    try {
      setIsLoading(true);
      if (editMode && id) {
        // Ensure id exists for edit mode
        await updateRole({
          id: id,
          data: {
            name: formData.name,
            description: formData.description,
            permissions: permissionsToSubmit, // Submit correct format
            // Note: enterprise_id cannot be updated for a role
          },
        });
      } else if (!editMode && enterpriseId) {
        // Ensure enterpriseId exists for create mode
        await createRole({
          name: formData.name,
          description: formData.description,
          permissions: permissionsToSubmit, // Submit correct format
          enterprise_id: enterpriseId, // Pass enterpriseId
        });
      } else {
        // Handle missing id for edit or missing enterpriseId for create
        console.error("Missing ID for edit mode or Enterprise ID for create mode");
        // Optionally show an error toast to the user
        return; // Prevent submission
      }
      onSuccess?.();
    } catch (error) {
      console.error("Error submitting role form:", error);
      setIsLoading(false);
    }
  };
  return (
    <Form {...form}>
      <form id={formId} onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Roles.form.name.label")}</FormLabel>
              <FormControl>
                <Input
                  {...field}
                  placeholder={t("Roles.form.name.placeholder")}
                  disabled={editMode}
                />
              </FormControl>
              {field.value && !/^[a-z0-9_]+$/.test(field.value) && (
                <p className="text-destructive mt-1 text-xs">{t("Roles.form.name.format")}</p>
              )}
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field: { value, ...field } }) => (
            <FormItem>
              <FormLabel>{t("Roles.form.description.label")}</FormLabel>
              <FormControl>
                <Textarea
                  {...field}
                  value={value || ""}
                  placeholder={t("Roles.form.description.placeholder")}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="space-y-4">
          <FormLabel>{t("Roles.form.permissions.label")}</FormLabel>
          <ScrollArea className="h-[300px] pe-4" dir={locale === "ar" ? "rtl" : "ltr"}>
            <Accordion type="multiple" className="w-full">
              {Object.entries(permissionsByCategory).map(([category, perms]) => (
                <AccordionItem key={category} value={category}>
                  <AccordionTrigger className="py-2">
                    <div className="flex w-full items-center justify-between pe-4">
                      {/* Display the capitalized category name */}
                      <span>{t(`${category}.title`)}</span>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          // Check if all permissions in this category are selected by permission.id
                          checked={perms.every((p) => selectedPermissions.includes(p.id))}
                          // Pass the display category name (e.g., "Companies")
                          onCheckedChange={() => toggleCategoryPermissions(category)}
                          onClick={(e) => e.stopPropagation()}
                          // Add an id for accessibility if needed, e.g., `category-${category}-select-all`
                        />
                        <span className="text-muted-foreground text-xs">
                          {/* Count selected permissions in this category by permission.id */}
                          {perms.filter((p) => selectedPermissions.includes(p.id)).length}/
                          {perms.length}
                        </span>
                      </div>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-2 ps-4 pt-2">
                      {perms.map((permission) => {
                        // Extract action part (e.g., "create" from "companies.create")
                        const nameParts = permission.id.split("."); // Split permission.id
                        const actionName = nameParts.length > 1 ? nameParts[1] : permission.id;
                        // Capitalize action for display
                        const displayActionName =
                          actionName.charAt(0).toUpperCase() + actionName.slice(1);
                        return (
                          <div key={permission.id} className="flex items-start space-x-2">
                            <Checkbox
                              // Check based on resource.action string (permission.id)
                              checked={selectedPermissions.includes(permission.id)}
                              // Pass resource.action string (permission.id)
                              onCheckedChange={() => togglePermission(permission.id)}
                              id={`permission-${permission.id}`} // Unique ID for the checkbox using the action string
                            />
                            <label
                              htmlFor={`permission-${permission.id}`} // Associate label with checkbox
                              className="text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                            >
                              {/* Display the capitalized action name (e.g., Create, Read) */}
                              {t(`Roles.permissions.${displayActionName.toLowerCase()}`)}
                            </label>
                          </div>
                        );
                      })}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </ScrollArea>
        </div>
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/role/role.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
import { createClient } from "@/utils/supabase/component";
// Import the user store
import type { Role, RoleWithPermissions, RoleCreateData, RoleUpdateData } from "./role.type";
const supabase = createClient();
// Query keys
export const roleKeys = {
  all: ["roles"] as const,
  lists: () => [...roleKeys.all, "list"] as const,
  list: (enterpriseId: string | undefined) => [...roleKeys.lists(), { enterpriseId }] as const, // Add enterpriseId to list key
  details: () => [...roleKeys.all, "detail"] as const,
  detail: (id: string) => [...roleKeys.details(), id] as const,
  systemRoles: () => [...roleKeys.all, "list", "system"] as const,
};
// Fetch roles hook - Returns RoleWithPermissions[]
// Fetches all roles (system and custom) that are assigned to ANY user within the CURRENT enterprise.
export function useRoles() {
  const { enterprise } = useUserStore(); // Get current enterprise
  const enterpriseId = enterprise?.id;
  return useQuery<RoleWithPermissions[], Error>({
    // Update queryKey to include enterpriseId for caching and refetching
    queryKey: roleKeys.list(enterpriseId),
    queryFn: async () => {
      if (!enterpriseId) {
        // If no enterprise is selected, maybe return empty or system roles only?
        // Returning empty for now to avoid showing roles from other enterprises.
        console.warn("useRoles: No enterprise selected, returning empty array.");
        return [];
      }
      // 1. Get all unique role IDs assigned within the current enterprise
      const { data: memberships, error: membershipError } = await supabase
        .from("memberships")
        .select("role_id")
        .eq("enterprise_id", enterpriseId); // Filter by current enterprise_id
      if (membershipError) throw membershipError;
      // Get unique role IDs from memberships within this enterprise
      const enterpriseRoleIds = [
        ...new Set(memberships?.map((m) => m.role_id).filter(Boolean) || []),
      ];
      // Optionally: Fetch system roles separately if you always want them listed
      // regardless of assignment in the current enterprise.
      // const { data: systemRolesData, error: systemRolesError } = await supabase
      //   .from("roles")
      //   .select("id")
      //   .eq("is_system", true);
      // if (systemRolesError) throw systemRolesError;
      // const systemRoleIds = systemRolesData?.map(r => r.id) || [];
      // Combine the role IDs (adjust logic based on whether system roles should always show)
      // For now, we only show roles explicitly assigned in this enterprise.
      const roleIds = enterpriseRoleIds;
      if (roleIds.length === 0) {
        // No roles assigned in this enterprise yet
        return [];
      }
      // 2. Fetch the details for these specific roles
      const { data: rolesData, error: rolesError } = await supabase
        .from("roles")
        .select("*") // Select all columns: id, name, description, is_system
        .in("id", roleIds); // Filter by the unique IDs found
      if (rolesError) throw rolesError;
      const roles = (rolesData || []) as Role[];
      // 3. Fetch permissions for these roles
      const { data: permissionsData, error: permissionsError } = await supabase
        .from("permissions")
        .select("role_id, permission")
        .in("role_id", roleIds); // Filter by the same role IDs
      if (permissionsError) throw permissionsError;
      // 4. Group permissions by role_id
      const rolePermissionsMap = (permissionsData || []).reduce(
        (acc, { role_id, permission }) => {
          if (!acc[role_id]) acc[role_id] = [];
          acc[role_id].push(permission);
          return acc;
        },
        {} as Record<string, string[]>,
      );
      // 5. Combine roles and their permissions
      const rolesWithPermissions: RoleWithPermissions[] = roles.map((role) => ({
        ...role,
        permissions: rolePermissionsMap[role.id] || [],
      }));
      return rolesWithPermissions;
    },
    enabled: !!enterpriseId, // Only run the query if an enterpriseId is available
  });
}
// Create role hook - Uses RoleCreateData
export function useCreateRole() {
  const queryClient = useQueryClient();
  return useMutation<Role, Error, RoleCreateData & { enterprise_id: string }>({
    mutationFn: async (data: RoleCreateData & { enterprise_id: string }) => {
      if (!data.enterprise_id) {
        throw new Error("Enterprise ID is required to create a custom role.");
      }
      // 1. Create the role first, including the enterprise_id
      const { data: roleData, error: roleError } = await supabase
        .from("roles")
        .insert({
          name: data.name,
          description: data.description,
          enterprise_id: data.enterprise_id, // Insert the enterprise_id
          is_system: false, // Explicitly set is_system to false
        })
        .select()
        .single();
      if (roleError) throw roleError;
      // 2. Create user_role entry is removed - role creation != automatic assignment
      // Assignment should happen separately
      // 3. Create permissions if any are provided
      if (data.permissions && data.permissions.length > 0) {
        const permissionsToInsert = data.permissions.map((permission) => ({
          role_id: roleData.id, // Link to the newly created role
          permission: permission, // The permission string
        }));
        const { error: permissionsError } = await supabase
          .from("permissions") // Insert into the actual permissions table
          .insert(permissionsToInsert);
        if (permissionsError) {
          // Attempt to clean up the created role if permissions fail?
          await supabase.from("roles").delete().eq("id", roleData.id);
          throw permissionsError;
        }
      }
      return roleData as Role;
    },
    onSuccess: (_, variables) => {
      // Invalidate lists for the specific enterprise and potentially system roles
      queryClient.invalidateQueries({ queryKey: roleKeys.list(variables.enterprise_id) });
      queryClient.invalidateQueries({ queryKey: roleKeys.systemRoles() });
      // Also invalidate the general custom roles list if used elsewhere
      queryClient.invalidateQueries({ queryKey: [...roleKeys.lists(), "custom"] });
    },
    onError: (error) => {
      console.error("Error creating role:", error);
      toast.error(`Failed to create role: ${error.message}`);
    },
  });
}
// Update role hook - Uses RoleUpdateData
export function useUpdateRole() {
  const queryClient = useQueryClient();
  return useMutation<void, Error, { id: string; data: RoleUpdateData }>({
    mutationFn: async ({ id, data }: { id: string; data: RoleUpdateData }) => {
      // 1. Update the role details (name, description)
      const roleUpdates: Partial<Pick<Role, "name" | "description">> = {};
      if (data.name !== undefined) roleUpdates.name = data.name;
      if (data.description !== undefined) roleUpdates.description = data.description;
      if (Object.keys(roleUpdates).length > 0) {
        const { error: roleError } = await supabase.from("roles").update(roleUpdates).eq("id", id);
        if (roleError) throw roleError;
      }
      // 2. Update permissions if provided
      if (data.permissions !== undefined) {
        // Check if permissions array is actually passed
        // First delete existing permissions for this role
        const { error: deleteError } = await supabase
          .from("permissions") // Delete from the actual permissions table
          .delete()
          .eq("role_id", id);
        // Ignore error if no permissions existed to delete, but throw others
        if (deleteError && deleteError.code !== "PGRST204") {
          // PGRST204 = No Content
          throw deleteError;
        }
        // Then insert new permissions if the array is not empty
        if (data.permissions.length > 0) {
          const permissionsToInsert = data.permissions.map((permission) => ({
            role_id: id,
            permission: permission, // The permission string
          }));
          const { error: permissionsError } = await supabase
            .from("permissions") // Insert into the actual permissions table
            .insert(permissionsToInsert);
          if (permissionsError) throw permissionsError;
        }
      }
    },
    onSuccess: (_, { id }) => {
      queryClient.invalidateQueries({ queryKey: roleKeys.lists() });
      queryClient.invalidateQueries({ queryKey: roleKeys.detail(id) });
      queryClient.invalidateQueries({ queryKey: roleKeys.systemRoles() }); // Also invalidate system roles
    },
    onError: (error) => {
      console.error("Error updating role:", error);
      toast.error(`Failed to update role: ${error.message}`);
    },
  });
}
// Delete role hook
export function useDeleteRole() {
  const queryClient = useQueryClient();
  return useMutation<void, Error, string>({
    mutationFn: async (id: string) => {
      // Check if it's a system role before deleting
      const { data: roleData, error: fetchError } = await supabase
        .from("roles")
        .select("is_system")
        .eq("id", id)
        .maybeSingle();
      if (fetchError) throw fetchError;
      if (roleData?.is_system) {
        throw new Error("System roles cannot be deleted.");
      }
      // Proceed with deletion (will cascade to permissions table)
      const { error } = await supabase.from("roles").delete().eq("id", id);
      if (error) throw error;
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({ queryKey: roleKeys.lists() });
      queryClient.invalidateQueries({ queryKey: roleKeys.detail(id) });
      queryClient.invalidateQueries({ queryKey: roleKeys.systemRoles() }); // Also invalidate system roles
    },
    onError: (error) => {
      console.error("Error deleting role:", error);
      toast.error(`Failed to delete role: ${error.message}`);
    },
  });
}
// Bulk delete roles hook
export function useBulkDeleteRoles() {
  const queryClient = useQueryClient();
  return useMutation<void, Error, string[]>({
    mutationFn: async (ids: string[]) => {
      // Filter out system roles before attempting deletion
      const { data: rolesData, error: fetchError } = await supabase
        .from("roles")
        .select("id, is_system")
        .in("id", ids);
      if (fetchError) throw fetchError;
      const nonSystemRoleIds = rolesData?.filter((r) => !r.is_system).map((r) => r.id) || [];
      const systemRolesAttempted = ids.length !== nonSystemRoleIds.length;
      if (nonSystemRoleIds.length === 0) {
        if (systemRolesAttempted) {
          throw new Error("Cannot delete system roles.");
        }
        // Nothing to delete
        return;
      }
      const { error } = await supabase.from("roles").delete().in("id", nonSystemRoleIds);
      if (error) throw error;
      if (systemRolesAttempted) {
        toast.warning("Skipped deletion of system roles.");
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: roleKeys.lists() });
      queryClient.invalidateQueries({ queryKey: roleKeys.systemRoles() }); // Also invalidate system roles
    },
    onError: (error) => {
      console.error("Error deleting roles:", error);
      toast.error(`Failed to delete roles: ${error.message}`);
    },
  });
}
// Duplicate role hook
export function useDuplicateRole() {
  const queryClient = useQueryClient();
  return useMutation<Role, Error, { id: string; enterprise_id: string }>({
    mutationFn: async ({ id, enterprise_id }: { id: string; enterprise_id: string }) => {
      // 1. Get the original role and its permissions
      const { data: originalRole, error: roleError } = await supabase
        .from("roles")
        .select("*")
        .eq("id", id)
        .single();
      if (roleError) throw roleError;
      if (originalRole.is_system) {
        throw new Error("System roles cannot be duplicated.");
      }
      const { data: originalPermissions, error: permError } = await supabase
        .from("permissions")
        .select("permission")
        .eq("role_id", id);
      if (permError) throw permError;
      // 2. Create the new role (duplicate)
      const { id: _, created_at: __, is_system: ___, ...roleDuplicateData } = originalRole;
      const newName = `${roleDuplicateData.name} (Copy)`; // Append (Copy)
      const { data: newRole, error: newRoleError } = await supabase
        .from("roles")
        .insert({ ...roleDuplicateData, name: newName, is_system: false })
        .select()
        .single();
      if (newRoleError) throw newRoleError;
      // 3. Create permissions for the new role
      if (originalPermissions && originalPermissions.length > 0) {
        const permissionsToInsert = originalPermissions.map((p) => ({
          role_id: newRole.id,
          permission: p.permission,
        }));
        const { error: newPermError } = await supabase
          .from("permissions")
          .insert(permissionsToInsert);
        if (newPermError) {
          // Clean up newly created role if permissions fail
          await supabase.from("roles").delete().eq("id", newRole.id);
          throw newPermError;
        }
      }
      // 4. Assign duplicated role to the user in the specified enterprise?
      // This might be desired, but is removed for now. Assignment should be explicit.
      /*
      const { data: authUser } = await supabase.auth.getUser();
      if (authUser?.user?.id) {
         const { error: userRoleError } = await supabase
          .from("user_roles") // <-- Error: user_roles doesn't exist, should be memberships?
          .insert({
            user_id: authUser.user.id,
            role_id: newRole.id,
            enterprise_id: enterprise_id, // Use the provided enterprise_id
          });
        if (userRoleError) throw userRoleError;
      }
      */
      return newRole as Role;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: roleKeys.lists() });
      queryClient.invalidateQueries({ queryKey: roleKeys.systemRoles() });
    },
    onError: (error) => {
      console.error("Error duplicating role:", error);
      toast.error(`Failed to duplicate role: ${error.message}`);
    },
  });
}
// Hook to fetch system roles (is_system = true)
export function useSystemRoles() {
  return useQuery<RoleWithPermissions[], Error>({
    queryKey: roleKeys.systemRoles(), // Define a new query key
    queryFn: async () => {
      // 1. Fetch system roles
      const { data: rolesData, error: rolesError } = await supabase
        .from("roles")
        .select("*")
        .eq("is_system", true);
      if (rolesError) throw rolesError;
      const roles = (rolesData || []) as Role[];
      const roleIds = roles.map((r) => r.id);
      if (roleIds.length === 0) return [];
      // 2. Fetch permissions for these system roles
      const { data: permissionsData, error: permissionsError } = await supabase
        .from("permissions")
        .select("role_id, permission")
        .in("role_id", roleIds);
      if (permissionsError) throw permissionsError;
      // 3. Group permissions by role_id
      const rolePermissionsMap = (permissionsData || []).reduce(
        (acc, { role_id, permission }) => {
          if (!acc[role_id]) acc[role_id] = [];
          acc[role_id].push(permission);
          return acc;
        },
        {} as Record<string, string[]>,
      );
      // 4. Combine roles and permissions
      const rolesWithPermissions: RoleWithPermissions[] = roles.map((role) => ({
        ...role,
        permissions: rolePermissionsMap[role.id] || [],
      }));
      return rolesWithPermissions;
    },
  });
}
// Hook to fetch all non-system (custom) roles for the current enterprise
export function useCustomRoles() {
  const { enterprise } = useUserStore(); // Get current enterprise
  const enterpriseId = enterprise?.id;
  return useQuery<RoleWithPermissions[], Error>({
    queryKey: [...roleKeys.lists(), "custom", { enterpriseId }], // Key includes enterpriseId
    queryFn: async () => {
      if (!enterpriseId) {
        console.warn("useCustomRoles: No enterprise selected, returning empty array.");
        return [];
      }
      // 1. Fetch non-system roles for the current enterprise
      const { data: rolesData, error: rolesError } = await supabase
        .from("roles")
        .select("*")
        .eq("is_system", false) // Filter for custom roles
        .eq("enterprise_id", enterpriseId); // Filter by current enterprise
      if (rolesError) throw rolesError;
      const roles = (rolesData || []) as Role[];
      if (roles.length === 0) return [];
      const roleIds = roles.map((r) => r.id);
      // 2. Fetch permissions for these roles
      const { data: permissionsData, error: permissionsError } = await supabase
        .from("permissions")
        .select("role_id, permission")
        .in("role_id", roleIds);
      if (permissionsError) throw permissionsError;
      const rolePermissionsMap = (permissionsData || []).reduce(
        (acc, { role_id, permission }) => {
          if (!acc[role_id]) acc[role_id] = [];
          acc[role_id].push(permission);
          return acc;
        },
        {} as Record<string, string[]>,
      );
      // 3. Combine roles and their permissions
      const rolesWithPermissions: RoleWithPermissions[] = roles.map((role) => ({
        ...role,
        permissions: rolePermissionsMap[role.id] || [],
      }));
      return rolesWithPermissions;
    },
    enabled: !!enterpriseId, // Only run if enterpriseId is available
    // Consider adding staleTime if roles don't change often
    // staleTime: 5 * 60 * 1000, // 5 minutes
  });
}
// Add other role hooks if needed (e.g., useRoleById, useCreateRole, etc.)
</file>

<file path="src/modules/role/role.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "name", translationKey: "Forms.name.label" },
  { value: "description", translationKey: "Forms.description.label" },
  { value: "created_at", translationKey: "Forms.created_at.label" },
  { value: "updated_at", translationKey: "Forms.updated_at.label" },
];
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "name", translationKey: "Forms.name.label", type: "text" },
  { id: "description", translationKey: "Forms.description.label", type: "text" },
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const predefinedRoles = (t: (key: string) => string, role: string) => {
  let systemRoles = [
    {
      id: "superadmin",
      name: t("Roles.predefined.superadmin.title"),
      description: t("Roles.predefined.superadmin.description"),
    },
    {
      id: "admin",
      name: t("Roles.predefined.admin.title"),
      description: t("Roles.predefined.admin.description"),
    },
    {
      id: "human_resources",
      name: t("Roles.predefined.human_resources.title"),
      description: t("Roles.predefined.human_resources.description"),
    },
    {
      id: "accounting",
      name: t("Roles.predefined.accounting.title"),
      description: t("Roles.predefined.accounting.description"),
    },
  ];
  return systemRoles.find((r) => r.id === role);
};
</file>

<file path="src/modules/role/role.service.ts">
// Remove Drizzle/DB imports as they are no longer used here
// import { db } from "@/db/drizzle";
// import { profiles } from "@/db/schema";
// import { sql } from 'drizzle-orm';
import { createClient } from "@/utils/supabase/component";
import type { Role, RoleCreateData, RoleUpdateData } from "./role.type";
export async function fetchRoles(): Promise<Role[]> {
  console.log("Service: Calling /api/roles/list...");
  try {
    const response = await fetch("/api/roles/list", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    const result = await response.json();
    if (!response.ok) {
      const errorMessage = result.message || `API Error: ${response.status} ${response.statusText}`;
      console.error("Fetch Roles API Error:", result);
      throw new Error(errorMessage);
    }
    return result as Role[]; // Type assertion based on API contract
  } catch (error) {
    console.error("Error in fetchRoles service function:", error);
    // Rethrow or handle error as appropriate
    if (error instanceof Error) {
      throw new Error("Failed to fetch roles via API: " + error.message);
    }
    throw new Error("An unknown error occurred while fetching roles via API.");
  }
}
export class RoleService {
  private static readonly TABLE_NAME = "roles";
  // List all roles for an enterprise
  static async list(enterprise_id?: string): Promise<Role[]> {
    const supabase = createClient();
    const query = supabase
      .from(this.TABLE_NAME)
      .select("*")
      .order("created_at", { ascending: false });
    // Filter by enterprise_id if provided
    if (enterprise_id) {
      query.eq("enterprise_id", enterprise_id);
    }
    const { data, error } = await query;
    if (error) throw error;
    return data;
  }
  // Get single role
  static async get(id: string): Promise<Role> {
    const supabase = createClient();
    const { data, error } = await supabase.from(this.TABLE_NAME).select("*").eq("id", id).single();
    if (error) throw error;
    return data;
  }
  // Create role
  static async create(data: RoleCreateData): Promise<Role> {
    const supabase = createClient();
    const { data: created, error } = await supabase
      .from(this.TABLE_NAME)
      .insert(data)
      .select()
      .single();
    if (error) throw error;
    return created;
  }
  // Update role
  static async update(id: string, data: RoleUpdateData): Promise<Role> {
    const supabase = createClient();
    const { data: updated, error } = await supabase
      .from(this.TABLE_NAME)
      .update(data)
      .eq("id", id)
      .select()
      .single();
    if (error) throw error;
    return updated;
  }
  // Delete role
  static async delete(id: string): Promise<void> {
    const supabase = createClient();
    const { error } = await supabase.from(this.TABLE_NAME).delete().eq("id", id);
    if (error) throw error;
  }
  // Bulk delete roles
  static async bulkDelete(ids: string[]): Promise<void> {
    const supabase = createClient();
    const { error } = await supabase.from(this.TABLE_NAME).delete().in("id", ids);
    if (error) throw error;
  }
  // Duplicate role
  static async duplicate(id: string, enterprise_id: string): Promise<Role> {
    const supabase = createClient();
    // 1. Get the original role
    const original = await this.get(id);
    // 2. Remove unique fields and create new role
    const { id: _, ...duplicateData } = original;
    // 3. Create the duplicate with the specified enterprise_id
    return this.create({ ...duplicateData, enterprise_id } as RoleCreateData);
  }
}
// Add other role service functions if needed (create, update, delete)
</file>

<file path="src/modules/role/role.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Role } from "./role.type";
const searchRoleFn = (role: Role, searchQuery: string) =>
  role.name.toLowerCase().includes(searchQuery.toLowerCase());
const useRoleStore = createGenericStore<Role>("roles", searchRoleFn);
export default useRoleStore;
</file>

<file path="src/modules/role/role.type.ts">
import type { roles } from "@/db/schema";
// Base type from schema (columns in the 'roles' table)
export type Role = typeof roles.$inferSelect; // Now includes id, name, description, is_system
// Type returned by hooks, including joined permissions
export interface RoleWithPermissions extends Role {
  permissions: string[];
  // is_system is already part of Role
}
// Create data type - includes fields for roles table + permissions for join table
export interface RoleCreateData extends Pick<Role, "name" | "description"> {
  permissions?: string[]; 
  // is_system is not directly created, defaults to false
}
// Update data type - similar structure, all optional
export interface RoleUpdateData extends Partial<Pick<Role, "name" | "description">> {
  permissions?: string[];
  // is_system is generally not updatable directly
}
</file>

<file path="src/modules/salary/salary.card.tsx">
import { CalendarDays, CircleDollarSign, ReceiptText, NotebookText, User } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import { useDeleteSalary } from "@/salary/salary.hooks";
import { Salary } from "@/salary/salary.type";
// Helper to format date string (optional)
const formatDate = (dateString: string | null | undefined) => {
  if (!dateString) return "N/A";
  try {
    return new Date(dateString).toLocaleDateString();
  } catch {
    return dateString;
  }
};
// Helper to format currency
const formatCurrency = (amount: number | null | undefined) => {
  if (amount == null) return "N/A";
  return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
};
const SalaryCard = ({ salary }: { salary: Salary }) => {
  const router = useRouter();
  const t = useTranslations("Salaries");
  const deleteSalaryMutation = useDeleteSalary();
  const handleDelete = (id: string) => {
    if (window.confirm(t("General.confirm_delete"))) {
      deleteSalaryMutation.mutate(id, {
        onSuccess: () => {
          toast.success(t("General.successful_operation"), {
            description: t("Salaries.messages.success_deleted"),
          });
        },
        onError: (err) => {
          toast.error(t("General.error_operation"), {
            description: err instanceof Error ? err.message : t("Salaries.messages.error_delete"),
          });
        },
      });
    }
  };
  return (
    <Card key={salary.id} className="relative transition-shadow hover:shadow-lg">
      <div className="absolute top-2 right-2 flex gap-1">
        <Button
          variant="outline"
          size="sm"
          onClick={(e) => {
            e.stopPropagation();
            router.push(`/salaries/${salary.id}/edit`);
          }}
          aria-label={t("Salaries.edit_salary")}
        >
          Edit
        </Button>
        <Button
          variant="destructive"
          size="sm"
          onClick={(e) => {
            e.stopPropagation();
            handleDelete(salary.id);
          }}
          disabled={deleteSalaryMutation.isPending}
          aria-label={t("Salaries.delete_salary")}
        >
          {deleteSalaryMutation.isPending ? "..." : "Del"}
        </Button>
      </div>
      <CardHeader>
        <div className="flex items-center gap-2">
          <User className="h-5 w-5 text-gray-500" />
          <CardTitle className="text-lg">{salary.employee_name}</CardTitle>
        </div>
        <p className="pt-1 text-sm text-gray-500">Paid on: {formatDate(salary.payment_date)}</p>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <CalendarDays className="h-4 w-4" />
            <span>{`${formatDate(salary.pay_period_start)} - ${formatDate(salary.pay_period_end)}`}</span>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <CircleDollarSign className="h-4 w-4" />
            <span>Gross: {formatCurrency(salary.gross_amount)}</span>
            <span className="mx-1">|</span>
            <span>Net: {formatCurrency(salary.net_amount)}</span>
          </div>
          {salary.deductions && (
            <div className="flex items-start gap-2 border-t pt-3 text-sm text-gray-500">
              <ReceiptText className="mt-1 h-4 w-4 flex-shrink-0" />
              <p>Deductions included</p>
            </div>
          )}
          {salary.notes && (
            <div className="flex items-start gap-2 border-t pt-3 text-sm text-gray-500">
              <NotebookText className="mt-1 h-4 w-4 flex-shrink-0" />
              <p className="whitespace-pre-wrap">{salary.notes}</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default SalaryCard;
</file>

<file path="src/modules/salary/salary.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useQueryClient } from "@tanstack/react-query";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { ComboboxAdd } from "@/ui/combobox-add";
import { CurrencyInput } from "@/ui/currency-input";
import { DatePicker } from "@/ui/date-picker";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Textarea } from "@/ui/textarea";
import { generateDummyEmployee } from "@/lib/dummy-factory";
import { EmployeeForm } from "@/employee/employee.form";
import { useEmployees } from "@/employee/employee.hooks";
import useEmployeeStore from "@/employee/employee.store";
import { useCreateSalary, useUpdateSalary } from "@/salary/salary.hooks";
import useSalaryStore from "@/salary/salary.store";
import useUserStore from "@/stores/use-user-store";
const createSalarySchema = (t: (key: string) => string) =>
  z.object({
    employee_name: z.string().min(1, t("Salaries.form.employee_name.required")),
    pay_period_start: z.string().min(1, t("Salaries.form.pay_period_start.required")),
    pay_period_end: z.string().min(1, t("Salaries.form.pay_period_end.required")),
    payment_date: z.string().min(1, t("Salaries.form.payment_date.required")),
    gross_amount: z.coerce
      .number()
      .positive(t("Salaries.form.gross_amount.positive"))
      .or(z.literal(0)),
    net_amount: z.coerce.number().positive(t("Salaries.form.net_amount.positive")).or(z.literal(0)),
    deductions: z
      .string()
      .optional()
      .refine(
        (val) => {
          if (!val) return true;
          try {
            JSON.parse(val);
            return true;
          } catch (e) {
            return false;
          }
        },
        { message: t("Salaries.form.deductions.invalid_json") },
      ),
    notes: z.string().optional(),
  });
// This type will have numbers for amounts due to the .transform()
export type SalaryFormValues = z.infer<ReturnType<typeof createSalarySchema>>;
interface SalaryFormProps {
  id?: string;
  loading?: boolean;
  onSuccess?: () => void;
  defaultValues?: SalaryFormValues | null;
  editMode?: boolean;
}
export function SalaryForm({ id, onSuccess, defaultValues, editMode }: SalaryFormProps) {
  const t = useTranslations();
  const locale = useLocale();
  const { user } = useUserStore();
  const { data: employees = [], isLoading: employeesLoading } = useEmployees();
  const setIsEmployeeSaving = useEmployeeStore((state) => state.setIsLoading);
  const isEmployeeSaving = useEmployeeStore((state) => state.isLoading);
  const [isEmployeeDialogOpen, setIsEmployeeDialogOpen] = useState(false);
  const queryClient = useQueryClient();
  const salarySchema = createSalarySchema(t);
  const setLoading = useSalaryStore((state) => state.setIsLoading);
  const loading = useSalaryStore((state) => state.isLoading);
  const { mutate: createSalary } = useCreateSalary();
  const { mutate: updateSalary } = useUpdateSalary();
  // Use SalaryFormValues directly with useForm
  const form = useForm<SalaryFormValues>({
    resolver: zodResolver(salarySchema),
    defaultValues: {
      employee_name: "",
      pay_period_start: "",
      pay_period_end: "",
      payment_date: "",
      gross_amount: 0, // Default as number
      net_amount: 0, // Default as number
      deductions: "",
      notes: "",
    },
  });
  // Format employees for ComboboxAdd
  const employeeOptions = employees.map((emp) => ({
    label: `${emp.first_name} ${emp.last_name}`,
    value: `${emp.first_name} ${emp.last_name}`,
  }));
  const handleSubmit = async (data: SalaryFormValues) => {
    setLoading(true);
    try {
      if (editMode) {
        await updateSalary({
          id: id!,
          data: {
            ...data,
            deductions: data.deductions ? JSON.parse(data.deductions) : null,
            notes: data.notes?.trim() || undefined,
            user_id: user?.id,
          },
        });
      } else {
        await createSalary({
          ...data,
          deductions: data.deductions ? JSON.parse(data.deductions) : null,
          notes: data.notes?.trim() || undefined,
          user_id: user?.id,
        });
        toast.success(t("General.successful_operation"), {
          description: t("Salaries.messages.success_created"),
        });
        onSuccess?.();
      }
    } catch (error) {
      console.error("Failed to save salary:", error);
      const description =
        error instanceof SyntaxError
          ? t("Salaries.form.deductions.invalid_json")
          : error instanceof Error
            ? error.message
            : t("Salaries.messages.error_save");
      toast.error(t("Salaries.error.title"), {
        description,
      });
    }
  };
  if (typeof window !== "undefined") {
    (window as any).salaryForm = form;
  }
  return (
    <>
      <Form {...form}>
        <form id={id} onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="employee_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Salaries.form.employee_name.label")} *</FormLabel>
                <FormControl>
                  <ComboboxAdd
                    direction={locale === "ar" ? "rtl" : "ltr"}
                    data={employeeOptions}
                    isLoading={employeesLoading}
                    defaultValue={field.value}
                    onChange={(value) => field.onChange(value || null)}
                    texts={{
                      placeholder: t("Salaries.form.employee_name.placeholder"),
                      searchPlaceholder: t("Employees.search_employees"),
                      noItems: t("Salaries.form.employee_name.no_employees"),
                    }}
                    addText={t("Employees.add_new")}
                    onAddClick={() => setIsEmployeeDialogOpen(true)}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Pay Period Dates */}
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="pay_period_start"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Salaries.form.pay_period_start.label")} *</FormLabel>
                  <FormControl>
                    <DatePicker
                      date={field.value ? new Date(field.value + "T00:00:00") : undefined}
                      onSelect={(date) => {
                        if (date) {
                          // Ensure we're working with the local date
                          const localDate = new Date(
                            date.getTime() - date.getTimezoneOffset() * 60000,
                          );
                          field.onChange(localDate.toISOString().split("T")[0]);
                        } else {
                          field.onChange("");
                        }
                      }}
                      placeholder={t("Salaries.form.pay_period_start.placeholder")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="pay_period_end"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Salaries.form.pay_period_end.label")} *</FormLabel>
                  <FormControl>
                    <DatePicker
                      date={field.value ? new Date(field.value + "T00:00:00") : undefined}
                      onSelect={(date) => {
                        if (date) {
                          // Ensure we're working with the local date
                          const localDate = new Date(
                            date.getTime() - date.getTimezoneOffset() * 60000,
                          );
                          field.onChange(localDate.toISOString().split("T")[0]);
                        } else {
                          field.onChange("");
                        }
                      }}
                      placeholder={t("Salaries.form.pay_period_end.placeholder")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          {/* Payment Date */}
          <FormField
            control={form.control}
            name="payment_date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Salaries.form.payment_date.label")} *</FormLabel>
                <FormControl>
                  <DatePicker
                    date={field.value ? new Date(field.value + "T00:00:00") : undefined}
                    onSelect={(date) => {
                      if (date) {
                        // Ensure we're working with the local date
                        const localDate = new Date(
                          date.getTime() - date.getTimezoneOffset() * 60000,
                        );
                        field.onChange(localDate.toISOString().split("T")[0]);
                      } else {
                        field.onChange("");
                      }
                    }}
                    placeholder={t("Salaries.form.payment_date.placeholder")}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Amounts */}
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="gross_amount"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Salaries.form.gross_amount.label")} *</FormLabel>
                  <FormControl>
                    <CurrencyInput
                      showCommas={true}
                      value={field.value ? parseFloat(String(field.value)) : undefined}
                      onChange={(value) => field.onChange(value?.toString() || "")}
                      placeholder={t("Salaries.form.gross_amount.placeholder")}
                      disabled={loading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="net_amount"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Salaries.form.net_amount.label")} *</FormLabel>
                  <FormControl>
                    <CurrencyInput
                      showCommas={true}
                      value={field.value ? parseFloat(String(field.value)) : undefined}
                      onChange={(value) => field.onChange(value?.toString() || "")}
                      placeholder={t("Salaries.form.net_amount.placeholder")}
                      disabled={loading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          {/* Deductions (JSON Textarea) */}
          <FormField
            control={form.control}
            name="deductions"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Salaries.form.deductions.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Salaries.form.deductions.placeholder")}
                    {...field}
                    value={field.value ?? ""}
                    rows={5}
                    disabled={loading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Notes */}
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Salaries.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Salaries.form.notes.placeholder")}
                    {...field}
                    value={field.value ?? ""}
                    disabled={loading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <FormDialog
        open={isEmployeeDialogOpen}
        onOpenChange={setIsEmployeeDialogOpen}
        title={t("Employees.add_new")}
        formId="employee-form"
        loadingSave={isEmployeeSaving}
        dummyData={() => process.env.NODE_ENV === "development" && generateDummyEmployee()}
      >
        <EmployeeForm
          id="employee-form"
          onSuccess={() => {
            setIsEmployeeSaving(false);
            setIsEmployeeDialogOpen(false);
          }}
        />
      </FormDialog>
    </>
  );
}
</file>

<file path="src/modules/salary/salary.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createSalary,
  deleteSalary,
  fetchSalaryById,
  fetchSalaries,
  updateSalary,
  bulkDeleteSalaries,
  duplicateSalary,
} from "@/salary/salary.service";
import type { Salary, SalaryUpdateData } from "@/salary/salary.type";
export const salaryKeys = {
  all: ["salaries"] as const,
  lists: () => [...salaryKeys.all, "list"] as const,
  list: (filters: any) => [...salaryKeys.lists(), { filters }] as const,
  details: () => [...salaryKeys.all, "detail"] as const,
  detail: (id: string) => [...salaryKeys.details(), id] as const,
};
// Hook to fetch all salaries
export function useSalaries() {
  return useQuery({
    queryKey: salaryKeys.lists(),
    queryFn: fetchSalaries,
  });
}
// Hook to fetch a single salary by ID
export function useSalary(id: string) {
  return useQuery({
    queryKey: salaryKeys.detail(id),
    queryFn: () => fetchSalaryById(id),
    enabled: !!id,
  });
}
// Hook for creating a new salary
export function useCreateSalary() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: createSalary,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: salaryKeys.lists() });
    },
  });
}
// Hook for duplicating a salary
export function useDuplicateSalary() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateSalary(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: salaryKeys.lists() });
    },
  });
}
// Hook for updating an existing salary
export function useUpdateSalary() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: SalaryUpdateData }) => updateSalary(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: salaryKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: salaryKeys.lists() });
    },
  });
}
// Hook for deleting a salary
export function useDeleteSalary() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deleteSalary,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: salaryKeys.lists() });
    },
  });
}
// Hook for bulk deleting salaries
export function useBulkDeleteSalaries() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteSalaries,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: salaryKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/salary/salary.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/salary/salary.service.ts">
import { Salary, SalaryCreateData } from "@/salary/salary.type";
export async function fetchSalaries(): Promise<Salary[]> {
  try {
    const response = await fetch("/api/resource/salaries");
    if (!response.ok) {
      throw new Error("Failed to fetch salaries");
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching salaries:", error);
    throw new Error("Failed to fetch salaries");
  }
}
export async function fetchSalaryById(id: string): Promise<Salary> {
  try {
    const response = await fetch(`/api/resource/salaries/${id}`);
    if (!response.ok) {
      throw new Error(`Salary with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error fetching salary ${id}:`, error);
    throw new Error(`Failed to fetch salary with id ${id}`);
  }
}
export async function createSalary(data: SalaryCreateData): Promise<Salary> {
  try {
    const response = await fetch("/api/resource/salaries", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to create salary");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating salary:", error);
    throw new Error("Failed to create salary");
  }
}
export async function duplicateSalary(id: string): Promise<Salary> {
  try {
    const response = await fetch(`/api/resource/salaries/${id}/duplicate`, {
      method: "POST",
    });
    if (!response.ok) {
      throw new Error("Failed to duplicate salary");
    }
    return response.json();
  } catch (error) {
    console.error("Error duplicating salary:", error);
    throw new Error("Failed to duplicate salary");
  }
}
export async function updateSalary(id: string, data: Partial<Salary>): Promise<Salary> {
  try {
    const response = await fetch(`/api/resource/salaries/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to update salary");
    }
    return response.json();
  } catch (error) {
    console.error("Error updating salary:", error);
    throw new Error("Failed to update salary");
  }
}
export async function deleteSalary(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/resource/salaries/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) {
      throw new Error("Failed to delete salary");
    }
  } catch (error) {
    console.error("Error deleting salary:", error);
    throw new Error("Failed to delete salary");
  }
}
export async function bulkDeleteSalaries(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/resource/salaries/bulk-delete", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete salaries");
    }
  } catch (error) {
    console.error("Error deleting salaries:", error);
    throw new Error("Failed to delete salaries");
  }
}
</file>

<file path="src/modules/salary/salary.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Salary } from "./salary.type";
const searchSalaryFn = (salary: Salary, searchQuery: string) =>
  salary.employee_name.toLowerCase().includes(searchQuery.toLowerCase());
const useSalaryStore = createGenericStore<Salary>("salaries", searchSalaryFn);
export default useSalaryStore;
</file>

<file path="src/modules/salary/salary.table.tsx">
import { useTranslations } from "next-intl";
import React from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateSalary } from "@/salary/salary.hooks";
import useSalaryStore from "@/salary/salary.store";
import { Salary } from "@/salary/salary.type";
import useUserStore from "@/stores/use-user-store";
const employeeNameSchema = z.string().min(1, "Required");
const grossAmountSchema = z.number().min(0, "Must be positive");
const netAmountSchema = z.number().min(0, "Must be positive");
const paymentDateSchema = z.string().min(1, "Required");
const payPeriodStartSchema = z.string().min(1, "Required");
const payPeriodEndSchema = z.string().min(1, "Required");
const notesSchema = z.string().optional();
const SalariesTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Salary>) => {
  const t = useTranslations();
  const { mutateAsync: updateSalary } = useUpdateSalary();
  const selectedRows = useSalaryStore((state) => state.selectedRows);
  const setSelectedRows = useSalaryStore((state) => state.setSelectedRows);
  const canEditSalary = useUserStore((state) => state.hasPermission("salaries.update"));
  const canDuplicateSalary = useUserStore((state) => state.hasPermission("salaries.duplicate"));
  const canViewSalary = useUserStore((state) => state.hasPermission("salaries.view"));
  const canArchiveSalary = useUserStore((state) => state.hasPermission("salaries.archive"));
  const canDeleteSalary = useUserStore((state) => state.hasPermission("salaries.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Salary>[] = [
    {
      accessorKey: "employee_name",
      header: t("Salaries.form.employee_name.label"),
      validationSchema: employeeNameSchema,
    },
    {
      accessorKey: "gross_amount",
      header: t("Salaries.form.gross_amount.label"),
      validationSchema: grossAmountSchema,
      cell: ({ getValue }) => formatCurrency(getValue() as number),
    },
    {
      accessorKey: "net_amount",
      header: t("Salaries.form.net_amount.label"),
      validationSchema: netAmountSchema,
      cell: ({ getValue }) => formatCurrency(getValue() as number),
    },
    {
      accessorKey: "payment_date",
      header: t("Salaries.form.payment_date.label"),
      validationSchema: paymentDateSchema,
      cell: ({ getValue }) => formatDate(getValue() as string),
    },
    {
      accessorKey: "pay_period_start",
      header: t("Salaries.form.pay_period_start.label"),
      validationSchema: payPeriodStartSchema,
      cell: ({ getValue }) => formatDate(getValue() as string),
    },
    {
      accessorKey: "pay_period_end",
      header: t("Salaries.form.pay_period_end.label"),
      validationSchema: payPeriodEndSchema,
      cell: ({ getValue }) => formatDate(getValue() as string),
    },
    {
      accessorKey: "notes",
      header: t("Salaries.form.notes.label"),
      validationSchema: notesSchema,
    },
  ];
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
  };
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateSalary({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = (rows: Salary[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton
        columns={columns
          .map((col) => col.accessorKey || col.id)
          .filter((key): key is string => !!key)}
        rows={5}
      />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const salaryTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Salary) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditSalary}
      canDuplicateAction={canDuplicateSalary}
      canViewAction={canViewSalary}
      canArchiveAction={canArchiveSalary}
      canDeleteAction={canDeleteSalary}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={salaryTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default SalariesTable;
</file>

<file path="src/modules/salary/salary.type.ts">
// Define the structure for Deductions if it's consistent
export interface DeductionDetail {
  type: string;
  amount: number;
  // add other relevant fields if structure is known
}
export interface Salary {
  id: string;
  employee_name: string;
  gross_amount: number;
  net_amount: number;
  payment_date: string;
  pay_period_start: string;
  pay_period_end: string;
  deductions?: Record<string, number>;
  notes?: string;
}
// For creating a new salary entry
export type SalaryCreateData = Omit<Salary, "id" | "created_at"> & { user_id?: string };
export type SalaryUpdateData = Partial<SalaryCreateData>;
</file>

<file path="src/modules/user/user.card.tsx">
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import { UserType } from "./user.type";
interface UserCardProps {
  user: UserType;
}
export default function UserCard({ user }: UserCardProps) {
  const t = useTranslations();
  return (
    <Card className="hover:bg-accent/50">
      <CardHeader>
        <CardTitle className="text-lg">{user.email}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          {/* Remove Role display as user type doesn't contain role */}
          {/* <div className="flex items-center justify-between">
            <span className="text-muted-foreground text-sm">{t("Users.form.role.label")}</span>
            <Badge variant="outline">{user.role}</Badge>
          </div> */}
          <div className="flex items-center justify-between">
            <span className="text-muted-foreground text-sm">
              {t("Users.form.created_at.label")}
            </span>
            <span className="text-sm">{new Date(user.created_at || "").toLocaleDateString()}</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/modules/user/user.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useLocale, useTranslations } from "next-intl";
import { useState, useEffect, useMemo, useCallback } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { z } from "zod";
import { ComboboxAdd } from "@/ui/combobox-add";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import useUserStore from "@/stores/use-user-store";
import { RoleForm } from "../role/role.form";
// Import store for loading state
import { useCustomRoles, useSystemRoles } from "../role/role.hooks";
import { predefinedRoles } from "../role/role.options";
import useRoleStore from "../role/role.store";
import type { Role, RoleWithPermissions } from "../role/role.type";
// Import hooks for create/update
import { useCreateUser, useUpdateUser } from "./user.hooks";
import useEnterpriseUsersStore from "./user.store";
// Add User type
import type { UserCreateData, UserUpdateData, UserType } from "./user.type";
// Import RoleForm
// Adjust schema: make password optional for updates
const baseUserFormSchema = z.object({
  first_name: z.string().min(1, { message: "First name is required." }),
  last_name: z.string().min(1, { message: "Last name is required." }),
  email: z.string().email({ message: "Invalid email address." }),
  role: z.string().min(1, { message: "Role is required." }),
});
const createUserFormSchema = baseUserFormSchema.extend({
  password: z.string().min(8, { message: "Password must be at least 8 characters." }),
});
const updateUserFormSchema = baseUserFormSchema.extend({
  // Password is optional for update, validation happens server-side if provided
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters." })
    .optional()
    .or(z.literal("")),
});
// Infer the type from the base schema, specific validation handled conditionally
type UserFormData = z.infer<typeof baseUserFormSchema> & { password?: string };
interface UserFormProps {
  onSuccess: () => void;
  id?: string;
  // Revert to User type, assuming it has first_name, last_name, and role (ID/key)
  initialData?: UserType | null;
}
export function UserForm({ onSuccess, id, initialData }: UserFormProps) {
  const t = useTranslations();
  const locale = useLocale();
  const enterprise = useUserStore((state) => state.enterprise);
  const setIsLoading = useEnterpriseUsersStore((state) => state.setIsLoading);
  const [isRoleDialogOpen, setIsRoleDialogOpen] = useState(false); // State for RoleForm dialog
  // Hooks for mutations
  const { mutateAsync: createUser, isPending: isCreating } = useCreateUser();
  const { mutateAsync: updateUser, isPending: isUpdating } = useUpdateUser();
  const setSavingRole = useRoleStore((state) => state.setIsLoading);
  const isSavingRole = useRoleStore((state) => state.isLoading);
  // State for roles
  const {
    data: customRoles,
    isLoading: customRolesLoading,
    error: customRolesError,
  } = useCustomRoles();
  const {
    data: systemRoles,
    isLoading: systemRolesLoading,
    error: systemRolesError,
  } = useSystemRoles();
  // Process roles, don't rely on initialData for role
  const allRoles = useMemo(() => {
    const combined = new Map<string, RoleWithPermissions>();
    const rolesArray: RoleWithPermissions[] = [];
    (customRoles ?? []).forEach((role) => {
      if (!combined.has(role.id)) {
        combined.set(role.id, role);
        rolesArray.push(role);
      }
    });
    (systemRoles ?? []).forEach((role) => {
      if (!combined.has(role.id)) {
        combined.set(role.id, role);
        rolesArray.push(role);
      }
    });
    rolesArray.sort((a, b) => a.name.localeCompare(b.name));
    return {
      roles: rolesArray,
      // Cannot determine initial role name from the provided initialData type
      initialRoleName: "",
    };
    // Remove initialData dependency as we don't use its role
  }, [customRoles, systemRoles]);
  const rolesLoading = customRolesLoading || systemRolesLoading;
  const rolesError = customRolesError || systemRolesError;
  const isEditing = !!initialData;
  const currentSchema = isEditing ? updateUserFormSchema : createUserFormSchema;
  const form = useForm<UserFormData>({
    resolver: zodResolver(currentSchema),
    defaultValues: useMemo(() => {
      // Revert to splitting full_name
      const [firstName = "", lastName = ""] = (initialData?.full_name || "").split(" ", 2);
      // Cannot reliably determine initial role name from initialData type
      return {
        first_name: firstName,
        last_name: lastName,
        email: initialData?.email || "",
        password: "",
        role: "", // Default role to empty string
      };
    }, [initialData?.id, initialData?.full_name, initialData?.email]), // Revert dependencies
  });
  // Reset form
  useEffect(() => {
    // Revert to splitting full_name
    const [firstName = "", lastName = ""] = (initialData?.full_name || "").split(" ", 2);
    form.reset({
      first_name: firstName,
      last_name: lastName,
      email: initialData?.email || "",
      password: "",
      role: "", // Default role to empty string
    });
    // Update dependencies to match defaultValues
  }, [
    initialData?.id,
    initialData?.full_name, // Revert dependencies
    initialData?.email,
    form.reset,
  ]);
  // Handler for RoleForm success
  const handleRoleCreated = useCallback(
    (newRole?: Role) => {
      setSavingRole(true);
      // Adjust type if needed
      // Close the dialog
      setIsRoleDialogOpen(false);
      // Refetch roles - React Query handles this via hook re-render if keys are correct
      toast.success(t("General.successful_operation"), {
        description: t("Roles.success.created"), // Use Role success message
      });
      // Cannot reliably set value without knowing the new role name from RoleForm onSuccess
      // if (newRole?.name) {
      //   form.setValue("role", newRole.name);
      // }
      setSavingRole(false);
    },
    [t, setIsRoleDialogOpen, form],
  );
  const onSubmit = async (values: UserFormData) => {
    if (!enterprise?.id) {
      toast.error(t("Users.error.missing_enterprise"));
      return;
    }
    setIsLoading(true);
    // Find the role ID based on the selected role name
    const selectedRole = allRoles.roles.find((role) => role.name === values.role);
    const roleId = selectedRole?.id;
    // Construct mutation data based on form values
    const mutationDataBase = {
      first_name: values.first_name,
      last_name: values.last_name,
      email: values.email.toLowerCase(), // Ensure email is lowercase
      role: values.role,
      enterprise_id: enterprise.id,
    };
    // Add password conditionally
    const mutationData: UserCreateData | UserUpdateData = values.password
      ? { ...mutationDataBase, password: values.password }
      : mutationDataBase;
    try {
      if (isEditing && initialData) {
        await updateUser({
          id: initialData.id,
          data: { ...mutationData, role_id: roleId } as UserUpdateData,
        });
        toast.success(t("General.successful_operation"), {
          description: t("Users.success.updated"),
        });
      } else {
        // Ensure password exists for creation, handled by schema but double-check
        if (!values.password) {
          toast.error(t("Validation.password_required"));
          setIsLoading(false);
          return;
        }
        await createUser({ ...mutationData, role_id: roleId } as UserCreateData);
        toast.success(t("General.successful_operation"), {
          description: t("Users.success.created"),
        });
      }
      // Reset form fields explicitly
      form.reset({
        first_name: "",
        last_name: "",
        email: "",
        password: "",
        role: "", // Reset role to empty
      });
      onSuccess();
    } catch (error: any) {
      console.error("Submit Error in UserForm:", error);
      toast.error(t("General.error_occurred"), {
        description:
          error?.message || t(isEditing ? "Users.error.updating" : "Users.error.creating"),
      });
      setIsLoading(false);
    }
  };
  // Use internal loading state
  const isFormSubmitting = isCreating || isUpdating;
  return (
    <Form {...form}>
      {/* Use the correct form ID */}
      <form id={id} onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="first_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Users.form.first_name.label")}</FormLabel>
                <FormControl>
                  <Input
                    placeholder={t("Users.form.first_name.placeholder")}
                    {...field}
                    disabled={isFormSubmitting}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="last_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Users.form.last_name.label")}</FormLabel>
                <FormControl>
                  <Input
                    placeholder={t("Users.form.last_name.placeholder")}
                    {...field}
                    disabled={isFormSubmitting}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("Users.form.email.label")}</FormLabel>
              <FormControl>
                <Input
                  dir="ltr"
                  className="text-start"
                  type="email"
                  placeholder={t("Users.form.email.placeholder")}
                  {...field}
                  disabled={isFormSubmitting}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>
                {t("Users.form.password.label")}{" "}
                {isEditing && (
                  <span className="text-muted-foreground text-xs">
                    {" "}
                    ({t("Users.password_optional")})
                  </span>
                )}
              </FormLabel>
              <FormControl>
                <Input
                  type="password"
                  placeholder={t("Users.form.password.placeholder")}
                  {...field}
                  disabled={isFormSubmitting}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="role"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>{t("Users.form.role.label")}</FormLabel>
              <FormControl>
                <ComboboxAdd
                  direction={locale === "ar" ? "rtl" : "ltr"}
                  // Use role name as value, consistent with previous Select
                  data={allRoles.roles.map((role) => ({
                    label: predefinedRoles(t, role.name)?.name || role.name, // Pass role.name to predefinedRoles
                    value: role.name, // Form value
                  }))}
                  isLoading={rolesLoading}
                  defaultValue={field.value} // Current form value (role name)
                  onChange={(value) => field.onChange(value || null)} // Update form value
                  texts={{
                    placeholder: t("Users.form.role.placeholder"),
                    searchPlaceholder: t("Users.form.role.search_placeholder"),
                    noItems: t("Roles.no_roles_available"),
                  }}
                  addText={t("Roles.add_new")} // Use Role translation
                  onAddClick={() => setIsRoleDialogOpen(true)} // Open dialog
                  disabled={isFormSubmitting}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
      {/* Role Creation Dialog */}
      <FormDialog
        open={isRoleDialogOpen}
        onOpenChange={setIsRoleDialogOpen}
        title={t("Roles.add_new")} // Use Role translation
        formId="role-form" // ID for the RoleForm inside
        cancelText={t("General.cancel")}
        submitText={t("General.save")}
        loadingSave={isSavingRole}
      >
        <RoleForm
          formId="role-form" // Match the FormDialog's formId
          onSuccess={handleRoleCreated} // Callback on successful creation
        />
      </FormDialog>
    </Form>
  );
}
</file>

<file path="src/modules/user/user.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useTranslations } from "next-intl";
import { toast } from "sonner";
import useUserStore from "@/stores/use-user-store";
import {
  fetchUsers,
  fetchUserById,
  createUser,
  updateUser,
  deleteUser,
  bulkDeleteUsers,
  getUserPermissions,
  duplicateUser,
} from "./user.service";
import { UserCreateData, UserUpdateData } from "./user.type";
// Query keys
const userKeys = {
  all: ["users"] as const,
  lists: () => [...userKeys.all, "list"] as const,
  list: (filters: string) => [...userKeys.lists(), { filters }] as const,
  details: () => [...userKeys.all, "detail"] as const,
  detail: (id: string) => [...userKeys.details(), id] as const,
};
// Hook to fetch all users for an enterprise
export function useUsers() {
  const { enterprise } = useUserStore();
  const t = useTranslations();
  return useQuery({
    queryKey: userKeys.lists(),
    queryFn: () => {
      if (!enterprise?.id) throw new Error("No enterprise ID");
      return fetchUsers();
    },
    enabled: !!enterprise?.id,
  });
}
// Hook to fetch a single user
export function useUser(id: string) {
  return useQuery({
    queryKey: userKeys.detail(id),
    queryFn: () => fetchUserById(id),
  });
}
// Hook to create a user
export function useCreateUser() {
  const queryClient = useQueryClient();
  const t = useTranslations();
  return useMutation({
    mutationFn: (data: UserCreateData) => createUser(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
    onError: (error) => {
      console.error("Error creating user:", error);
      const defaultError = t("Users.error.creating");
      const message = (error as any)?.message || defaultError;
      if ((error as any)?.code === "23505") {
        toast.error(t("Users.error.email_exists"));
      } else {
        toast.error(`${defaultError}: ${message}`);
      }
    },
  });
}
export function useDuplicateUser() {
  const queryClient = useQueryClient();
  const t = useTranslations();
  return useMutation({
    mutationFn: (id: string) => duplicateUser(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
    onError: (error) => {
      console.error("Error duplicating user:", error);
      toast.error(t("Users.error.duplicating"));
    },
  });
}
// Hook to update a user
export function useUpdateUser() {
  const queryClient = useQueryClient();
  const t = useTranslations();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: UserUpdateData }) => updateUser(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
    onError: (error) => {
      console.error("Error updating user:", error);
      toast.error(t("Users.error.updating"));
    },
  });
}
// Hook to delete a user
export function useDeleteUser() {
  const queryClient = useQueryClient();
  const t = useTranslations();
  return useMutation({
    mutationFn: (id: string) => deleteUser(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
    onError: (error) => {
      console.error("Error deleting user:", error);
      toast.error(t("Users.error.deleting"));
    },
  });
}
// Hook to bulk delete users
export function useBulkDeleteUsers() {
  const queryClient = useQueryClient();
  const t = useTranslations();
  return useMutation({
    mutationFn: (ids: string[]) => bulkDeleteUsers(ids),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
    onError: (error) => {
      console.error("Error bulk deleting users:", error);
      toast.error(t("Users.error.bulk_deleting"));
    },
  });
}
// Hook to get user permissions
export function useUserPermissions(role: string) {
  return useQuery({
    queryKey: ["userPermissions", role],
    queryFn: () => getUserPermissions(role),
  });
}
</file>

<file path="src/modules/user/user.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "email", translationKey: "Users.form.email.label" },
  { value: "role", translationKey: "Users.form.role.label" },
  { value: "created_at", translationKey: "Users.form.created_at.label" },
  { value: "updated_at", translationKey: "Users.form.updated_at.label" },
];
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "email", translationKey: "Users.form.email.label", type: "text" },
//   { id: "role", translationKey: "Users.form.role.label", type: "select" },
  { id: "created_at", translationKey: "Users.form.created_at.label", type: "date" },
  { id: "updated_at", translationKey: "Users.form.updated_at.label", type: "date" },
];
export const ROLE_OPTIONS = [
  { value: "superadmin", label: "Superadmin" },
  { value: "accounting", label: "Accounting" },
  { value: "hr", label: "HR" },
];
</file>

<file path="src/modules/user/user.service.ts">
import { UserType, UserCreateData, UserUpdateData } from "./user.type";
export async function fetchUsers(): Promise<UserType[]> {
  try {
    const response = await fetch("/api/resource/users");
    if (!response.ok) {
      console.error("Failed to fetch users:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching users:", error);
    return [];
  }
}
export async function fetchUserById(id: string): Promise<UserType> {
  try {
    const response = await fetch(`/api/resource/users/${id}`);
    if (!response.ok) {
      throw new Error(`User with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching user by id:", error);
    throw error;
  }
}
export async function createUser(user: UserCreateData): Promise<UserType> {
  try {
    const response = await fetch("/api/resource/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(user),
    });
    if (!response.ok) {
      throw new Error("Failed to create user");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating user:", error);
    throw error;
  }
}
export async function updateUser(id: string, updates: UserUpdateData): Promise<UserType> {
  const response = await fetch(`/api/resource/users/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update user with id ${id}`);
  }
  return response.json();
}
export async function duplicateUser(id: string): Promise<UserType> {
  const response = await fetch(`/api/resource/users/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate user with id ${id}`);
  }
  return response.json();
}
export async function deleteUser(id: string): Promise<void> {
  const response = await fetch(`/api/resource/users/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete user with id ${id}`);
  }
}
export async function bulkDeleteUsers(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/users", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete users");
  }
}
export async function getUserPermissions(role: string): Promise<string[]> {
  try {
    const response = await fetch(`/api/resource/users/permissions/${role}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch permissions for role ${role}`);
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching user permissions:", error);
    throw error;
  }
}
</file>

<file path="src/modules/user/user.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { UserType } from "./user.type";
const searchUserFn = (user: UserType, searchQuery: string) =>
  user.email ? user.email.toLowerCase().includes(searchQuery.toLowerCase()) : false;
const useUserStore = createGenericStore<UserType>("users", searchUserFn);
export default useUserStore;
</file>

<file path="src/modules/user/user.table.tsx">
"use client";
import { useTranslations } from "next-intl";
import { useCallback } from "react";
import React from "react";
import { z } from "zod";
import { Badge } from "@/ui/badge";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import useUserStore from "@/stores/use-user-store";
import { predefinedRoles } from "../role/role.options";
import { useUpdateUser } from "./user.hooks";
import useEnterpriseUsersStore from "./user.store";
import { UserType } from "./user.type";
export default function UsersTable({
  data,
  isLoading,
  error,
  onActionClicked,
}: ModuleTableProps<UserType>) {
  const t = useTranslations();
  const { mutate: updateUser } = useUpdateUser();
  const canEditUser = useUserStore((state) => state.hasPermission("users.update"));
  const canDuplicateUser = useUserStore((state) => state.hasPermission("users.duplicate"));
  const canViewUser = useUserStore((state) => state.hasPermission("users.view"));
  const canArchiveUser = useUserStore((state) => state.hasPermission("users.archive"));
  const canDeleteUser = useUserStore((state) => state.hasPermission("users.delete"));
  const selectedRows = useEnterpriseUsersStore((state) => state.selectedRows);
  const setSelectedRows = useEnterpriseUsersStore((state) => state.setSelectedRows);
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<UserType>[] = [
    {
      accessorKey: "email",
      header: t("Users.form.email.label"),
      validationSchema: z
        .string()
        .email(t("Users.form.email.invalid"))
        .min(1, t("Users.form.email.required")),
    },
    {
      accessorKey: "role",
      header: t("Users.form.role.label"),
      cell: ({ row }) => {
        const role = row.original.role;
        return <Badge variant="outline">{predefinedRoles(t, role)?.name || role}</Badge>;
      },
      validationSchema: z.string().min(1, t("Users.form.role.required")),
    },
    {
      accessorKey: "created_at",
      header: t("Users.form.created_at.label"),
      cell: ({ row }) => {
        const date = row.original.created_at;
        if (!date) return null;
        return new Date(date).toLocaleDateString();
      },
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateUser({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: UserType[]) => {
      const newSelectedIds = rows.map((row) => row.id);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const userTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: UserType) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      setSelectedRows(selectedRows.map((row) => row.id!));
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditUser}
      canDuplicateAction={canDuplicateUser}
      canViewAction={canViewUser}
      canArchiveAction={canArchiveUser}
      canDeleteAction={canDeleteUser}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={userTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
}
</file>

<file path="src/modules/user/user.type.ts">
// Base type from schema
export type UserType = {
  id: string;
  email: string;
  role: string;
  enterprise_id: string;
  created_at: string;
  first_name?: string; // Make names optional based on previous context
  last_name?: string; // Make names optional based on previous context
  full_name?: string; // Add full_name if needed for profile creation
  role_id: string; // Assuming role is passed as ID
};
// Create data type - Define properties explicitly
export interface UserCreateData {
  email: string;
  password: string;
  role_id: string; // Assuming role is passed as ID
  enterprise_id: string;
  first_name?: string; // Make names optional based on previous context
  last_name?: string; // Make names optional based on previous context
  full_name?: string; // Add full_name if needed for profile creation
}
// Update data type
export type UserUpdateData = Partial<UserCreateData>; // Can remain partial
// Form data type
export interface UserFormData {
  email: string;
  password: string;
  role: string;
  first_name: string;
  last_name: string;
}
</file>

<file path="src/modules/vendor/vendor.card.tsx">
import { Mail, Phone, MapPin, NotebookText } from "lucide-react";
import { useTranslations } from "next-intl";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Vendor } from "@/vendor/vendor.type";
const VendorCard = ({ vendor }: { vendor: Vendor }) => {
  const t = useTranslations("Vendors");
  return (
    <Card key={vendor.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <h3 className="text-lg font-semibold">{vendor.name}</h3>
        {/* Display company if available */}
        {vendor.company && <p className="text-sm text-gray-500">{vendor.company}</p>}
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {/* Email */}
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Mail className="h-4 w-4" />
            <a href={`mailto:${vendor.email}`} className="hover:text-primary">
              {vendor.email}
            </a>
          </div>
          {/* Phone */}
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <Phone className="h-4 w-4" />
            <a href={`tel:${vendor.phone}`} className="hover:text-primary">
              {vendor.phone}
            </a>
          </div>
          {/* Address */}
          <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
            <MapPin className="mt-1 h-4 w-4 flex-shrink-0" />
            <div>
              <p>{vendor.address}</p>
              <p>{`${vendor.city}, ${vendor.state} ${vendor.zip_code}`}</p>
            </div>
          </div>
          {/* Notes */}
          {vendor.notes && (
            <div className="flex items-start gap-2 border-t pt-3 text-sm text-gray-500 dark:text-gray-400">
              <NotebookText className="mt-1 h-4 w-4 flex-shrink-0" />
              <p className="whitespace-pre-wrap">{vendor.notes}</p>
            </div>
          )}
        </div>
      </CardContent>
      {/* Consider adding Edit/Delete actions here if DataModelList doesn't handle it */}
    </Card>
  );
};
export default VendorCard;
</file>

<file path="src/modules/vendor/vendor.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useLocale, useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { ComboboxAdd } from "@/ui/combobox-add";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { FormDialog } from "@/ui/form-dialog";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import PhoneInput from "@/components/ui/phone-input";
import {
  CompanyForm,
  type CompanyFormValues as CompanyFormValuesType,
} from "@/company/company.form";
import { useCompanies } from "@/company/company.hooks";
import type { Company } from "@/company/company.type";
import { useCreateVendor, useUpdateVendor } from "@/vendor/vendor.hooks";
import useVendorStore from "@/vendor/vendor.store";
import type { VendorUpdateData } from "@/vendor/vendor.type";
import useUserStore from "@/stores/use-user-store";
export const createVendorSchema = (t: (key: string) => string) => {
  const baseVendorSchema = z.object({
    name: z.string().min(1, t("Vendors.form.name.required")),
    email: z.string().email(t("Vendors.form.email.invalid")),
    phone: z.string().min(1, t("Vendors.form.phone.required")),
    company: z.string().optional(),
    notes: z.string().nullable(),
  });
  const addressSchema = createAddressSchema(t);
  return baseVendorSchema.merge(addressSchema);
};
export type VendorFormValues = z.input<ReturnType<typeof createVendorSchema>>;
interface VendorFormProps {
  id?: string;
  onSuccess?: () => void;
  defaultValues?: VendorUpdateData | null;
  editMode?: boolean;
}
export function VendorForm({ id, onSuccess, defaultValues, editMode = false }: VendorFormProps) {
  const t = useTranslations();
  const locale = useLocale();
  const { profile, membership } = useUserStore();
  const { mutateAsync: createVendor, isPending: isCreating } = useCreateVendor();
  const { mutateAsync: updateVendor, isPending: isUpdating } = useUpdateVendor();
  const isLoading = useVendorStore((state) => state.isLoading);
  const setIsLoading = useVendorStore((state) => state.setIsLoading);
  const [isCompanyDialogOpen, setIsCompanyDialogOpen] = useState(false);
  const { data: companies, isLoading: companiesLoading } = useCompanies();
  const form = useForm<VendorFormValues>({
    resolver: zodResolver(createVendorSchema(t)),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      company: "",
      short_address: "",
      building_number: "",
      street_name: "",
      city: "",
      region: "",
      country: "",
      zip_code: "",
      notes: "",
    },
  });
  // Expose form methods for external use (like dummy data)
  if (typeof window !== "undefined") {
    (window as any).vendorForm = form;
  }
  // Format companies for ComboboxAdd
  const companyOptions =
    companies?.map((company: Company) => ({
      label: company.name,
      value: company.id,
    })) || [];
  const handleSubmit = async (data: VendorFormValues) => {
    setIsLoading(true);
    try {
      if (editMode && defaultValues) {
        if (!defaultValues.id) {
          console.error("Vendor ID missing in edit mode");
          toast.error(t("Vendors.error.missing_id"));
          setIsLoading(false);
          return;
        }
        // Update vendor logic
        await updateVendor(
          {
            id: defaultValues.id,
            vendor: {
              name: data.name.trim(),
              email: data.email.trim(),
              phone: data.phone.trim(),
              company: data.company || undefined,
              short_address: data.short_address?.trim() || undefined,
              building_number: data.building_number?.trim() || undefined,
              street_name: data.street_name?.trim() || undefined,
              city: data.city?.trim() || undefined,
              region: data.region?.trim() || undefined,
              country: data.country?.trim() || undefined,
              zip_code: data.zip_code?.trim() || undefined,
              notes: data.notes?.trim() || null,
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        // Create vendor logic
        await createVendor(
          {
            name: data.name.trim(),
            email: data.email.trim(),
            phone: data.phone.trim(),
            company: data.company || undefined,
            short_address: data.short_address?.trim() || undefined,
            building_number: data.building_number?.trim() || undefined,
            street_name: data.street_name?.trim() || undefined,
            city: data.city?.trim() || undefined,
            region: data.region?.trim() || undefined,
            country: data.country?.trim() || undefined,
            zip_code: data.zip_code?.trim() || undefined,
            notes: data.notes?.trim() || null,
            enterprise_id: membership?.enterprise_id || "",
            user_id: profile?.id || "",
            updated_at: new Date().toISOString(),
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save vendor:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Vendors.messages.error_save"),
      });
    }
  };
  return (
    <>
      <Form {...form}>
        <form id={id || "vendor-form"} onSubmit={form.handleSubmit(handleSubmit)}>
          <div className="mx-auto flex max-w-2xl flex-col gap-4 p-4">
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t("Vendors.form.name.label")} *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder={t("Vendors.form.name.placeholder")}
                        {...field}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="company"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t("Vendors.form.company.label")}</FormLabel>
                    <FormControl>
                      <ComboboxAdd
                        direction={locale === "ar" ? "rtl" : "ltr"}
                        data={companyOptions.map((opt) => ({ ...opt, value: opt.label }))}
                        isLoading={companiesLoading}
                        defaultValue={field.value}
                        onChange={(value) => field.onChange(value || null)}
                        texts={{
                          placeholder: t("Vendors.form.company.placeholder"),
                          searchPlaceholder: t("Companies.search_companies"),
                          noItems: t("Companies.no_companies_found"),
                        }}
                        addText={t("Companies.add_new")}
                        onAddClick={() => setIsCompanyDialogOpen(true)}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t("Vendors.form.email.label")} *</FormLabel>
                    <FormControl>
                      <Input
                        dir="ltr"
                        type="email"
                        placeholder={t("Vendors.form.email.placeholder")}
                        {...field}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t("Vendors.form.phone.label")} *</FormLabel>
                    <FormControl>
                      <PhoneInput
                        value={field.value || ""}
                        onChange={(value) => field.onChange(value || null)}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Vendors.form.notes.label")}</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder={t("Vendors.form.notes.placeholder")}
                      {...field}
                      value={field.value ?? ""}
                      disabled={isLoading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <AddressFormSection
            title={t("Vendors.form.address.label")}
            control={form.control}
            isLoading={isLoading}
          />
        </form>
      </Form>
      <FormDialog
        open={isCompanyDialogOpen}
        onOpenChange={setIsCompanyDialogOpen}
        title={t("Companies.add_new")}
        formId="company-form"
        cancelText={t("General.cancel")}
        submitText={t("General.save")}
      >
        <CompanyForm id="company-form" />
      </FormDialog>
    </>
  );
}
</file>

<file path="src/modules/vendor/vendor.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  bulkDeleteVendors,
  createVendor,
  deleteVendor,
  fetchVendorById,
  fetchVendors,
  updateVendor,
  duplicateVendor,
} from "@/vendor/vendor.service";
import type { Vendor, VendorCreateData } from "@/vendor/vendor.type";
// Query keys for vendors
export const vendorKeys = {
  all: ["vendors"] as const,
  lists: () => [...vendorKeys.all, "list"] as const,
  list: (filters: any) => [...vendorKeys.lists(), { filters }] as const, // Keep filter structure if needed
  details: () => [...vendorKeys.all, "detail"] as const,
  detail: (id: string) => [...vendorKeys.details(), id] as const,
};
// Hook to fetch all vendors
export function useVendors() {
  return useQuery({
    queryKey: vendorKeys.lists(),
    queryFn: fetchVendors,
  });
}
// Hook to fetch a single vendor by ID
export function useVendor(id: string) {
  return useQuery({
    queryKey: vendorKeys.detail(id),
    queryFn: () => fetchVendorById(id),
    enabled: !!id, // Only run query if id is truthy
  });
}
// Hook for creating a new vendor
export function useCreateVendor() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newVendor: Omit<Vendor, "id" | "created_at"> & { user_id: string }) => {
      const { user_id, ...rest } = newVendor;
      const vendorData: VendorCreateData = {
        ...rest,
        user_id: user_id,
      };
      return createVendor(vendorData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: vendorKeys.lists() });
    },
  });
}
// Hook for duplicating a vendor
export function useDuplicateVendor() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateVendor(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: vendorKeys.lists() });
    },
  });
}
// Hook for updating an existing vendor
export function useUpdateVendor() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({
      id,
      vendor,
    }: {
      id: string;
      vendor: Partial<Omit<Vendor, "id" | "created_at">>;
    }) => updateVendor(id, vendor),
    onSuccess: (data) => {
      // Invalidate both the specific detail and the list queries
      queryClient.invalidateQueries({ queryKey: vendorKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: vendorKeys.lists() });
    },
  });
}
// Hook for deleting a vendor
export function useDeleteVendor() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteVendor(id),
    onSuccess: (_, variables) => {
      // Invalidate the list and remove the specific detail query from cache
      queryClient.invalidateQueries({ queryKey: vendorKeys.lists() });
      queryClient.removeQueries({ queryKey: vendorKeys.detail(variables) });
    },
  });
}
// Hook to bulk delete vendors
export function useBulkDeleteVendors() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: bulkDeleteVendors,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: vendorKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/vendor/vendor.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
  { id: "name", translationKey: "Vendors.form.name.label", type: "text" },
  { id: "email", translationKey: "Vendors.form.email.label", type: "text" },
  { id: "phone", translationKey: "Vendors.form.phone.label", type: "text" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
  { value: "name", translationKey: "Vendors.form.name.label" },
  { value: "email", translationKey: "Vendors.form.email.label" },
  { value: "phone", translationKey: "Vendors.form.phone.label" },
  { value: "company", translationKey: "Vendors.form.company.label" },
  { value: "address", translationKey: "Vendors.form.address.label" },
  { value: "city", translationKey: "Vendors.form.city.label" },
  { value: "state", translationKey: "Vendors.form.state.label" },
  { value: "zip_code", translationKey: "Vendors.form.zip_code.label" },
];
</file>

<file path="src/modules/vendor/vendor.service.ts">
import { Vendor } from "@/vendor/vendor.type";
export async function fetchVendors(): Promise<Vendor[]> {
  try {
    const response = await fetch("/api/resource/vendors");
    if (!response.ok) {
      console.error("Failed to fetch vendors:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching vendors:", error);
    return [];
  }
}
export async function fetchVendorById(id: string): Promise<Vendor> {
  const response = await fetch(`/api/resource/vendors/${id}`);
  if (!response.ok) {
    throw new Error(`Vendor with id ${id} not found`);
  }
  return response.json();
}
export async function createVendor(vendor: Omit<Vendor, "id" | "created_at">): Promise<Vendor> {
  const response = await fetch("/api/resource/vendors", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(vendor),
  });
  if (!response.ok) {
    throw new Error("Failed to create vendor");
  }
  return response.json();
}
export async function updateVendor(id: string, updates: Partial<Vendor>): Promise<Vendor> {
  const response = await fetch(`/api/resource/vendors/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });
  if (!response.ok) {
    throw new Error(`Failed to update vendor with id ${id}`);
  }
  return response.json();
}
export async function duplicateVendor(id: string): Promise<Vendor> {
  const response = await fetch(`/api/resource/vendors/${id}/duplicate`, {
    method: "POST",
  });
  if (!response.ok) {
    throw new Error(`Failed to duplicate vendor with id ${id}`);
  }
  return response.json();
}
export async function deleteVendor(id: string): Promise<void> {
  const response = await fetch(`/api/resource/vendors/${id}`, {
    method: "DELETE",
  });
  if (!response.ok) {
    throw new Error(`Failed to delete vendor with id ${id}`);
  }
}
export async function bulkDeleteVendors(ids: string[]): Promise<void> {
  const response = await fetch("/api/resource/vendors", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ids }),
  });
  if (!response.ok) {
    throw new Error("Failed to delete vendors");
  }
}
</file>

<file path="src/modules/vendor/vendor.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Vendor } from "./vendor.type";
const searchVendorFn = (vendor: Vendor, searchQuery: string) =>
  vendor.name.toLowerCase().includes(searchQuery.toLowerCase());
const useVendorStore = createGenericStore<Vendor>("vendors", searchVendorFn);
export default useVendorStore;
</file>

<file path="src/modules/vendor/vendor.table.tsx">
import { useTranslations } from "next-intl";
import React, { useCallback } from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import useUserStore from "@/stores/use-user-store";
import { useUpdateVendor } from "./vendor.hooks";
import useVendorsStore from "./vendor.store";
import { Vendor } from "./vendor.type";
const VendorsTable = ({ data, isLoading, error, onActionClicked }: ModuleTableProps<Vendor>) => {
  const t = useTranslations("Vendors");
  const { mutateAsync: updateVendor } = useUpdateVendor();
  const selectedRows = useVendorsStore((state) => state.selectedRows);
  const setSelectedRows = useVendorsStore((state) => state.setSelectedRows);
  const canEditVendor = useUserStore((state) => state.hasPermission("vendors.update"));
  const canDuplicateVendor = useUserStore((state) => state.hasPermission("vendors.duplicate"));
  const canViewVendor = useUserStore((state) => state.hasPermission("vendors.view"));
  const canArchiveVendor = useUserStore((state) => state.hasPermission("vendors.archive"));
  const canDeleteVendor = useUserStore((state) => state.hasPermission("vendors.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Vendor>[] = [
    {
      accessorKey: "name",
      header: t("form.name.label"),
      validationSchema: z.string().min(1, t("form.name.required")),
    },
    {
      accessorKey: "company",
      header: t("form.company.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "email",
      header: t("form.email.label"),
      validationSchema: z.string().email(t("form.email.invalid")).min(1, t("form.email.required")),
    },
    {
      accessorKey: "phone",
      header: t("form.phone.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "address",
      header: t("form.address.label"),
      validationSchema: z.string().min(1, t("form.address.required")),
    },
    {
      accessorKey: "city",
      header: t("form.city.label"),
      validationSchema: z.string().min(1, t("form.city.required")),
    },
    {
      accessorKey: "state",
      header: t("form.state.label"),
      validationSchema: z.string().min(1, t("form.state.required")),
    },
    {
      accessorKey: "zip_code",
      header: t("form.zip_code.label"),
      validationSchema: z.string().min(1, t("form.zip_code.required")),
    },
    {
      accessorKey: "products",
      header: t("form.products.label"),
      validationSchema: z.string().optional(),
    },
    {
      accessorKey: "notes",
      header: t("form.notes.label"),
      validationSchema: z.string().optional(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateVendor({ id: rowId, vendor: { [columnId]: value } });
  };
  const handleRowSelectionChange = useCallback(
    (rows: Vendor[]) => {
      const newSelectedIds = rows.map((row) => row.id!);
      // Only update if the selection has actually changed
      if (JSON.stringify(newSelectedIds) !== JSON.stringify(selectedRows)) {
        setSelectedRows(newSelectedIds);
      }
    },
    [selectedRows, setSelectedRows],
  );
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const vendorTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Vendor) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditVendor}
      canDuplicateAction={canDuplicateVendor}
      canViewAction={canViewVendor}
      canArchiveAction={canArchiveVendor}
      canDeleteAction={canDeleteVendor}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={vendorTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default VendorsTable;
</file>

<file path="src/modules/vendor/vendor.type.ts">
import { AddressProps } from "@/types/common.type";
export interface VendorProps {
  id: string;
  name: string;
  email: string;
  phone: string;
  company?: string;
  notes: string | null;
  created_at: string;
  user_id: string;
  updated_at: string;
  enterprise_id: string;
}
export interface Vendor extends VendorProps, AddressProps {}
export type VendorCreateData = Omit<Vendor, "id" | "created_at"> & { user_id: string };
export type VendorUpdateData = Partial<Vendor>;
</file>

<file path="src/modules/warehouse/warehouse.card.tsx">
import { MapPin, Code, LayoutGrid, NotebookText } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/ui/badge";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Warehouse } from "@/warehouse/warehouse.type";
const WarehouseCard = ({ warehouse }: { warehouse: Warehouse }) => {
  const t = useTranslations("Warehouses");
  return (
    <Card key={warehouse.id} className="transition-shadow hover:shadow-lg">
      <CardHeader>
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">{warehouse.name}</h3>
          <Badge variant={warehouse.is_active ? "default" : "secondary"}>
            {warehouse.is_active ? t("status.active") : t("status.inactive")}
          </Badge>
        </div>
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <Code className="h-4 w-4" />
          <span>{warehouse.code}</span>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {/* Address */}
          <div className="flex items-start gap-2 text-sm text-gray-600">
            <MapPin className="mt-1 h-4 w-4 flex-shrink-0" />
            <div>
              <p>{warehouse.address}</p>
              <p>{`${warehouse.city}, ${warehouse.state} ${warehouse.zip_code}`}</p>
            </div>
          </div>
          {/* Capacity */}
          {warehouse.capacity && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <LayoutGrid className="h-4 w-4" />
              <span>{`${t("capacity")}: ${warehouse.capacity}`}</span>
            </div>
          )}
          {/* Notes */}
          {warehouse.notes && (
            <div className="flex items-start gap-2 border-t pt-3 text-sm text-gray-500">
              <NotebookText className="mt-1 h-4 w-4 flex-shrink-0" />
              <p className="whitespace-pre-wrap">{warehouse.notes}</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
export default WarehouseCard;
</file>

<file path="src/modules/warehouse/warehouse.form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { DiamondPlus, Dice1, Dice5, Dices, Hash, MapPin, Shuffle } from "lucide-react";
import { useLocale, useTranslations } from "next-intl";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { z } from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Textarea } from "@/ui/textarea";
import { AddressFormSection } from "@/components/forms/address-form-section";
import { createAddressSchema } from "@/components/forms/address-schema";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import CodeInput from "@/components/ui/code-input";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import IconButton from "@/components/ui/icon-button";
import { ModuleFormProps } from "@/types/common.type";
import useUserStore from "@/stores/use-user-store";
import { useCreateWarehouse, useUpdateWarehouse, useWarehouses } from "./warehouse.hooks";
import useWarehouseStore from "./warehouse.store";
import { Warehouse } from "./warehouse.type";
export const createWarehouseFormSchema = (t: (key: string) => string) => {
  const baseWarehouseFormSchema = z.object({
    name: z.string().min(1, t("Warehouses.form.name.required")),
    code: z.string().min(1, t("Warehouses.form.code.required")),
    capacity: z.string().optional(),
    is_active: z.boolean().default(true),
    notes: z.string().optional(),
  });
  const addressSchema = createAddressSchema(t);
  return baseWarehouseFormSchema.merge(addressSchema);
};
export type WarehouseFormValues = z.input<ReturnType<typeof createWarehouseFormSchema>>;
export function WarehouseForm({
  id,
  onSuccess,
  loading,
  defaultValues,
  editMode,
}: ModuleFormProps<Warehouse>) {
  const t = useTranslations();
  const locale = useLocale();
  const { profile, membership } = useUserStore();
  const { mutateAsync: createWarehouse, isPending: isCreating } = useCreateWarehouse();
  const { mutateAsync: updateWarehouse, isPending: isUpdating } = useUpdateWarehouse();
  const { data: warehouses } = useWarehouses();
  const isLoading = useWarehouseStore((state) => state.isLoading);
  const setIsLoading = useWarehouseStore((state) => state.setIsLoading);
  const form = useForm<WarehouseFormValues>({
    resolver: zodResolver(createWarehouseFormSchema(t)),
    defaultValues: {
      name: "",
      code: "",
      short_address: "",
      building_number: "",
      street_name: "",
      city: "",
      region: "",
      country: "",
      zip_code: "",
      capacity: "",
      is_active: true,
      notes: "",
    },
  });
  const handleSubmit = async (data: WarehouseFormValues) => {
    setIsLoading(true);
    if (!profile?.id) {
      toast.error(t("General.unauthorized"), {
        description: t("General.must_be_logged_in"),
      });
      return;
    }
    try {
      if (editMode && defaultValues) {
        if (!defaultValues.id) {
          console.error("Company ID missing in edit mode");
          toast.error(t("Companies.error.missing_id"));
          setIsLoading(false);
          return;
        }
        await updateWarehouse(
          {
            id: defaultValues.id,
            data: {
              name: data.name.trim(),
              code: data.code.trim(),
              capacity: data.capacity ? parseInt(data.capacity) : null,
              is_active: data.is_active ?? true,
              notes: data.notes?.trim() || null,
              short_address: data.short_address?.trim() || undefined,
              building_number: data.building_number?.trim() || undefined,
              street_name: data.street_name?.trim() || undefined,
              city: data.city?.trim() || undefined,
              region: data.region?.trim() || undefined,
              country: data.country?.trim() || undefined,
              zip_code: data.zip_code?.trim() || undefined,
              additional_number: data.additional_number?.trim() || undefined,
            },
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      } else {
        await createWarehouse(
          {
            enterprise_id: membership?.enterprise_id || "",
            name: data.name.trim(),
            code: data.code.trim(),
            capacity: data.capacity ? parseInt(data.capacity) : null,
            notes: data.notes?.trim() || null,
            is_active: data.is_active ?? true,
            user_id: profile?.id || "",
            short_address: data.short_address?.trim() || undefined,
            building_number: data.building_number?.trim() || undefined,
            street_name: data.street_name?.trim() || undefined,
            city: data.city?.trim() || undefined,
            region: data.region?.trim() || undefined,
            country: data.country?.trim() || undefined,
            zip_code: data.zip_code?.trim() || undefined,
            additional_number: data.additional_number?.trim() || undefined,
          },
          {
            onSuccess: async () => {
              if (onSuccess) {
                onSuccess();
              }
            },
          },
        );
      }
    } catch (error) {
      setIsLoading(false);
      console.error("Failed to save company:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Companies.error.creating"),
      });
    }
  };
  if (typeof window !== "undefined") {
    (window as any).warehouseForm = form;
  }
  return (
    <Form {...form}>
      <form id={id || "warehouse-form"} onSubmit={form.handleSubmit(handleSubmit)}>
        <div className="mx-auto flex max-w-2xl flex-col gap-4 p-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Warehouses.form.name.label")} *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder={t("Warehouses.form.name.placeholder")}
                      {...field}
                      disabled={loading}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Warehouses.form.code.label")} *</FormLabel>
                  <FormControl>
                    <CodeInput
                      onSerial={() => {
                        const nextNumber = (warehouses?.length || 0) + 1;
                        const paddedNumber = String(nextNumber).padStart(4, "0");
                        form.setValue("code", `WH-${paddedNumber}`);
                      }}
                      onRandom={() => {
                        const randomChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                        let randomCode = "";
                        for (let i = 0; i < 5; i++) {
                          randomCode += randomChars.charAt(
                            Math.floor(Math.random() * randomChars.length),
                          );
                        }
                        form.setValue("code", `WH-${randomCode}`);
                      }}
                    >
                      <Input
                        placeholder={t("Warehouses.form.code.placeholder")}
                        {...field}
                        disabled={loading}
                      />
                    </CodeInput>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-1">
            <FormField
              control={form.control}
              name="capacity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t("Warehouses.form.capacity.label")}</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      placeholder={t("Warehouses.form.capacity.placeholder")}
                      {...field}
                      disabled={loading}
                      value={field.value || ""}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("Warehouses.form.notes.label")}</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder={t("Warehouses.form.notes.placeholder")}
                    className="min-h-[120px]"
                    {...field}
                    disabled={loading}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <AddressFormSection
          title={t("Warehouses.form.address.label")}
          control={form.control}
          isLoading={loading}
        />
      </form>
    </Form>
  );
}
</file>

<file path="src/modules/warehouse/warehouse.hooks.ts">
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createWarehouse,
  deleteWarehouse,
  fetchWarehouseById,
  fetchWarehouses,
  updateWarehouse,
  duplicateWarehouse,
} from "@/warehouse/warehouse.service";
import type { Warehouse, WarehouseCreateData } from "@/warehouse/warehouse.type";
// Query keys for warehouses
export const warehouseKeys = {
  all: ["warehouses"] as const,
  lists: () => [...warehouseKeys.all, "list"] as const,
  list: (filters: any) => [...warehouseKeys.lists(), { filters }] as const,
  details: () => [...warehouseKeys.all, "detail"] as const,
  detail: (id: string) => [...warehouseKeys.details(), id] as const,
};
// Hook to fetch all warehouses
export function useWarehouses() {
  return useQuery({
    queryKey: warehouseKeys.lists(),
    queryFn: fetchWarehouses,
  });
}
// Hook to fetch a single warehouse by ID
export function useWarehouse(id: string) {
  return useQuery({
    queryKey: warehouseKeys.detail(id),
    queryFn: () => fetchWarehouseById(id),
    enabled: !!id, // Only run query if id is truthy
  });
}
// Hook for creating a new warehouse
export function useCreateWarehouse() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (newWarehouse: WarehouseCreateData) => createWarehouse(newWarehouse),
    onSuccess: (newWarehouse: Warehouse) => {
      const previousWarehouses = queryClient.getQueryData(warehouseKeys.lists()) || [];
      queryClient.setQueryData(warehouseKeys.lists(), [
        ...(Array.isArray(previousWarehouses) ? previousWarehouses : []),
        newWarehouse,
      ]);
    },
  });
}
export function useDuplicateWarehouse() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => duplicateWarehouse(id),
  });
}
// Hook for updating an existing warehouse
export function useUpdateWarehouse() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({
      id,
      data,
    }: {
      id: string;
      data: Partial<Omit<Warehouse, "id" | "created_at">>;
    }) => updateWarehouse(id, data),
    onSuccess: (data) => {
      // Invalidate both the specific detail and the list queries
      queryClient.invalidateQueries({ queryKey: warehouseKeys.detail(data.id) });
      queryClient.invalidateQueries({ queryKey: warehouseKeys.lists() });
    },
  });
}
// Hook for deleting a warehouse
export function useDeleteWarehouse() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deleteWarehouse(id),
    onSuccess: (_, variables) => {
      // Invalidate the list and remove the specific detail query from cache
      queryClient.invalidateQueries({ queryKey: warehouseKeys.lists() });
      queryClient.removeQueries({ queryKey: warehouseKeys.detail(variables) });
    },
  });
}
export function useBulkDeleteWarehouses() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: async (ids: string[]) => {
      const response = await fetch("/api/warehouses/bulk-delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ids }),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to delete warehouses");
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: warehouseKeys.lists() });
    },
  });
}
</file>

<file path="src/modules/warehouse/warehouse.options.ts">
import { FilterableField, SortableColumn } from "@/types/common.type";
export const FILTERABLE_FIELDS: FilterableField[] = [
  { id: "created_at", translationKey: "Forms.created_at.label", type: "date" },
];
export const SORTABLE_COLUMNS: SortableColumn[] = [
  { value: "created_at", translationKey: "Forms.created_at.label" },
];
</file>

<file path="src/modules/warehouse/warehouse.service.ts">
import { Warehouse, WarehouseCreateData } from "@/warehouse/warehouse.type";
export async function fetchWarehouses(): Promise<Warehouse[]> {
  try {
    const response = await fetch("/api/warehouses");
    if (!response.ok) {
      console.error("Failed to fetch warehouses:", response.statusText);
      return [];
    }
    return response.json();
  } catch (error) {
    console.error("Error fetching warehouses:", error);
    return [];
  }
}
export async function fetchWarehouseById(id: string): Promise<Warehouse> {
  try {
    const response = await fetch(`/api/warehouses/${id}`);
    if (!response.ok) {
      throw new Error(`Warehouse with id ${id} not found`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error fetching warehouse ${id}:`, error);
    throw error;
  }
}
// Create operation
export async function createWarehouse(warehouse: WarehouseCreateData): Promise<Warehouse> {
  try {
    const response = await fetch("/api/warehouses", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(warehouse),
    });
    if (!response.ok) {
      throw new Error("Failed to create warehouse");
    }
    return response.json();
  } catch (error) {
    console.error("Error creating warehouse:", error);
    throw error;
  }
}
export async function duplicateWarehouse(id: string): Promise<Warehouse> {
  try {
    const response = await fetch(`/api/warehouses/${id}/duplicate`, {
      method: "POST",
    });
    if (!response.ok) {
      throw new Error(`Failed to duplicate warehouse with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error duplicating warehouse ${id}:`, error);
    throw error;
  }
}
// Update operation
export async function updateWarehouse(id: string, updates: Partial<Warehouse>): Promise<Warehouse> {
  try {
    const response = await fetch(`/api/warehouses/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updates),
    });
    if (!response.ok) {
      throw new Error(`Failed to update warehouse with id ${id}`);
    }
    return response.json();
  } catch (error) {
    console.error(`Error updating warehouse ${id}:`, error);
    throw error;
  }
}
// Delete operations
export async function deleteWarehouse(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/warehouses/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) {
      throw new Error(`Failed to delete warehouse with id ${id}`);
    }
  } catch (error) {
    console.error(`Error deleting warehouse ${id}:`, error);
    throw error;
  }
}
export async function bulkDeleteWarehouses(ids: string[]): Promise<void> {
  try {
    const response = await fetch("/api/warehouses/bulk-delete", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ids }),
    });
    if (!response.ok) {
      throw new Error("Failed to delete warehouses");
    }
  } catch (error) {
    console.error("Error bulk deleting warehouses:", error);
    throw error;
  }
}
</file>

<file path="src/modules/warehouse/warehouse.store.ts">
import { createGenericStore } from "@/utils/generic-store";
import { Warehouse } from "./warehouse.type";
const searchWarehouseFn = (warehouse: Warehouse, searchQuery: string) =>
  warehouse.name.toLowerCase().includes(searchQuery.toLowerCase());
const useWarehouseStore = createGenericStore<Warehouse>("warehouses", searchWarehouseFn);
export default useWarehouseStore;
</file>

<file path="src/modules/warehouse/warehouse.table.tsx">
import { useTranslations } from "next-intl";
import React from "react";
import { z } from "zod";
import ErrorComponent from "@/ui/error-component";
import SheetTable, { ExtendedColumnDef } from "@/ui/sheet-table";
import TableSkeleton from "@/ui/table-skeleton";
import { ModuleTableProps } from "@/types/common.type";
import { useUpdateWarehouse } from "@/warehouse/warehouse.hooks";
import useWarehouseStore from "@/warehouse/warehouse.store";
import { Warehouse } from "@/warehouse/warehouse.type";
import useUserStore from "@/stores/use-user-store";
const WarehouseTable = ({
  data,
  isLoading,
  error,
  onActionClicked,
}: ModuleTableProps<Warehouse>) => {
  const t = useTranslations();
  const { mutateAsync: updateWarehouse } = useUpdateWarehouse();
  const selectedRows = useWarehouseStore((state) => state.selectedRows);
  const setSelectedRows = useWarehouseStore((state) => state.setSelectedRows);
  const canEditWarehouse = useUserStore((state) => state.hasPermission("warehouses.update"));
  const canDuplicateWarehouse = useUserStore((state) =>
    state.hasPermission("warehouses.duplicate"),
  );
  const canViewWarehouse = useUserStore((state) => state.hasPermission("warehouses.view"));
  const canArchiveWarehouse = useUserStore((state) => state.hasPermission("warehouses.archive"));
  const canDeleteWarehouse = useUserStore((state) => state.hasPermission("warehouses.delete"));
  const rowSelection = Object.fromEntries(selectedRows.map((id) => [id, true]));
  const columns: ExtendedColumnDef<Warehouse>[] = [
    {
      accessorKey: "name",
      header: t("Warehouses.form.name.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.name.required")),
    },
    {
      accessorKey: "code",
      header: t("Warehouses.form.code.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.code.required")),
    },
    {
      accessorKey: "address",
      header: t("Warehouses.form.address.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.address.required")),
    },
    {
      accessorKey: "city",
      header: t("Warehouses.form.city.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.city.required")),
    },
    {
      accessorKey: "state",
      header: t("Warehouses.form.state.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.state.required")),
    },
    {
      accessorKey: "zip_code",
      header: t("Warehouses.form.zip_code.label"),
      validationSchema: z.string().min(1, t("Warehouses.form.zip_code.required")),
    },
    {
      accessorKey: "capacity",
      header: t("Warehouses.form.capacity.label"),
      validationSchema: z.number().min(0, t("Warehouses.form.capacity.invalid")),
    },
    {
      accessorKey: "notes",
      header: t("Warehouses.form.notes.label"),
      validationSchema: z.string().optional(),
    },
  ];
  const handleEdit = async (rowId: string, columnId: string, value: unknown) => {
    await updateWarehouse({ id: rowId, data: { [columnId]: value } });
  };
  const handleRowSelectionChange = (rows: Warehouse[]) => {
    const newSelectedIds = rows.map((row) => row.id!);
    // Only update if the selection has actually changed
    const currentSelection = new Set(selectedRows);
    const newSelection = new Set(newSelectedIds);
    if (
      newSelection.size !== currentSelection.size ||
      !Array.from(newSelection).every((id) => currentSelection.has(id))
    ) {
      setSelectedRows(newSelectedIds);
    }
  };
  if (isLoading) {
    return (
      <TableSkeleton columns={columns.map((column) => column.accessorKey as string)} rows={5} />
    );
  }
  if (error) {
    return <ErrorComponent errorMessage={error.message} />;
  }
  const warehouseTableOptions = {
    state: {
      rowSelection,
    },
    enableRowSelection: true,
    enableMultiRowSelection: true,
    getRowId: (row: Warehouse) => row.id!,
    onRowSelectionChange: (updater: any) => {
      const newSelection = typeof updater === "function" ? updater(rowSelection) : updater;
      const selectedRows = data.filter((row) => newSelection[row.id!]);
      handleRowSelectionChange(selectedRows);
    },
  };
  return (
    <SheetTable
      columns={columns}
      data={data}
      onEdit={handleEdit}
      showHeader={true}
      enableRowSelection={true}
      enableRowActions={true}
      canEditAction={canEditWarehouse}
      canDuplicateAction={canDuplicateWarehouse}
      canViewAction={canViewWarehouse}
      canArchiveAction={canArchiveWarehouse}
      canDeleteAction={canDeleteWarehouse}
      onRowSelectionChange={handleRowSelectionChange}
      tableOptions={warehouseTableOptions}
      onActionClicked={onActionClicked}
      texts={{
        actions: t("General.actions"),
        edit: t("General.edit"),
        duplicate: t("General.duplicate"),
        view: t("General.view"),
        archive: t("General.archive"),
        delete: t("General.delete"),
      }}
    />
  );
};
export default WarehouseTable;
</file>

<file path="src/modules/warehouse/warehouse.type.ts">
import { AddressProps } from "@/types/common.type";
export interface WarehouseProps {
  id: string;
  name: string;
  code: string;
  capacity: number | null;
  is_active: boolean;
  notes: string | null;
  created_at: string;
  enterprise_id: string;
  user_id: string;
}
export interface Warehouse extends WarehouseProps, AddressProps {}
export type WarehouseCreateData = Omit<Warehouse, "id" | "created_at"> & { user_id: string };
export type WarehouseUpdateData = Partial<Warehouse>;
</file>

<file path="src/pages/api/profile/info.ts">
import type { NextApiRequest, NextApiResponse } from "next";
import { eq } from "drizzle-orm";
import { db } from "@/db/drizzle";
import { profiles } from "@/db/schema";
type Data = {
  profile?: any;
  error?: string;
};
export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  try {
    const { profile_id } = req.query;
    if (!profile_id || typeof profile_id !== "string") {
      return res.status(400).json({ error: "Profile ID is required" });
    }
    const profileData = await db.query.profiles.findFirst({
      where: eq(profiles.id, profile_id),
    });
    if (!profileData) {
      return res.status(404).json({ error: "Profile not found" });
    }
    // Remove any sensitive information before returning
    const { ...safeProfile } = profileData;
    return res.status(200).json({ profile: safeProfile });
  } catch (error) {
    console.error("Error fetching profile:", error);
    return res.status(500).json({
      error: error instanceof Error ? error.message : "Error fetching profile information",
    });
  }
}
</file>

<file path="src/pages/api/profile/update.ts">
import type { NextApiRequest, NextApiResponse } from "next";
import { eq } from "drizzle-orm";
import { db } from "@/db/drizzle";
import { profiles } from "@/db/schema";
type Data = {
  profile?: any;
  error?: string;
};
export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  if (req.method !== "PUT" && req.method !== "PATCH") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  try {
    const { profile_id } = req.query;
    const updateData = req.body;
    if (!profile_id || typeof profile_id !== "string") {
      return res.status(400).json({ error: "Profile ID is required" });
    }
    if (!updateData || typeof updateData !== "object") {
      return res.status(400).json({ error: "Update data is required" });
    }
    // Get the current profile
    const existingProfile = await db.query.profiles.findFirst({
      where: eq(profiles.id, profile_id),
    });
    if (!existingProfile) {
      return res.status(404).json({ error: "Profile not found" });
    }
    // Validate the fields that can be updated
    const validFields = [
      "full_name",
      "avatar_url",
      "address",
      "email",
      "username",
      "user_settings",
    ];
    // Filter out any fields that are not allowed to be updated
    const sanitizedData: Record<string, any> = {};
    Object.keys(updateData).forEach((key) => {
      if (validFields.includes(key)) {
        sanitizedData[key] = updateData[key];
      }
    });
    // Special handling for nested user_settings object
    if (updateData.user_settings && typeof updateData.user_settings === "object") {
      // Merge existing user_settings with the new ones rather than replacing
      sanitizedData.user_settings = {
        ...(existingProfile.user_settings || {}),
        ...updateData.user_settings,
      };
    }
    if (Object.keys(sanitizedData).length === 0) {
      return res.status(400).json({ error: "No valid fields to update" });
    }
    // Update the profile
    const [updatedProfile] = await db
      .update(profiles)
      .set({
        ...sanitizedData,
      })
      .where(eq(profiles.id, profile_id))
      .returning();
    if (!updatedProfile) {
      return res.status(500).json({ error: "Failed to update profile" });
    }
    return res.status(200).json({ profile: updatedProfile });
  } catch (error) {
    console.error("Error updating profile:", error);
    return res.status(500).json({
      error: error instanceof Error ? error.message : "Error updating profile information",
    });
  }
}
</file>

<file path="src/pages/api/resource/[model]/[id]/duplicate.ts">
import { eq } from "drizzle-orm";
import { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/db/drizzle";
import * as schema from "@/db/schema";
import { createClient } from "@/utils/supabase/server-props";
type ModelConfig = {
  table: any;
  query: {
    findFirst: (config: { where: any }) => Promise<any>;
  };
  idField: string;
  excludeFromDuplicate?: string[]; // New property to specify excluded fields
};
const modelMap: Record<string, ModelConfig> = {
  branches: {
    table: schema.branches,
    query: db.query.branches,
    idField: "id",
    excludeFromDuplicate: ["code"],
  },
  companies: { table: schema.companies, query: db.query.companies, idField: "id" },
  jobs: { table: schema.jobs, query: db.query.jobs, idField: "id" },
  clients: { table: schema.clients, query: db.query.clients, idField: "id" },
  expenses: { table: schema.expenses, query: db.query.expenses, idField: "id" },
  departments: { table: schema.departments, query: db.query.departments, idField: "id" },
  departmentLocations: {
    table: schema.department_locations,
    query: db.query.department_locations,
    idField: "id",
  },
  salaries: { table: schema.salaries, query: db.query.salaries, idField: "id" },
  offices: { table: schema.offices, query: db.query.offices, idField: "id" },
  warehouses: { table: schema.warehouses, query: db.query.warehouses, idField: "id" },
  employees: { table: schema.employees, query: db.query.employees, idField: "id" },
  products: { table: schema.products, query: db.query.products, idField: "id" },
  invoices: { table: schema.invoices, query: db.query.invoices, idField: "id" },
  quotes: { table: schema.quotes, query: db.query.quotes, idField: "id" },
  vendors: { table: schema.vendors, query: db.query.vendors, idField: "id" },
};
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }
  const { model, id } = req.query;
  if (typeof model !== "string" || !(model in modelMap)) {
    return res.status(404).json({ message: "Model not found" });
  }
  if (!id || typeof id !== "string") {
    return res.status(400).json({ error: "Invalid ID" });
  }
  const { table, query, idField, excludeFromDuplicate = [] } = modelMap[model];
  const supabase = createClient({
    req,
    res,
    query: {},
    resolvedUrl: "",
  });
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user?.id) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  try {
    const record = await query.findFirst({
      where: eq(table[idField], id),
    });
    if (!record) {
      return res.status(404).json({ message: `${model} not found` });
    }
    if ("user_id" in record && record.user_id !== user.id) {
      return res.status(403).json({ error: `Not authorized to duplicate this ${model}` });
    }
    // Create a copy of the record without the excluded fields
    const dataToDuplicate = Object.keys(record).reduce(
      (acc, key) => {
        if (key !== idField && !excludeFromDuplicate.includes(key)) {
          acc[key] = record[key];
        }
        return acc;
      },
      {} as Record<string, any>,
    );
    const [duplicated] = (await db
      .insert(table)
      .values(dataToDuplicate)
      .returning()) as unknown as any[];
    return res.status(201).json(duplicated);
  } catch (error) {
    console.error(`Error duplicating ${model}:`, error);
    return res.status(500).json({ message: `Error duplicating ${model}` });
  }
}
</file>

<file path="src/pages/api/resource/[model]/[id]/index.ts">
// src/pages/api/resource/[model]/[id].ts
import { eq } from "drizzle-orm";
import { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/db/drizzle";
import * as schema from "@/db/schema";
import { createClient } from "@/utils/supabase/server-props";
type ModelConfig = {
  table: any;
  query: {
    findFirst: (config: { where: any }) => Promise<any>;
  };
  idField: string;
};
const modelMap: Record<string, ModelConfig> = {
  branches: { table: schema.branches, query: db.query.branches, idField: "id" },
  companies: { table: schema.companies, query: db.query.companies, idField: "id" },
  jobs: { table: schema.jobs, query: db.query.jobs, idField: "id" },
  clients: { table: schema.clients, query: db.query.clients, idField: "id" },
  expenses: { table: schema.expenses, query: db.query.expenses, idField: "id" },
  departments: { table: schema.departments, query: db.query.departments, idField: "id" },
  departmentLocations: {
    table: schema.department_locations,
    query: db.query.department_locations,
    idField: "id",
  },
  salaries: { table: schema.salaries, query: db.query.salaries, idField: "id" },
  offices: { table: schema.offices, query: db.query.offices, idField: "id" },
  warehouses: { table: schema.warehouses, query: db.query.warehouses, idField: "id" },
  employees: { table: schema.employees, query: db.query.employees, idField: "id" },
  products: { table: schema.products, query: db.query.products, idField: "id" },
  invoices: { table: schema.invoices, query: db.query.invoices, idField: "id" },
  quotes: { table: schema.quotes, query: db.query.quotes, idField: "id" },
  vendors: { table: schema.vendors, query: db.query.vendors, idField: "id" },
};
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { model, id } = req.query;
  // Validate model
  if (typeof model !== "string" || !(model in modelMap)) {
    return res.status(404).json({ message: "Model not found" });
  }
  // Validate ID
  if (!id || typeof id !== "string") {
    return res.status(400).json({ error: "Invalid ID" });
  }
  // Get model configuration
  const { table, query, idField } = modelMap[model];
  // Authenticate user
  const supabase = createClient({
    req,
    res,
    query: {},
    resolvedUrl: "",
  });
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user?.id) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  // Handle GET request
  if (req.method === "GET") {
    try {
      const record = await query.findFirst({
        where: eq(table[idField], id),
      });
      if (!record) {
        return res.status(404).json({ message: `${model} not found` });
      }
      return res.status(200).json(record);
    } catch (error) {
      console.error(`Error fetching ${model}:`, error);
      return res.status(500).json({ message: `Error fetching ${model}` });
    }
  }
  // Handle PUT request
  if (req.method === "PUT") {
    try {
      const existingRecord = await query.findFirst({
        where: eq(table[idField], id),
      });
      if (!existingRecord) {
        return res.status(404).json({ message: `${model} not found` });
      }
      // Check ownership if the model has a user_id field
      if ("user_id" in existingRecord && existingRecord.user_id !== user.id) {
        return res.status(403).json({ error: `Not authorized to update this ${model}` });
      }
      const [updatedRecord] = await db
        .update(table)
        .set(req.body)
        .where(eq(table[idField], id))
        .returning();
      if (!updatedRecord) {
        return res.status(404).json({ message: `${model} not found` });
      }
      return res.status(200).json(updatedRecord);
    } catch (error) {
      console.error(`Error updating ${model}:`, error);
      return res.status(500).json({ message: `Error updating ${model}` });
    }
  }
  // Handle DELETE request
  if (req.method === "DELETE") {
    try {
      // Optional: Check ownership before deletion
      if ("user_id" in table) {
        const existingRecord = await query.findFirst({
          where: eq(table[idField], id),
        });
        if (existingRecord && "user_id" in existingRecord && existingRecord.user_id !== user.id) {
          return res.status(403).json({ error: `Not authorized to delete this ${model}` });
        }
      }
      await db.delete(table).where(eq(table[idField], id));
      return res.status(204).end();
    } catch (error) {
      console.error(`Error deleting ${model}:`, error);
      return res.status(500).json({ message: `Error deleting ${model}` });
    }
  }
  return res
    .status(405)
    .json({ message: "Method not allowed, only GET, PUT and DELETE are allowed" });
}
</file>

<file path="src/pages/api/resource/[model]/index.ts">
import { SupabaseClient } from "@supabase/supabase-js";
import { NextApiRequest, NextApiResponse } from "next";
import { createApiHandler } from "@/lib/api-handler";
type ModelConfig = {
  tableName: string;
  customHandlers?: {
    POST?: (
      supabase: SupabaseClient,
      user_id: string,
      enterprise_id: string,
      req: NextApiRequest,
    ) => Promise<any>;
    GET?: (supabase: SupabaseClient, user_id: string, req: NextApiRequest) => Promise<any>;
    DELETE?: (supabase: SupabaseClient, user_id: string, req: NextApiRequest) => Promise<any>;
  };
};
const modelMap: Record<string, ModelConfig> = {
  branches: { tableName: "branches" },
  companies: { tableName: "companies" },
  jobs: { tableName: "jobs" },
  clients: { tableName: "clients" },
  expenses: { tableName: "expenses" },
  departments: { tableName: "departments" },
  salaries: { tableName: "salaries" },
  department_locations: {
    tableName: "department_locations",
    customHandlers: {
      POST: async (
        supabase: SupabaseClient,
        user_id: string,
        enterprise_id: string,
        req: NextApiRequest,
      ) => {
        const locations = Array.isArray(req.body) ? req.body : [req.body];
        const validTypes = ["office", "branch", "warehouse"];
        for (const location of locations) {
          if (!location.type || !validTypes.includes(location.type)) {
            throw new Error(`Invalid location type. Must be one of: ${validTypes.join(", ")}`);
          }
        }
        const insertData = locations.map((location) => ({
          department_id: location.department_id,
          location_id: location.location_id,
          location_type: location.type,
          user_id: user_id,
          enterprise_id: enterprise_id,
        }));
        const { data: created, error } = await supabase
          .from("department_locations")
          .insert(insertData)
          .select();
        if (error) {
          console.error("Error in custom department_locations POST:", error);
          throw error;
        }
        return created;
      },
    },
  },
  offices: { tableName: "offices" },
  warehouses: { tableName: "warehouses" },
  employees: { tableName: "employees" },
  products: { tableName: "products" },
  invoices: {
    tableName: "invoices",
    customHandlers: {
      POST: async (
        supabase: SupabaseClient,
        user_id: string,
        enterprise_id: string,
        req: NextApiRequest,
      ) => {
        const { items, ...invoiceData } = req.body;
        if (!Array.isArray(items) || items.length === 0) {
          throw new Error("Invoice must contain at least one item.");
        }
        const valuesToInsert = {
          ...invoiceData,
          created_by: user_id,
          enterprise_id: enterprise_id,
        };
        const { data: createdInvoice, error: invoiceError } = await supabase
          .from("invoices")
          .insert(valuesToInsert)
          .select()
          .single();
        if (invoiceError) {
          console.error("Error inserting invoice:", invoiceError);
          throw invoiceError;
        }
        if (!createdInvoice || !createdInvoice.id) {
          console.error("Failed to create invoice or get ID");
          throw new Error("Failed to create invoice record.");
        }
        const invoiceItemsToInsert = items.map((item: any) => ({
          invoice_id: createdInvoice.id,
          product_id: item.product_id || null,
          description: item.description || "",
          quantity: item.quantity,
          unit_price: item.unit_price,
        }));
        const { error: itemsError } = await supabase
          .from("invoice_items")
          .insert(invoiceItemsToInsert);
        if (itemsError) {
          console.error("Error inserting invoice items:", itemsError);
          throw new Error(`Failed to insert invoice items: ${itemsError.message}`);
        }
        return createdInvoice;
      },
    },
  },
  quotes: { tableName: "quotes" },
  vendors: { tableName: "vendors" },
};
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { model } = req.query;
  if (typeof model !== "string" || !(model in modelMap)) {
    return res.status(404).json({ message: "Model not found" });
  }
  const config = modelMap[model as keyof typeof modelMap];
  if (!config) {
    console.error(`>>> [${model}] Error: No configuration found in modelMap <<<`);
    return res.status(500).json({ message: "Internal server configuration error" });
  }
  const { tableName, customHandlers } = config;
  return createApiHandler({ tableName, customHandlers })(req, res);
}
</file>

<file path="src/pages/api/resource/users/[id]/duplicate.ts">
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-props";
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
  const supabase = createClient({ req, res, query: {}, resolvedUrl: "" });
  // Get user session
  const {
    data: { session },
    error: authError,
  } = await supabase.auth.getSession();
  if (authError || !session) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const { id } = req.query;
  if (!id || Array.isArray(id)) {
    return res.status(400).json({ error: "Invalid user ID" });
  }
  try {
    // 1. Get the original user
    const { data: originalUser, error: fetchError } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", id)
      .single();
    if (fetchError) throw fetchError;
    if (!originalUser) {
      return res.status(404).json({ error: "User not found" });
    }
    // 2. Create a duplicate user with modified data
    const { id: _, created_at: __, updated_at: ___, ...duplicateData } = originalUser;
    duplicateData.email = `${duplicateData.email.split("@")[0]}_copy@${duplicateData.email.split("@")[1]}`;
    const { data: duplicatedUser, error: createError } = await supabase
      .from("profiles")
      .insert(duplicateData)
      .select()
      .single();
    if (createError) throw createError;
    return res.status(201).json(duplicatedUser);
  } catch (error) {
    console.error("User duplication error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}
</file>

<file path="src/pages/api/resource/users/permissions/[role].ts">
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-props";
interface RolePermission {
  permission: string;
}
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "GET") {
    res.setHeader("Allow", ["GET"]);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
  const supabase = createClient({ req, res, query: {}, resolvedUrl: "" });
  // Get user session
  const {
    data: { session },
    error: authError,
  } = await supabase.auth.getSession();
  if (authError || !session) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const { role } = req.query;
  if (!role || Array.isArray(role)) {
    return res.status(400).json({ error: "Invalid role" });
  }
  try {
    const { data, error } = await supabase
      .from("role_permissions")
      .select("permission")
      .eq("role", role);
    if (error) throw error;
    return res.status(200).json(data?.map((p: RolePermission) => p.permission) || []);
  } catch (error) {
    console.error("User permissions error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}
</file>

<file path="src/pages/api/resource/users/[id].ts">
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-props";
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const supabase = createClient({ req, res, query: {}, resolvedUrl: "" });
  // Get user session
  const {
    data: { session },
    error: authError,
  } = await supabase.auth.getSession();
  if (authError || !session) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const { id } = req.query;
  if (!id || Array.isArray(id)) {
    return res.status(400).json({ error: "Invalid user ID" });
  }
  try {
    switch (req.method) {
      case "GET":
        const { data: user, error: fetchError } = await supabase
          .from("profiles")
          .select("*")
          .eq("id", id)
          .single();
        if (fetchError) throw fetchError;
        if (!user) return res.status(404).json({ error: "User not found" });
        return res.status(200).json(user);
      case "PUT":
        const { data: updated, error: updateError } = await supabase
          .from("profiles")
          .update(req.body)
          .eq("id", id)
          .select()
          .single();
        if (updateError) throw updateError;
        return res.status(200).json(updated);
      case "DELETE":
        const { error: deleteError } = await supabase.from("profiles").delete().eq("id", id);
        if (deleteError) throw deleteError;
        return res.status(200).end();
      default:
        res.setHeader("Allow", ["GET", "PUT", "DELETE"]);
        return res.status(405).end(`Method ${req.method} Not Allowed`);
    }
  } catch (error) {
    console.error("User API Error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}
</file>

<file path="src/pages/api/resource/users/index.ts">
import { PostgrestError } from "@supabase/supabase-js";
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-admin";
// Define the expected shape of the data returned by the query
interface MembershipWithDetails {
  profile_id: string;
  enterprise_id: string;
  role_id: string;
  profiles: {
    id: string;
    email: string | null;
    created_at: string | null;
    first_name: string | null;
    last_name: string | null;
    avatar_url: string | null;
    phone: string | null;
    // Add other profile fields if needed
  } | null; // Profile might be null if join fails or profile deleted
  roles: {
    name: string | null;
  } | null; // Role might be null
}
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const supabase = createClient({ req, res, query: {}, resolvedUrl: "" });
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  try {
    switch (req.method) {
      case "GET":
        // First get the user's membership to find their enterprise_id
        const { data: userMembership, error: membershipError } = await supabase
          .from("memberships")
          .select("enterprise_id")
          .eq("profile_id", user.id)
          .single();
        if (membershipError) {
          console.error("Membership Error:", membershipError);
          if (membershipError.code === "PGRST116") {
            // Resource not found
            return res.status(400).json({ error: "User is not associated with an enterprise" });
          }
          throw membershipError;
        }
        if (!userMembership?.enterprise_id) {
          return res.status(400).json({ error: "User is not associated with an enterprise" });
        }
        const enterpriseId = userMembership.enterprise_id;
        // Fetch memberships for the enterprise, joining profiles and roles
        const { data, error: fetchError } = (await supabase
          .from("memberships")
          .select(
            `
            profile_id,
            enterprise_id,
            role_id,
            profiles:profiles!inner (*),
            roles:roles!inner (name)
          `,
          )
          .eq("enterprise_id", enterpriseId)) as {
          data: MembershipWithDetails[] | null;
          error: PostgrestError | null;
        };
        // Use the correctly typed 'data' variable
        const membershipsWithDetails = data;
        if (fetchError) {
          console.error("Fetch Memberships with Details Error:", fetchError);
          throw fetchError;
        }
        // Transform the data to match the expected UserType structure
        const users =
          membershipsWithDetails
            ?.filter((m) => m.profiles && m.roles) // Filter out entries with null profiles or roles
            .map((m) => ({
              id: m.profiles!.id, // Use non-null assertion as we filtered nulls
              email: m.profiles!.email,
              role: m.roles!.name, // Use non-null assertion
              enterprise_id: m.enterprise_id,
              created_at: m.profiles!.created_at,
              first_name: m.profiles!.first_name,
              last_name: m.profiles!.last_name,
              avatar_url: m.profiles!.avatar_url,
              phone: m.profiles!.phone,
              // role_id: m.role_id
            })) || [];
        // Finally, fetch the profiles for these IDs
        /*
        const { data: users, error: fetchError } = await supabase
          .from("profiles")
          .select("*")
          .in("id", profileIds) // Use 'in' operator with the list of profile IDs
          .order("created_at", { ascending: false });
        if (fetchError) {
          console.error("Fetch Profiles Error:", fetchError);
          throw fetchError;
        }
        */
        return res.status(200).json(users);
      case "POST":
        // 1. Get the creator's enterprise_id from their membership
        const { data: creatorMembershipData, error: creatorMembershipErr } = await supabase
          .from("memberships")
          .select("enterprise_id")
          .eq("profile_id", user.id)
          .single();
        if (creatorMembershipErr) {
          console.error("Creator Membership Error:", creatorMembershipErr);
          if (creatorMembershipErr.code === "PGRST116") {
            return res.status(400).json({ error: "Creator is not associated with an enterprise" });
          }
          throw creatorMembershipErr;
        }
        if (!creatorMembershipData?.enterprise_id) {
          return res.status(400).json({ error: "Creator is not associated with an enterprise" });
        }
        const creatorEnterpriseId = creatorMembershipData.enterprise_id;
        const { email, password, role: roleName, first_name, last_name } = req.body; // Renamed role to roleName for clarity
        if (!email || !password || !roleName || !first_name || !last_name) {
          return res.status(400).json({
            error: "Missing required fields",
            details: "Email, password, role name, first name, and last name are required",
          });
        }
        // 2. Create the auth user
        const { data: authData, error: authError } = await supabase.auth.admin.createUser({
          email,
          password,
          email_confirm: true, // Auto-confirm email for simplicity, adjust if needed
        });
        if (authError) {
          console.error("Auth User Creation Error:", authError);
          // Handle specific errors like email already exists
          if (authError.message.includes("already registered")) {
            return res.status(409).json({ error: "User with this email already exists" });
          }
          throw authError;
        }
        if (!authData.user) {
          throw new Error("Failed to create auth user");
        }
        const newUserId = authData.user.id;
        // 4. Find the role_id based on the role name
        const { data: roleData, error: roleError } = await supabase
          .from("roles")
          .select("id")
          .eq("name", roleName)
          .single(); // Assume roles are pre-defined or managed elsewhere
        if (roleError || !roleData) {
          console.error("Role Lookup Error:", roleError);
          // Rollback Auth user creation if role lookup fails (profile assumed created by trigger)
          await supabase.auth.admin.deleteUser(newUserId);
          return res.status(400).json({ error: `Role '${roleName}' not found.` });
        }
        const roleId = roleData.id;
        // 5. Create the membership entry to link user, enterprise, and role
        const membershipData = {
          profile_id: newUserId,
          enterprise_id: creatorEnterpriseId,
          role_id: roleId,
        };
        const { error: createMembershipError } = await supabase
          .from("memberships")
          .insert(membershipData);
        if (createMembershipError) {
          console.error("Membership Creation Error:", createMembershipError);
          // Rollback Auth user creation if membership fails (profile assumed created by trigger)
          await supabase.auth.admin.deleteUser(newUserId);
          throw createMembershipError;
        }
        // Return the created profile information (or just a success status)
        return res.status(201).json({ id: newUserId, email, role: roleName }); // Return relevant info
      case "DELETE":
        const { ids } = req.body;
        // Verify requester's enterprise
        const { data: deleteRequesterMembershipData, error: deleteRequesterMembershipErr } =
          await supabase
            .from("memberships")
            .select("enterprise_id")
            .eq("profile_id", user.id)
            .single();
        if (deleteRequesterMembershipErr) throw deleteRequesterMembershipErr;
        if (!deleteRequesterMembershipData?.enterprise_id) {
          return res.status(400).json({ error: "User is not associated with an enterprise" });
        }
        const deleteRequesterEnterpriseId = deleteRequesterMembershipData.enterprise_id;
        // Optional: Verify all users to be deleted belong to the same enterprise
        // This requires fetching memberships for all `ids` and checking their enterprise_id
        // For simplicity, skipping this check for now, but consider adding it for security.
        // Delete the auth users (this should cascade delete profiles and memberships if set up correctly)
        const deletePromises = ids.map((id: string) => supabase.auth.admin.deleteUser(id));
        const results = await Promise.allSettled(deletePromises);
        const failedDeletes = results.filter((r) => r.status === "rejected");
        if (failedDeletes.length > 0) {
          console.error("Failed to delete some auth users:", failedDeletes);
          // Decide how to handle partial failures - maybe return a specific error
          throw new Error(`Failed to delete ${failedDeletes.length} users.`);
        }
        // No need to explicitly delete from profiles/memberships if cascade delete is configured on the foreign keys in the DB.
        // If not configured, you would need explicit deletes here:
        // await supabase.from("memberships").delete().in("profile_id", ids).eq("enterprise_id", requesterEnterpriseId);
        // await supabase.from("profiles").delete().in("id", ids);
        return res.status(200).json({ message: `${ids.length} users deleted successfully.` }); // Return success message
      default:
        res.setHeader("Allow", ["GET", "POST", "DELETE"]);
        return res.status(405).end(`Method ${req.method} Not Allowed`);
    }
  } catch (error) {
    console.error("Users API Error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}
</file>

<file path="src/pages/api/roles/list.ts">
import { sql } from "drizzle-orm";
import type { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/db/drizzle";
import { roles } from "@/db/schema";
type Data = {
  roles?: { name: string }[];
  error?: string;
};
export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  try {
    // TODO: Add pagination and filtering based on enterprise context if needed
    // Fetch distinct role names from the 'roles' table
    const distinctRolesData: { name: string }[] = await db
      .selectDistinct({
        name: roles.name,
      })
      .from(roles)
      .where(sql`${roles.name} is not null`);
    return res.status(200).json({ roles: distinctRolesData });
  } catch (error) {
    console.error("Error fetching roles:", error);
    return res.status(500).json({
      error: error instanceof Error ? error.message : "Error fetching roles",
    });
  }
}
</file>

<file path="src/pages/api/settings/update.ts">
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@/utils/supabase/server-props";
type SettingsUpdateResponse = {
  success: boolean;
  message?: string;
  data?: any;
};
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<SettingsUpdateResponse>,
) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, message: "Method not allowed" });
  }
  const supabase = createClient({
    req,
    res,
    query: {},
    resolvedUrl: "",
  });
  try {
    // First try to get the session from Supabase directly
    const {
      data: { user },
    } = await supabase.auth.getUser();
    // Get the user_id from either the session or the request body as fallback
    if (!user?.id) {
      return res.status(401).json({ success: false, message: "Unauthorized - No user ID found" });
    }
    // Remove user_id from body if it exists, keeping only the settings data
    const { user_id: _, ...settingsData } = req.body;
    // Update the profile with the new settings
    const { data, error } = await supabase
      .from("profiles")
      .update({
        full_name: settingsData.full_name || undefined,
        email: settingsData.email || undefined,
        user_settings: {
          // Preserve existing settings and update with new values
          ...(settingsData.user_settings || {}),
          timezone: settingsData.timezone || undefined,
          // Include any other fields from the request
          ...(settingsData.language ? { language: settingsData.language } : {}),
        },
      })
      .eq("id", user?.id)
      .select();
    // If email was updated, also update it in auth
    if (settingsData.email) {
      try {
        const { error: updateAuthError } = await supabase.auth.updateUser({
          email: settingsData.email,
        });
        if (updateAuthError) {
          console.warn("Warning: Email updated in profile but not in auth:", updateAuthError);
        }
      } catch (authError) {
        console.warn("Warning: Error updating email in auth:", authError);
      }
    }
    if (error) {
      console.error("Error updating settings in database:", error);
      return res.status(500).json({
        success: false,
        message: "Failed to update settings in database",
      });
    }
    // Return success response
    return res.status(200).json({
      success: true,
      message: "Settings updated successfully",
      data: data[0],
    });
  } catch (error) {
    console.error("Error updating settings:", error);
    return res.status(500).json({
      success: false,
      message: "Failed to update settings",
    });
  }
}
</file>

<file path="src/pages/api/templates/[id].ts">
import { NextApiRequest, NextApiResponse } from "next";
import { eq } from "drizzle-orm";
import { db } from "@/db/drizzle";
import { templates } from "@/db/schema";
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { id } = req.query;
  if (req.method === "PUT") {
    try {
      const { content } = req.body;
      // Validate content is valid JSON
      const parsedContent = JSON.parse(content);
      await db
        .update(templates)
        .set({ content: parsedContent })
        .where(eq(templates.id, id as string));
      return res.status(200).json({ message: "Template updated successfully" });
    } catch (error) {
      console.error("Template update error:", error);
      return res.status(500).json({ error: "Failed to update template" });
    }
  }
  return res.status(405).json({ error: "Method not allowed" });
}
</file>

<file path="src/pages/api/templates/archive.ts">
// this was the old src/pages/api/templates.ts
import { eq, desc } from "drizzle-orm";
import { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/db/drizzle";
import { templates } from "@/db/schema";
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    try {
      const user_id = req.query.user_id as string;
      if (!user_id) {
        return res.status(400).json({ error: "User ID is required" });
      }
      const result = await db
        .select()
        .from(templates)
        .where(eq(templates.user_id, user_id))
        .orderBy(desc(templates.created_at));
      return res.status(200).json(result);
    } catch (error) {
      return res.status(500).json({ error: "Failed to fetch templates" });
    }
  }
  if (req.method === "POST") {
    try {
      const { name, type, content, is_default, user_id, enterprise_id } = req.body;
      const result = await db.insert(templates).values({
        name,
        type,
        content: JSON.parse(content),
        is_default: is_default,
        user_id,
        enterprise_id,
      });
      return res.status(201).json(result);
    } catch (error) {
      return res.status(500).json({ error: "Failed to create template" });
    }
  }
  return res.status(405).json({ error: "Method not allowed" });
}
</file>

<file path="src/pages/api/templates/index.ts">
import { eq } from "drizzle-orm";
import { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/db/drizzle";
import { templates } from "@/db/schema";
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    try {
      const { user_id } = req.query;
      if (!user_id) {
        return res.status(400).json({ error: "User ID is required" });
      }
      const result = await db
        .select()
        .from(templates)
        .where(eq(templates.user_id, user_id as string));
      return res.status(200).json(result);
    } catch (error) {
      console.error("Template fetch error:", error);
      return res.status(500).json({
        error: "Failed to fetch templates",
        details: error instanceof Error ? error.message : String(error),
      });
    }
  }
  if (req.method === "POST") {
    try {
      const { name, type, content, is_default, user_id, enterprise_id } = req.body;
      // Validate required fields
      if (!name || !type || !content || !user_id) {
        return res.status(400).json({
          error: "Missing required fields",
          missing: {
            name: !name,
            type: !type,
            content: !content,
            user_id: !user_id,
          },
        });
      }
      // Validate template type
      if (!["invoice", "quote"].includes(type)) {
        return res.status(400).json({ error: "Invalid template type" });
      }
      // Ensure content is a valid object
      let parsedContent = content;
      if (typeof content === "string") {
        try {
          parsedContent = JSON.parse(content);
        } catch (e) {
          return res.status(400).json({
            error: "Invalid JSON content",
            details: e instanceof Error ? e.message : String(e),
          });
        }
      }
      // If setting as default, update existing default templates
      if (is_default) {
        await db.update(templates).set({ is_default: false }).where(eq(templates.user_id, user_id));
      }
      // Create new template
      const result = await db.insert(templates).values({
        name,
        type,
        content: parsedContent,
        is_default: is_default || false,
        user_id: user_id,
        enterprise_id: enterprise_id,
      });
      return res.status(201).json(result);
    } catch (error) {
      console.error("Template creation error details:", error);
      return res.status(500).json({
        error: "Failed to create template",
        details: error instanceof Error ? error.message : String(error),
      });
    }
  }
  return res.status(405).json({ error: "Method not allowed" });
}
</file>

<file path="src/pages/api/form-contact.ts">
import type { NextApiRequest, NextApiResponse } from "next";
import { v4 as uuid } from "uuid";
const WEBHOOK_URL = "https://n8n.sikka.io/webhook/0b3e87cc-533f-4754-889d-cd23a9b34aa5/contact";
export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (!WEBHOOK_URL) {
    return res.status(500).json({ error: "Webhook URL not configured" });
  }
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Entity-Ref-ID": uuid(),
        "x-form-secret": "bushky11",
      },
      body: JSON.stringify({
        title: "Contact Form Submission",
        name: req.body.name,
        email: req.body.email,
        content: req.body.content,
        timestamp: new Date().toISOString(),
      }),
    });
    if (!response.ok) {
      throw new Error(`Webhook responded with status: ${response.status}`);
    }
    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    console.error("Webhook error:", error);
    res.status(500).json({ error: "Failed to send data to webhook" });
  }
};
</file>

<file path="src/pages/api/user-info.ts">
import type { NextApiRequest, NextApiResponse } from "next";
import maxmind from "maxmind";
import path from "path";
import { UAParser } from "ua-parser-js";
type Data = {
  userAgent?: string;
  ip?: string;
  country?: string;
  city?: string;
  isMobile?: boolean;
  error?: string;
};
// Initialize MaxMind databases
let countryLookup: any;
let cityLookup: any;
async function loadDatabases() {
  if (!countryLookup || !cityLookup) {
    countryLookup = await maxmind.open(path.join(process.cwd(), "GeoLite2-Country.mmdb"));
    cityLookup = await maxmind.open(path.join(process.cwd(), "GeoLite2-City.mmdb"));
  }
}
function getClientIp(req: NextApiRequest): string {
  const cfConnectingIp = req.headers["cf-connecting-ip"];
  if (cfConnectingIp) {
    return Array.isArray(cfConnectingIp) ? cfConnectingIp[0] : cfConnectingIp;
  }
  const forwardedFor = req.headers["x-forwarded-for"];
  if (forwardedFor) {
    return (Array.isArray(forwardedFor) ? forwardedFor[0] : forwardedFor).split(",")[0].trim();
  }
  const realIp = req.headers["x-real-ip"];
  if (realIp) {
    return Array.isArray(realIp) ? realIp[0] : realIp;
  }
  return req.socket.remoteAddress || "0.0.0.0";
}
export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  try {
    await loadDatabases();
    const ip = getClientIp(req);
    const ua = req.headers["user-agent"] || "";
    const parser = new UAParser(ua);
    const isMobile = parser.getDevice().type === "mobile";
    const countryGeolocation = countryLookup?.get(ip);
    const cityGeolocation = cityLookup?.get(ip);
    return res.status(200).json({
      userAgent: parser.getResult().ua,
      ip,
      country: countryGeolocation?.country?.names?.en,
      city: cityGeolocation?.city?.names?.en,
      isMobile,
    });
  } catch (error) {
    console.error("Error processing user info:", error);
    return res.status(500).json({
      error: error instanceof Error ? error.message : "Error processing user info",
    });
  }
}
</file>

<file path="src/pages/branches/add.tsx">
import { useQueryClient } from "@tanstack/react-query";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import { createClient } from "@/utils/supabase/component";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { BranchForm } from "@/branch/branch.form";
import { branchKeys } from "@/branch/branch.hooks";
import useBranchStore from "@/branch/branch.store";
import useUserStore from "@/stores/use-user-store";
export default function AddBranchPage() {
  const supabase = createClient();
  const router = useRouter();
  const t = useTranslations();
  const queryClient = useQueryClient();
  const { user } = useUserStore();
  const setIsLoading = useBranchStore((state) => state.setIsLoading);
  const isLoading = useBranchStore((state) => state.isLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).branchForm;
    if (form) {
      form.setValue("name", dummyData.full_name);
      form.setValue("code", "BR-" + Math.random().toString(36).substr(2, 6));
      form.setValue("email", dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("address", dummyData.address);
      form.setValue("city", dummyData.city);
      form.setValue("state", dummyData.state);
      form.setValue("zip_code", dummyData.zip_code);
      form.setValue("manager", dummyData.full_name);
      form.setValue("is_active", true);
      form.setValue("notes", "Test branch notes");
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Branches.success.created"),
    });
    router.push("/branches");
    setIsLoading(false);
  };
  return (
    <div>
      <CustomPageMeta title={t("Branches.add_new")} />
      <PageTitle
        formButtons
        formId="branch-form"
        loading={isLoading}
        onCancel={() => router.push("/branches")}
        texts={{
          title: t("Branches.add_new"),
          submit_form: t("Branches.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <BranchForm id="branch-form" onSuccess={onAddSuccess} />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/branches/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import BranchCard from "@/branch/branch.card";
import { BranchForm } from "@/branch/branch.form";
import { useBranches, useBulkDeleteBranches, useDuplicateBranch } from "@/branch/branch.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/branch/branch.options";
import useBranchStore from "@/branch/branch.store";
import BranchesTable from "@/branch/branch.table";
import { BranchUpdateData } from "@/branch/branch.type";
import useUserStore from "@/stores/use-user-store";
export default function BranchesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadBranches = useUserStore((state) => state.hasPermission("branches.read"));
  const canCreateBranches = useUserStore((state) => state.hasPermission("branches.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableBranch, setActionableBranch] = useState<BranchUpdateData | null>(null);
  const loadingSaveBranch = useBranchStore((state) => state.isLoading);
  const setLoadingSaveBranch = useBranchStore((state) => state.setIsLoading);
  const viewMode = useBranchStore((state) => state.viewMode);
  const isDeleteDialogOpen = useBranchStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useBranchStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useBranchStore((state) => state.selectedRows);
  const setSelectedRows = useBranchStore((state) => state.setSelectedRows);
  const clearSelection = useBranchStore((state) => state.clearSelection);
  const sortRules = useBranchStore((state) => state.sortRules);
  const sortCaseSensitive = useBranchStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useBranchStore((state) => state.sortNullsFirst);
  const searchQuery = useBranchStore((state) => state.searchQuery);
  const filterConditions = useBranchStore((state) => state.filterConditions);
  const filterCaseSensitive = useBranchStore((state) => state.filterCaseSensitive);
  const getFilteredBranches = useBranchStore((state) => state.getFilteredData);
  const getSortedBranches = useBranchStore((state) => state.getSortedData);
  const { data: branches, isLoading: loadingFetchBranches, error } = useBranches();
  const { mutate: duplicateBranch } = useDuplicateBranch();
  const { mutateAsync: deleteBranches, isPending: isDeleting } = useBulkDeleteBranches();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: branches,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableBranch,
    duplicateMutation: duplicateBranch,
    moduleName: "Branches",
  });
  const handleConfirmDelete = createDeleteHandler(deleteBranches, {
    loading: "Branches.loading.deleting",
    success: "Branches.success.deleted",
    error: "Branches.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredBranches = useMemo(() => {
    return getFilteredBranches(branches || []);
  }, [branches, getFilteredBranches, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedBranches = useMemo(() => {
    return getSortedBranches(filteredBranches);
  }, [filteredBranches, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadBranches) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Branches.title")} description={t("Branches.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useBranchStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Branches.title")}
            onAddClick={canCreateBranches ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Branches.create_branch")}
            searchPlaceholder={t("Branches.search_branches")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <BranchesTable
              data={sortedBranches}
              isLoading={loadingFetchBranches}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedBranches}
                isLoading={loadingFetchBranches}
                error={error as Error | null}
                emptyMessage={t("Branches.no_branches_found")}
                renderItem={(branch) => <BranchCard key={branch.id} branch={branch} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Branches.add_new")}
          formId="branch-form"
          loadingSave={loadingSaveBranch}
        >
          <BranchForm
            id={"branch-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableBranch(null);
              setLoadingSaveBranch(false);
              toast.success(t("General.successful_operation"), {
                description: t("Branches.success.updated"),
              });
            }}
            defaultValues={actionableBranch}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Branches.confirm_delete")}
          description={t("Branches.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/clients/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { ClientForm } from "@/client/client.form";
import useClientStore from "@/client/client.store";
export default function AddClientPage() {
  const router = useRouter();
  const t = useTranslations();
  const setIsLoading = useClientStore((state) => state.setIsLoading);
  const isLoading = useClientStore((state) => state.isLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).clientForm;
    if (form) {
      form.setValue("name", dummyData.full_name);
      form.setValue("email", dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("address", dummyData.address);
      form.setValue("city", dummyData.city);
      form.setValue("state", dummyData.state);
      form.setValue("zip_code", dummyData.zip_code);
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Clients.success.created"),
    });
    router.push("/clients");
    setIsLoading(false);
  };
  return (
    <div>
      <CustomPageMeta title={t("Clients.add_new")} />
      <PageTitle
        formButtons
        formId="client-form"
        loading={isLoading}
        onCancel={() => router.push("/clients")}
        dummyButton={handleDummyData}
        texts={{
          title: t("Clients.add_new"),
          submit_form: t("Clients.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <ClientForm id="client-form" loading={isLoading} onSuccess={onAddSuccess} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/clients/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import ClientCard from "@/client/client.card";
import { ClientForm } from "@/client/client.form";
import { useClients, useBulkDeleteClients, useDuplicateClient } from "@/client/client.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/client/client.options";
import useClientStore from "@/client/client.store";
import ClientsTable from "@/client/client.table";
import { ClientUpdateData } from "@/client/client.type";
import useUserStore from "@/stores/use-user-store";
export default function ClientsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadClients = useUserStore((state) => state.hasPermission("clients.read"));
  const canCreateClients = useUserStore((state) => state.hasPermission("clients.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableClient, setActionableClient] = useState<ClientUpdateData | null>(null);
  const loadingSaveClient = useClientStore((state) => state.isLoading);
  const setLoadingSaveClient = useClientStore((state) => state.setIsLoading);
  const viewMode = useClientStore((state) => state.viewMode);
  const isDeleteDialogOpen = useClientStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useClientStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useClientStore((state) => state.selectedRows);
  const setSelectedRows = useClientStore((state) => state.setSelectedRows);
  const clearSelection = useClientStore((state) => state.clearSelection);
  const sortRules = useClientStore((state) => state.sortRules);
  const sortCaseSensitive = useClientStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useClientStore((state) => state.sortNullsFirst);
  const searchQuery = useClientStore((state) => state.searchQuery);
  const filterConditions = useClientStore((state) => state.filterConditions);
  const filterCaseSensitive = useClientStore((state) => state.filterCaseSensitive);
  const getFilteredClients = useClientStore((state) => state.getFilteredData);
  const getSortedClients = useClientStore((state) => state.getSortedData);
  const { data: clients, isLoading, error } = useClients();
  const { mutate: duplicateClient } = useDuplicateClient();
  const { mutateAsync: deleteClients, isPending: isDeleting } = useBulkDeleteClients();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: clients,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableClient,
    duplicateMutation: duplicateClient,
    moduleName: "Clients",
  });
  const handleConfirmDelete = createDeleteHandler(deleteClients, {
    loading: "Clients.loading.deleting",
    success: "Clients.success.deleted",
    error: "Clients.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredClients = useMemo(() => {
    return getFilteredClients(clients || []);
  }, [clients, getFilteredClients, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedClients = useMemo(() => {
    return getSortedClients(filteredClients);
  }, [filteredClients, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadClients) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Clients.title")} description={t("Clients.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useClientStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Clients.title")}
            onAddClick={canCreateClients ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Clients.add_new")}
            searchPlaceholder={t("Clients.search_clients")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <ClientsTable
              key={`sorted-${sortedClients?.length}-${JSON.stringify(sortRules)}`}
              data={sortedClients || []}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedClients || []}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Clients.no_clients_found")}
                renderItem={(client) => <ClientCard client={client} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Clients.add_new")}
          formId="client-form"
          loadingSave={loadingSaveClient}
        >
          <ClientForm
            id={"client-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableClient(null);
              setLoadingSaveClient(false);
              toast.success(t("General.successful_operation"), {
                description: t("Clients.success.updated"),
              });
            }}
            defaultValues={actionableClient}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Clients.confirm_delete_title")}
          description={t("Clients.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/companies/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { CompanyForm } from "@/company/company.form";
import useCompanyStore from "@/company/company.store";
export default function AddCompanyPage() {
  const t = useTranslations();
  const router = useRouter();
  const setIsLoading = useCompanyStore((state) => state.setIsLoading);
  const isLoading = useCompanyStore((state) => state.isLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).companyForm;
    if (form) {
      form.setValue("name", dummyData.full_name);
      form.setValue("email", dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("street_name", dummyData.address);
      form.setValue("city", dummyData.city);
      form.setValue("region", "Eastern");
      form.setValue("zip_code", dummyData.zip_code);
      form.setValue("building_number", dummyData.randomNumber);
      form.setValue("additional_number", dummyData.randomNumber);
      form.setValue("industry", dummyData.randomString);
      form.setValue("size", dummyData.randomNumber);
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Companies.success.created"),
    });
    router.push("/companies");
    setIsLoading(false);
  };
  return (
    <div>
      <CustomPageMeta title={t("Companies.add_new")} />
      <PageTitle
        formButtons
        formId="company-form"
        loading={isLoading}
        onCancel={() => router.push("/companies")}
        dummyButton={handleDummyData}
        texts={{
          title: t("Companies.add_new"),
          submit_form: t("Companies.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <CompanyForm id="company-form" onSuccess={onAddSuccess} />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/companies/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import CompanyCard from "@/company/company.card";
import { CompanyForm } from "@/company/company.form";
import { useCompanies, useBulkDeleteCompanies, useDuplicateCompany } from "@/company/company.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/company/company.options";
import useCompanyStore from "@/company/company.store";
import CompaniesTable from "@/company/company.table";
import { CompanyUpdateData } from "@/company/company.type";
import useUserStore from "@/stores/use-user-store";
export default function CompaniesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadCompanies = useUserStore((state) => state.hasPermission("companies.read"));
  const canCreateCompanies = useUserStore((state) => state.hasPermission("companies.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableCompany, setActionableCompany] = useState<CompanyUpdateData | null>(null);
  const loadingSaveCompany = useCompanyStore((state) => state.isLoading);
  const setLoadingSaveCompany = useCompanyStore((state) => state.setIsLoading);
  const viewMode = useCompanyStore((state) => state.viewMode);
  const isDeleteDialogOpen = useCompanyStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useCompanyStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useCompanyStore((state) => state.selectedRows);
  const setSelectedRows = useCompanyStore((state) => state.setSelectedRows);
  const clearSelection = useCompanyStore((state) => state.clearSelection);
  const sortRules = useCompanyStore((state) => state.sortRules);
  const sortCaseSensitive = useCompanyStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useCompanyStore((state) => state.sortNullsFirst);
  const searchQuery = useCompanyStore((state) => state.searchQuery);
  const filterConditions = useCompanyStore((state) => state.filterConditions);
  const filterCaseSensitive = useCompanyStore((state) => state.filterCaseSensitive);
  const getFilteredCompanies = useCompanyStore((state) => state.getFilteredData);
  const getSortedCompanies = useCompanyStore((state) => state.getSortedData);
  const { data: companies, isLoading: loadingFetchCompanies, error } = useCompanies();
  const { mutate: duplicateCompany } = useDuplicateCompany();
  const { mutateAsync: deleteCompanies, isPending: isDeleting } = useBulkDeleteCompanies();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: companies,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableCompany,
    duplicateMutation: duplicateCompany,
    moduleName: "Companies",
  });
  const handleConfirmDelete = createDeleteHandler(deleteCompanies, {
    loading: "Companies.loading.deleting",
    success: "Companies.success.deleted",
    error: "Companies.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredCompanies = useMemo(() => {
    return getFilteredCompanies(companies || []);
  }, [companies, getFilteredCompanies, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedCompanies = useMemo(() => {
    return getSortedCompanies(filteredCompanies);
  }, [filteredCompanies, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadCompanies) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Companies.title")} description={t("Companies.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useCompanyStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Companies.title")}
            onAddClick={
              canCreateCompanies ? () => router.push(router.pathname + "/add") : undefined
            }
            createLabel={t("Companies.create_company")}
            searchPlaceholder={t("Companies.search_companies")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <CompaniesTable
              data={sortedCompanies}
              isLoading={loadingFetchCompanies}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedCompanies}
                isLoading={loadingFetchCompanies}
                error={error as Error | null}
                emptyMessage={t("Companies.no_companies_found")}
                renderItem={(company) => <CompanyCard key={company.id} company={company} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Companies.add_new")}
          formId="company-form"
          loadingSave={loadingSaveCompany}
        >
          <CompanyForm
            id={"company-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableCompany(null);
              setLoadingSaveCompany(false);
              toast.success(t("General.successful_operation"), {
                description: t("Companies.success.updated"),
              });
            }}
            defaultValues={actionableCompany}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Companies.confirm_delete")}
          description={t("Companies.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/departments/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import DepartmentForm from "@/department/department.form";
import useDepartmentStore from "@/department/department.store";
export default function AddDepartmentPage() {
  const router = useRouter();
  const t = useTranslations();
  const setIsLoading = useDepartmentStore((state) => state.setIsLoading);
  const isLoading = useDepartmentStore((state) => state.isLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).departmentForm;
    if (form) {
      form.setValue("name", dummyData.job_department);
      form.setValue("description", dummyData.description);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Departments.add_new")} />
      <PageTitle
        formButtons
        formId="department-form"
        loading={isLoading}
        onCancel={() => router.push("/departments")}
        dummyButton={handleDummyData}
        texts={{
          title: t("Departments.add_new"),
          submit_form: t("Departments.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <DepartmentForm
          id="department-form"
          onSuccess={() =>
            router.push("/departments").then(() => {
              setIsLoading(false);
            })
          }
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/departments/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import DepartmentCard from "@/department/department.card";
import DepartmentForm from "@/department/department.form";
import {
  useDepartments,
  useBulkDeleteDepartments,
  useDuplicateDepartment,
} from "@/department/department.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/department/department.options";
import useDepartmentsStore from "@/department/department.store";
import DepartmentsTable from "@/department/department.table";
import { Department } from "@/department/department.type";
import useUserStore from "@/stores/use-user-store";
export default function DepartmentsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadDepartments = useUserStore((state) => state.hasPermission("departments.read"));
  const canCreateDepartments = useUserStore((state) => state.hasPermission("departments.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableDepartment, setActionableDepartment] = useState<Department | null>(null);
  const loadingSaveDepartment = useDepartmentsStore((state) => state.isLoading);
  const setLoadingSaveDepartment = useDepartmentsStore((state) => state.setIsLoading);
  const viewMode = useDepartmentsStore((state) => state.viewMode);
  const isDeleteDialogOpen = useDepartmentsStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useDepartmentsStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useDepartmentsStore((state) => state.selectedRows);
  const setSelectedRows = useDepartmentsStore((state) => state.setSelectedRows);
  const clearSelection = useDepartmentsStore((state) => state.clearSelection);
  const sortRules = useDepartmentsStore((state) => state.sortRules);
  const sortCaseSensitive = useDepartmentsStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useDepartmentsStore((state) => state.sortNullsFirst);
  const searchQuery = useDepartmentsStore((state) => state.searchQuery);
  const filterConditions = useDepartmentsStore((state) => state.filterConditions);
  const filterCaseSensitive = useDepartmentsStore((state) => state.filterCaseSensitive);
  const getFilteredDepartments = useDepartmentsStore((state) => state.getFilteredData);
  const getSortedDepartments = useDepartmentsStore((state) => state.getSortedData);
  const { data: departments, isLoading, error } = useDepartments();
  const { mutate: duplicateDepartment } = useDuplicateDepartment();
  const { mutateAsync: deleteDepartments, isPending: isDeleting } = useBulkDeleteDepartments();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: departments,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableDepartment,
    duplicateMutation: duplicateDepartment,
    moduleName: "Departments",
  });
  const handleConfirmDelete = createDeleteHandler(deleteDepartments, {
    loading: "Departments.loading.deleting",
    success: "Departments.success.deleted",
    error: "Departments.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredDepartments = useMemo(() => {
    return getFilteredDepartments(departments || []);
  }, [departments, getFilteredDepartments, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedDepartments = useMemo(() => {
    return getSortedDepartments(filteredDepartments);
  }, [filteredDepartments, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadDepartments) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Departments.title")} description={t("Departments.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useDepartmentsStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Departments.title")}
            onAddClick={
              canCreateDepartments ? () => router.push(router.pathname + "/add") : undefined
            }
            createLabel={t("Departments.add_new")}
            searchPlaceholder={t("Departments.search_departments")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <DepartmentsTable
              data={sortedDepartments}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedDepartments}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Departments.no_departments_found")}
                renderItem={(department) => (
                  <DepartmentCard key={department.id} department={department} />
                )}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Departments.edit")}
          formId="department-form"
          loadingSave={loadingSaveDepartment}
        >
          <DepartmentForm
            id="department-form"
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableDepartment(null);
              setLoadingSaveDepartment(false);
              toast.success(t("General.successful_operation"), {
                description: t("Departments.success.updated"),
              });
            }}
            defaultValues={actionableDepartment}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Departments.confirm_delete_title")}
          description={t("Departments.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/employee-requests/add.tsx">
import { useQueryClient } from "@tanstack/react-query";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import { createClient } from "@/utils/supabase/component";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { employeeKeys } from "@/employee/employee.hooks";
import EmployeeRequestForm, {
  type EmployeeRequestFormValues,
} from "@/employee-request/employee-request.form";
import { createEmployeeRequest } from "@/employee-request/employee-request.service";
import useEmployeeRequestsStore from "@/employee-request/employee-request.store";
import useUserStore from "@/stores/use-user-store";
export default function AddEmployeeRequestPage() {
  const supabase = createClient();
  const router = useRouter();
  const t = useTranslations();
  const setLoadingSave = useEmployeeRequestsStore((state) => state.setIsLoading);
  const loadingSave = useEmployeeRequestsStore((state) => state.isLoading);
  const queryClient = useQueryClient();
  const { user } = useUserStore();
  const handleSubmit = async (data: EmployeeRequestFormValues) => {
    try {
      setLoadingSave(true);
      // Check if user ID is available
      if (!user?.id) {
        throw new Error(t("EmployeeRequests.error.not_authenticated"));
      }
      // const { data: newRequest, error } = await supabase
      //   .from("employee_requests")
      //   .insert([
      //     {
      //       employee_id: data.employee_id,
      //       type: data.type,
      //       status: data.status,
      //       title: data.title,
      //       description: data.description,
      //       notes: data.notes,
      //       user_id: user?.id,
      //     },
      //   ])
      //   .select()
      //   .single();
      // if (error) throw error;
      const newRequest = await createEmployeeRequest({
        title: data.title.trim(),
        description: data.description?.trim() || undefined,
        notes: data.notes?.trim() || undefined,
        type: data.type as "leave" | "expense" | "document" | "other",
        start_date: data.start_date?.toISOString() || undefined,
        end_date: data.end_date?.toISOString() || undefined,
        amount: data.amount || undefined,
        employee_id: data.employee_id,
        status: data.status || "pending",
      });
      toast.success(t("General.successful_operation"), {
        description: t("EmployeeRequests.success.created"),
      });
      const previousRequests = queryClient.getQueryData(employeeKeys.lists()) || [];
      queryClient.setQueryData(employeeKeys.lists(), [
        ...(Array.isArray(previousRequests) ? previousRequests : []),
        newRequest,
      ]);
      router.push("/employee-requests");
      setLoadingSave(false);
    } catch (error) {
      setLoadingSave(false);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("EmployeeRequests.error.creating"),
      });
    }
  };
  const handleDummyData = () => {};
  return (
    <div>
      <CustomPageMeta title={t("EmployeeRequests.add_new")} />
      <PageTitle
        formButtons
        formId="employee-request-form"
        loading={loadingSave}
        onCancel={() => router.push("/employee-requests")}
        texts={{
          title: t("EmployeeRequests.add_new"),
          submit_form: t("EmployeeRequests.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <EmployeeRequestForm id="employee-request-form" onSubmit={handleSubmit} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/employee-requests/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import EmployeeRequestCard from "@/employee-request/employee-request.card";
import {
  useEmployeeRequests,
  useBulkDeleteEmployeeRequests,
  useDuplicateEmployeeRequest,
} from "@/employee-request/employee-request.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/employee-request/employee-request.options";
import useEmployeeRequestsStore from "@/employee-request/employee-request.store";
import EmployeeRequestsTable from "@/employee-request/employee-request.table";
import { EmployeeRequestUpdateData } from "@/employee-request/employee-request.type";
import useUserStore from "@/stores/use-user-store";
export default function EmployeeRequestsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadEmployeeRequests = useUserStore((state) =>
    state.hasPermission("employee-requests.read"),
  );
  const canCreateEmployeeRequests = useUserStore((state) =>
    state.hasPermission("employee-requests.create"),
  );
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableEmployeeRequest, setActionableEmployeeRequest] =
    useState<EmployeeRequestUpdateData | null>(null);
  const viewMode = useEmployeeRequestsStore((state) => state.viewMode);
  const isDeleteDialogOpen = useEmployeeRequestsStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useEmployeeRequestsStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useEmployeeRequestsStore((state) => state.selectedRows);
  const setSelectedRows = useEmployeeRequestsStore((state) => state.setSelectedRows);
  const clearSelection = useEmployeeRequestsStore((state) => state.clearSelection);
  const sortRules = useEmployeeRequestsStore((state) => state.sortRules);
  const sortCaseSensitive = useEmployeeRequestsStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useEmployeeRequestsStore((state) => state.sortNullsFirst);
  const searchQuery = useEmployeeRequestsStore((state) => state.searchQuery);
  const filterConditions = useEmployeeRequestsStore((state) => state.filterConditions);
  const filterCaseSensitive = useEmployeeRequestsStore((state) => state.filterCaseSensitive);
  const getFilteredEmployeeRequests = useEmployeeRequestsStore((state) => state.getFilteredData);
  const getSortedEmployeeRequests = useEmployeeRequestsStore((state) => state.getSortedData);
  const { data: requests, isLoading, error } = useEmployeeRequests();
  const { mutateAsync: deleteEmployeeRequests, isPending: isDeleting } =
    useBulkDeleteEmployeeRequests();
  const { mutate: duplicateEmployeeRequest } = useDuplicateEmployeeRequest();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: requests,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableEmployeeRequest,
    duplicateMutation: duplicateEmployeeRequest,
    moduleName: "EmployeeRequests",
  });
  const handleConfirmDelete = createDeleteHandler(deleteEmployeeRequests, {
    loading: "EmployeeRequests.loading.deleting",
    success: "EmployeeRequests.success.deleted",
    error: "EmployeeRequests.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredEmployeeRequests = useMemo(() => {
    return getFilteredEmployeeRequests(requests || []);
  }, [requests, getFilteredEmployeeRequests, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedEmployeeRequests = useMemo(() => {
    return getSortedEmployeeRequests(filteredEmployeeRequests);
  }, [filteredEmployeeRequests, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadEmployeeRequests) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta
        title={t("EmployeeRequests.title")}
        description={t("EmployeeRequests.description")}
      />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useEmployeeRequestsStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("EmployeeRequests.title")}
            onAddClick={
              canCreateEmployeeRequests ? () => router.push(router.pathname + "/add") : undefined
            }
            createLabel={t("EmployeeRequests.add_new")}
            searchPlaceholder={t("EmployeeRequests.search_requests")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <EmployeeRequestsTable
              data={sortedEmployeeRequests}
              isLoading={isLoading}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedEmployeeRequests}
                isLoading={isLoading}
                error={error as Error | null}
                emptyMessage={t("EmployeeRequests.no_requests")}
                addFirstItemMessage={t("EmployeeRequests.add_first_request")}
                renderItem={(request) => <EmployeeRequestCard employeeRequest={request} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("EmployeeRequests.delete.title")}
          description={t("EmployeeRequests.delete.description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/employees/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { EmployeeForm } from "@/employee/employee.form";
import useEmployeesStore from "@/employee/employee.store";
export default function AddEmployeePage() {
  const t = useTranslations();
  const router = useRouter();
  const setLoadingSave = useEmployeesStore((state) => state.setIsLoading);
  const loadingSave = useEmployeesStore((state) => state.isLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).employeeForm;
    if (form) {
      form.setValue("first_name", dummyData.first_name);
      form.setValue("last_name", dummyData.last_name);
      form.setValue("email", dummyData.randomNumber + dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("position", dummyData.employee_position);
      form.setValue("hire_date", dummyData.employee_hire_date);
      form.setValue("salary", dummyData.randomNumber);
      form.setValue("status", dummyData.employee_status);
      form.setValue("notes", dummyData.employee_notes);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Employees.add_new")} />
      <PageTitle
        formButtons
        formId="employee-form"
        loading={loadingSave}
        onCancel={() => router.push("/employees")}
        texts={{
          title: t("Employees.add_new"),
          submit_form: t("Employees.add_new"),
          cancel: t("General.cancel"),
        }}
        customButton={
          process.env.NODE_ENV === "development" && (
            <Button variant="outline" size="sm" onClick={handleDummyData}>
              Dummy Data
            </Button>
          )
        }
      />
      <div className="mx-auto max-w-2xl p-4">
        <EmployeeForm
          id="employee-form"
          onSuccess={() =>
            router.push("/employees").then(() => {
              setLoadingSave(false);
            })
          }
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/employees/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import EmployeeCard from "@/employee/employee.card";
import {
  useEmployees,
  useBulkDeleteEmployees,
  useDuplicateEmployee,
} from "@/employee/employee.hooks";
import { SORTABLE_COLUMNS, FILTERABLE_FIELDS } from "@/employee/employee.options";
import useEmployeesStore from "@/employee/employee.store";
import EmployeesTable from "@/employee/employee.table";
import { Employee } from "@/modules/employee/employee.types";
import useUserStore from "@/stores/use-user-store";
export default function EmployeesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadEmployees = useUserStore((state) => state.hasPermission("employees.read"));
  const canCreateEmployees = useUserStore((state) => state.hasPermission("employees.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableEmployee, setActionableEmployee] = useState<Employee | null>(null);
  const viewMode = useEmployeesStore((state) => state.viewMode);
  const isDeleteDialogOpen = useEmployeesStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useEmployeesStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useEmployeesStore((state) => state.selectedRows);
  const setSelectedRows = useEmployeesStore((state) => state.setSelectedRows);
  const clearSelection = useEmployeesStore((state) => state.clearSelection);
  const sortRules = useEmployeesStore((state) => state.sortRules);
  const sortCaseSensitive = useEmployeesStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useEmployeesStore((state) => state.sortNullsFirst);
  const searchQuery = useEmployeesStore((state) => state.searchQuery);
  const filterConditions = useEmployeesStore((state) => state.filterConditions);
  const filterCaseSensitive = useEmployeesStore((state) => state.filterCaseSensitive);
  const getFilteredEmployees = useEmployeesStore((state) => state.getFilteredData);
  const getSortedEmployees = useEmployeesStore((state) => state.getSortedData);
  const { data: employees, isLoading, error } = useEmployees();
  const { mutateAsync: deleteEmployees, isPending: isDeleting } = useBulkDeleteEmployees();
  const { mutate: duplicateEmployee } = useDuplicateEmployee();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: employees,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableEmployee,
    duplicateMutation: duplicateEmployee,
    moduleName: "Employees",
  });
  const handleConfirmDelete = createDeleteHandler(deleteEmployees, {
    loading: "Employees.loading.deleting",
    success: "Employees.success.deleted",
    error: "Employees.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredEmployees = useMemo(() => {
    return getFilteredEmployees(employees || []);
  }, [employees, getFilteredEmployees, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedEmployees = useMemo(() => {
    return getSortedEmployees(filteredEmployees);
  }, [filteredEmployees, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadEmployees) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Employees.title")} description={t("Employees.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useEmployeesStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Employees.title")}
            onAddClick={
              canCreateEmployees ? () => router.push(router.pathname + "/add") : undefined
            }
            createLabel={t("Employees.add_new")}
            searchPlaceholder={t("Employees.search_employees")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <EmployeesTable
              data={filteredEmployees || []}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={filteredEmployees || []}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Employees.no_employees_found")}
                renderItem={(employee) => <EmployeeCard employee={employee} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Employees.confirm_delete_title")}
          description={t("Employees.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/expenses/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { ExpenseForm } from "@/expense/expense.form";
import useExpenseStore from "@/expense/expense.store";
export default function AddExpensePage() {
  const t = useTranslations();
  const router = useRouter();
  const isLoading = useExpenseStore((state) => state.isLoading);
  const setIsLoading = useExpenseStore((state) => state.setIsLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).expenseForm;
    if (form) {
      form.setValue("expense_number", dummyData.stringNumber);
      form.setValue("issue_date", dummyData.randomDate);
      form.setValue("due_date", dummyData.randomDate);
      form.setValue("amount", dummyData.randomNumber);
      form.setValue("category", dummyData.expense_category);
      form.setValue("notes", dummyData.randomString);
      form.setValue("status", dummyData.pick(["pending", "paid", "overdue"]));
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Expenses.success.created"),
    });
    router.push("/expenses");
    setIsLoading(false);
  };
  return (
    <div>
      <CustomPageMeta title={t("Expenses.add_new")} />
      <PageTitle
        formButtons
        formId="expense-form"
        loading={isLoading}
        onCancel={() => router.push("/expenses")}
        texts={{
          title: t("Expenses.add_new"),
          submit_form: t("Expenses.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <div className="mx-auto max-w-2xl p-4">
        <ExpenseForm id="expense-form" onSuccess={onAddSuccess} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/expenses/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import ExpenseCard from "@/expense/expense.card";
import { ExpenseForm } from "@/expense/expense.form";
import { useExpenses, useBulkDeleteExpenses, useDuplicateExpense } from "@/expense/expense.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/expense/expense.options";
import useExpenseStore from "@/expense/expense.store";
import ExpensesTable from "@/expense/expense.table";
import { ExpenseUpdateData } from "@/expense/expense.type";
import useUserStore from "@/stores/use-user-store";
export default function ExpensesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadExpenses = useUserStore((state) => state.hasPermission("expenses.read"));
  const canCreateExpenses = useUserStore((state) => state.hasPermission("expenses.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableExpense, setActionableExpense] = useState<ExpenseUpdateData | null>(null);
  const loadingSaveExpense = useExpenseStore((state) => state.isLoading);
  const setLoadingSaveExpense = useExpenseStore((state) => state.setIsLoading);
  const viewMode = useExpenseStore((state) => state.viewMode);
  const isDeleteDialogOpen = useExpenseStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useExpenseStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useExpenseStore((state) => state.selectedRows);
  const setSelectedRows = useExpenseStore((state) => state.setSelectedRows);
  const clearSelection = useExpenseStore((state) => state.clearSelection);
  const sortRules = useExpenseStore((state) => state.sortRules);
  const sortCaseSensitive = useExpenseStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useExpenseStore((state) => state.sortNullsFirst);
  const searchQuery = useExpenseStore((state) => state.searchQuery);
  const filterConditions = useExpenseStore((state) => state.filterConditions);
  const filterCaseSensitive = useExpenseStore((state) => state.filterCaseSensitive);
  const getFilteredExpenses = useExpenseStore((state) => state.getFilteredData);
  const getSortedExpenses = useExpenseStore((state) => state.getSortedData);
  const { data: expenses, isLoading: loadingFetchExpenses, error } = useExpenses();
  const { mutateAsync: deleteExpenses, isPending: isDeleting } = useBulkDeleteExpenses();
  const { mutate: duplicateExpense } = useDuplicateExpense();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: expenses,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableExpense,
    duplicateMutation: duplicateExpense,
    moduleName: "Expenses",
  });
  const handleConfirmDelete = createDeleteHandler(deleteExpenses, {
    loading: "Expenses.loading.deleting",
    success: "Expenses.success.deleted",
    error: "Expenses.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredExpenses = useMemo(() => {
    return getFilteredExpenses(expenses || []);
  }, [expenses, getFilteredExpenses, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedExpenses = useMemo(() => {
    return getSortedExpenses(filteredExpenses);
  }, [filteredExpenses, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadExpenses) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Expenses.title")} description={t("Expenses.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useExpenseStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Expenses.title")}
            onAddClick={canCreateExpenses ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Expenses.add_new")}
            searchPlaceholder={t("Expenses.search_expenses")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <ExpensesTable
              data={sortedExpenses}
              isLoading={loadingFetchExpenses}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedExpenses}
                isLoading={loadingFetchExpenses}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Expenses.no_expenses_found")}
                renderItem={(expense) => <ExpenseCard expense={expense} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Expenses.add_new")}
          formId="expense-form"
          loadingSave={loadingSaveExpense}
        >
          <ExpenseForm
            id={"expense-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableExpense(null);
              setLoadingSaveExpense(false);
              toast.success(t("General.successful_operation"), {
                description: t("Expenses.success.updated"),
              });
            }}
            defaultValues={actionableExpense}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Expenses.confirm_delete_title")}
          description={t("Expenses.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/invoices/add.tsx">
import { format } from "date-fns";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { InvoiceForm, type InvoiceFormValues } from "@/invoice/invoice.form";
export default function AddInvoicePage() {
  const t = useTranslations();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const handleSubmit = async (data: InvoiceFormValues) => {
    setLoading(true);
    try {
      // Calculate final amounts
      const subtotal = data.subtotal;
      const tax_amount = (subtotal * data.tax_rate) / 100;
      const total = subtotal + tax_amount;
      // Format dates to ISO string (YYYY-MM-DD)
      const formattedIssueDate = format(data.issue_date, "yyyy-MM-dd");
      const formattedDueDate = format(data.due_date, "yyyy-MM-dd");
      // Prepare data payload for the API
      const payload = {
        client_id: data.client_id,
        invoice_number: data.invoice_number.trim(),
        issue_date: formattedIssueDate,
        due_date: formattedDueDate,
        status: data.status,
        subtotal: subtotal,
        tax_rate: data.tax_rate,
        notes: data.notes?.trim() || null,
        items: data.items.map((item) => ({
          product_id: item.product_id || null,
          description: item.description || "",
          quantity: parseFloat(item.quantity),
          unit_price: parseFloat(item.unit_price),
        })),
      };
      // Call the API endpoint
      const response = await fetch("/api/resource/invoices", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `API Error: ${response.statusText}`);
      }
      toast.success(t("General.successful_operation"), {
        description: t("Invoices.success.created"),
      });
      router.push("/invoices");
    } catch (error) {
      console.error("Error creating invoice:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Invoices.error.create"),
      });
    } finally {
      setLoading(false);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Invoices.add_new")} />
      <PageTitle
        formButtons
        formId="invoice-form"
        loading={loading}
        onCancel={() => router.push("/invoices")}
        texts={{
          title: t("Invoices.add_new"),
          submit_form: t("Invoices.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <InvoiceForm id="invoice-form" onSubmit={handleSubmit} loading={loading} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/invoices/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import InvoiceCard from "@/invoice/invoice.card";
import { useInvoices, useBulkDeleteInvoices, useDuplicateInvoice } from "@/invoice/invoice.hooks";
import { SORTABLE_COLUMNS, FILTERABLE_FIELDS } from "@/invoice/invoice.options";
import useInvoiceStore from "@/invoice/invoice.store";
import InvoicesTable from "@/invoice/invoice.table";
import { Invoice } from "@/modules/invoice/invoice.type";
import useUserStore from "@/stores/use-user-store";
export default function InvoicesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadInvoices = useUserStore((state) => state.hasPermission("invoices.read"));
  const canCreateInvoices = useUserStore((state) => state.hasPermission("invoices.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableInvoice, setActionableInvoice] = useState<Invoice | null>(null);
  const viewMode = useInvoiceStore((state) => state.viewMode);
  const isDeleteDialogOpen = useInvoiceStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useInvoiceStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useInvoiceStore((state) => state.selectedRows);
  const setSelectedRows = useInvoiceStore((state) => state.setSelectedRows);
  const clearSelection = useInvoiceStore((state) => state.clearSelection);
  const sortRules = useInvoiceStore((state) => state.sortRules);
  const sortCaseSensitive = useInvoiceStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useInvoiceStore((state) => state.sortNullsFirst);
  const searchQuery = useInvoiceStore((state) => state.searchQuery);
  const filterConditions = useInvoiceStore((state) => state.filterConditions);
  const filterCaseSensitive = useInvoiceStore((state) => state.filterCaseSensitive);
  const getFilteredInvoices = useInvoiceStore((state) => state.getFilteredData);
  const getSortedInvoices = useInvoiceStore((state) => state.getSortedData);
  const { data: invoices, isLoading, error } = useInvoices();
  const { mutateAsync: deleteInvoices, isPending: isDeleting } = useBulkDeleteInvoices();
  const { mutate: duplicateInvoice } = useDuplicateInvoice();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: invoices,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableInvoice,
    duplicateMutation: duplicateInvoice,
    moduleName: "Invoices",
  });
  const handleConfirmDelete = createDeleteHandler(deleteInvoices, {
    loading: "Invoices.loading.deleting",
    success: "Invoices.success.deleted",
    error: "Invoices.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredInvoices = useMemo(() => {
    return getFilteredInvoices(invoices || []);
  }, [invoices, getFilteredInvoices, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedInvoices = useMemo(() => {
    return getSortedInvoices(filteredInvoices);
  }, [filteredInvoices, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadInvoices) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Invoices.title")} description={t("Invoices.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useInvoiceStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Invoices.title")}
            onAddClick={canCreateInvoices ? () => router.push("/invoices/add") : undefined}
            createLabel={t("Invoices.create_invoice")}
            searchPlaceholder={t("Invoices.search_invoices")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <InvoicesTable
              data={sortedInvoices}
              isLoading={isLoading}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedInvoices}
                isLoading={isLoading}
                error={error as Error | null}
                emptyMessage={t("Invoices.no_invoices_found")}
                addFirstItemMessage={t("Invoices.add_first_invoice")}
                renderItem={(invoice) => <InvoiceCard invoice={invoice} />}
                gridCols="2"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Invoices.delete.title")}
          description={t("Invoices.delete.description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/jobs/[slug]/index.tsx">
import { Building2, MapPin, DollarSign } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { useJobs } from "@/job/job.hooks";
import { Job } from "@/job/job.type";
import { JobListing } from "@/job-listing/job-listing.type";
export default function JobListingPublicPage() {
  const t = useTranslations("Jobs");
  const router = useRouter();
  const { slug } = router.query;
  const { data: jobs } = useJobs();
  const [listing, setListing] = useState<JobListing | null>(null); // TODO: Replace with API call
  const [listingJobs, setListingJobs] = useState<Job[]>([]);
  useEffect(() => {
    if (slug && jobs) {
      // TODO: Fetch job listing by slug
      // For now, we'll just show all jobs
      setListingJobs(jobs);
    }
  }, [slug, jobs]);
  const handleApply = (job_id: string) => {
    router.push(`/jobs/${job_id}/apply`);
  };
  return (
    <div className="container mx-auto py-8">
      {listing && (
        <div className="mb-8">
          <h1 className="mb-2 text-3xl font-bold">{listing.title}</h1>
          {listing.description && <p className="text-lg text-gray-600">{listing.description}</p>}
        </div>
      )}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {listingJobs.map((job: Job) => (
          <Card key={job.id} className="transition-shadow hover:shadow-lg">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="text-lg font-semibold">{job.title}</h3>
                  <p className="text-sm text-gray-500">{job.type}</p>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                {job.department && (
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Building2 className="h-4 w-4" />
                    <span>{job.department}</span>
                  </div>
                )}
                {job.location && (
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <MapPin className="h-4 w-4" />
                    <span>{job.location}</span>
                  </div>
                )}
                {job.salary && (
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <DollarSign className="h-4 w-4" />
                    <span>{job.salary}</span>
                  </div>
                )}
              </div>
              {job.description && <p className="text-sm text-gray-600">{job.description}</p>}
              <Button className="w-full" onClick={() => handleApply(job.id)}>
                {t("Apply Now")}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/pages/jobs/listings/add.tsx">
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import PageTitle from "@/ui/page-title";
import { JobListingForm, type JobListingFormValues } from "@/job-listing/job-listing.form";
import { useCreateJobListing } from "@/job-listing/job-listing.hooks";
import useUserStore from "@/stores/use-user-store";
export default function AddJobListingPage() {
  const t = useTranslations();
  const router = useRouter();
  const user = useUserStore((state) => state.user);
  const { mutateAsync: createJobListing, isPending: isCreating } = useCreateJobListing();
  const [loading, setLoading] = useState(false);
  return (
    <div>
      <PageTitle
        formButtons
        formId="job-listing-form"
        loading={loading}
        onCancel={() => router.push("/jobs/listings")}
        texts={{
          title: t("JobListings.add_new_listing"),
          submit_form: t("JobListings.add_new_listing"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="p-4">
        <Card>
          <CardHeader>
            <CardTitle>{t("JobListings.listing_details")}</CardTitle>
          </CardHeader>
          <CardContent>
            <JobListingForm
              id="job-listing-form"
              onSuccess={() => router.push("/jobs/listings")}
              loading={loading}
            />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
export const getStaticProps = async ({ locale }: { locale: string }) => {
  return {
    props: {
      messages: (await import(`../../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/jobs/listings/index.tsx">
import { useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import { FormDialog } from "@/components/ui/form-dialog";
import NoPermission from "@/components/ui/no-permission";
import JobListingCard from "@/job-listing/job-listing.card";
import {
  useJobListings,
  useBulkDeleteJobListings,
  useDuplicateJobListing,
} from "@/job-listing/job-listing.hooks";
import { SORTABLE_COLUMNS, FILTERABLE_FIELDS } from "@/job-listing/job-listing.options";
import useJobListingsStore from "@/job-listing/job-listing.store";
import JobListingsTable from "@/job-listing/job-listing.table";
import { JobListing } from "@/job-listing/job-listing.type";
import { CompanyForm } from "@/modules/company/company.form";
import { CompanyUpdateData } from "@/modules/company/company.type";
import { JobListingForm } from "@/modules/job-listing/job-listing.form";
import useUserStore from "@/stores/use-user-store";
export default function JobListingsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadJobListings = useUserStore((state) => state.hasPermission("job_listings.read"));
  const canCreateJobListings = useUserStore((state) => state.hasPermission("job_listings.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableJobListing, setActionableJobListing] = useState<JobListing | null>(null);
  const loadingSaveJobListing = useJobListingsStore((state) => state.isLoading);
  const setLoadingSaveJobListing = useJobListingsStore((state) => state.setIsLoading);
  const viewMode = useJobListingsStore((state) => state.viewMode);
  const isDeleteDialogOpen = useJobListingsStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useJobListingsStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useJobListingsStore((state) => state.selectedRows);
  const setSelectedRows = useJobListingsStore((state) => state.setSelectedRows);
  const clearSelection = useJobListingsStore((state) => state.clearSelection);
  const sortRules = useJobListingsStore((state) => state.sortRules);
  const sortCaseSensitive = useJobListingsStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useJobListingsStore((state) => state.sortNullsFirst);
  const searchQuery = useJobListingsStore((state) => state.searchQuery);
  const filterConditions = useJobListingsStore((state) => state.filterConditions);
  const filterCaseSensitive = useJobListingsStore((state) => state.filterCaseSensitive);
  const getFilteredJobListings = useJobListingsStore((state) => state.getFilteredData);
  const getSortedJobListings = useJobListingsStore((state) => state.getSortedData);
  const { data: jobListings = [], isLoading, error } = useJobListings();
  const { mutateAsync: deleteJobListings, isPending: isDeleting } = useBulkDeleteJobListings();
  const { createDeleteHandler } = useDeleteHandler();
  const { mutate: duplicateJobListing } = useDuplicateJobListing();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: jobListings,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableJobListing,
    duplicateMutation: duplicateJobListing,
    moduleName: "JobListings",
  });
  const handleConfirmDelete = createDeleteHandler(deleteJobListings, {
    loading: "JobListings.loading.deleting",
    success: "JobListings.success.deleted",
    error: "JobListings.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredListings = useMemo(() => {
    return getFilteredJobListings(jobListings || []);
  }, [jobListings, getFilteredJobListings, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedListings = useMemo(() => {
    return getSortedJobListings(filteredListings);
  }, [filteredListings, sortRules, sortCaseSensitive, sortNullsFirst]);
  const handleCreateClick = () => {
    router.push("/jobs/listings/add");
  };
  if (!canReadJobListings) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("JobListings.title")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useJobListingsStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("JobListings.title")}
            onAddClick={handleCreateClick}
            createLabel={t("JobListings.create_listing")}
            searchPlaceholder={t("JobListings.search_listings")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <JobListingsTable
              data={sortedListings}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedListings}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("JobListings.no_listings_found")}
                renderItem={(listing: JobListing) => (
                  <JobListingCard key={listing.id} jobListing={listing} />
                )}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("JobListings.add_new")}
          formId="job-listing-form"
          loadingSave={loadingSaveJobListing}
        >
          <JobListingForm
            id={"job-listing-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableJobListing(null);
              setLoadingSaveJobListing(false);
              toast.success(t("General.successful_operation"), {
                description: t("JobListings.success.updated"),
              });
            }}
            defaultValues={actionableJobListing}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("JobListings.confirm_delete")}
          description={t("JobListings.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps = async ({ locale }: { locale: string }) => {
  return {
    props: {
      messages: (await import(`../../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/jobs/add.tsx">
import { useQueryClient } from "@tanstack/react-query";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { JobForm } from "@/job/job.form";
import { jobKeys } from "@/job/job.hooks";
import { createJob } from "@/job/job.service";
import useJobStore from "@/job/job.store";
export default function AddJobPage() {
  const t = useTranslations();
  const router = useRouter();
  const isLoading = useJobStore((state) => state.isLoading);
  const setIsLoading = useJobStore((state) => state.setIsLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).jobForm;
    if (form) {
      form.setValue("title", dummyData.job_title);
      form.setValue("description", dummyData.job_description);
      form.setValue("requirements", dummyData.requirements);
      form.setValue("location", dummyData.job_location);
      form.setValue("department", dummyData.job_department);
      form.setValue("type", dummyData.job_type);
      form.setValue("salary", dummyData.job_salary);
      form.setValue("is_active", dummyData.job_is_active);
      form.setValue("start_date", dummyData.job_start_date);
      form.setValue("end_date", dummyData.job_end_date);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Jobs.add_new")} />
      <PageTitle
        formButtons
        formId="job-form"
        loading={isLoading}
        onCancel={() => router.push("/jobs")}
        texts={{
          title: t("Jobs.add_new"),
          submit_form: t("Jobs.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <div className="mx-auto max-w-2xl p-4">
        <JobForm
          id="job-form"
          onSuccess={() => {
            setIsLoading(false);
            router.push("/jobs");
            toast.success(t("General.successful_operation"), {
              description: t("Jobs.success.created"),
            });
          }}
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/jobs/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import JobCard from "@/job/job.card";
import { JobForm } from "@/job/job.form";
import { useJobs, useBulkDeleteJobs, useDuplicateJob } from "@/job/job.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/job/job.options";
import useJobsStore from "@/job/job.store";
import JobTable from "@/job/job.table";
import { JobUpdateData } from "@/job/job.type";
import useUserStore from "@/stores/use-user-store";
export default function JobsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadJobs = useUserStore((state) => state.hasPermission("jobs.read"));
  const canCreateJobs = useUserStore((state) => state.hasPermission("jobs.create"));
  const [actionableJob, setActionableJob] = useState<JobUpdateData | null>(null);
  const isLoading = useJobsStore((state) => state.isLoading);
  const setIsLoading = useJobsStore((state) => state.setIsLoading);
  const isFormDialogOpen = useJobsStore((state) => state.isFormDialogOpen);
  const setIsFormDialogOpen = useJobsStore((state) => state.setIsFormDialogOpen);
  const actionableItem = useJobsStore((state) => state.actionableItem);
  const setActionableItem = useJobsStore((state) => state.setActionableItem);
  const viewMode = useJobsStore((state) => state.viewMode);
  const isDeleteDialogOpen = useJobsStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useJobsStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useJobsStore((state) => state.selectedRows);
  const setSelectedRows = useJobsStore((state) => state.setSelectedRows);
  const clearSelection = useJobsStore((state) => state.clearSelection);
  const sortRules = useJobsStore((state) => state.sortRules);
  const sortCaseSensitive = useJobsStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useJobsStore((state) => state.sortNullsFirst);
  const searchQuery = useJobsStore((state) => state.searchQuery);
  const filterConditions = useJobsStore((state) => state.filterConditions);
  const filterCaseSensitive = useJobsStore((state) => state.filterCaseSensitive);
  const getFilteredJobs = useJobsStore((state) => state.getFilteredData);
  const getSortedJobs = useJobsStore((state) => state.getSortedData);
  const { data: jobs, isLoading: loadingFetchJobs, error } = useJobs();
  const { mutateAsync: duplicateJob } = useDuplicateJob();
  const { mutateAsync: deleteJobs, isPending: isDeleting } = useBulkDeleteJobs();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: jobs,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableJob,
    duplicateMutation: duplicateJob,
    moduleName: "Jobs",
  });
  const handleConfirmDelete = createDeleteHandler(deleteJobs, {
    loading: "Jobs.loading.deleting",
    success: "Jobs.success.deleted",
    error: "Jobs.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredJobs = useMemo(() => {
    return getFilteredJobs(jobs || []);
  }, [jobs, getFilteredJobs, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedJobs = useMemo(() => {
    return getSortedJobs(filteredJobs);
  }, [filteredJobs, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadJobs) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Jobs.title")} description={t("Jobs.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useJobsStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Jobs.title")}
            onAddClick={canCreateJobs ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Jobs.create_job")}
            searchPlaceholder={t("Jobs.search_jobs")}
          />
        )}
        <div className="flex-1 overflow-hidden">
          {viewMode === "table" ? (
            <JobTable
              data={sortedJobs}
              isLoading={loadingFetchJobs}
              error={error}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedJobs}
                isLoading={loadingFetchJobs}
                error={error}
                emptyMessage={t("Jobs.no_jobs_found")}
                renderItem={(job) => <JobCard job={job} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Jobs.add_new")}
          formId="job-form"
          loadingSave={isLoading}
        >
          <JobForm
            id={"job-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableItem(null);
              setIsLoading(false);
              toast.success(t("General.successful_operation"), {
                description: t("Jobs.success.updated"),
              });
            }}
            defaultValues={actionableItem}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Jobs.delete.title")}
          description={t("Jobs.delete.description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/offices/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { OfficeForm } from "@/office/office.form";
import useOfficeStore from "@/office/office.store";
export default function AddOfficePage() {
  const t = useTranslations();
  const router = useRouter();
  const isLoading = useOfficeStore((state) => state.isLoading);
  const setIsLoading = useOfficeStore((state) => state.setIsLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).officeForm;
    if (form) {
      form.setValue("name", "Office " + dummyData.randomNumber);
      form.setValue("email", dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("address", dummyData.address);
      form.setValue("city", dummyData.city);
      form.setValue("state", dummyData.state);
      form.setValue("zip_code", dummyData.zip_code);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Offices.add_new")} />
      <PageTitle
        formButtons
        formId="office-form"
        loading={isLoading}
        onCancel={() => router.push("/offices")}
        texts={{
          title: t("Offices.add_new"),
          submit_form: t("Offices.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <OfficeForm
        id="office-form"
        onSuccess={() =>
          router.push("/offices").then(() => {
            setIsLoading(false);
          })
        }
      />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/offices/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import OfficeCard from "@/office/office.card";
import { OfficeForm } from "@/office/office.form";
import { useOffices, useBulkDeleteOffices, useDuplicateOffice } from "@/office/office.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/office/office.options";
import useOfficeStore from "@/office/office.store";
import OfficesTable from "@/office/office.table";
import { OfficeUpdateData } from "@/office/office.type";
import useUserStore from "@/stores/use-user-store";
export default function OfficesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadOffices = useUserStore((state) => state.hasPermission("offices.read"));
  const canCreateOffices = useUserStore((state) => state.hasPermission("offices.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableOffice, setActionableOffice] = useState<OfficeUpdateData | null>(null);
  const loadingSaveOffice = useOfficeStore((state) => state.isLoading);
  const setLoadingSaveOffice = useOfficeStore((state) => state.setIsLoading);
  const viewMode = useOfficeStore((state) => state.viewMode);
  const isDeleteDialogOpen = useOfficeStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useOfficeStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useOfficeStore((state) => state.selectedRows);
  const setSelectedRows = useOfficeStore((state) => state.setSelectedRows);
  const clearSelection = useOfficeStore((state) => state.clearSelection);
  const sortRules = useOfficeStore((state) => state.sortRules);
  const sortCaseSensitive = useOfficeStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useOfficeStore((state) => state.sortNullsFirst);
  const searchQuery = useOfficeStore((state) => state.searchQuery);
  const filterConditions = useOfficeStore((state) => state.filterConditions);
  const filterCaseSensitive = useOfficeStore((state) => state.filterCaseSensitive);
  const getFilteredOffices = useOfficeStore((state) => state.getFilteredData);
  const getSortedOffices = useOfficeStore((state) => state.getSortedData);
  const { data: offices, isLoading, error } = useOffices();
  const { mutateAsync: deleteOffices, isPending: isDeleting } = useBulkDeleteOffices();
  const { mutate: duplicateOffice } = useDuplicateOffice();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: offices,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableOffice,
    duplicateMutation: duplicateOffice,
    moduleName: "Offices",
  });
  const handleConfirmDelete = createDeleteHandler(deleteOffices, {
    loading: "Offices.loading.deleting",
    success: "Offices.success.deleted",
    error: "Offices.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredOffices = useMemo(() => {
    return getFilteredOffices(offices || []);
  }, [offices, getFilteredOffices, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedOffices = useMemo(() => {
    return getSortedOffices(filteredOffices);
  }, [filteredOffices, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadOffices) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Offices.title")} description={t("Offices.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useOfficeStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Offices.title")}
            onAddClick={canCreateOffices ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Offices.add_new")}
            searchPlaceholder={t("Offices.search_offices")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <OfficesTable
              data={sortedOffices}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedOffices}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Offices.no_offices_found")}
                renderItem={(office) => <OfficeCard office={office} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={t("Offices.add_new")}
          formId="office-form"
          loadingSave={loadingSaveOffice}
        >
          <OfficeForm
            id={"office-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableOffice(null);
              setLoadingSaveOffice(false);
              toast.success(t("General.successful_operation"), {
                description: t("Offices.success.updated"),
              });
            }}
            defaultValues={actionableOffice}
            editMode={true}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Offices.confirm_delete_title")}
          description={t("Offices.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/pay/[invoice].tsx">
import { format } from "date-fns";
import { GetServerSideProps } from "next";
import { useTranslations } from "next-intl";
import { fetchInvoiceById } from "@/invoice/invoice.service";
import { Invoice } from "@/invoice/invoice.type";
interface Props {
  invoice: Invoice;
}
export default function InvoicePreviewPage({ invoice }: Props) {
  const t = useTranslations("Invoices");
  return (
    <div className="mx-auto max-w-4xl p-8">
      <div className="mb-8 flex items-start justify-between">
        <h1 className="text-2xl font-bold">
          {t("invoice_number", { number: invoice.invoice_number })}
        </h1>
        <div className="text-right">
          <p className="text-sm text-gray-500">{t("issue_date")}</p>
          <p>{format(new Date(invoice.issue_date), "MMM dd, yyyy")}</p>
        </div>
      </div>
      <div className="mb-8 grid grid-cols-2 gap-8">
        <div>
          <h2 className="mb-2 text-lg font-semibold">{t("from")}</h2>
          <p>Your Company Name</p>
          <p>Your Company Address</p>
        </div>
        <div>
          <h2 className="mb-2 text-lg font-semibold">{t("to")}</h2>
          <p>{invoice.client?.company}</p>
          <p>{invoice.client?.name}</p>
          <p>{invoice.client?.email}</p>
        </div>
      </div>
      {/* Invoice items table would go here */}
      <div className="mt-8 border-t pt-4">
        <div className="flex justify-between">
          <span className="font-semibold">{t("total")}</span>
          <span className="text-lg font-bold">${invoice.total.toFixed(2)}</span>
        </div>
      </div>
    </div>
  );
}
export const getServerSideProps: GetServerSideProps = async (context) => {
  const { params, locale } = context;
  const invoice_id = params?.invoice as string;
  try {
    const invoice = await fetchInvoiceById(invoice_id);
    if (!invoice) {
      return { notFound: true };
    }
    return {
      props: {
        invoice,
        messages: (await import(`../../../locales/${locale}.json`)).default,
      },
    };
  } catch (error) {
    return { notFound: true };
  }
};
</file>

<file path="src/pages/products/add.tsx">
import { useQueryClient } from "@tanstack/react-query";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { ProductForm, ProductFormValues } from "@/product/product.form";
import { productKeys } from "@/product/product.hooks";
import { createProduct } from "@/product/product.service";
import type { Product, ProductCreateData } from "@/product/product.type";
import useUserStore from "@/stores/use-user-store";
export default function AddProductPage() {
  const router = useRouter();
  const t = useTranslations();
  const queryClient = useQueryClient();
  const { user } = useUserStore();
  const [loading, setLoading] = useState(false);
  const handleSubmit = async (data: ProductFormValues) => {
    setLoading(true);
    try {
      const productData = {
        name: data.name.trim(),
        description: data.description?.trim() || null,
        price: data.price,
        sku: data.sku?.trim() || null,
        stock_quantity: data.stock_quantity,
      };
      let result: Product;
      const productCreateData = {
        ...productData,
        user_id: user?.id,
      };
      result = await createProduct(productCreateData as unknown as ProductCreateData);
      toast.success(t("General.successful_operation"), {
        description: t("Products.success.created"),
      });
      const previousProducts = queryClient.getQueryData(productKeys.lists()) || [];
      queryClient.setQueryData(productKeys.lists(), [
        ...(Array.isArray(previousProducts) ? previousProducts : []),
        result,
      ]);
      router.push("/products");
    } catch (error) {
      console.error("Failed to save product:", error);
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Products.error.create"),
      });
      setLoading(false);
    }
  };
  const handleDummyData = () => {
    const form = (window as any).productForm;
    if (form) {
      form.setValue("name", "Product 1");
      form.setValue("description", "Description 1");
      form.setValue("price", "100");
      form.setValue("sku", Math.random().toString(36).substring(2, 15));
      form.setValue("stock_quantity", "100");
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Products.add_new")} />
      <PageTitle
        formButtons
        formId="product-form"
        loading={loading}
        onCancel={() => router.push("/products")}
        texts={{
          title: t("Products.add_new"),
          submit_form: t("Products.add_new"),
          cancel: t("General.cancel"),
        }}
        customButton={
          process.env.NODE_ENV === "development" && (
            <Button variant="outline" size="sm" onClick={handleDummyData}>
              Dummy Data
            </Button>
          )
        }
      />
      <div className="mx-auto max-w-2xl p-4">
        <ProductForm id="product-form" onSubmit={handleSubmit} loading={loading} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/products/edit.tsx">
import { GetStaticProps } from "next";
export default function EditProductPage() {
  return <div>EditProductPage</div>;
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/products/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import ProductCard from "@/product/product.card";
import { useProducts, useBulkDeleteProducts, useDuplicateProduct } from "@/product/product.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/product/product.options";
import useProductStore from "@/product/product.store";
import ProductsTable from "@/product/product.table";
import { Product } from "@/modules/product/product.type";
import useUserStore from "@/stores/use-user-store";
export default function ProductsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadProducts = useUserStore((state) => state.hasPermission("products.read"));
  const canCreateProducts = useUserStore((state) => state.hasPermission("products.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableProduct, setActionableProduct] = useState<Product | null>(null);
  const viewMode = useProductStore((state) => state.viewMode);
  const isDeleteDialogOpen = useProductStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useProductStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useProductStore((state) => state.selectedRows);
  const setSelectedRows = useProductStore((state) => state.setSelectedRows);
  const clearSelection = useProductStore((state) => state.clearSelection);
  const sortRules = useProductStore((state) => state.sortRules);
  const sortCaseSensitive = useProductStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useProductStore((state) => state.sortNullsFirst);
  const searchQuery = useProductStore((state) => state.searchQuery);
  const filterConditions = useProductStore((state) => state.filterConditions);
  const filterCaseSensitive = useProductStore((state) => state.filterCaseSensitive);
  const getFilteredProducts = useProductStore((state) => state.getFilteredData);
  const getSortedProducts = useProductStore((state) => state.getSortedData);
  const { data: products, isLoading, error } = useProducts();
  const { mutateAsync: deleteProducts, isPending: isDeleting } = useBulkDeleteProducts();
  const { mutate: duplicateProduct } = useDuplicateProduct();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: products,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableProduct,
    duplicateMutation: duplicateProduct,
    moduleName: "Products",
  });
  const handleConfirmDelete = createDeleteHandler(deleteProducts, {
    loading: "Products.loading.deleting",
    success: "Products.success.deleted",
    error: "Products.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredProducts = useMemo(() => {
    return getFilteredProducts(products || []);
  }, [products, getFilteredProducts, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedProducts = useMemo(() => {
    return getSortedProducts(filteredProducts);
  }, [filteredProducts, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadProducts) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Products.title")} description={t("Products.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useProductStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Products.title")}
            onAddClick={canCreateProducts ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Products.add_new")}
            searchPlaceholder={t("Products.search_products")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <ProductsTable
              data={sortedProducts}
              isLoading={isLoading}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedProducts}
                isLoading={isLoading}
                error={error as Error | null}
                emptyMessage={t("Products.no_products")}
                addFirstItemMessage={t("Products.add_first_product")}
                renderItem={(product) => <ProductCard product={product} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Products.confirm_delete_title")}
          description={t("Products.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/quotes/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import { createClient } from "@/utils/supabase/component";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { QuoteForm, type QuoteFormValues } from "@/quote/quote.form";
import useUserStore from "@/stores/use-user-store";
export default function AddQuotePage() {
  const supabase = createClient();
  const router = useRouter();
  const t = useTranslations();
  const [loading, setLoading] = useState(false);
  const { user } = useUserStore();
  const handleSubmit = async (data: QuoteFormValues) => {
    setLoading(true);
    try {
      // Calculate final amounts
      const subtotal = data.items.reduce((acc, item) => {
        const quantity = parseFloat(item.quantity) || 0;
        const unit_price = parseFloat(item.unit_price) || 0;
        return acc + quantity * unit_price;
      }, 0);
      const tax_amount = (subtotal * data.tax_rate) / 100;
      const total = subtotal + tax_amount;
      // First create the quote
      const { data: quote, error: quoteError } = await supabase
        .from("quotes")
        .insert([
          {
            client_id: data.client_id,
            quote_number: data.quote_number.trim(),
            issue_date: data.issue_date,
            expiry_date: data.expiry_date,
            status: data.status,
            subtotal: subtotal,
            tax_rate: data.tax_rate,
            notes: data.notes?.trim() || null,
            user_id: user?.id,
          },
        ])
        .select()
        .single();
      if (quoteError) throw quoteError;
      // Then add quote items
      const quoteItems = data.items.map((item) => ({
        quote_id: quote.id,
        product_id: item.product_id || null,
        description: item.description || "",
        quantity: parseFloat(item.quantity),
        unit_price: parseFloat(item.unit_price),
      }));
      const { error: itemsError } = await supabase.from("quote_items").insert(quoteItems);
      if (itemsError) throw itemsError;
      toast.success(t("General.successful_operation"), {
        description: t("Quotes.success.created"),
      });
      router.push("/quotes");
    } catch (error) {
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : t("Quotes.error.create"),
      });
    } finally {
      setLoading(false);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Quotes.add_new")} />
      <PageTitle
        formButtons
        formId="quote-form"
        loading={loading}
        onCancel={() => router.push("/quotes")}
        texts={{
          title: t("Quotes.add_new"),
          submit_form: t("Quotes.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <QuoteForm
          id="quote-form"
          user_id={user?.id}
          onSubmit={handleSubmit}
          loading={loading}
          hideFormButtons
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/quotes/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import QuoteCard from "@/quote/quote.card";
import { useQuotes, useBulkDeleteQuotes, useDuplicateQuote } from "@/quote/quote.hooks";
import { SORTABLE_COLUMNS, FILTERABLE_FIELDS } from "@/quote/quote.options";
import useQuotesStore from "@/quote/quote.store";
import QuotesTable from "@/quote/quote.table";
import { Quote } from "@/modules/quote/quote.type";
import useUserStore from "@/stores/use-user-store";
export default function QuotesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadQuotes = useUserStore((state) => state.hasPermission("quotes.read"));
  const canCreateQuotes = useUserStore((state) => state.hasPermission("quotes.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableQuote, setActionableQuote] = useState<Quote | null>(null);
  const viewMode = useQuotesStore((state) => state.viewMode);
  const isDeleteDialogOpen = useQuotesStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useQuotesStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useQuotesStore((state) => state.selectedRows);
  const setSelectedRows = useQuotesStore((state) => state.setSelectedRows);
  const clearSelection = useQuotesStore((state) => state.clearSelection);
  const sortRules = useQuotesStore((state) => state.sortRules);
  const sortCaseSensitive = useQuotesStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useQuotesStore((state) => state.sortNullsFirst);
  const searchQuery = useQuotesStore((state) => state.searchQuery);
  const filterConditions = useQuotesStore((state) => state.filterConditions);
  const filterCaseSensitive = useQuotesStore((state) => state.filterCaseSensitive);
  const getFilteredQuotes = useQuotesStore((state) => state.getFilteredData);
  const getSortedQuotes = useQuotesStore((state) => state.getSortedData);
  const { data: quotes, isLoading, error } = useQuotes();
  const { mutateAsync: deleteQuotes, isPending: isDeleting } = useBulkDeleteQuotes();
  const { mutate: duplicateQuote } = useDuplicateQuote();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: quotes,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableQuote,
    duplicateMutation: duplicateQuote,
    moduleName: "Quotes",
  });
  const handleConfirmDelete = createDeleteHandler(deleteQuotes, {
    loading: "Quotes.loading.deleting",
    success: "Quotes.success.deleted",
    error: "Quotes.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredQuotes = useMemo(() => {
    return getFilteredQuotes(quotes || []);
  }, [quotes, getFilteredQuotes, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedQuotes = useMemo(() => {
    return getSortedQuotes(filteredQuotes);
  }, [filteredQuotes, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadQuotes) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Quotes.title")} description={t("Quotes.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useQuotesStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Quotes.title")}
            onAddClick={canCreateQuotes ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Quotes.add_new")}
            searchPlaceholder={t("Quotes.search_quotes")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <QuotesTable
              data={sortedQuotes}
              isLoading={isLoading}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedQuotes}
                isLoading={isLoading}
                error={error as Error | null}
                emptyMessage={t("Quotes.no_quotes")}
                addFirstItemMessage={t("Quotes.add_first_quote")}
                renderItem={(quote) => <QuoteCard key={quote.id} quote={quote} />}
                gridCols="2"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Quotes.confirm_delete_title")}
          description={t("Quotes.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/roles/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { RoleForm } from "@/role/role.form";
import useEnterpriseUserStore from "@/user/user.store";
export default function AddRolePage() {
  const t = useTranslations();
  const router = useRouter();
  const setIsLoading = useEnterpriseUserStore((state) => state.setIsLoading);
  const isLoading = useEnterpriseUserStore((state) => state.isLoading);
  const handleDummyData = () => {};
  return (
    <div>
      <CustomPageMeta title={t("Roles.add_new")} />
      <PageTitle
        formButtons
        formId="role-form"
        loading={isLoading}
        onCancel={() => router.push("/roles")}
        texts={{
          title: t("Roles.add_new"),
          submit_form: t("Roles.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <div className="mx-auto max-w-2xl p-4">
        <RoleForm
          id="role-form"
          onSuccess={() =>
            router.push("/roles").then(() => {
              setIsLoading(false);
            })
          }
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/salaries/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import { generateDummySalary } from "@/lib/dummy-factory";
import { SalaryForm } from "@/salary/salary.form";
import useSalaryStore from "@/salary/salary.store";
export default function AddSalaryPage() {
  const router = useRouter();
  const t = useTranslations();
  const setLoading = useSalaryStore((state) => state.setIsLoading);
  const loading = useSalaryStore((state) => state.isLoading);
  return (
    <div>
      <PageTitle
        formButtons
        formId="salary-form"
        loading={loading}
        onCancel={() => router.push("/salaries")}
        texts={{
          title: t("Salaries.add_new"),
          submit_form: t("Salaries.add_new"),
          cancel: t("General.cancel"),
        }}
        customButton={
          process.env.NODE_ENV === "development" && (
            <Button variant="outline" size="sm" onClick={generateDummySalary}>
              Dummy Data
            </Button>
          )
        }
      />
      <div className="mx-auto max-w-2xl p-4">
        <SalaryForm
          id="salary-form"
          onSuccess={() =>
            router.push("/salaries").then(() => {
              setLoading(false);
            })
          }
        />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/salaries/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import SalaryCard from "@/salary/salary.card";
import { useSalaries, useBulkDeleteSalaries, useDuplicateSalary } from "@/salary/salary.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/salary/salary.options";
import useSalaryStore from "@/salary/salary.store";
import SalariesTable from "@/salary/salary.table";
import { Salary } from "@/modules/salary/salary.type";
import useUserStore from "@/stores/use-user-store";
export default function SalariesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadSalaries = useUserStore((state) => state.hasPermission("salaries.read"));
  const canCreateSalaries = useUserStore((state) => state.hasPermission("salaries.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableSalary, setActionableSalary] = useState<Salary | null>(null);
  const viewMode = useSalaryStore((state) => state.viewMode);
  const isDeleteDialogOpen = useSalaryStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useSalaryStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useSalaryStore((state) => state.selectedRows);
  const setSelectedRows = useSalaryStore((state) => state.setSelectedRows);
  const clearSelection = useSalaryStore((state) => state.clearSelection);
  const sortRules = useSalaryStore((state) => state.sortRules);
  const sortCaseSensitive = useSalaryStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useSalaryStore((state) => state.sortNullsFirst);
  const searchQuery = useSalaryStore((state) => state.searchQuery);
  const filterConditions = useSalaryStore((state) => state.filterConditions);
  const filterCaseSensitive = useSalaryStore((state) => state.filterCaseSensitive);
  const getFilteredSalaries = useSalaryStore((state) => state.getFilteredData);
  const getSortedSalaries = useSalaryStore((state) => state.getSortedData);
  const { data: salaries, isLoading, error } = useSalaries();
  const { mutateAsync: deleteSalaries, isPending: isDeleting } = useBulkDeleteSalaries();
  const { createDeleteHandler } = useDeleteHandler();
  const { mutate: duplicateSalary } = useDuplicateSalary();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: salaries,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableSalary,
    duplicateMutation: duplicateSalary,
    moduleName: "Salaries",
  });
  const handleConfirmDelete = createDeleteHandler(deleteSalaries, {
    loading: "Salaries.loading.deleting",
    success: "Salaries.success.deleted",
    error: "Salaries.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredSalaries = useMemo(() => {
    return getFilteredSalaries(salaries || []);
  }, [salaries, getFilteredSalaries, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedSalaries = useMemo(() => {
    return getSortedSalaries(filteredSalaries);
  }, [filteredSalaries, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadSalaries) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Salaries.title")} description={t("Salaries.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useSalaryStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Salaries.title")}
            onAddClick={canCreateSalaries ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Salaries.create_salary")}
            searchPlaceholder={t("Salaries.search_salaries")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <SalariesTable
              data={sortedSalaries}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedSalaries}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Salaries.no_salaries_found")}
                renderItem={(salary) => <SalaryCard key={salary.id} salary={salary} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Salaries.delete_salary")}
          description={t("Salaries.confirm_delete")}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/users/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { UserForm } from "@/user/user.form";
import { useCreateUser } from "@/user/user.hooks";
export default function AddUserPage() {
  const t = useTranslations();
  const router = useRouter();
  const createUser = useCreateUser();
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).userForm as ReturnType<typeof useForm> | undefined;
    if (form) {
      form.setValue("email", dummyData.email);
      form.setValue("first_name", dummyData.first_name);
      form.setValue("last_name", dummyData.last_name);
      form.setValue("password", "password123");
      form.setValue("role", "viewer");
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Users.success.created"),
    });
    router.push("/users");
  };
  return (
    <div>
      <CustomPageMeta title={t("Users.add_new")} />
      <PageTitle
        formButtons
        formId="user-form"
        loading={createUser.isPending}
        onCancel={() => router.push("/users")}
        dummyButton={handleDummyData}
        texts={{
          title: t("Users.add_new"),
          submit_form: t("Users.add_new"),
          cancel: t("General.cancel"),
        }}
      />
      <div className="mx-auto max-w-2xl p-4">
        <UserForm id="user-form" onSuccess={onAddSuccess} />
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/users/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import UserCard from "@/user/user.card";
import { UserForm } from "@/user/user.form";
import { useUsers, useBulkDeleteUsers, useDuplicateUser } from "@/user/user.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/user/user.options";
import useEnterpriseUsersStore from "@/user/user.store";
import UsersTable from "@/user/user.table";
import { UserType } from "@/user/user.type";
import useUserStore from "@/stores/use-user-store";
export default function UsersPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadUsers = useUserStore((state) => state.hasPermission("users.read"));
  const canCreateUsers = useUserStore((state) => state.hasPermission("users.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableUser, setActionableUser] = useState<UserType | null>(null);
  const loadingSaveUser = useEnterpriseUsersStore((state) => state.isLoading);
  const setLoadingSaveUser = useEnterpriseUsersStore((state) => state.setIsLoading);
  const viewMode = useEnterpriseUsersStore((state) => state.viewMode);
  const isDeleteDialogOpen = useEnterpriseUsersStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useEnterpriseUsersStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useEnterpriseUsersStore((state) => state.selectedRows);
  const setSelectedRows = useEnterpriseUsersStore((state) => state.setSelectedRows);
  const clearSelection = useEnterpriseUsersStore((state) => state.clearSelection);
  const sortRules = useEnterpriseUsersStore((state) => state.sortRules);
  const sortCaseSensitive = useEnterpriseUsersStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useEnterpriseUsersStore((state) => state.sortNullsFirst);
  const searchQuery = useEnterpriseUsersStore((state) => state.searchQuery);
  const filterConditions = useEnterpriseUsersStore((state) => state.filterConditions);
  const filterCaseSensitive = useEnterpriseUsersStore((state) => state.filterCaseSensitive);
  const getFilteredUsers = useEnterpriseUsersStore((state) => state.getFilteredData);
  const getSortedUsers = useEnterpriseUsersStore((state) => state.getSortedData);
  const { data: users, isLoading, error, refetch: refetchUsers } = useUsers();
  const { mutateAsync: deleteUsers, isPending: isDeleting } = useBulkDeleteUsers();
  const { createDeleteHandler } = useDeleteHandler();
  const { mutate: duplicateUser } = useDuplicateUser();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: users,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableUser,
    duplicateMutation: duplicateUser,
    moduleName: "Users",
  });
  const handleConfirmDelete = createDeleteHandler(deleteUsers, {
    loading: "Users.loading.deleting",
    success: "Users.success.deleted",
    error: "Users.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
      refetchUsers();
    },
  });
  const filteredUsers = useMemo(() => {
    return getFilteredUsers((users as UserType[]) || []);
  }, [users, getFilteredUsers, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedUsers = useMemo(() => {
    return getSortedUsers(filteredUsers);
  }, [filteredUsers, sortRules, sortCaseSensitive, sortNullsFirst]);
  const handleAddClick = () => {
    if (canCreateUsers) {
      setActionableUser(null);
      setIsFormDialogOpen(true);
    } else {
      toast.error(t("General.no_permission"));
    }
  };
  if (!canReadUsers) {
    return <NoPermission />;
  }
  const formDialogTitle = actionableUser ? t("Users.edit_user") : t("Users.add_new");
  return (
    <div>
      <CustomPageMeta title={t("Users.title")} description={t("Users.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useEnterpriseUsersStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Users.title")}
            onAddClick={handleAddClick}
            createLabel={t("Users.add_new")}
            searchPlaceholder={t("Users.search_placeholder")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <UsersTable
              data={sortedUsers as unknown as UserType[]}
              isLoading={isLoading}
              error={error as Error | null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList<UserType>
                data={sortedUsers}
                isLoading={isLoading}
                error={error as Error | null}
                emptyMessage={t("Users.no_users_found")}
                renderItem={(user) => <UserCard key={user.id} user={user} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={formDialogTitle}
          formId="user-form"
          loadingSave={loadingSaveUser}
        >
          <UserForm
            id="user-form"
            initialData={actionableUser}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setActionableUser(null);
              refetchUsers();
              setLoadingSaveUser(false);
            }}
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Users.confirm_delete")}
          description={t("Users.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/vendors/[id]/edit.tsx">
import { GetStaticProps, GetStaticPaths } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import PageTitle from "@/ui/page-title";
import { VendorForm } from "@/vendor/vendor.form";
import useUserStore from "@/stores/use-user-store";
export default function EditVendorPage() {
  const router = useRouter();
  const t = useTranslations("Vendors");
  const { id: vendor_id } = router.query;
  const { user } = useUserStore();
  useEffect(() => {
    if (router.isReady && !vendor_id) {
      console.error("Vendor ID not found in URL");
    }
  }, [router.isReady, vendor_id]);
  const handleSuccess = () => {
    // VendorForm handles navigation by default
  };
  if (!user) {
    router.push("/auth");
  }
  return (
    <div>
      <PageTitle
        texts={{
          title: t("edit_vendor"),
          submit_form: t("edit_vendor"),
          cancel: t("General.cancel"),
        }}
        customButton={
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => router.push("/vendors")}>
              {t("General.cancel")}
            </Button>
          </div>
        }
      />
      <div className="p-4">
        <Card>
          <CardHeader>
            <CardTitle>{t("vendor_details")}</CardTitle>
          </CardHeader>
          <CardContent>
            <VendorForm />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
export const getStaticPaths: GetStaticPaths = async () => {
  return { paths: [], fallback: "blocking" };
};
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/vendors/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import PageTitle from "@/ui/page-title";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { generateDummyData } from "@/lib/dummy-generator";
import { VendorForm, type VendorFormValues } from "@/vendor/vendor.form";
import useVendorStore from "@/vendor/vendor.store";
export default function AddVendorPage() {
  const t = useTranslations();
  const router = useRouter();
  const isLoading = useVendorStore((state) => state.isLoading);
  const setIsLoading = useVendorStore((state) => state.setIsLoading);
  const handleDummyData = () => {
    const dummyData = generateDummyData();
    const form = (window as any).vendorForm;
    if (form) {
      form.setValue("name", dummyData.full_name);
      form.setValue("email", dummyData.email);
      form.setValue("phone", dummyData.phone);
      form.setValue("address", dummyData.address);
      form.setValue("city", dummyData.city);
      form.setValue("state", dummyData.state);
      form.setValue("zip_code", dummyData.zip_code);
    }
  };
  return (
    <div>
      <CustomPageMeta title={t("Vendors.add_new")} />
      <PageTitle
        formButtons
        formId="vendor-form"
        loading={isLoading}
        onCancel={() => router.push("/vendors")}
        texts={{
          title: t("Vendors.add_new"),
          submit_form: t("Vendors.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <VendorForm
        id="vendor-form"
        onSuccess={() => {
          router.push("/vendors").then(() => {
            setIsLoading(false);
            toast.success(t("General.successful_operation"), {
              description: t("Vendors.success.created"),
            });
          });
        }}
      />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/vendors/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import VendorCard from "@/vendor/vendor.card";
import { useVendors, useBulkDeleteVendors, useDuplicateVendor } from "@/vendor/vendor.hooks";
import { SORTABLE_COLUMNS, FILTERABLE_FIELDS } from "@/vendor/vendor.options";
import useVendorsStore from "@/vendor/vendor.store";
import VendorsTable from "@/vendor/vendor.table";
import { Vendor } from "@/modules/vendor/vendor.type";
import useUserStore from "@/stores/use-user-store";
export default function VendorsPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadVendors = useUserStore((state) => state.hasPermission("vendors.read"));
  const canCreateVendors = useUserStore((state) => state.hasPermission("vendors.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableVendor, setActionableVendor] = useState<Vendor | null>(null);
  const viewMode = useVendorsStore((state) => state.viewMode);
  const isDeleteDialogOpen = useVendorsStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useVendorsStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useVendorsStore((state) => state.selectedRows);
  const setSelectedRows = useVendorsStore((state) => state.setSelectedRows);
  const clearSelection = useVendorsStore((state) => state.clearSelection);
  const sortRules = useVendorsStore((state) => state.sortRules);
  const sortCaseSensitive = useVendorsStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useVendorsStore((state) => state.sortNullsFirst);
  const searchQuery = useVendorsStore((state) => state.searchQuery);
  const filterConditions = useVendorsStore((state) => state.filterConditions);
  const filterCaseSensitive = useVendorsStore((state) => state.filterCaseSensitive);
  const getFilteredVendors = useVendorsStore((state) => state.getFilteredData);
  const getSortedVendors = useVendorsStore((state) => state.getSortedData);
  const { data: vendors, isLoading, error } = useVendors();
  const { mutateAsync: deleteVendors, isPending: isDeleting } = useBulkDeleteVendors();
  const { mutateAsync: duplicateVendor } = useDuplicateVendor();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: vendors,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableVendor,
    duplicateMutation: duplicateVendor,
    moduleName: "Vendors",
  });
  const handleConfirmDelete = createDeleteHandler(deleteVendors, {
    loading: "Vendors.loading.deleting",
    success: "Vendors.success.deleted",
    error: "Vendors.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredVendors = useMemo(() => {
    return getFilteredVendors(vendors || []);
  }, [vendors, getFilteredVendors, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedVendors = useMemo(() => {
    return getSortedVendors(filteredVendors);
  }, [filteredVendors, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadVendors) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Vendors.title")} description={t("Vendors.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useVendorsStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Vendors.title")}
            onAddClick={canCreateVendors ? () => router.push(router.pathname + "/add") : undefined}
            createLabel={t("Vendors.add_new")}
            searchPlaceholder={t("Vendors.search_vendors")}
          />
        )}
        {viewMode === "table" ? (
          <VendorsTable
            key={`sorted-${sortedVendors?.length}-${JSON.stringify(sortRules)}`}
            data={sortedVendors || []}
            isLoading={isLoading}
            error={error instanceof Error ? error : null}
            onActionClicked={onActionClicked}
          />
        ) : (
          <div className="p-4">
            <DataModelList
              data={sortedVendors || []}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              emptyMessage={t("Vendors.no_vendors")}
              renderItem={(vendor) => <VendorCard key={vendor.id} vendor={vendor} />}
              gridCols="3"
            />
          </div>
        )}
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Vendors.confirm_delete_title")}
          description={t("Vendors.confirm_delete", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
// Add getStaticProps for translations
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/warehouses/add.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { toast } from "sonner";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import PageTitle from "@/components/ui/page-title";
import { WarehouseForm } from "@/modules/warehouse/warehouse.form";
import useWarehouseStore from "@/modules/warehouse/warehouse.store";
export default function AddWarehousePage() {
  const t = useTranslations();
  const router = useRouter();
  const setIsLoading = useWarehouseStore((state) => state.setIsLoading);
  const isLoading = useWarehouseStore((state) => state.isLoading);
  const handleDummyData = () => {
    const form = (window as any).warehouseForm;
    if (form) {
      // code randomly
      form.setValue("code", "WR-" + Math.random().toString(36).substring(2, 5).toUpperCase());
      form.setValue("name", "Warehouse 1");
      form.setValue("address", "123 Main St");
      form.setValue("city", "Anytown");
      form.setValue("state", "CA");
      form.setValue("zip_code", "12345");
      form.setValue("phone", "123-456-7890");
      form.setValue("email", "warehouse@example.com");
      form.setValue("notes", "This is a dummy warehouse");
    }
  };
  const onAddSuccess = () => {
    toast.success(t("General.successful_operation"), {
      description: t("Warehouses.success.created"),
    });
    router.push("/warehouses");
    setIsLoading(false);
  };
  return (
    <div>
      <CustomPageMeta title={t("Warehouses.add_new")} />
      <PageTitle
        formButtons
        formId="warehouse-form"
        loading={isLoading}
        onCancel={() => router.push("/warehouses")}
        texts={{
          title: t("Warehouses.add_new"),
          submit_form: t("Warehouses.add_new"),
          cancel: t("General.cancel"),
        }}
        dummyButton={handleDummyData}
      />
      <WarehouseForm id="warehouse-form" onSuccess={onAddSuccess} />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/warehouses/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDataTableActions } from "@/hooks/use-data-table-actions";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import WarehouseCard from "@/warehouse/warehouse.card";
import {
  useBulkDeleteWarehouses,
  useWarehouses,
  useDuplicateWarehouse,
} from "@/warehouse/warehouse.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/warehouse/warehouse.options";
import useWarehouseStore from "@/warehouse/warehouse.store";
import WarehouseTable from "@/warehouse/warehouse.table";
import { Warehouse } from "@/modules/warehouse/warehouse.type";
import useUserStore from "@/stores/use-user-store";
export default function WarehousesPage() {
  const t = useTranslations();
  const router = useRouter();
  const canReadWarehouses = useUserStore((state) => state.hasPermission("warehouses.read"));
  const canCreateWarehouses = useUserStore((state) => state.hasPermission("warehouses.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableWarehouse, setActionableWarehouse] = useState<Warehouse | null>(null);
  const viewMode = useWarehouseStore((state) => state.viewMode);
  const isDeleteDialogOpen = useWarehouseStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useWarehouseStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useWarehouseStore((state) => state.selectedRows);
  const setSelectedRows = useWarehouseStore((state) => state.setSelectedRows);
  const clearSelection = useWarehouseStore((state) => state.clearSelection);
  const sortRules = useWarehouseStore((state) => state.sortRules);
  const sortCaseSensitive = useWarehouseStore((state) => state.sortCaseSensitive);
  const sortNullsFirst = useWarehouseStore((state) => state.sortNullsFirst);
  const searchQuery = useWarehouseStore((state) => state.searchQuery);
  const filterConditions = useWarehouseStore((state) => state.filterConditions);
  const filterCaseSensitive = useWarehouseStore((state) => state.filterCaseSensitive);
  const getFilteredWarehouses = useWarehouseStore((state) => state.getFilteredData);
  const getSortedWarehouses = useWarehouseStore((state) => state.getSortedData);
  const { data: warehouses, isLoading, error } = useWarehouses();
  const { mutateAsync: deleteWarehouses, isPending: isDeleting } = useBulkDeleteWarehouses();
  const { mutate: duplicateWarehouse } = useDuplicateWarehouse();
  const { createDeleteHandler } = useDeleteHandler();
  const { handleAction: onActionClicked } = useDataTableActions({
    data: warehouses,
    setSelectedRows,
    setIsDeleteDialogOpen,
    setIsFormDialogOpen,
    setActionableItem: setActionableWarehouse,
    duplicateMutation: duplicateWarehouse,
    moduleName: "Warehouses",
  });
  const handleConfirmDelete = createDeleteHandler(deleteWarehouses, {
    loading: "Warehouses.loading.deleting",
    success: "Warehouses.success.deleted",
    error: "Warehouses.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredWarehouses = useMemo(() => {
    return getFilteredWarehouses(warehouses || []);
  }, [warehouses, getFilteredWarehouses, searchQuery, filterConditions, filterCaseSensitive]);
  const sortedWarehouses = useMemo(() => {
    return getSortedWarehouses(filteredWarehouses);
  }, [filteredWarehouses, sortRules, sortCaseSensitive, sortNullsFirst]);
  if (!canReadWarehouses) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Warehouses.title")} description={t("Warehouses.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useWarehouseStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Warehouses.title")}
            onAddClick={
              canCreateWarehouses ? () => router.push(router.pathname + "/add") : undefined
            }
            createLabel={t("Warehouses.create_warehouse")}
            searchPlaceholder={t("Warehouses.search_warehouses")}
          />
        )}
        <div>
          {viewMode === "table" ? (
            <WarehouseTable
              data={sortedWarehouses}
              isLoading={isLoading}
              error={error instanceof Error ? error : null}
              onActionClicked={onActionClicked}
            />
          ) : (
            <div className="p-4">
              <DataModelList
                data={sortedWarehouses}
                isLoading={isLoading}
                error={error instanceof Error ? error : null}
                emptyMessage={t("Warehouses.no_warehouses_found")}
                renderItem={(warehouse) => <WarehouseCard warehouse={warehouse} />}
                gridCols="3"
              />
            </div>
          )}
        </div>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Warehouses.confirm_delete")}
          description={t("Warehouses.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/_app.tsx">
"use client";
import { NextIntlClientProvider } from "next-intl";
import { ThemeProvider } from "next-themes";
import type { AppProps } from "next/app";
import { IBM_Plex_Sans_Arabic } from "next/font/google";
import { useEffect, useState } from "react";
import DebugTools from "@/ui/debug-tools";
import { LoadingBar } from "@/ui/loading-bar";
import AppLayout from "@/components/layouts/app-layout";
import AuthLayout from "@/components/layouts/auth-layout";
import LandingLayout from "@/components/layouts/landing-layout";
import { QueryProvider } from "@/providers/QueryProvider";
import "@/styles/globals.css";
const arabicFont = IBM_Plex_Sans_Arabic({
  weight: ["100", "200", "300", "400", "500", "600", "700"],
  subsets: ["arabic"],
});
const authPages = ["/auth", "/reset-password", "/onboarding"];
const landingPages = [
  "/",
  "/features",
  "/pricing",
  "/contact",
  "/help",
  "/report-ip",
  "/report",
  "/support",
  "/terms",
  "/privacy",
  "/blog",
  "/appeal",
  "/404",
  "/directory",
];
function AppContent({ Component, pageProps, router }: AppProps) {
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  // Don't render anything until mounted
  if (!mounted) {
    return null;
  }
  // Auth Pages
  if (authPages.includes(router.pathname)) {
    return (
      <div className={`${arabicFont.className}`}>
        <NextIntlClientProvider
          messages={pageProps.messages}
          locale={router.locale}
          timeZone="Asia/Riyadh"
          now={new Date()}
        >
          <AuthLayout>{<Component {...pageProps} />}</AuthLayout>
        </NextIntlClientProvider>
      </div>
    );
  }
  // Landing Page
  if (landingPages.includes(router.pathname)) {
    return (
      <div className={`${arabicFont.className}`}>
        <NextIntlClientProvider
          messages={pageProps.messages}
          locale={router.locale}
          timeZone="Asia/Riyadh"
          now={new Date()}
        >
          <LandingLayout>{<Component {...pageProps} />}</LandingLayout>
        </NextIntlClientProvider>
      </div>
    );
  }
  // Invoice pages
  if (router.pathname === "/invoices/[code]") {
    return (
      <div className={`${arabicFont.className}`}>
        <NextIntlClientProvider
          messages={pageProps.messages}
          locale={router.locale}
          timeZone="Asia/Riyadh"
          now={new Date()}
        >
          <InvoicePages>{<Component {...pageProps} />}</InvoicePages>
        </NextIntlClientProvider>
      </div>
    );
  }
  // App Pages
  return (
    <div className={`${arabicFont.className}`}>
      <NextIntlClientProvider
        messages={pageProps.messages}
        locale={router.locale}
        timeZone="Asia/Riyadh"
        now={new Date()}
      >
        <AppLayout>
          <Component {...pageProps} />
        </AppLayout>
      </NextIntlClientProvider>
    </div>
  );
}
export default function App(props: AppProps) {
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
      <QueryProvider>
        <AppContent {...props} />
        {process.env.NODE_ENV === "development" && <DebugTools />}
      </QueryProvider>
    </ThemeProvider>
  );
}
const InvoicePages = ({ children }: { children: React.ReactNode }) => {
  return (
    <ThemeProvider attribute="class" disableTransitionOnChange enableSystem defaultTheme="dark">
      <LoadingBar />
      {children}
    </ThemeProvider>
  );
};
</file>

<file path="src/pages/_document.tsx">
import { Html, Head, Main, NextScript } from "next/document";
export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link rel="apple-touch-icon" sizes="57x57" href="../icons/apple-icon-57x57.png" />
        <link rel="apple-touch-icon" sizes="60x60" href="../icons/apple-icon-60x60.png" />
        <link rel="apple-touch-icon" sizes="72x72" href="../icons/apple-icon-72x72.png" />
        <link rel="apple-touch-icon" sizes="76x76" href="../icons/apple-icon-76x76.png" />
        <link rel="apple-touch-icon" sizes="114x114" href="../icons/apple-icon-114x114.png" />
        <link rel="apple-touch-icon" sizes="120x120" href="../icons/apple-icon-120x120.png" />
        <link rel="apple-touch-icon" sizes="144x144" href="../icons/apple-icon-144x144.png" />
        <link rel="apple-touch-icon" sizes="152x152" href="../icons/apple-icon-152x152.png" />
        <link rel="apple-touch-icon" sizes="180x180" href="../icons/apple-icon-180x180.png" />
        <link
          rel="icon"
          type="image/png"
          sizes="192x192"
          href="../icons/android-icon-192x192.png"
        />
        <link rel="icon" href="../icons/favicon.ico" />
        <link rel="icon" type="image/png" sizes="32x32" href="../icons/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="96x96" href="../icons/favicon-96x96.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="../icons/favicon-16x16.png" />
        <link rel="manifest" href="../icons/manifest.json" />
        <meta name="msapplication-TileColor" content="#ffffff" />
        <meta name="msapplication-TileImage" content="../icons/ms-icon-144x144.png" />
        <meta name="theme-color" content="#ffffff" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link
          href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Arabic:wght@100;200;300;400;500;600;700&display=swap"
          rel="stylesheet"
        ></link>
        <meta property="og:url" content="https://puk.la" />
        <meta property="og:type" content="website" />
        <meta property="og:title" content="Pukla | بكلة" />
        <meta property="og:description" content="One link for all your links." />
        <meta property="og:image" content="https://puk.la/assets/pukla_og_image.jpg" />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://puk.la" />
        <meta property="twitter:title" content="Pukla | بكلة" />
        <meta property="twitter:description" content="One link for all your links." />
        <meta property="twitter:image" content="https://puk.la/assets/pukla_og_image.jpg" />
      </Head>
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
</file>

<file path="src/pages/[code].tsx">
import { GetStaticProps, GetStaticPaths } from "next";
import { useRouter } from "next/router";
import { useEffect } from "react";
import NoPuklaFound from "@/components/app/NoPuklaFound";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { createClient as createClientComponent } from "@/utils/supabase/component";
import { createClient as createClientStaticProps } from "@/utils/supabase/static-props";
export default function RedirectPage({ pukla }: { pukla: any }) {
  const supabase = createClientComponent();
  const router = useRouter();
  const logClick = async () => {
    try {
      const response = await fetch("/api/user-info");
      const { userAgent, ip, country, city, isMobile } = await response.json();
      const { error } = await supabase.from("clicks_log").insert([
        {
          pukla_id: pukla.id,
          clicked_at: new Date().toISOString(),
          user_agent: userAgent,
          ip_address: ip,
          country: country,
          city: city,
          is_mobile: isMobile,
        },
      ]);
      if (error) {
        console.error("Error logging click:", error);
      }
    } catch (error) {
      console.error("Error logging click:", error);
    }
  };
  useEffect(() => {
    // Only log the click if we have a valid pukla and we're not in fallback state
    if (pukla && !router.isFallback) {
      logClick();
    }
  }, [pukla, router.isFallback]);
  // Add loading state
  if (router.isFallback) {
    return <div>Loading...</div>; // You can replace this with a proper loading component
  }
  if (!pukla) {
    return <NoPuklaFound />;
  }
  return (
    <>
      <CustomPageMeta title={pukla.title} description={pukla.bio} />
      <div>No code found</div>
    </>
  );
}
export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
export const getStaticProps: GetStaticProps = async ({ params, locale }) => {
  const code = params?.code as string;
  const supabase = createClientStaticProps();
  // Fetch the pukla data for the given slug
  const { data: pukla, error } = await supabase
    .from("puklas")
    .select("*")
    .eq("slug", code.toLowerCase())
    .single();
  if (error || !pukla) {
    return {
      props: {
        pukla: null, // Return pukla as null if not found
        messages: (await import(`../../locales/${locale}.json`)).default,
      },
      revalidate: 60,
    };
  }
  return {
    props: {
      pukla,
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
    revalidate: 60,
  };
};
</file>

<file path="src/pages/404.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { Button } from "@/ui/button";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
export default function Eror404Page() {
  const t = useTranslations("Landing");
  return (
    <>
      <CustomPageMeta title={t("not-found.title")} />
      <div className="flex flex-col items-center justify-center gap-6 px-4 py-10 md:px-0">
        <div className="text-center text-5xl font-bold">{t("not-found.title")} - 404</div>
        <div className="text-center">{t("not-found.subtitle")}</div>
        <Link href="/">
          <Button>{t("home")}</Button>
        </Link>
      </div>
    </>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/account.tsx">
import { User } from "@supabase/supabase-js";
import { EyeOff } from "lucide-react";
import { Eye } from "lucide-react";
import { GetStaticProps } from "next";
import { useLocale, useTranslations } from "next-intl";
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/ui/tabs";
import { createClient } from "@/utils/supabase/component";
interface ProfileFormValues {
  name: string;
  email: string;
  phone: string;
}
interface PasswordFormValues {
  currentPassword: string;
  newPassword: string;
  confirmNewPassword: string;
}
export default function Account() {
  const supabase = createClient();
  const t = useTranslations();
  const lang = useLocale();
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [isUpdatingPassword, setIsUpdatingPassword] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmNewPassword, setShowConfirmNewPassword] = useState(false);
  const {
    register: registerProfile,
    handleSubmit: handleProfileSubmit,
    setValue,
    formState: { errors: profileErrors },
  } = useForm<ProfileFormValues>();
  const {
    register: registerPassword,
    handleSubmit: handlePasswordSubmit,
    formState: { errors: passwordErrors },
  } = useForm<PasswordFormValues>();
  useEffect(() => {
    const getProfile = async () => {
      try {
        setLoading(true);
        const {
          data: { user },
        } = await supabase.auth.getUser();
        const { data: userData } = await supabase
          .from("profiles")
          .select("*")
          .eq("id", user?.id)
          .single();
        if (userData) {
          setUser({
            ...userData,
            email: user?.email,
          });
          setValue("email", user?.email || "");
          setValue("name", userData.full_name || "");
        }
      } catch (error: unknown) {
        if (error instanceof Error) {
          toast.error(error.message);
        }
      } finally {
        setLoading(false);
      }
    };
    getProfile();
  }, [setValue]);
  const onProfileSubmit = async (data: ProfileFormValues) => {
    try {
      setLoading(true);
      // Update user's email and display name
      const { error: updateError } = await supabase.auth.updateUser({
        email: data.email,
      });
      const { error: updateProfileError } = await supabase
        .from("profiles")
        .update({ full_name: data.name })
        .eq("id", user?.id);
      if (updateError) throw updateError;
      if (updateProfileError) throw updateProfileError;
      toast.success(t("Profile.profile_updated_successfully"));
    } catch (error: unknown) {
      if (error instanceof Error) {
        toast.error(error.message);
      }
    } finally {
      setLoading(false);
    }
  };
  const onPasswordSubmit = async (data: PasswordFormValues) => {
    if (data.newPassword !== data.confirmNewPassword) {
      toast.error(t("Profile.passwords_do_not_match"));
      return;
    }
    try {
      setIsUpdatingPassword(true);
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: user?.email || "",
        password: data.currentPassword,
      });
      if (signInError) {
        toast.error(t("Profile.incorrect_current_password"));
        return;
      }
      // If current password is correct, proceed with password update
      const { error: updatePasswordError } = await supabase.auth.updateUser({
        password: data.newPassword,
      });
      if (updatePasswordError) throw updatePasswordError;
      toast.success(t("Profile.password_updated_successfully"));
    } catch (error: unknown) {
      if (error instanceof Error) {
        toast.error(error.message);
      }
    } finally {
      setIsUpdatingPassword(false);
    }
  };
  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };
  if (!user) return null;
  return (
    <div dir={lang === "ar" ? "rtl" : "ltr"}>
      <Tabs defaultValue="general" className="w-full">
        <TabsList className="grid w-full grid-cols-2" dir={lang === "ar" ? "rtl" : "ltr"}>
          <TabsTrigger value="general">{t("Profile.general")}</TabsTrigger>
          <TabsTrigger value="security">{t("Profile.security")}</TabsTrigger>
        </TabsList>
        <TabsContent value="general" dir={lang === "ar" ? "rtl" : "ltr"}>
          <form onSubmit={handleProfileSubmit(onProfileSubmit)} className="flex flex-col gap-4">
            <div className="flex flex-col gap-2">
              <div className="w-full space-y-2">
                <Label htmlFor="name">{t("Profile.name")}</Label>
                <Input
                  id="name"
                  {...registerProfile("name", {
                    required: t("Profile.name_required"),
                    minLength: {
                      value: 2,
                      message: t("Profile.name_min_length"),
                    },
                  })}
                  type="text"
                />
                {profileErrors.name && (
                  <p className="text-sm text-red-500">{profileErrors.name.message}</p>
                )}
              </div>
            </div>
            <div className="flex flex-row gap-2">
              <div className="w-full space-y-2">
                <Label htmlFor="email">{t("Profile.email")}</Label>
                <Input
                  id="email"
                  {...registerProfile("email", {
                    required: t("Profile.email_required"),
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: t("Profile.invalid_email"),
                    },
                  })}
                  type="email"
                />
                {profileErrors.email && (
                  <p className="text-sm text-red-500">{profileErrors.email.message}</p>
                )}
              </div>
              <div className="w-full space-y-2">
                <Label className="text-secondary-foreground" htmlFor="phone">
                  {t("Profile.phone")}
                </Label>
                <Input id="phone" disabled {...registerProfile("phone")} type="tel" />
              </div>
            </div>
            <Button className="mt-4" variant="default" type="submit" disabled={loading}>
              {loading ? t("Profile.saving_changes") : t("Profile.save_changes")}
            </Button>
          </form>
        </TabsContent>
        <TabsContent value="security" dir={lang === "ar" ? "rtl" : "ltr"}>
          <form onSubmit={handlePasswordSubmit(onPasswordSubmit)} className="flex flex-col gap-4">
            <div className="w-full space-y-2">
              <Label htmlFor="currentPassword">{t("Profile.current_password")}</Label>
              <div className="relative">
                <Input
                  id="currentPassword"
                  type={showCurrentPassword ? "text" : "password"}
                  {...registerPassword("currentPassword", {
                    required: t("Profile.current_password_required"),
                    minLength: {
                      value: 6,
                      message: t("Profile.password_min_length"),
                    },
                  })}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                  tabIndex={-1}
                >
                  {showCurrentPassword ? (
                    <Eye className="h-4 w-4" />
                  ) : (
                    <EyeOff className="h-4 w-4" />
                  )}
                </Button>
              </div>
              {passwordErrors.currentPassword && (
                <p className="text-sm text-red-500">{passwordErrors.currentPassword.message}</p>
              )}
            </div>
            <div className="w-full space-y-2">
              <Label htmlFor="newPassword">{t("Profile.new_password")}</Label>
              <div className="relative">
                <Input
                  id="newPassword"
                  type={showNewPassword ? "text" : "password"}
                  {...registerPassword("newPassword", {
                    required: t("Profile.new_password_required"),
                    minLength: {
                      value: 6,
                      message: t("Profile.password_min_length"),
                    },
                  })}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                  onClick={() => setShowNewPassword(!showNewPassword)}
                  tabIndex={-1}
                >
                  {showNewPassword ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
                </Button>
              </div>
              {passwordErrors.newPassword && (
                <p className="text-sm text-red-500">{passwordErrors.newPassword.message}</p>
              )}
            </div>
            <div className="w-full space-y-2">
              <Label htmlFor="confirmNewPassword">{t("Profile.confirm_new_password")}</Label>
              <div className="relative">
                <Input
                  id="confirmNewPassword"
                  type={showConfirmNewPassword ? "text" : "password"}
                  {...registerPassword("confirmNewPassword", {
                    required: t("Profile.confirm_new_password_required"),
                    minLength: {
                      value: 6,
                      message: t("Profile.password_min_length"),
                    },
                  })}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                  onClick={() => setShowConfirmNewPassword(!showConfirmNewPassword)}
                  tabIndex={-1}
                >
                  {showConfirmNewPassword ? (
                    <Eye className="h-4 w-4" />
                  ) : (
                    <EyeOff className="h-4 w-4" />
                  )}
                </Button>
              </div>
              {passwordErrors.confirmNewPassword && (
                <p className="text-sm text-red-500">{passwordErrors.confirmNewPassword.message}</p>
              )}
            </div>
            <Button className="mt-4" variant="default" type="submit" disabled={isUpdatingPassword}>
              {isUpdatingPassword ? t("Profile.updating_password") : t("Profile.change_password")}
            </Button>
          </form>
        </TabsContent>
      </Tabs>
    </div>
  );
  // return (
  //   <div className="flex flex-col gap-2">
  //     <PageHeader title={t("account")} />
  //     <Card>
  //       <CardHeader>
  //         <CardTitle>{t("personal_info")}</CardTitle>
  //       </CardHeader>
  //       <CardContent>
  //         <ProfileForm />
  //       </CardContent>
  //     </Card>
  //   </div>
  // );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/analytics.tsx">
import {
  differenceInDays,
  eachDayOfInterval,
  eachMonthOfInterval,
  eachWeekOfInterval,
  endOfMonth,
  endOfWeek,
  format,
  parseISO,
  startOfMonth,
  startOfWeek,
} from "date-fns";
import { ar } from "date-fns/locale";
import { Calendar as CalendarIcon } from "lucide-react";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { DateRange } from "react-day-picker";
import { Bar, BarChart, CartesianGrid, XAxis } from "recharts";
import { Button } from "@/ui/button";
import { Calendar } from "@/ui/calendar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/ui/card";
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/ui/chart";
import { Popover, PopoverContent, PopoverTrigger } from "@/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
// UI Components
import { Skeleton } from "@/ui/skeleton";
import { createClient } from "@/utils/supabase/component";
// Store
import { useMainStore } from "@/hooks/main.store";
import AnalyticsTable from "@/components/app/AnalyticsTable";
import NoPuklas from "@/components/app/NoPuklas";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import { fakeAnalyticsData } from "@/lib/constants";
// Utils
import { fetchPukla, fetchPuklasWithLinkCount } from "@/lib/operations";
import useUserStore from "@/stores/use-user-store";
export default function Analytics() {
  const supabase = createClient();
  const t = useTranslations();
  const router = useRouter();
  const { profile } = useUserStore();
  const { puklas, setPuklas, selectedPukla, setSelectedPukla } = useMainStore();
  const [isLoading, setIsLoading] = useState(true);
  const puklaId = (router.query.id || selectedPukla?.id) as string;
  const { locale } = router;
  useEffect(() => {
    const initializePuklas = async () => {
      if (!profile?.id) return;
      try {
        // Fetch all puklas with link count
        const fetchedPuklas = await fetchPuklasWithLinkCount(profile?.id, {
          toasts: {
            error: t("MyPuklas.error_fetching_puklas"),
            success: t("MyPuklas.success_fetching_puklas"),
          },
        });
        setPuklas(fetchedPuklas);
        // If we have a puklaId, fetch that specific pukla
        if (puklaId) {
          const currentPukla = await fetchPukla(puklaId, {
            toasts: {
              error: t("MyPuklas.error_fetching_puklas"),
              success: t("MyPuklas.success_fetching_puklas"),
            },
          });
          if (currentPukla) {
            setSelectedPukla(currentPukla);
          }
        } else if (selectedPukla) {
          router.push(`/analytics?id=${selectedPukla.id}`);
        } else if (fetchedPuklas.length > 0) {
          setSelectedPukla(fetchedPuklas[0]);
          router.push(`/analytics?id=${fetchedPuklas[0].id}`);
        }
      } catch (error) {
        console.error("Error initializing puklas:", error);
      } finally {
        setIsLoading(false);
      }
    };
    initializePuklas();
  }, [profile?.id, puklaId]);
  let chartConfig = {
    desktop: { label: t("General.desktop"), color: "#2563eb" },
    mobile: { label: t("General.mobile"), color: "#60a5fa" },
  } satisfies ChartConfig;
  const [data, setData] = useState<{ chartData: any[]; tableData: any[] }>({
    chartData: [],
    tableData: [],
  });
  const [date, setDate] = useState<DateRange | undefined>(() => {
    // Try to load saved date range during initialization
    if (typeof window !== "undefined") {
      const savedDateRange = localStorage.getItem("analytics_date_range");
      if (savedDateRange) {
        const parsed = JSON.parse(savedDateRange);
        return {
          from: parseISO(parsed.from),
          to: parseISO(parsed.to),
        };
      }
      // Fall back to default values if nothing is saved
      return {
        from: startOfMonth(new Date()),
        to: endOfMonth(new Date()),
      };
    }
  });
  // Save date range to localStorage when it changes
  useEffect(() => {
    if (date?.from && date?.to) {
      localStorage.setItem(
        "analytics_date_range",
        JSON.stringify({
          from: date.from.toISOString(),
          to: date.to.toISOString(),
        }),
      );
    }
  }, [date]);
  useEffect(() => {
    if (date?.from && date?.to && selectedPukla) {
      fetchAnalytics(date.from, date.to);
    }
  }, [date, selectedPukla]);
  const getShortFormattedDate = (date: Date) => {
    const month = date.toLocaleString("en-US", { month: "long" }).toLowerCase();
    const day = locale === "ar" ? date.getDate().toLocaleString("ar-SA") : format(date, "d");
    const translatedMonth = t(`General.months.${month}`);
    // Keep full month name for Arabic, shortened for English
    const displayMonth = locale === "ar" ? translatedMonth : translatedMonth.slice(0, 3);
    return `${displayMonth} ${day}`;
  };
  const getFormattedDate = (date: Date) => {
    const month = date.toLocaleString("en-US", { month: "long" }).toLowerCase();
    const day = locale === "ar" ? date.getDate().toLocaleString("ar-SA") : format(date, "dd");
    const year = locale === "ar" ? date.getFullYear().toLocaleString("ar-SA") : format(date, "y");
    return `${t(`General.months.${month}`)} ${day}, ${year}`;
  };
  const getDateRangeTitle = () => {
    if (!date?.from || !date?.to) return t("analytics");
    return `${getFormattedDate(date.from)} - ${getFormattedDate(date.to)}`;
  };
  const fetchAnalytics = async (from: Date, to: Date) => {
    // Get current user
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user || !selectedPukla) return;
    // Fetch clicks for the selected date range and selected pukla only
    const { data: clicks, error: clicksError } = await supabase
      .from("clicks_log")
      .select("clicked_at, is_mobile, country, city")
      .eq("pukla_id", selectedPukla.id)
      .gte("clicked_at", from.toISOString())
      .lte("clicked_at", to.toISOString())
      .order("clicked_at", { ascending: true });
    if (clicksError) {
      console.error("Error fetching clicks:", clicksError);
      return;
    }
    // Calculate the difference in days between the start and end dates
    const daysDifference = differenceInDays(to, from);
    let chartData;
    // If range is 1 day or less, show hourly data
    if (daysDifference <= 1) {
      const hours = Array.from({ length: 24 }, (_, i) => i);
      const grouped = clicks?.reduce((acc: any, click) => {
        const date = new Date(click.clicked_at);
        const hour = date.getHours();
        const device = click.is_mobile ? "mobile" : "desktop";
        acc[hour] = acc[hour] || { desktop: 0, mobile: 0 };
        acc[hour][device]++;
        return acc;
      }, {});
      chartData = hours.map((hour) => ({
        label: `${hour}:00`,
        desktop: grouped[hour]?.desktop || 0,
        mobile: grouped[hour]?.mobile || 0,
      }));
    }
    // If range is 7 days or less, show daily data
    else if (daysDifference <= 7) {
      const days = eachDayOfInterval({ start: from, end: to });
      const grouped = clicks?.reduce((acc: any, click) => {
        const date = new Date(click.clicked_at);
        const day = format(date, "yyyy-MM-dd");
        const device = click.is_mobile ? "mobile" : "desktop";
        acc[day] = acc[day] || { desktop: 0, mobile: 0 };
        acc[day][device]++;
        return acc;
      }, {});
      chartData = days.map((day) => ({
        label: format(day, "EEE"),
        desktop: grouped[format(day, "yyyy-MM-dd")]?.desktop || 0,
        mobile: grouped[format(day, "yyyy-MM-dd")]?.mobile || 0,
      }));
    }
    // If range is 31 days or less, show weekly data
    else if (daysDifference <= 31) {
      const weeks = eachWeekOfInterval({ start: from, end: to });
      const grouped = clicks?.reduce((acc: any, click) => {
        const date = new Date(click.clicked_at);
        const weekStart = startOfWeek(date);
        const weekKey = format(weekStart, "yyyy-MM-dd");
        const device = click.is_mobile ? "mobile" : "desktop";
        acc[weekKey] = acc[weekKey] || { desktop: 0, mobile: 0 };
        acc[weekKey][device]++;
        return acc;
      }, {});
      chartData = weeks.map((weekStart) => {
        const weekEnd = endOfWeek(weekStart);
        return {
          label: `${getShortFormattedDate(weekStart)} - ${getShortFormattedDate(weekEnd)}`,
          desktop: grouped[format(weekStart, "yyyy-MM-dd")]?.desktop || 0,
          mobile: grouped[format(weekStart, "yyyy-MM-dd")]?.mobile || 0,
        };
      });
    }
    // If range is more than 31 days, show monthly data
    else {
      const months = eachMonthOfInterval({ start: from, end: to });
      const grouped = clicks?.reduce((acc: any, click) => {
        const date = new Date(click.clicked_at);
        const month = date.toLocaleString("en-US", { month: "long" }).toLowerCase();
        const device = click.is_mobile ? "mobile" : "desktop";
        acc[month] = acc[month] || { desktop: 0, mobile: 0 };
        acc[month][device]++;
        return acc;
      }, {});
      chartData = months.map((date) => {
        const month = date.toLocaleString("en-US", { month: "long" }).toLowerCase();
        return {
          label: t(`General.months.${month}`),
          desktop: grouped[month]?.desktop || 0,
          mobile: grouped[month]?.mobile || 0,
        };
      });
    }
    // Process data for the table
    const tableData = clicks?.reduce((acc: any, click) => {
      const locationKey = `${click.country || "Unknown"}-${click.city || "Unknown"}`;
      if (!acc[locationKey]) {
        acc[locationKey] = {
          country: click.country
            ? t(`Country.${click.country.toLowerCase().replace(" ", "_")}`)
            : "Unknown",
          city: click.city || "Unknown",
          mobile: 0,
          desktop: 0,
          total: 0,
        };
      }
      if (click.is_mobile) {
        acc[locationKey].mobile++;
      } else {
        acc[locationKey].desktop++;
      }
      acc[locationKey].total++;
      return acc;
    }, {});
    const processedTableData = Object.values(tableData);
    // Update state with both chart and table data
    setData({ chartData: chartData, tableData: processedTableData });
  };
  if (!puklaId) {
    return (
      <div className="flex w-full flex-col items-center justify-center">
        {isLoading ? (
          <Skeleton className="h-[100px] w-full" />
        ) : puklas.length > 0 ? (
          <Card className="flex w-full flex-col items-center justify-center">
            <CardContent headless className="w-full">
              <div className="flex w-full flex-col items-center justify-between gap-4 md:flex-row">
                <span className="text-2xl font-bold">
                  {t("Analytics.select_pukla_to_view_analytics")}
                </span>
                <Select onValueChange={(value: any) => router.push(`/analytics?id=${value}`)}>
                  <SelectTrigger className="w-full max-w-[200px]">
                    <SelectValue placeholder={t("Analytics.select_pukla")} />
                  </SelectTrigger>
                  <SelectContent>
                    {puklas.map((pukla) => (
                      <SelectItem key={pukla.id} value={pukla.id}>
                        {pukla.title}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        ) : (
          <NoPuklas onCreate={() => router.push("/dashboard")} />
        )}
      </div>
    );
  }
  return (
    <>
      <CustomPageMeta
        title={t("SEO.analytics.title")}
        description={t("SEO.analytics.description")}
      />
      <main className="flex flex-col items-center justify-between gap-4">
        <div className="flex w-full flex-col gap-2">
          <Card className="w-full">
            <CardHeader className="flex flex-col justify-between md:flex-row">
              <div className="flex flex-col gap-2">
                <CardTitle>{t("Analytics.analytics_overview")}</CardTitle>
                <CardDescription>{getDateRangeTitle()}</CardDescription>
              </div>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={"w-[300px] justify-start text-start font-normal"}
                  >
                    <CalendarIcon className="me-2 h-4 w-4" />
                    {date?.from ? (
                      date.to ? (
                        <>
                          {getFormattedDate(date.from)} - {getFormattedDate(date.to)}
                        </>
                      ) : (
                        getFormattedDate(date.from)
                      )
                    ) : (
                      <span>{t("Analytics.select_date_range")}</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    initialFocus
                    mode="range"
                    defaultMonth={date?.from}
                    selected={date}
                    onSelect={setDate}
                    numberOfMonths={2}
                    locale={locale === "ar" ? ar : undefined}
                  />
                </PopoverContent>
              </Popover>
            </CardHeader>
            <CardContent className="">
              <ChartComponent data={data?.chartData || []} config={chartConfig} />
            </CardContent>
          </Card>
        </div>
        {profile?.subscribed_to === "pukla_enterprise" ? (
          <div className="flex w-full flex-col gap-2">
            <AnalyticsTable data={data?.tableData || []} />
          </div>
        ) : (
          <div className="relative min-h-[300px] w-full">
            <Card className="relative z-[11] flex min-h-[300px] flex-col items-center justify-center bg-transparent">
              <CardHeader className="flex flex-col items-center justify-center gap-2">
                <CardTitle className="text-center">
                  {t("Billing.only_for_enterprise_users")}
                </CardTitle>
                <CardDescription className="text-center">
                  {t("Billing.upgrade_to_enterprise_for_advanced_analytics")}
                </CardDescription>
              </CardHeader>
              <CardContent className="flex justify-center">
                <Link href="/billing">
                  <Button>{t("General.upgrade")}</Button>
                </Link>
              </CardContent>
            </Card>
            <div className="bg-background absolute top-0 z-[10] h-full w-full [mask-image:linear-gradient(to_top,white,70%,transparent)]"></div>
            <AnalyticsTable
              className="absolute top-0 h-full !min-h-full w-full opacity-30"
              hidePagination
              fake
              data={fakeAnalyticsData}
            />
          </div>
        )}
      </main>
    </>
  );
}
export function ChartComponent({ data, config }: { data: any[]; config: ChartConfig }) {
  return (
    <ChartContainer config={config} className="max-h-[300px] w-full">
      <BarChart accessibilityLayer data={data} margin={{ left: 12, right: 12 }}>
        <CartesianGrid vertical={false} />
        <XAxis dataKey="label" tickLine={false} axisLine={false} tickMargin={8} />
        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
        <Bar dataKey="desktop" fill={config.desktop.color} radius={4} />
        <Bar dataKey="mobile" fill={config.mobile.color} radius={4} />
      </BarChart>
    </ChartContainer>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/auth.tsx">
import { Eye, EyeOff, Loader2 } from "lucide-react";
import { GetStaticProps } from "next";
import { useLocale, useTranslations } from "next-intl";
import { useTheme } from "next-themes";
import Image from "next/image";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/ui/card";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import LanguageSwitcher from "@/ui/language-switcher";
import ThemeSwitcher from "@/ui/theme-switcher";
import { createClient } from "@/utils/supabase/component";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import useUserStore from "@/stores/use-user-store";
export default function Auth() {
  const t = useTranslations();
  const router = useRouter();
  const lang = useLocale();
  const supabase = createClient();
  const { resolvedTheme } = useTheme();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [loadingGoogle, setLoadingGoogle] = useState(false);
  const [isSignUp, setIsSignUp] = useState(false);
  const [isForgotPassword, setIsForgotPassword] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const user = useUserStore((state) => state.user);
  useEffect(() => {
    setIsSignUp(router.asPath.includes("#signup"));
    if (user) {
      // Check if there's a redirect path in sessionStorage
      const redirectPath = sessionStorage.getItem("redirectAfterAuth") || "/dashboard";
      sessionStorage.removeItem("redirectAfterAuth");
      router.replace(redirectPath);
    }
  }, [user, router]);
  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
      toast.success(t("Auth.logged_in_successfully"));
    } catch (error: any) {
      // Attempt to translate Supabase auth error codes
      const errorCode = error.code || error.message;
      const translatedError = t(`Auth.${errorCode}`, undefined, errorCode);
      toast.error(translatedError);
    } finally {
      setLoading(false);
    }
  };
  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      toast.error(t("Auth.passwords_do_not_match"));
      return;
    }
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });
      if (error) throw error;
      if (data.user) {
        // Create the user profile
        const { error: profileError } = await supabase.from("profiles").upsert({
          id: data.user.id,
          email: data.user.email,
          full_name: email.split("@")[0], // Placeholder
        });
        if (profileError) {
          toast.error(t("Auth.profile_creation_error"));
          throw profileError;
        }
        // Redirect to onboarding
        router.push("/onboarding");
      }
      toast.success(t("Auth.signup_successful_check_email"));
    } catch (error: any) {
      // Attempt to translate Supabase auth error codes
      const errorCode = error.code || error.message;
      const translatedError = t(`Auth.${errorCode}`, undefined, errorCode);
      toast.error(translatedError);
    } finally {
      setLoading(false);
    }
  };
  const handleGoogleAuth = async () => {
    setLoadingGoogle(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
          queryParams: {
            prompt: "select_account",
          },
        },
      });
      if (error) throw error;
    } catch (error) {
      toast.error(t("Auth.failed_to_sign_in_with_google"));
    } finally {
      setLoadingGoogle(false);
    }
  };
  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/reset-password`,
      });
      if (error) throw error;
      toast.success(t("Auth.password_reset_email_sent"));
    } catch (error: any) {
      toast.error(t("Auth." + error.code));
    } finally {
      setLoading(false);
    }
  };
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  const logoSrc = `https://sikka-images.s3.ap-southeast-1.amazonaws.com/products/tanad/tanad_full_logo_${
    !mounted || resolvedTheme === "dark" ? "white" : "black"
  }${lang === "en" ? "_en" : "_ar"}.png`;
  // Return null or loading state before client-side mount
  if (!mounted) {
    return null;
  }
  return (
    <div
      dir={lang === "ar" ? "rtl" : "ltr"}
      className="flex h-full flex-col items-center justify-center py-12 sm:px-6 lg:px-8"
    >
      <CustomPageMeta title={t("SEO.auth.title")} description={t("SEO.auth.description")} />
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <Image
          height={512}
          width={512}
          loading="lazy"
          className={"h-10 w-auto"}
          alt={`Tanad Logo`}
          src={logoSrc}
        />
        <div className="text-muted-foreground w-full pt-4 text-center text-sm md:text-start xl:whitespace-nowrap">
          {t("Landing.footer.tagline")}
        </div>
      </div>
      {isForgotPassword ? (
        <div className="mt-8 flex w-full max-w-[90%] flex-col gap-2 sm:mx-auto sm:w-full sm:max-w-md">
          <Card>
            <CardHeader>
              <CardTitle className="text-center">{t("Auth.reset_password")}</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleResetPassword} className="space-y-6">
                <div className="flex flex-col gap-2">
                  <Label htmlFor="email">{t("Auth.email_address")}</Label>
                  <Input
                    id="email"
                    type="email"
                    autoComplete="email"
                    dir="ltr"
                    className={lang === "ar" ? "text-right" : ""}
                    required
                    value={email}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
                  />
                </div>
                <Button type="submit" disabled={loading} className="w-full">
                  {loading ? (
                    <Loader2 className="me-2 h-4 w-4 animate-spin" />
                  ) : (
                    t("Auth.reset_password")
                  )}
                </Button>
              </form>
              {/* Go back to sign in */}
              <button
                onClick={() => setIsForgotPassword(false)}
                className="text-muted-foreground hover:text-primary mt-4 w-full cursor-pointer text-sm"
              >
                {t("Auth.go_back_to_sign_in")}
              </button>
            </CardContent>
          </Card>
          <div className="flex flex-row justify-between">
            <LanguageSwitcher />
            <ThemeSwitcher />
          </div>
        </div>
      ) : (
        <div className="mt-8 flex w-full max-w-[90%] flex-col gap-2 sm:mx-auto sm:w-full sm:max-w-md">
          <Card>
            <CardHeader>
              <CardTitle className="text-center">
                {isSignUp ? t("Auth.create_your_account") : t("Auth.sign_in_to_your_account")}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={isSignUp ? handleSignUp : handleSignIn} className="space-y-6">
                <div className="flex flex-col gap-2">
                  <Label htmlFor="email">{t("Auth.email_address")}</Label>
                  <Input
                    id="email"
                    type="email"
                    autoComplete="email"
                    dir="ltr"
                    className={lang === "ar" ? "text-right" : ""}
                    required
                    value={email}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
                  />
                </div>
                <div className="flex flex-col gap-2">
                  <Label htmlFor="password">{t("Auth.password")}</Label>
                  <div className="relative">
                    <Input
                      id="password"
                      autoComplete="current-password"
                      type={showPassword ? "text" : "password"}
                      required
                      value={password}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        setPassword(e.target.value)
                      }
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                      onClick={() => setShowPassword(!showPassword)}
                      tabIndex={-1}
                    >
                      {showPassword ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
                    </Button>
                  </div>
                  {!isSignUp && (
                    <p
                      className="text-muted-foreground w-fit cursor-pointer text-sm"
                      onClick={() => setIsForgotPassword(true)}
                    >
                      {t("Auth.forgot_password")}
                    </p>
                  )}
                </div>
                {isSignUp && (
                  <div className="flex flex-col gap-2">
                    <Label htmlFor="confirm-password">{t("Auth.confirm_password")}</Label>
                    <div className="relative">
                      <Input
                        id="confirm-password"
                        autoComplete="confirm-password"
                        type={showPassword ? "text" : "password"}
                        required
                        value={confirmPassword}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                          setConfirmPassword(e.target.value)
                        }
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                        onClick={() => setShowPassword(!showPassword)}
                        tabIndex={-1}
                      >
                        {showPassword ? (
                          <Eye className="h-4 w-4" />
                        ) : (
                          <EyeOff className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                  </div>
                )}
                <div className="flex flex-col gap-4">
                  <Button type="submit" disabled={loading} className="w-full">
                    {loading ? (
                      <Loader2 className="me-2 h-4 w-4 animate-spin" />
                    ) : isSignUp ? (
                      t("Auth.sign_up")
                    ) : (
                      t("Auth.sign_in")
                    )}
                  </Button>
                </div>
              </form>
              <div className="mt-6">
                <button
                  onClick={() => setIsSignUp(!isSignUp)}
                  className="text-muted-foreground hover:text-primary w-full cursor-pointer text-sm"
                >
                  {isSignUp
                    ? t("Auth.already_have_an_account") + " " + t("Auth.sign_in")
                    : t("Auth.dont_have_an_account") + " " + t("Auth.sign_up")}
                </button>
              </div>
            </CardContent>
          </Card>
          <div className="flex flex-row justify-between">
            <LanguageSwitcher />
            <ThemeSwitcher />
          </div>
        </div>
      )}
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/billing.tsx">
// Components
import { CreditCard, Package, User } from "lucide-react";
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/ui/card";
import PageTitle from "@/ui/page-title";
import { Skeleton } from "@/ui/skeleton";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import useUserStore from "@/stores/use-user-store";
export default function Billing() {
  const t = useTranslations();
  const { profile, loading } = useUserStore();
  // Show a skeleton while loading
  if (loading) {
    return (
      <>
        <CustomPageMeta title={t("Billing.title")} description={t("Billing.description")} />
        <PageTitle texts={{ title: t("Billing.title") }} />
        <main className="space-y-6 p-4">
          <Skeleton className="h-64 w-full" />
        </main>
      </>
    );
  }
  return (
    <>
      <CustomPageMeta title={t("Billing.title")} description={t("Billing.description")} />
      <PageTitle texts={{ title: t("Billing.title") }} />
      <main className="space-y-6 p-4">
        <Card>
          <CardHeader>
            <CardTitle>{t("Billing.subscription_info")}</CardTitle>
            <CardDescription>{t("Billing.manage_subscription")}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <User className="text-muted-foreground h-5 w-5" />
                <span>{t("Billing.customer_id")}: </span>
                <span className="font-mono text-sm">
                  {profile?.stripe_customer_id || t("General.none")}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Package className="text-muted-foreground h-5 w-5" />
                <span>{t("Billing.plan")}: </span>
                <span className="font-medium">
                  {profile?.subscribed_to || t("Billing.free_plan")}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CreditCard className="text-muted-foreground h-5 w-5" />
                <span>{t("Billing.payment_method")}: </span>
                <span>{t("General.none")}</span>
              </div>
              <div className="mt-6 text-center">{t("General.coming_soon")}</div>
            </div>
          </CardContent>
        </Card>
      </main>
    </>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/blog.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
// Components
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
export default function BlogPage() {
  const t = useTranslations("Blog");
  return (
    <div className="flex flex-col items-center justify-center py-10 pb-32">
      <div className="flex flex-col items-center justify-center gap-2 p-10">
        <CustomMotionDiv className="p-10 pb-0 text-5xl font-bold">{t("title")}</CustomMotionDiv>
        <CustomMotionDiv delay={0.1} className="text-md p-0">
          {t("subtitle")}
        </CustomMotionDiv>
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/contact.tsx">
import { GetStaticProps } from "next";
import { useTranslations, useLocale } from "next-intl";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/ui/dialog";
import { useBreakpoint } from "@/hooks/use-breakpoint";
import { ContactForm } from "@/components/landing/ContactForm";
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import SocialIcons from "@/components/landing/SocialIcons";
import settings from "../../landing.config";
export default function ContactPage() {
  const t = useTranslations();
  const lang = useLocale();
  const [openSuccessDialog, setOpenSuccessDialog] = useState(false);
  let size = useBreakpoint();
  let isMobile = size < 600;
  async function callApi(formData: any) {
    try {
      const response = await fetch("/api/form-contact", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      const data = await response.json();
    } catch (error) {
      console.error("Failed to fetch from the API", error);
    }
  }
  return (
    <div className="flex flex-col items-center justify-center py-10 pb-32">
      <CustomPageMeta title={t("SEO.contact.title")} description={t("SEO.contact.description")} />
      <div className="flex flex-col items-center justify-center gap-2 p-10 text-center">
        <CustomMotionDiv className="py-10 pb-0 text-5xl font-bold">
          {t("ContactPage.hero.title")}
        </CustomMotionDiv>
        <CustomMotionDiv delay={0.1} className="text-md p-0">
          {t("ContactPage.hero.subtitle")}
        </CustomMotionDiv>
      </div>
      <CustomMotionDiv delay={0.2} className="w-full max-w-lg p-4 pt-0 drop-shadow-xl md:p-2">
        <ContactForm
          onSubmit={(e) => {
            setOpenSuccessDialog(true);
            let formData = {
              name: e.name,
              email: e.email,
              content: e.message,
            };
            callApi(formData);
          }}
          size={isMobile ? "sm" : "default"}
          formId="contact-us"
          formAutoComplete="on"
          texts={{
            submit: t("General.submit"),
            email: {
              invalid: t("ContactPage.contact-form.email.invalid"),
              label: t("ContactPage.contact-form.email.label"),
              placeholder: t("ContactPage.contact-form.email.placeholder"),
              required: t("ContactPage.contact-form.email.required"),
            },
            name: {
              invalid: t("ContactPage.contact-form.name.invalid"),
              label: t("ContactPage.contact-form.name.label"),
              placeholder: t("ContactPage.contact-form.name.placeholder"),
              required: t("ContactPage.contact-form.name.required"),
            },
            message: {
              invalid: t("ContactPage.contact-form.message.invalid"),
              label: t("ContactPage.contact-form.message.label"),
              placeholder: t("ContactPage.contact-form.message.placeholder"),
              required: t("ContactPage.contact-form.message.required"),
            },
          }}
        />
      </CustomMotionDiv>
      <Dialog open={openSuccessDialog} onOpenChange={setOpenSuccessDialog}>
        <DialogContent dir={lang === "ar" ? "rtl" : "ltr"}>
          <DialogHeader>
            <DialogTitle>{t("ContactPage.contact-form.submitted.title")}</DialogTitle>
            <DialogDescription>
              {t("ContactPage.contact-form.submitted.subtitle")}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <div className="flex w-full flex-col gap-4 text-center md:text-start">
              <div>{t("ContactPage.contact-form.submitted.contact-methods")}</div>
              <div className="flex flex-row justify-center gap-2 md:justify-start">
                <SocialIcons {...settings.contact} />
              </div>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/contacts.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { useState } from "react";
import { buttonVariants } from "@/ui/button";
import DataModelList from "@/ui/data-model-list";
import PageTitle from "@/ui/page-title";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/ui/tabs";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import ClientCard from "@/client/client.card";
import { useClients } from "@/client/client.hooks";
import { Client } from "@/client/client.type";
import VendorCard from "@/vendor/vendor.card";
import { useVendors } from "@/vendor/vendor.hooks";
import { Vendor } from "@/vendor/vendor.type";
export default function ContactsPage() {
  const t = useTranslations();
  const [activeTab, setActiveTab] = useState<"clients" | "vendors">("clients");
  const { data: clients, isLoading: clientsLoading, error: clientsError } = useClients();
  const { data: vendors, isLoading: vendorsLoading, error: vendorsError } = useVendors();
  return (
    <div>
      <CustomPageMeta title={t("Contacts.title")} description={t("Contacts.description")} />
      <PageTitle
        texts={{
          title: t("Contacts.title"),
          submit_form: t("Contacts.add_client"),
          cancel: t("General.cancel"),
        }}
        customButton={
          <div className="flex gap-3">
            <Link href="/clients/add" className={buttonVariants({ variant: "outline" })}>
              {t("Contacts.add_client")}
            </Link>
            <Link href="/vendors/add" className={buttonVariants({ variant: "default" })}>
              {t("Contacts.add_vendor")}
            </Link>
          </div>
        }
      />
      <div className="p-4">
        <Tabs
          defaultValue="clients"
          value={activeTab}
          onValueChange={(value) => setActiveTab(value as "clients" | "vendors")}
          className="mb-6"
        >
          <TabsList className="mb-4">
            <TabsTrigger value="clients">{t("Contacts.clients_tab")}</TabsTrigger>
            <TabsTrigger value="vendors">{t("Contacts.vendors_tab")}</TabsTrigger>
          </TabsList>
          <TabsContent value="clients">
            <DataModelList
              data={clients as Client[]}
              isLoading={clientsLoading}
              error={clientsError instanceof Error ? clientsError : null}
              emptyMessage={t("Clients.no_clients_found")}
              renderItem={(client) => <ClientCard client={client} />}
              gridCols="3"
            />
          </TabsContent>
          <TabsContent value="vendors">
            <DataModelList
              data={vendors as Vendor[]}
              isLoading={vendorsLoading}
              error={vendorsError instanceof Error ? vendorsError : null}
              emptyMessage={t("Vendors.no_vendors")}
              renderItem={(vendor) => <VendorCard vendor={vendor} />}
              gridCols="3"
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/dashboard.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { StatCard } from "@/ui/stat-card";
import { createClient } from "@/utils/supabase/component";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import { useEmployees } from "@/modules/employee/employee.hooks";
import useUserStore from "@/stores/use-user-store";
interface DashboardStats {
  totalInvoices: number;
  totalProducts: number;
  totalRevenue: number;
  pendingInvoices: number;
  totalEmployees: number;
  totalDepartments: number;
  totalJobs: number;
  totalClients: number;
  totalCompanies: number;
  totalVendors: number;
  totalOffices: number;
  totalWarehouses: number;
  totalBranches: number;
}
export default function Dashboard() {
  const supabase = createClient();
  const [stats, setStats] = useState<DashboardStats>({
    totalInvoices: 0,
    totalProducts: 0,
    totalRevenue: 0,
    pendingInvoices: 0,
    totalEmployees: 0,
    totalDepartments: 0,
    totalJobs: 0,
    totalClients: 0,
    totalCompanies: 0,
    totalVendors: 0,
    totalOffices: 0,
    totalWarehouses: 0,
    totalBranches: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const t = useTranslations();
  const router = useRouter();
  const { user, profile, enterprise, error: userError } = useUserStore();
  // Comment out hooks that are causing infinite loops
  // Keep the ones that are working correctly
  const { data: employees } = useEmployees();
  // const { data: departments } = useDepartments();
  // const { data: jobs } = useJobs();
  // const { data: clients } = useClients();
  // const { data: companies } = useCompanies();
  // const { data: vendors } = useVendors();
  // const { data: offices } = useOffices();
  // const { data: warehouses } = useWarehouses();
  // const { data: branches } = useBranches();
  // Use placeholders for commented-out hooks
  const departments = [];
  const jobs = [];
  const clients = [];
  const companies = [];
  const vendors = [];
  const offices = [];
  const warehouses = [];
  const branches = [];
  const createOptions = [
    {
      label: t("Dashboard.add_product"),
      value: "product",
      path: "/products/add",
    },
    {
      label: t("Dashboard.add_invoice"),
      value: "invoice",
      path: "/invoices/add",
    },
    { label: t("Dashboard.add_client"), value: "client", path: "/clients/add" },
    {
      label: t("Dashboard.add_employee"),
      value: "employee",
      path: "/employees/add",
    },
    {
      label: t("Dashboard.add_warehouse"),
      value: "warehouse",
      path: "/warehouses/add",
    },
  ];
  const handleCreateOption = (value: string) => {
    const option = createOptions.find((opt) => opt.value === value);
    if (option) {
      router.push(option.path);
    }
  };
  // Fetch dashboard stats
  useEffect(() => {
    let isMounted = true;
    async function fetchDashboardStats() {
      if (!isMounted || !user?.id) {
        return;
      }
      try {
        // If no enterprise is found, set loading to false but don't attempt to fetch enterprise-dependent data
        if (!enterprise?.id) {
          if (isMounted) {
            setLoading(false);
          }
          return;
        }
        // Fetch total invoices and revenue
        const { data: invoiceStats, error: invoiceError } = await supabase
          .from("invoices")
          .select("id, total, status")
          .eq("enterprise_id", enterprise.id);
        if (invoiceError) throw invoiceError;
        // Fetch total products
        const { count: productCount, error: productError } = await supabase
          .from("products")
          .select("id", { count: "exact" })
          .eq("enterprise_id", enterprise.id);
        if (productError) throw productError;
        if (!isMounted) return;
        const totalRevenue =
          invoiceStats?.reduce((sum, invoice) => sum + (invoice.total || 0), 0) || 0;
        const pendingInvoices =
          invoiceStats?.filter((invoice) => invoice.status.toLowerCase() === "pending").length || 0;
        setStats({
          totalInvoices: invoiceStats?.length || 0,
          totalProducts: productCount || 0,
          totalRevenue,
          pendingInvoices,
          totalEmployees: employees?.length || 0,
          totalDepartments: departments?.length || 0,
          totalJobs: jobs?.length || 0,
          totalClients: clients?.length || 0,
          totalCompanies: companies?.length || 0,
          totalVendors: vendors?.length || 0,
          totalOffices: offices?.length || 0,
          totalWarehouses: warehouses?.length || 0,
          totalBranches: branches?.length || 0,
        });
      } catch (err) {
        console.error("Error fetching stats:", err);
        if (isMounted) {
          setError(
            err instanceof Error ? err.message : "An error occurred while fetching dashboard stats",
          );
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    }
    if (user?.id) {
      fetchDashboardStats();
    }
    return () => {
      isMounted = false;
    };
  }, [
    user?.id,
    enterprise?.id,
    employees,
    // Remove these dependencies since we've commented out the hooks
    // departments,
    // jobs,
    // clients,
    // companies,
    // vendors,
    // offices,
    // warehouses,
    // branches,
  ]);
  // Show error state
  if (error) {
    return (
      <DataPageLayout>
        <CustomPageMeta title={t("Dashboard.title")} description={t("Dashboard.description")} />
        <div className="flex flex-col items-center justify-center gap-4 p-8">
          <h2 className="text-xl font-semibold">{t("Dashboard.error_loading")}</h2>
          <p className="text-muted-foreground">{error}</p>
        </div>
      </DataPageLayout>
    );
  }
  return (
    <div>
      <CustomPageMeta title={t("Dashboard.title")} description={t("Dashboard.description")} />
      {profile?.stripe_customer_id && (
        <div className="bg-green-500/20 p-1 text-center text-xs text-green-700 dark:text-green-300">
          ✓ Premium Account
        </div>
      )}
      {/* <PageTitle
        texts={{
          title: t("Dashboard.title"),
          submit_form: t("Dashboard.title"),
          cancel: t("General.cancel"),
        }}
      /> */}
      <div className="space-y-8 p-4">
        {/* Contacts Section */}
        <div>
          <h2 className="mb-4 text-lg font-semibold">{t("Contacts.title")}</h2>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            <StatCard
              title={t("Clients.title")}
              value={stats.totalClients}
              loading={loading}
              link="/clients"
            />
            <StatCard
              title={t("Companies.title")}
              value={stats.totalCompanies}
              loading={loading}
              link="/companies"
            />
            <StatCard
              title={t("Vendors.title")}
              value={stats.totalVendors}
              loading={loading}
              link="/vendors"
            />
          </div>
        </div>
        {/* Locations Section */}
        <div>
          <h2 className="mb-4 text-lg font-semibold">{t("Locations.title")}</h2>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            <StatCard
              title={t("Offices.title")}
              value={stats.totalOffices}
              loading={loading}
              link="/offices"
            />
            <StatCard
              title={t("Warehouses.title")}
              value={stats.totalWarehouses}
              loading={loading}
              link="/warehouses"
            />
            <StatCard
              title={t("Branches.title")}
              value={stats.totalBranches}
              loading={loading}
              link="/branches"
            />
          </div>
        </div>
        {/* Sales & Revenue Section */}
        <div>
          <h2 className="mb-4 text-lg font-semibold">{t("Sales.title")}</h2>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4">
            <StatCard
              title={t("Invoices.title")}
              value={stats.totalInvoices}
              loading={loading}
              link="/invoices"
              additionalText={`${stats.pendingInvoices} ${t("Dashboard.pending")}`}
            />
            <StatCard
              title={t("Products.title")}
              value={stats.totalProducts}
              loading={loading}
              link="/products"
            />
            <StatCard
              title={t("Revenue.title")}
              value={`$${stats.totalRevenue.toFixed(2)}`}
              loading={loading}
            />
            <StatCard
              title={t("Invoices.title")}
              value={stats.pendingInvoices}
              loading={loading}
              additionalText={`${((stats.pendingInvoices / stats.totalInvoices) * 100).toFixed(1)}% ${t(
                "Dashboard.of_total",
              )}`}
            />
          </div>
        </div>
        {/* Human Resources Section */}
        <div>
          <h2 className="mb-4 text-lg font-semibold">{t("HumanResources.title")}</h2>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            <StatCard
              title={t("Employees.title")}
              value={stats.totalEmployees}
              loading={loading}
              link="/employees"
            />
            <StatCard
              title={t("Departments.title")}
              value={stats.totalDepartments}
              loading={loading}
              link="/departments"
            />
            <StatCard
              title={t("Jobs.title")}
              value={stats.totalJobs}
              loading={loading}
              link="/jobs"
            />
          </div>
        </div>
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/directory.tsx">
import { Search } from "lucide-react";
import { GetStaticPropsContext } from "next";
import { useTranslations } from "next-intl";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { useDebounce } from "use-debounce";
import { Card, CardContent } from "@/ui/card";
import { Input } from "@/ui/input";
import { Skeleton } from "@/ui/skeleton";
import { createClient } from "@/utils/supabase/component";
type Pukla = {
  id: string;
  title: string;
  bio: string | null;
  slug: string;
  avatar_url: string | null;
  user: {
    id: string;
    name: string | null;
  };
  created_at: string;
};
export default function DirectoryPage() {
  const supabase = createClient();
  const t = useTranslations();
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState("");
  const [debouncedSearchQuery] = useDebounce(searchQuery, 500);
  const [puklas, setPuklas] = useState<Pukla[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    const fetchPuklas = async () => {
      try {
        setIsLoading(true);
        let query = supabase
          .from("puklas")
          .select(
            `
            id,
            title,
            bio,
            slug,
            avatar_url,
            created_at
          `,
          )
          .eq("is_public", true)
          .order("created_at", { ascending: false });
        if (debouncedSearchQuery) {
          query = query.or(
            `title.ilike.%${debouncedSearchQuery}%,bio.ilike.%${debouncedSearchQuery}%`,
          );
        }
        const { data, error } = await query;
        if (error) throw error;
        setPuklas(
          data?.map((item) => ({
            ...item,
          })) as Pukla[],
        );
      } catch (error) {
        console.error("Error fetching puklas:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchPuklas();
  }, [debouncedSearchQuery]);
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 text-center">
        <h1 className="mb-2 text-4xl font-bold">{t("Directory.title")}</h1>
        <p className="text-muted-foreground">{t("Directory.subtitle")}</p>
      </div>
      <div className="mx-auto mb-8 max-w-xl">
        <div className="relative">
          <Search className="text-muted-foreground absolute start-3 top-1/2 size-4 -translate-y-1/2" />
          <Input
            placeholder={t("Directory.search_placeholder")}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="ps-8"
          />
        </div>
      </div>
      {isLoading ? (
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="cursor-pointer transition-shadow hover:shadow-lg">
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <Skeleton className="h-12 w-12 rounded-full" />
                  <div className="space-y-2">
                    <Skeleton className="h-4 w-[200px]" />
                    <Skeleton className="h-4 w-[150px]" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : puklas.length > 0 ? (
        <>
          <p className="text-muted-foreground mb-4 text-sm">
            {t("Directory.total_puklas", { count: puklas.length })}
          </p>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            {puklas.map((pukla) => (
              <Link href={`/${pukla.slug}`} target="_blank">
                <Card key={pukla.id} className="cursor-pointer transition-shadow hover:shadow-lg">
                  <CardContent className="p-6">
                    <div className="flex items-center gap-4">
                      <div className="bg-muted relative h-12 w-12 overflow-hidden rounded-full">
                        {pukla.avatar_url ? (
                          <Image
                            src={pukla.avatar_url}
                            alt={pukla.title}
                            fill
                            className="object-cover"
                          />
                        ) : (
                          <div className="bg-primary/10 flex h-full w-full items-center justify-center">
                            <span className="text-primary text-xl font-semibold">
                              {pukla.title[0].toUpperCase()}
                            </span>
                          </div>
                        )}
                      </div>
                      <div>
                        <h3 className="font-semibold">{pukla.title}</h3>
                        <p className="text-muted-foreground line-clamp-2 text-sm">
                          {pukla.bio || `puk.la/${pukla.slug}`}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </>
      ) : (
        <div className="py-12 text-center">
          <h3 className="mb-2 text-lg font-semibold">{t("Directory.no_puklas_found")}</h3>
          <p className="text-muted-foreground">{t("Directory.no_puklas_found_description")}</p>
        </div>
      )}
    </div>
  );
}
export async function getStaticProps({ locale }: GetStaticPropsContext) {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
}
</file>

<file path="src/pages/features.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
// Components
import BottomCTA from "@/components/landing/BottomCTA";
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import FeatureCard from "@/components/landing/FeatureCard";
// Constants
import settings from "../../landing.config";
export default function FeaturesPage() {
  const t = useTranslations();
  return (
    <div className="flex w-full flex-col">
      <CustomPageMeta title={t("SEO.features.title")} description={t("SEO.features.description")} />
      <div className="flex flex-col items-center justify-center py-10 pb-2">
        <div className="flex flex-col items-center justify-center gap-2 py-10">
          <CustomMotionDiv className="max-w-5xl p-10 pb-0 text-center text-5xl font-bold">
            {t("Features.hero.title")}
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.1} className="text-md p-0 px-2 text-center">
            {t("Features.hero.subtitle")}
          </CustomMotionDiv>
        </div>
      </div>
      <div className="flex flex-col items-center justify-center p-6 py-20 md:p-12">
        <div className="grid w-full max-w-7xl grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {settings.features?.map((f: any, i: any) => (
            <FeatureCard
              soon={f.soon}
              soonText={t("General.soon")}
              index={i}
              key={i}
              icon={f.icon}
              title={t(`Features.${f.title}`)}
              subtitle={t(`Features.${f.description}`)}
            />
          ))}
        </div>
      </div>
      <BottomCTA
        title={t("Landing.cta.title")}
        subtitle={t("Landing.cta.subtitle")}
        primaryActionText={t("Landing.cta.action-1-text")}
        primaryActionSlug={"/dashboard"}
      />
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/help.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardTitle } from "@/ui/card";
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import SocialIcons from "@/components/landing/SocialIcons";
// Constants
import settings from "../../landing.config";
export default function HelpPage() {
  const t = useTranslations();
  return (
    <>
      <CustomPageMeta title={t("SEO.help.title")} description={t("SEO.help.description")} />
      <div className="flex flex-col items-center justify-center py-10 pb-32">
        <div className="flex flex-col items-center justify-center gap-2 p-10">
          <CustomMotionDiv className="p-10 pb-0 text-center text-5xl font-bold">
            {t("Help.hero.title")}
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.1} className="text-md p-0 text-center">
            {t("Help.hero.subtitle")}
          </CustomMotionDiv>
        </div>
        <CustomMotionDiv delay={0.2} className="text-md p-2 text-center md:p-0">
          {t("Help.hero.in-the-meantime")}
        </CustomMotionDiv>
        <CustomMotionDiv delay={0.3} className="text-md mt-4 flex flex-row p-0">
          <SocialIcons {...settings.contact} phone={""} />
        </CustomMotionDiv>
        <div className="grid w-full max-w-4xl grid-cols-1 gap-4 p-4 md:grid-cols-2">
          <CustomMotionDiv delay={0.4} className="text-md mt-4 flex w-full flex-row p-0">
            <Link href={"/contact"} className="w-full">
              <Card className="h-full w-full">
                <CardContent headless className="space-y-2">
                  <CardTitle>{t("Help.contact.title")}</CardTitle>
                  <CardDescription>{t("Help.contact.subtitle")}</CardDescription>
                </CardContent>
              </Card>
            </Link>
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.4} className="text-md mt-4 flex w-full flex-row p-0">
            <Link href={"/report"} className="w-full">
              <Card className="h-full w-full">
                <CardContent headless className="space-y-2">
                  <CardTitle>{t("ReportPage.page-title")}</CardTitle>
                  <CardDescription>{t("ReportPage.page-subtitle")}</CardDescription>
                </CardContent>
              </Card>
            </Link>
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.4} className="text-md mt-4 flex w-full flex-row p-0">
            <Link href={"/report-ip"} className="w-full">
              <Card className="h-full w-full">
                <CardContent headless className="space-y-2">
                  <CardTitle>{t("ReportPage.report-ip.title")}</CardTitle>
                  <CardDescription>{t("ReportPage.report-ip.subtitle")}</CardDescription>
                </CardContent>
              </Card>
            </Link>
          </CustomMotionDiv>
          <CustomMotionDiv delay={0.5} className="text-md mt-4 flex w-full flex-row p-0">
            <Link href={"/appeal"} className="w-full">
              <Card className="h-full w-full">
                <CardContent headless className="space-y-2">
                  <CardTitle>{t("AppealPage.page-title")}</CardTitle>
                  <CardDescription>{t("AppealPage.page-subtitle")}</CardDescription>
                </CardContent>
              </Card>
            </Link>
          </CustomMotionDiv>
        </div>
      </div>
    </>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/index.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import CustomersSection from "@/ui/customers-section";
import { HeroSection as HeroSection2 } from "@/ui/hero-section-2";
import BottomCTA from "@/components/landing/BottomCTA";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import Features from "@/components/landing/Features";
import FloatingPuklas from "@/components/landing/FloatingPuklas";
import HeroSection from "@/components/landing/HeroSection";
import { DepartmentsFeatures } from "@/components/landing/departments-features";
import { FeaturesSection } from "@/components/landing/features-section";
import { Pricing } from "@/components/landing/pricing-with-comparison";
import WaitlistSection from "@/components/landing/waitlist-section";
export default function LandingPage() {
  const t = useTranslations();
  return (
    <div className="flex flex-col">
      <CustomPageMeta title={t("SEO.landing.title")} description={t("SEO.landing.description")} />
      <HeroSection2 />
      <CustomersSection />
      <DepartmentsFeatures />
      <FeaturesSection />
      <Pricing />
      {/* <div className="flex flex-col gap-[150px]">
        <div className="flex flex-col gap-[150px] px-10 py-24 pt-32 md:pt-44">
          <HeroSection
            withAction
            title={t("Landing.hero.title")}
            subtitle={t("Landing.hero.subtitle")}
            actionPath="/dashboard"
          />
        </div>
      </div>
      <FloatingPuklas />
      <Features />
      <BottomCTA
        title={t("Landing.cta.title")}
        subtitle={t("Landing.cta.subtitle")}
        primaryActionText={t("Landing.cta.action-1-text")}
        primaryActionSlug={"/dashboard"}
      /> */}
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/legal.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
export default function LegalPage() {
  const t = useTranslations("Landing");
  return (
    <div className="flex flex-col items-center justify-center py-10">
      <div className="text-7xl font-bold">Legal</div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/onboarding.tsx">
import { GetStaticProps } from "next";
import { useLocale, useTranslations } from "next-intl";
import { useTheme } from "next-themes";
import Image from "next/image";
import { useState } from "react";
import { useEffect } from "react";
import { Card, CardContent } from "@/ui/card";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import LanguageSwitcher from "@/components/ui/language-switcher";
import ThemeSwitcher from "@/components/ui/theme-switcher";
import { OnboardingForm } from "@/modules/onboarding/onboarding.form";
export default function OnboardingPage() {
  const t = useTranslations();
  const lang = useLocale();
  const { resolvedTheme } = useTheme();
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  return (
    <div
      dir={lang === "ar" ? "rtl" : "ltr"}
      className="flex h-full flex-col items-center justify-center py-12 sm:px-6 lg:px-8"
    >
      <CustomPageMeta title={t("SEO.auth.title")} description={t("SEO.auth.description")} />
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <Image
          loading="lazy"
          width={512}
          height={512}
          src={`https://sikka-images.s3.ap-southeast-1.amazonaws.com/products/tanad/tanad_symbol_${
            !isMounted || resolvedTheme === "dark" ? "white" : "black"
          }.png`}
          className="mb-4 aspect-auto h-[30px] w-auto"
          alt="Tanad Logo"
        />
        <h1 className="text-2xl font-semibold tracking-tight">{t("OnBoarding.title")}</h1>
        <div className="text-muted-foreground w-full pt-4 text-center text-sm md:text-start xl:whitespace-nowrap">
          {t("OnBoarding.description")}
        </div>
      </div>
      <div className="mt-8 flex w-full max-w-[90%] flex-col gap-2 sm:mx-auto sm:w-full sm:max-w-md">
        <Card className="w-full">
          <CardContent className="pt-6">
            <OnboardingForm />
          </CardContent>
        </Card>
        <div className="flex flex-row justify-between">
          <LanguageSwitcher />
          <ThemeSwitcher />
        </div>
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/pricing.tsx">
import { GetStaticProps } from "next";
import { useTranslations, useLocale } from "next-intl";
import { useState } from "react";
// import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/ui/accordion";
import { PricingCardProps } from "@/ui/pricing-card";
// import BottomCTA from "@/components/landing/BottomCTA";
// import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
// import CustomPageMeta from "@/components/landing/CustomPageMeta";
// import HeroSection from "@/components/landing/HeroSection";
// import { PricingPlans } from "@/components/landing/PricingPlans";
import WaitlistSection from "@/components/landing/waitlist-section";
import { plan1Price, plan2Price, plan3Price } from "@/lib/utils";
import settings from "../../landing.config";
export default function PricingPage() {
  const t = useTranslations();
  const lang = useLocale();
  const [pricingCycle, setPricingCycle] = useState("monthly");
  const [pricingCurrency, setPricingCurrency] = useState("sar");
  let plansArray: PricingCardProps[] = [
    {
      noPrice: true,
      price: plan1Price[pricingCurrency][pricingCycle],
      currentPlan: false,
      direction: lang === "ar" ? "rtl" : "ltr",
      onPlanClicked: () => window.open("https://my.puk.la/billing#1", "_blank"),
      id: "plan_id_1",
      features: [
        {
          included: true,
          text: t("Pricing.plan-1.features.feature-1"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-1.features.feature-2"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-1.features.feature-3"),
          soon: false,
        },
      ],
      texts: {
        buttonText: t("Pricing.plan-1.button-text"),
        currencyText: t(`Pricing.billing-currency.${pricingCurrency}`),
        cycleText: t(`Pricing.billing-cycle.${pricingCycle}`),
        title: t("Pricing.plan-1.title"),
        subtitle: t("Pricing.plan-1.subtitle"),
        priceless: t("Pricing.free"),
      },
    },
    {
      // oldPrice: 20,
      price: plan2Price[pricingCurrency][pricingCycle],
      currentPlan: false,
      direction: lang === "ar" ? "rtl" : "ltr",
      onPlanClicked: () => window.open("https://my.puk.la/billing#2", "_blank"),
      id: "plan_id_2",
      features: [
        {
          included: true,
          text: t("Pricing.plan-2.features.feature-1"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-2.features.feature-2"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-2.features.feature-3"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-2.features.feature-4"),
          soon: true,
        },
      ],
      texts: {
        buttonText: t("Pricing.plan-2.button-text"),
        currencyText: t(`Pricing.billing-currency.${pricingCurrency}`),
        cycleText: t(`Pricing.billing-cycle.${pricingCycle}`),
        title: t("Pricing.plan-2.title"),
        subtitle: t("Pricing.plan-2.subtitle"),
        soon: t("General.soon"),
      },
    },
    {
      // oldPrice: 20,
      price: plan3Price[pricingCurrency][pricingCycle],
      currentPlan: false,
      direction: lang === "ar" ? "rtl" : "ltr",
      onPlanClicked: () => window.open("https://my.puk.la/billing#3", "_blank"),
      id: "plan_id_3",
      // discount: "Save 10%",
      features: [
        {
          included: true,
          text: t("Pricing.plan-3.features.feature-1"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-3.features.feature-2"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-3.features.feature-3"),
          soon: false,
        },
        {
          included: true,
          text: t("Pricing.plan-3.features.feature-4"),
          soon: false,
        },
      ],
      texts: {
        buttonText: t("Pricing.plan-3.button-text"),
        currencyText: t(`Pricing.billing-currency.${pricingCurrency}`),
        cycleText: t(`Pricing.billing-cycle.${pricingCycle}`),
        title: t("Pricing.plan-3.title"),
        subtitle: t("Pricing.plan-3.subtitle"),
        soon: t("General.soon"),
      },
    },
    // {
    //   // oldPrice: 20,
    //   price: plan4Price[pricingCurrency.value][pricingCycle.value],
    //   // noPrice: true,
    //   currentPlan: false,
    //   direction: lang === "ar" ? "rtl" : "ltr",
    //   id: "plan_id_3",
    //   // discount: "Save 10%",
    //   features: [
    //     { included: true, text: t("plan-4.features.feature-1"), soon: false },
    //     { included: true, text: t("plan-4.features.feature-2"), soon: false },
    //     { included: true, text: t("plan-4.features.feature-3"), soon: false }
    //     // { included: true, text: t("plan-1.features.feature-4"), soon: false }
    //   ],
    //   texts: {
    //     buttonText: t("plan-4.button-text"),
    //     currencyText: t(pricingCurrency.value),
    //     cycleText: t(pricingCycle.value),
    //     title: t("plan-4.title"),
    //     subtitle: t("plan-4.subtitle")
    //     // priceless: t("contact-us")
    //   }
    // }
  ];
  let accordionArray = [
    {
      id: "faq-1",
      trigger: t("FAQ.faq-1.question"),
      content: t("FAQ.faq-1.answer"),
    },
    {
      id: "faq-2",
      trigger: t("FAQ.faq-2.question"),
      content: t("FAQ.faq-2.answer"),
    },
    {
      id: "faq-3",
      trigger: t("FAQ.faq-3.question"),
      content: t("FAQ.faq-3.answer"),
    },
    {
      id: "faq-4",
      trigger: t("FAQ.faq-4.question"),
      content: t("FAQ.faq-4.answer"),
    },
    {
      id: "faq-5",
      trigger: t("FAQ.faq-5.question"),
      content: t("FAQ.faq-5.answer"),
    },
    {
      id: "faq-contact",
      trigger: t("FAQ.faq-contact.question"),
      content: t.rich("FAQ.faq-contact.answer", {
        email: (chunks) => (
          <a href={`mailto:${settings.contact.mail}`} className="clickable-link">
            {chunks}
          </a>
        ),
        twitter: (chunks) => (
          <a href={settings.contact.twitter} className="clickable-link">
            {chunks}
          </a>
        ),
        whatsapp: (chunks) => (
          <a href={settings.contact.whatsapp} className="clickable-link">
            {chunks}
          </a>
        ),
        phone: (chunks) => (
          <a href={`tel:${settings.contact.phone}`} className="clickable-link">
            {chunks}
          </a>
        ),
      }),
    },
    // {
    //   trigger: t("FAQ.faq-contact.question"),
    //   content: (
    //     <Trans
    //       i18nKey="FAQ:faq-contact.answer"
    //       components={[
    //         <a
    //           key={settings.contact.mail}
    //           className="clickable-link"
    //           href={`mailto:${settings.contact.mail}`}
    //         >
    //           {t("common:contact-methods.email")}
    //         </a>,
    //         <a
    //           key={settings.contact.twitter}
    //           className="clickable-link"
    //           href={settings.contact.twitter}
    //         >
    //           {t("common:contact-methods.twitter")}
    //         </a>,
    //         <a
    //           key={settings.contact.whatsapp}
    //           className="clickable-link"
    //           href={settings.contact.whatsapp}
    //         >
    //           {t("common:contact-methods.the-whatsapp")}
    //         </a>,
    //         <Link key={"contact"} className="clickable-link" href="/contact">
    //           {t("common:contact-methods.contact-page")}
    //         </Link>,
    //       ]}
    //     />
    //   ),
    // },
  ];
  return (
    <div>
      <WaitlistSection />
      {/* <CustomPageMeta title={t("SEO.pricing.title")} description={t("SEO.pricing.description")} />
      <div className="flex flex-col gap-[150px] px-10 pt-24 md:pt-44">
        <HeroSection title={t("Pricing.hero.title")} subtitle={t("Pricing.hero.subtitle")} />
      </div>
      <div className="flex flex-col py-28">
        <div className="flex w-full flex-col items-center justify-center">
          <CustomMotionDiv delay={0.4} className="w-full max-w-[1400px] px-10">
            <PricingPlans
              onCurrencyChange={(e) => {
                setPricingCurrency(e);
              }}
              onCycleChange={(e) => {
                setPricingCycle(e);
              }}
              billingCycles={["monthly", "annually"]}
              currencies={["sar", "usd"]}
              currentCurrency={pricingCurrency}
              currentCycle={pricingCycle}
              plans={plansArray}
            />
          </CustomMotionDiv>
        </div>
        <CustomMotionDiv delay={0.6} className="p-6 text-center">
          {t.rich("Pricing.not-sure", {
            contactSales: (chunks) => (
              <a href="/contact" className="clickable-link">
                {chunks}
              </a>
            ),
          })}
        </CustomMotionDiv>
      </div>
      <div className="flex flex-col items-center justify-center p-10 md:p-40 md:py-20">
        <div className="flex flex-col gap-4 py-10">
          <span className="w-full text-center text-4xl font-bold">
            {t("Pricing.faq.header.title")}
          </span>
          <span className="w-full text-center">{t("Pricing.faq.header.subtitle")}</span>
        </div>
        <div className="w-full md:max-w-4xl">
          <div className="space-y-4">
            <Accordion type="single" collapsible className="w-full space-y-2">
              {accordionArray.map((item) => (
                <AccordionItem
                  value={item.id}
                  key={item.id}
                  className="bg-background rounded-lg border px-4 py-1"
                >
                  <AccordionTrigger className="py-2 text-start text-[15px] leading-6 hover:no-underline">
                    {item.trigger}
                  </AccordionTrigger>
                  <AccordionContent className="text-muted-foreground pb-2">
                    {item.content}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        </div>
      </div>
      <BottomCTA
        title={t("Landing.cta.title")}
        subtitle={t("Landing.cta.subtitle")}
        primaryActionText={t("Landing.cta.action-1-text")}
        primaryActionSlug={"/dashboard"}
      /> */}
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  const billingCurrencies = ["sar", "usd"];
  const billingCycles = ["monthly", "yearly"];
  return {
    props: {
      billingCycles,
      billingCurrencies,
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/privacy.tsx">
import { GetStaticProps } from "next";
import { useTranslations, useLocale } from "next-intl";
// import PrivacyPolicyAr from "@/components/legal/privacy-policy-ar.mdx";
// import PrivacyPolicyEn from "@/components/legal/privacy-policy-en.mdx";
export default function PrivacyPage() {
  const t = useTranslations();
  const lang = useLocale();
  return (
    <div className="flex flex-col items-center justify-center py-10">
      <div className="p-10 text-5xl font-bold">{t("General.privacy")}</div>
      <div className="w-full max-w-7xl p-10 md:p-20">
        <div className="mb-4 flex flex-row gap-1 text-lg font-bold">
          <span>{t("General.last-updated")}:</span>
          <span>{"01/12/2023"}</span>
        </div>
        {/* {lang === "ar" ? <PrivacyPolicyAr /> : <PrivacyPolicyEn />} */}
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/reset-password.tsx">
// This page is used to reset the password. the url will be coming from supabase email and it will have a token
// we will use the token to reset the password
import { Loader2 } from "lucide-react";
import { Eye, EyeOff } from "lucide-react";
import { GetStaticProps } from "next";
import { useLocale, useTranslations } from "next-intl";
import { useTheme } from "next-themes";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useState } from "react";
import { toast } from "sonner";
import { Button } from "@/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/ui/card";
import { Input } from "@/ui/input";
import { Label } from "@/ui/label";
import LanguageSwitcher from "@/ui/language-switcher";
import ThemeSwitcher from "@/ui/theme-switcher";
import { createClient } from "@/utils/supabase/component";
const ResetPassword = () => {
  const supabase = createClient();
  const t = useTranslations("Auth");
  const lang = useLocale();
  const { resolvedTheme } = useTheme();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();
  const { token } = router.query;
  const [error, setError] = useState<any>(null);
  const handleResetPassword = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);
    if (password !== confirmPassword) {
      toast.error(t("passwords_do_not_match"));
      setLoading(false);
      return;
    }
    try {
      const { error } = await supabase.auth.updateUser({
        password: password,
      });
      if (error) throw error;
      toast.success(t("password_reset_successfully"));
    } catch (error: any) {
      toast.error(t(error.code));
    } finally {
      setLoading(false);
      router.push("/dashboard");
    }
  };
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  // Return null or loading state before client-side mount
  if (!mounted) {
    return null; // or a loading spinner
  }
  return (
    <div
      dir={lang === "ar" ? "rtl" : "ltr"}
      className="bg-background flex min-h-screen flex-col items-center justify-center py-12 sm:px-6 lg:px-8"
    >
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <Image
            src={`/assets/pukla-logo-full-${resolvedTheme === "dark" ? "white" : "purple"}.png`}
            alt="Pukla"
            className="h-12 w-auto"
            width={512}
            height={512}
          />
        </div>
      </div>
      <div className="mt-8 flex w-full max-w-[90%] flex-col gap-2 sm:mx-auto sm:w-full sm:max-w-md">
        <Card>
          <CardHeader>
            <CardTitle className="text-center">{t("reset_password")}</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleResetPassword} className="space-y-6">
              <div className="flex flex-col gap-2">
                <Label htmlFor="password">{t("password")}</Label>
                <div className="relative">
                  <Input
                    id="password"
                    autoComplete="current-password"
                    type={showPassword ? "text" : "password"}
                    required
                    value={password}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                      setPassword(e.target.value)
                    }
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                    onClick={() => setShowPassword(!showPassword)}
                    tabIndex={-1}
                  >
                    {showPassword ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
              <div className="flex flex-col gap-2">
                <Label htmlFor="confirm-password">{t("confirm_password")}</Label>
                <div className="relative">
                  <Input
                    id="confirm-password"
                    autoComplete="confirm-password"
                    type={showPassword ? "text" : "password"}
                    required
                    value={confirmPassword}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                      setConfirmPassword(e.target.value)
                    }
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute end-0 top-0 h-10 w-10 px-3 py-2"
                    onClick={() => setShowPassword(!showPassword)}
                    tabIndex={-1}
                  >
                    {showPassword ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
              <div className="flex flex-col gap-4">
                <Button type="submit" disabled={loading} className="w-full">
                  {loading ? (
                    <Loader2 className="me-2 h-4 w-4 animate-spin" />
                  ) : (
                    t("reset_password")
                  )}
                </Button>
              </div>
            </form>
            <div className="mt-4 flex flex-col items-center justify-center">
              <p
                onClick={() => router.push("/auth")}
                className="text-muted-foreground hover:text-primary cursor-pointer text-center text-sm"
              >
                {t("go_back_to_sign_in")}
              </p>
            </div>
          </CardContent>
        </Card>
        <div className="flex flex-row justify-between">
          <LanguageSwitcher />
          <ThemeSwitcher />
        </div>
      </div>
    </div>
  );
};
export default ResetPassword;
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/roles.tsx">
import { GetStaticProps } from "next";
import { useTranslations } from "next-intl";
import { useState, useMemo } from "react";
import { toast } from "sonner";
import { Badge } from "@/ui/badge";
import ConfirmDelete from "@/ui/confirm-delete";
import DataModelList from "@/ui/data-model-list";
import { FormDialog } from "@/ui/form-dialog";
import NoPermission from "@/ui/no-permission";
import PageSearchAndFilter from "@/ui/page-search-and-filter";
import SelectionMode from "@/ui/selection-mode";
import { useDeleteHandler } from "@/hooks/use-delete-handler";
import CustomPageMeta from "@/components/landing/CustomPageMeta";
import DataPageLayout from "@/components/layouts/data-page-layout";
import RoleCard from "@/role/role.card";
import { RoleForm } from "@/role/role.form";
import {
  useSystemRoles,
  useBulkDeleteRoles,
  useDuplicateRole,
  useCustomRoles,
} from "@/role/role.hooks";
import { FILTERABLE_FIELDS, SORTABLE_COLUMNS } from "@/role/role.options";
import useRoleStore from "@/role/role.store";
import { RoleUpdateData, RoleWithPermissions } from "@/role/role.type";
import useUserStore from "@/stores/use-user-store";
export default function RolesPage() {
  const t = useTranslations();
  const canReadRoles = useUserStore((state) => state.hasPermission("roles.read"));
  const canCreateRoles = useUserStore((state) => state.hasPermission("roles.create"));
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [actionableRole, setActionableRole] = useState<(RoleUpdateData & { id?: string }) | null>(
    null,
  );
  const { enterprise, profile, membership } = useUserStore();
  const loadingSaveRole = useRoleStore((state) => state.isLoading);
  const setLoadingSaveRole = useRoleStore((state) => state.setIsLoading);
  const isDeleteDialogOpen = useRoleStore((state) => state.isDeleteDialogOpen);
  const setIsDeleteDialogOpen = useRoleStore((state) => state.setIsDeleteDialogOpen);
  const selectedRows = useRoleStore((state) => state.selectedRows);
  const setSelectedRows = useRoleStore((state) => state.setSelectedRows);
  const clearSelection = useRoleStore((state) => state.clearSelection);
  const searchQuery = useRoleStore((state) => state.searchQuery);
  const filterConditions = useRoleStore((state) => state.filterConditions);
  const filterCaseSensitive = useRoleStore((state) => state.filterCaseSensitive);
  const getFilteredRoles = useRoleStore((state) => state.getFilteredData);
  const { data: customRoles, isLoading: loadingCustomRoles, error: customError } = useCustomRoles();
  const { data: systemRoles, isLoading: loadingSystemRoles, error: systemError } = useSystemRoles();
  const allRoles = useMemo(() => {
    const combined = new Map<string, RoleWithPermissions>();
    (customRoles || []).forEach((role) => combined.set(role.id, role));
    (systemRoles || []).forEach((role) => combined.set(role.id, role));
    return Array.from(combined.values());
  }, [customRoles, systemRoles]);
  const isLoading = loadingCustomRoles || loadingSystemRoles;
  const error = customError || systemError;
  const { mutate: duplicateRole } = useDuplicateRole();
  const { mutateAsync: deleteRoles, isPending: isDeleting } = useBulkDeleteRoles();
  const { createDeleteHandler } = useDeleteHandler();
  const handleConfirmDelete = createDeleteHandler(deleteRoles, {
    loading: "Roles.loading.deleting",
    success: "Roles.success.deleted",
    error: "Roles.error.deleting",
    onSuccess: () => {
      clearSelection();
      setIsDeleteDialogOpen(false);
    },
  });
  const filteredRoles = getFilteredRoles(allRoles || []) as RoleWithPermissions[];
  const onActionClicked = async (action: string, rowId: string) => {
    if (action === "edit") {
      const roleToEdit = allRoles.find((role) => role.id === rowId);
      if (roleToEdit) {
        setActionableRole({
          id: roleToEdit.id,
          name: roleToEdit.name,
          description: roleToEdit.description,
          permissions: roleToEdit.permissions || [],
        });
        setIsFormDialogOpen(true);
      }
    }
    if (action === "delete") {
      const roleToDelete = allRoles.find((r) => r.id === rowId);
      if (roleToDelete && !roleToDelete.is_system) {
        setSelectedRows([rowId]);
        setIsDeleteDialogOpen(true);
      } else if (roleToDelete?.is_system) {
        toast.warning(t("Roles.cannot_delete_system"));
      }
    }
    if (action === "duplicate") {
      const roleToDuplicate = allRoles.find((r) => r.id === rowId);
      if (roleToDuplicate && !roleToDuplicate.is_system) {
        const toastId = toast.loading(t("General.loading_operation"), {
          description: t("Roles.loading.duplicating"),
        });
        await duplicateRole(
          { id: rowId, enterprise_id: enterprise?.id || "" },
          {
            onSuccess: () => {
              toast.success(t("General.successful_operation"), {
                description: t("Roles.success.duplicated"),
              });
              toast.dismiss(toastId);
            },
            onError: () => {
              toast.error(t("General.error_operation"), {
                description: t("Roles.error.duplicating"),
              });
              toast.dismiss(toastId);
            },
          },
        );
      } else if (roleToDuplicate?.is_system) {
        toast.warning(t("Roles.cannot_duplicate_system"));
      }
    }
  };
  const userRoleName = allRoles.find((role) => role.id === membership?.role_id)?.name;
  if (!canReadRoles) {
    return <NoPermission />;
  }
  return (
    <div>
      <CustomPageMeta title={t("Roles.title")} description={t("Roles.description")} />
      <DataPageLayout>
        {selectedRows.length > 0 ? (
          <SelectionMode
            selectedRows={selectedRows}
            clearSelection={clearSelection}
            isDeleting={isDeleting}
            setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          />
        ) : (
          <PageSearchAndFilter
            store={useRoleStore}
            sortableColumns={SORTABLE_COLUMNS}
            filterableFields={FILTERABLE_FIELDS}
            title={t("Roles.title")}
            onAddClick={() => {
              if (canCreateRoles) {
                setActionableRole(null);
                setIsFormDialogOpen(true);
              } else {
                return undefined;
              }
            }}
            createLabel={t("Roles.create_role")}
            searchPlaceholder={t("Roles.search_roles")}
          />
        )}
        <div className="p-4">
          {userRoleName && (
            <div className="mb-4 flex items-center gap-2">
              <span className="text-muted-foreground text-sm">{t("Roles.your_role")}:</span>
              <Badge variant="outline" className="text-sm">
                {t(`Roles.predefined.${userRoleName.toLowerCase()}.title`)}
              </Badge>
            </div>
          )}
          <DataModelList
            data={filteredRoles}
            isLoading={isLoading}
            error={error as Error | null}
            emptyMessage={t("Roles.no_roles_found")}
            renderItem={(role) => (
              <RoleCard
                key={role.id}
                role={role}
                onActionClick={onActionClicked}
                disableActions={role.is_system}
              />
            )}
            gridCols="3"
          />
        </div>
        <FormDialog
          open={isFormDialogOpen}
          onOpenChange={setIsFormDialogOpen}
          title={actionableRole?.id ? t("Roles.edit_role") : t("Roles.add_new")}
          formId="role-form"
          loadingSave={loadingSaveRole}
        >
          <RoleForm
            formId={"role-form"}
            onSuccess={() => {
              setIsFormDialogOpen(false);
              setLoadingSaveRole(false);
              setActionableRole(null);
              toast.success(t("General.successful_operation"), {
                description: actionableRole?.id
                  ? t("Roles.success.updated")
                  : t("Roles.success.created"),
              });
            }}
            editMode={!!actionableRole?.id}
            id={actionableRole?.id}
            defaultValues={
              actionableRole
                ? {
                    name: actionableRole.name || "",
                    description: actionableRole.description || null,
                    permissions: actionableRole.permissions || [],
                  }
                : undefined
            }
          />
        </FormDialog>
        <ConfirmDelete
          isDeleteDialogOpen={isDeleteDialogOpen}
          setIsDeleteDialogOpen={setIsDeleteDialogOpen}
          isDeleting={isDeleting}
          handleConfirmDelete={() => handleConfirmDelete(selectedRows)}
          title={t("Roles.confirm_delete")}
          description={t("Roles.delete_description", { count: selectedRows.length })}
        />
      </DataPageLayout>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/settings.tsx">
"use client";
import { ChevronsUpDown, Mail, Save, User, Loader2, Sidebar } from "lucide-react";
import { GetStaticProps } from "next";
import { useLocale, useTranslations } from "next-intl";
import { usePathname, useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import React from "react";
import { Button } from "@/ui/button";
import { Card, CardContent } from "@/ui/card";
import PageTitle from "@/ui/page-title";
import { ScrollArea } from "@/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/ui/tabs";
import GeneralSettings from "@/components/settings/general-settings";
import NotificationSettings from "@/components/settings/notification-settings";
import PreferenceSettings from "@/components/settings/preference-settings";
import SidebarSettings from "@/components/settings/sidebar-settings";
import { getMenuList } from "@/lib/sidebar-list";
// Valid tab names for type safety
const validTabs = ["general", "navigation", "preferences", "notifications", "billing"] as const;
type TabName = (typeof validTabs)[number];
// Function to get tab from URL hash
const getTabFromHash = (): TabName => {
  if (typeof window === "undefined") return "general";
  const hash = window.location.hash.replace("#", "");
  return validTabs.includes(hash as TabName) ? (hash as TabName) : "general";
};
// Function to set URL hash
const setHashForTab = (tab: TabName) => {
  if (typeof window !== "undefined") {
    window.location.hash = tab;
  }
};
const SettingsPage = () => {
  const pathname = usePathname();
  const router = useRouter();
  const t = useTranslations();
  const lang = useLocale();
  const [menuList, setMenuList] = useState(getMenuList(pathname));
  const [activeTab, setActiveTab] = useState<TabName>("general");
  const [isDirty, setIsDirty] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const generalSettingsFormRef = React.useRef<HTMLFormElement>(null);
  const notificationSettingsFormRef = React.useRef<HTMLFormElement>(null);
  const preferenceSettingsFormRef = React.useRef<HTMLFormElement>(null);
  const sidebarSettingsFormRef = React.useRef<HTMLFormElement>(null);
  // Initialize from URL hash and set up hash change listener
  useEffect(() => {
    // Set initial tab from hash
    const tabFromHash = getTabFromHash();
    setActiveTab(tabFromHash);
    // Listen for hash changes
    const handleHashChange = () => {
      const newTab = getTabFromHash();
      setActiveTab(newTab);
    };
    window.addEventListener("hashchange", handleHashChange);
    return () => window.removeEventListener("hashchange", handleHashChange);
  }, []);
  const handleSave = () => {
    if (activeTab === "general" && generalSettingsFormRef.current) {
      generalSettingsFormRef.current.requestSubmit();
    } else if (activeTab === "notifications" && notificationSettingsFormRef.current) {
      notificationSettingsFormRef.current.requestSubmit();
    } else if (activeTab === "preferences" && preferenceSettingsFormRef.current) {
      preferenceSettingsFormRef.current.requestSubmit();
    } else if (activeTab === "navigation" && sidebarSettingsFormRef.current) {
      sidebarSettingsFormRef.current.requestSubmit();
    }
  };
  const handleSaveStart = () => {
    setIsSaving(true);
  };
  const handleSaveComplete = () => {
    setIsSaving(false);
    setIsDirty(false);
  };
  // Handle tab change with hash update
  const handleTabChange = (tab: TabName) => {
    setActiveTab(tab);
    setHashForTab(tab);
  };
  return (
    <div>
      <PageTitle
        texts={{
          title: t("Settings.title"),
          submit_form: t("Settings.title"),
          cancel: t("General.cancel"),
        }}
        customButton={
          <div className="container mx-auto flex max-w-7xl justify-end">
            <Button
              onClick={handleSave}
              disabled={!isDirty || isSaving}
              className="h-8 gap-2"
              size="sm"
            >
              {isSaving ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  {t("General.saving")}
                </>
              ) : (
                <>
                  <Save className="h-4 w-4" />
                  {t("General.save")}
                </>
              )}
            </Button>
          </div>
        }
      />
      <div className="flex flex-col gap-4 p-4 md:flex-row">
        {/* Sidebar */}
        <div className="w-full shrink-0 md:w-64">
          <Card className="shadow-none">
            <CardContent className="p-0" dir={lang === "ar" ? "rtl" : "ltr"}>
              <div className="flex w-full flex-col">
                <Button
                  variant={activeTab === "general" ? "secondary" : "ghost"}
                  className="h-auto justify-start rounded-none px-4 py-3"
                  onClick={() => handleTabChange("general")}
                >
                  <User className="mr-2 h-4 w-4" />
                  {t("Settings.tabs.general")}
                </Button>
                <Button
                  variant={activeTab === "navigation" ? "secondary" : "ghost"}
                  className="h-auto justify-start rounded-none px-4 py-3"
                  onClick={() => handleTabChange("navigation")}
                >
                  <Sidebar className="mr-2 h-4 w-4" />
                  {t("Settings.tabs.navigation")}
                </Button>
                <Button
                  variant={activeTab === "preferences" ? "secondary" : "ghost"}
                  className="h-auto justify-start rounded-none px-4 py-3"
                  onClick={() => handleTabChange("preferences")}
                >
                  <ChevronsUpDown className="mr-2 h-4 w-4" />
                  {t("Settings.tabs.preferences")}
                </Button>
                <Button
                  variant={activeTab === "notifications" ? "secondary" : "ghost"}
                  className="h-auto justify-start rounded-none px-4 py-3"
                  onClick={() => handleTabChange("notifications")}
                >
                  <Mail className="mr-2 h-4 w-4" />
                  {t("Settings.tabs.notifications")}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        {/* Main Content */}
        <div className="flex-1">
          <Tabs
            value={activeTab}
            onValueChange={(value) => handleTabChange(value as TabName)}
            className="w-full"
          >
            <TabsList className="hidden">
              <TabsTrigger value="general">{t("Settings.tabs.general")}</TabsTrigger>
              <TabsTrigger value="navigation">{t("Settings.tabs.navigation")}</TabsTrigger>
              <TabsTrigger value="preferences">{t("Settings.tabs.preferences")}</TabsTrigger>
              <TabsTrigger value="notifications">{t("Settings.tabs.notifications")}</TabsTrigger>
            </TabsList>
            <ScrollArea className="h-[calc(100vh-180px)]">
              <TabsContent value="general" className="m-0">
                <GeneralSettings
                  onDirtyChange={setIsDirty}
                  onSave={handleSaveStart}
                  onSaveComplete={handleSaveComplete}
                  isSaving={isSaving}
                  formRef={generalSettingsFormRef}
                />
              </TabsContent>
              <TabsContent value="navigation" className="m-0">
                <SidebarSettings
                  onDirtyChange={setIsDirty}
                  onSave={handleSaveStart}
                  onSaveComplete={handleSaveComplete}
                  isSaving={isSaving}
                  formRef={sidebarSettingsFormRef}
                />
              </TabsContent>
              <TabsContent value="preferences" className="m-0">
                <PreferenceSettings
                  onDirtyChange={setIsDirty}
                  onSave={handleSaveStart}
                  onSaveComplete={handleSaveComplete}
                  isSaving={isSaving}
                  formRef={preferenceSettingsFormRef}
                />
              </TabsContent>
              <TabsContent value="notifications" className="m-0">
                <NotificationSettings
                  onDirtyChange={setIsDirty}
                  onSave={handleSaveStart}
                  onSaveComplete={handleSaveComplete}
                  isSaving={isSaving}
                  formRef={notificationSettingsFormRef}
                />
              </TabsContent>
            </ScrollArea>
          </Tabs>
        </div>
      </div>
    </div>
  );
};
export default SettingsPage;
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/sitemap.xml.js">
// pages/sitemap.xml.js
import { fetchAllPuklas } from "../lib/operations";
const URL = "https://tanad.app";
function generateSiteMap(posts) {
  return `<?xml version="1.0" encoding="UTF-8"?>
   <urlset xmlns="https://www.sitemaps.org/schemas/sitemap/0.9">
     <url>
       <loc>${URL}</loc>
       <changefreq>daily</changefreq>
       <priority>1</priority>
     </url>
       <url>
       <loc>${URL}/pricing</loc>
       <changefreq>monthly</changefreq>
       <priority>0.8</priority>
      </url>
      <url>
      <loc>${URL}/contact</loc>
      <changefreq>monthly</changefreq>
      <priority>0.8</priority>
     </url>
     <url>
     <loc>${URL}/features</loc>
     <changefreq>monthly</changefreq>
     <priority>0.8</priority>
     </url>
     ${posts
       .map(({ slug, updated_at }) => {
         return `
           <url>
               <loc>${`${URL}/${slug}`}</loc>
               <changefreq>monthly</changefreq>
               <lastmod>${new Date(updated_at).toISOString()}</lastmod>
               <priority>0.8</priority>
           </url>
         `;
       })
       .join("")}
   </urlset>
 `;
}
export async function getServerSideProps({ res }) {
  const puklas = await fetchAllPuklas();
  // Generate the XML sitemap with the blog data
  const sitemap = generateSiteMap(puklas);
  res.setHeader("Content-Type", "text/xml");
  // Send the XML to the browser
  res.write(sitemap);
  res.end();
  return {
    props: {},
  };
}
export default function SiteMap() {}
</file>

<file path="src/pages/support.tsx">
import { GetStaticProps } from "next";
import { useTranslations, useLocale } from "next-intl";
// Components
import CustomMotionDiv from "@/components/landing/CustomMotionDiv";
export default function SupportPage() {
  const t = useTranslations("Support");
  return (
    <div className="flex flex-col items-center justify-center py-10 pb-32">
      <div className="flex flex-col items-center justify-center gap-2 p-10">
        <CustomMotionDiv className="p-10 pb-0 text-5xl font-bold">{t("title")}</CustomMotionDiv>
        <CustomMotionDiv delay={0.1} className="text-md p-0">
          {t("subtitle")}
        </CustomMotionDiv>
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/templates.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { Plus } from "lucide-react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import * as z from "zod";
import { Button } from "@/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/ui/form";
import { Input } from "@/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/ui/select";
import { Switch } from "@/ui/switch";
import { Table, TableHeader, TableRow, TableHead, TableCell, TableBody } from "@/ui/table";
import { Textarea } from "@/ui/textarea";
import ProtectedRoute from "@/components/app/ProtectedRoute";
import TemplateEditor from "@/components/app/TemplateEditor";
import useUserStore from "@/stores/use-user-store";
const defaultTemplate = {
  logo: "",
  company: {
    name: "",
    address: "",
    contact: "",
  },
  client: {
    name: "",
    address: "",
    contact: "",
  },
  items: [
    {
      description: "",
      quantity: 1,
      price: 0,
    },
  ],
  notes: "",
  terms: "",
};
interface Template {
  id: string;
  name: string;
  type: "invoice" | "quote";
  content: unknown;
  is_default: boolean;
  created_at: string | null;
  user_id: string;
}
const formSchema = z.object({
  name: z.string().min(1, "Name is required"),
  type: z.enum(["invoice", "quote"] as const, {
    required_error: "Please select a template type",
  }),
  content: z.string().min(1, "Template content is required"),
  is_default: z.boolean().default(false),
});
type FormValues = z.input<typeof formSchema>;
export default function TemplatesPage() {
  const [templatesList, setTemplatesList] = useState<Template[]>([]);
  const [open, setOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const user = useUserStore((state) => state.user);
  const router = useRouter();
  const t = useTranslations();
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      type: "invoice",
      content: JSON.stringify(defaultTemplate, null, 2),
      is_default: false,
    },
  });
  const fetchTemplates = async () => {
    try {
      if (!user?.id) {
        console.error("No user ID found");
        return;
      }
      const response = await fetch(`/api/templates?user_id=${user.id}`);
      if (!response.ok) {
        throw new Error("Failed to fetch templates");
      }
      const data = await response.json();
      setTemplatesList(data);
    } catch (error) {
      console.error("Fetch templates error:", error);
      toast.error("Failed to fetch templates");
    }
  };
  useEffect(() => {
    if (user?.id) {
      fetchTemplates();
    }
  }, [user?.id]);
  const onSubmit = async (values: FormValues) => {
    try {
      if (!user?.id) {
        console.error("No user ID found");
        toast.error("Please log in to create templates");
        return;
      }
      // Validate JSON before sending
      let parsedContent;
      try {
        parsedContent = JSON.parse(values.content);
      } catch (e) {
        console.error("JSON parsing error:", e);
        toast.error("Invalid JSON format in template content");
        return;
      }
      const response = await fetch("/api/templates", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: values.name,
          type: values.type,
          content: parsedContent,
          is_default: values.is_default,
          user_id: user.id,
        }),
      });
      const data = await response.json();
      if (!response.ok) {
        console.error("Template creation error details:", data);
        throw new Error(data.details || data.error || "Failed to create template");
      }
      toast.success(t("General.successful_operation"), {
        description: t("Templates.success.created"),
      });
      setOpen(false);
      form.reset({
        name: "",
        type: "invoice",
        content: JSON.stringify(defaultTemplate, null, 2),
        is_default: false,
      });
      fetchTemplates();
    } catch (error) {
      console.error("Template creation error:", error);
      toast.error(error instanceof Error ? error.message : "Failed to create template");
    }
  };
  const handleViewTemplate = (template: Template) => {
    setSelectedTemplate(template);
  };
  const handleSaveTemplate = async (template_id: string, content: string) => {
    try {
      const response = await fetch(`/api/templates/${template_id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ content }),
      });
      if (!response.ok) {
        throw new Error("Failed to update template");
      }
      toast.success(t("General.successful_operation"), {
        description: t("Templates.success.updated"),
      });
      fetchTemplates();
    } catch (error) {
      toast.error(t("General.error_operation"), {
        description: error instanceof Error ? error.message : "Failed to update template",
      });
    }
  };
  return (
    <ProtectedRoute>
      <div className="container mx-auto py-10">
        <div className="mb-8 flex items-center justify-between">
          <h1 className="text-3xl font-bold">Templates</h1>
          <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                New Template
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Create New Template</DialogTitle>
                <DialogDescription>Create a new template for invoices or quotes</DialogDescription>
              </DialogHeader>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Template name" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Type</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select template type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="invoice">Invoice</SelectItem>
                            <SelectItem value="quote">Quote</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="content"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Content (JSON)</FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Template content in JSON format"
                            className="h-32 font-mono"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="is_default"
                    render={({ field }) => (
                      <FormItem className="flex items-center justify-between">
                        <FormLabel>Set as Default</FormLabel>
                        <FormControl>
                          <Switch checked={field.value} onCheckedChange={field.onChange} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <Button type="submit" className="w-full">
                    Create Template
                  </Button>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Default</TableHead>
                <TableHead>Created At</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {templatesList.map((template) => (
                <TableRow key={template.id}>
                  <TableCell>{template.name}</TableCell>
                  <TableCell>{template.type}</TableCell>
                  <TableCell>{template.is_default ? "Yes" : "No"}</TableCell>
                  <TableCell>
                    {template.created_at ? new Date(template.created_at).toLocaleDateString() : "-"}
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleViewTemplate(template)}
                    >
                      View & Edit
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        {selectedTemplate && (
          <Dialog
            open={!!selectedTemplate}
            onOpenChange={(open) => !open && setSelectedTemplate(null)}
          >
            <DialogContent className="h-[90vh] max-w-6xl">
              <DialogHeader>
                <DialogTitle>Edit Template: {selectedTemplate.name}</DialogTitle>
              </DialogHeader>
              <div className="flex-1 overflow-hidden">
                <TemplateEditor template={selectedTemplate} onSave={handleSaveTemplate} />
              </div>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/pages/terms.tsx">
import { GetStaticProps } from "next";
import { useTranslations, useLocale } from "next-intl";
// import TOSAr from "@/components/legal/tos-ar.mdx";
// import TOSEn from "@/components/legal/tos-en.mdx";
export default function TermsPage() {
  const t = useTranslations();
  const lang = useLocale();
  return (
    <div className="flex flex-col items-center justify-center py-10">
      <div className="p-10 text-5xl font-bold">{t("General.tos")}</div>
      <div className="w-full max-w-7xl p-10 md:p-20">
        <div className="mb-4 flex flex-row gap-1 text-lg font-bold">
          <span>{t("General.last-updated")}:</span>
          <span>{"01/12/2023"}</span>
        </div>
        {/* {lang === "ar" ? <TOSAr /> : <TOSEn />} */}
      </div>
    </div>
  );
}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      messages: (await import(`../../locales/${locale}.json`)).default,
    },
  };
};
</file>

<file path="src/pages/theme.tsx">
const ThemePage = () => {
  return <div>Theme</div>;
};
export default ThemePage;
</file>

<file path="src/providers/index.ts">
export * from "./QueryProvider";
</file>

<file path="src/providers/QueryProvider.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { ReactNode, useState } from "react";
interface QueryProviderProps {
  children: ReactNode;
}
export function QueryProvider({ children }: QueryProviderProps) {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            staleTime: 1000 * 60 * 5, // 5 minutes
            refetchOnWindowFocus: false,
          },
        },
      }),
  );
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      {/* <ReactQueryDevtools initialIsOpen={false} /> */}
    </QueryClientProvider>
  );
}
</file>

<file path="src/services/documents.ts">
import { DocumentFile } from "@/ui/documents-uploader";
import { createClient } from "@/utils/supabase/component";
const supabase = createClient();
export async function uploadDocument(document: DocumentFile) {
  const { data: userData, error: userError } = await supabase.auth.getUser();
  if (userError || !userData?.user?.id) {
    throw userError || new Error("Could not get user");
  }
  const user_id = userData.user.id;
  if (!document.file || !document.entity_id || !document.entity_type) {
    throw new Error("Missing required document information");
  }
  const fileExt = document.file.name.split(".").pop();
  const fileName = `${document.entity_type}/${document.entity_id}/${Date.now()}-${document.name}.${fileExt}`;
  // Upload file to storage
  const { data: storageData, error: storageError } = await supabase.storage
    .from("enterprise-documents")
    .upload(fileName, document.file);
  if (storageError) {
    throw storageError;
  }
  // Get public URL
  const { data: publicUrlData } = supabase.storage
    .from("enterprise-documents")
    .getPublicUrl(fileName);
  // Insert document record in the database
  const { data: documentData, error: documentError } = await supabase
    .from("documents")
    .insert({
      name: document.name,
      url: publicUrlData.publicUrl,
      entity_id: document.entity_id,
      entity_type: document.entity_type,
      file_path: fileName,
      user_id: user_id,
    })
    .select()
    .single();
  if (documentError) {
    throw documentError;
  }
  return documentData;
}
export async function getDocumentsByEntity(entityId: string, entityType: string) {
  const { data, error } = await supabase
    .from("documents")
    .select("*")
    .eq("entity_id", entityId)
    .eq("entity_type", entityType);
  if (error) {
    throw error;
  }
  return data;
}
export async function deleteDocument(documentId: string) {
  // Get document info first
  const { data: document, error: fetchError } = await supabase
    .from("documents")
    .select("file_path")
    .eq("id", documentId)
    .single();
  if (fetchError) {
    throw fetchError;
  }
  // Delete from storage
  const { error: storageError } = await supabase.storage
    .from("enterprise-documents")
    .remove([document.file_path]);
  if (storageError) {
    throw storageError;
  }
  // Delete from database
  const { error: deleteError } = await supabase.from("documents").delete().eq("id", documentId);
  if (deleteError) {
    throw deleteError;
  }
}
</file>

<file path="src/stores/use-user-store.ts">
import { Session, User } from "@supabase/supabase-js";
import { create } from "zustand";
import { createClient } from "@/utils/supabase/component";
export interface ProfileType {
  id: string;
  email: string;
  full_name: string | null;
  created_at: string;
  stripe_customer_id: string | null;
  avatar_url: string | null;
  address: string | null;
  subscribed_to?: string;
  username: string | null;
  user_settings: {
    currency: string;
    calendar_type: string;
    timezone: string;
    notifications?: {
      email_updates: boolean;
      email_marketing: boolean;
      email_security: boolean;
      app_mentions: boolean;
      app_comments: boolean;
      app_tasks: boolean;
    };
    navigation?: Record<
      string,
      Array<{
        title: string;
        translationKey?: string;
        url?: string;
        is_active?: boolean;
        action?: string;
      }>
    >;
    hidden_menu_items?: Record<string, string[]>;
  };
}
interface EnterpriseType {
  id: string;
  name: string;
  created_at: string;
}
interface MembershipType {
  id: string;
  profile_id: string;
  enterprise_id: string;
  role_id: string;
  created_at: string;
}
interface UserState {
  user: User | null;
  profile: ProfileType | null;
  enterprise: EnterpriseType | null;
  membership: MembershipType | null;
  permissions: string[];
  loading: boolean;
  error: string | null;
  fetchUserAndProfile: () => Promise<void>;
  signOut: () => Promise<void>;
  setUser: (user: User | null) => void;
  setProfile: (profile: ProfileType | null) => void;
  setEnterprise: (enterprise: EnterpriseType | null) => void;
  setMembership: (membership: MembershipType | null) => void;
  setPermissions: (permissions: string[]) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  hasPermission: (permission: string) => boolean;
}
const supabase = createClient();
const useUserStore = create<UserState>((set, get) => ({
  user: null,
  profile: null,
  enterprise: null,
  membership: null,
  permissions: [],
  loading: false,
  error: null,
  setUser: (user) => set({ user }),
  setProfile: (profile) => set({ profile }),
  setEnterprise: (enterprise) => set({ enterprise }),
  setMembership: (membership) => set({ membership }),
  setPermissions: (permissions) => set({ permissions }),
  setLoading: (loading) => set({ loading }),
  setError: (error) => set({ error }),
  hasPermission: (permission) => {
    const permissions = get().permissions;
    return permissions.includes(permission);
  },
  signOut: async () => {
    try {
      set({ loading: true });
      await supabase.auth.signOut();
      set({
        user: null,
        profile: null,
        enterprise: null,
        membership: null,
        permissions: [],
        loading: false,
        error: null,
      });
      return Promise.resolve();
    } catch (error) {
      console.error("Error signing out:", error);
      return Promise.reject(error);
    }
  },
  fetchUserAndProfile: async () => {
    // Skip if already loading
    if (get().loading) return;
    try {
      set({ loading: true, error: null });
      // Get the current session
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (!session) {
        set({
          user: null,
          profile: null,
          enterprise: null,
          membership: null,
          permissions: [],
          loading: false,
        });
        return;
      }
      // Set the user from the session
      set({ user: session.user });
      // Get profile data
      const { data: profileData } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", session.user.id)
        .single();
      if (profileData) {
        set({ profile: profileData as ProfileType });
        // Get membership data
        const { data: membershipData } = await supabase
          .from("memberships")
          .select("*")
          .eq("profile_id", session.user.id)
          .single();
        if (membershipData) {
          set({ membership: membershipData as MembershipType });
          // Get enterprise data
          const { data: enterpriseData } = await supabase
            .from("enterprises")
            .select("*")
            .eq("id", membershipData.enterprise_id)
            .single();
          if (enterpriseData) {
            set({ enterprise: enterpriseData as EnterpriseType });
          }
          // Get user permissions from the view
          const { data: permissionsData } = await supabase
            .from("user_permissions_view")
            .select("permission")
            .eq("profile_id", session.user.id)
            .eq("enterprise_id", membershipData.enterprise_id);
          if (permissionsData) {
            const permissions = permissionsData.map((p) => p.permission);
            set({ permissions });
          }
        }
      }
    } catch (error: any) {
      console.error("Error fetching user data:", error);
      set({ error: error.message });
    } finally {
      set({ loading: false });
    }
  },
}));
let session: Session | null = null;
supabase.auth.getSession().then(async ({ data }) => {
  if (data.session) {
    session = data.session;
  }
});
// Setup auth state change listener
supabase.auth.onAuthStateChange((event, _session) => {
  if (event === "SIGNED_IN" && !session && _session) {
    useUserStore.getState().fetchUserAndProfile();
  } else if (event === "SIGNED_OUT") {
    useUserStore.setState({
      user: null,
      profile: null,
      enterprise: null,
      membership: null,
      permissions: [],
      loading: false,
      error: null,
    });
  }
});
export default useUserStore;
</file>

<file path="src/styles/globals.css">
@import "tailwindcss";
@import "tw-animate-css";
@custom-variant dark (&:is(.dark *));
body {
  @media (min-width: 640px) {
    overscroll-behavior: none;
  }
}
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 271 100% 14%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --inner-radius: calc(var(--radius) - 2px);
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 152 69% 53%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 360 100% 40%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}
.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}
@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}
@theme {
  --spacing-landing: calc(100vh - 90px);
  --animate-collapsible-down: collapsible-down 0.2s ease-out;
  --animate-collapsible-up: collapsible-up 0.2s ease-out;
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  @keyframes collapsible-down {
    from {
      height: 0;
      opacity: 0;
    }
    to {
      height: var(--radix-collapsible-content-height);
      opacity: 1;
    }
  }
  @keyframes collapsible-up {
    from {
      height: var(--radix-collapsible-content-height);
      opacity: 1;
    }
    to {
      height: 0;
      opacity: 0;
    }
  }
  @keyframes accordion-down {
    from {
      height: 0;
      opacity: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
      opacity: 1;
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
      opacity: 1;
    }
    to {
      height: 0;
      opacity: 0;
    }
  }
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
  .clickable-link {
    @apply text-primary/80 hover:text-primary cursor-pointer underline underline-offset-4 transition-all;
  }
}
/* Hide arrows from number input */
/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
/* Firefox */
input[type="number"] {
  -moz-appearance: textfield;
}
</file>

<file path="src/types/comment.type.ts">
export type CommentProps = {
  _id?: string;
  content?: string;
  author?: string; //This should replace the ones below (And use UserProps instead of string)
  author_id?: string;
  author_name?: string;
  author_image?: string;
  author_email?: string;
  author_role?: string;
  author_phone?: string;
};
</file>

<file path="src/types/common.type.ts">
import { currencies } from "@/lib/constants/currencies";
import { locales } from "@/lib/constants/locales";
export type LanguageProps = (typeof locales)[number];
export type CurrencyProps = (typeof currencies)[number];
export type ThemeProps = "light" | "dark";
export type CalendarProps = "gregorian" | "hijri";
export type MultiLangString = {
  [key: string]: string | undefined;
  ar?: string;
  en?: string;
};
export type inlineCardProps = {
  id: string;
  brand: string;
};
export interface FilterCondition {
  id: number;
  field: string;
  operator: string;
  value: string;
  type: "text" | "number" | "date";
  conjunction: "and" | "or";
}
export interface SortableColumn {
  value: string;
  translationKey: string;
}
export interface FilterableField {
  id: string;
  type: "text" | "number" | "date";
  translationKey: string;
}
export interface ModuleTableProps<T> {
  data: T[];
  isLoading?: boolean;
  error?: Error | null;
  onActionClicked: (action: string, rowId: string) => void;
}
export interface ModuleFormProps<T> {
  id?: string;
  onSuccess?: () => void;
  loading?: boolean;
  defaultValues?: T | null;
  editMode?: boolean;
}
export interface AddressProps {
  short_address?: string;
  building_number?: string;
  street_name?: string;
  city?: string;
  region?: string;
  country?: string;
  zip_code?: string;
  additional_number?: string;
}
</file>

<file path="src/types/generic-store-types.ts">
// stores/types.ts
import { FilterCondition } from "@/types/common.type";
export type ViewMode = "table" | "cards";
export type SortRule = {
  field: string;
  direction: string;
};
export type BaseStates<T> = {
  data?: T[]; // Optional since some stores might manage data externally
  isLoading: boolean;
  error: string | null;
  selectedRows: string[];
  filterConditions: FilterCondition[];
  filterCaseSensitive: boolean;
  searchQuery: string;
  viewMode: ViewMode;
  isDeleteDialogOpen: boolean;
  sortRules: SortRule[];
  sortCaseSensitive: boolean;
  sortNullsFirst: boolean;
  isFormDialogOpen: boolean;
  actionableItem: T | null;
};
export type BaseActions<T> = {
  setData?: (data: T[]) => void; // Optional setter for data
  setIsLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
  setSelectedRows: (ids: string[]) => void;
  clearSelection: () => void;
  setFilterConditions: (filterConditions: FilterCondition[]) => void;
  setFilterCaseSensitive: (filterCaseSensitive: boolean) => void;
  setSearchQuery: (searchQuery: string) => void;
  setViewMode: (viewMode: ViewMode) => void;
  setIsDeleteDialogOpen: (isDeleteDialogOpen: boolean) => void;
  setSortRules: (sortRules: SortRule[]) => void;
  setSortCaseSensitive: (sortCaseSensitive: boolean) => void;
  setSortNullsFirst: (sortNullsFirst: boolean) => void;
  setIsFormDialogOpen: (isFormDialogOpen: boolean) => void;
  setActionableItem: (actionableItem: T | null) => void;
  getFilteredData: (data: T[]) => T[];
  getSortedData: (data: T[]) => T[];
};
export type SearchFilterFn<T> = (item: T, searchQuery: string) => boolean;
</file>

<file path="src/types/note.type.ts">
export type NoteProps = {
  _id?: string;
  title?: string;
  description?: string;
  content?: any;
  author?: string;
  created_at?: string;
  updated_at?: string;
};
</file>

<file path="src/types/rbac.ts">
export type Permission = {
  id: string;
  name: string;
  description: string;
  category: string;
};
export type Role = {
  id: string;
  name: string;
  description: string;
  permissions: string[]; // Array of permission IDs
  isSystem: boolean;
  created_at: string;
  updated_at: string;
};
</file>

<file path="src/types/transaction.type.ts">
import { AcceptedPaymentMethods } from "@/lib/constants/payment-consts";
export type TransactionStatus = "completed" | "pending" | "failed" | "cancelled" | "refunded";
export type TransactionProps = {
  id: string;
  _id: string;
  invoice: string;
  amount: number;
  currency: "sar" | "usd";
  status: TransactionStatus;
  card?: string;
  // APS Data
  fort_id: string;
  token_name: string;
  agreement_id: string;
  invoice_id: any;
  invoice_payment: any;
  payment_token: any;
  payment_details?: any;
  payment_method: AcceptedPaymentMethods;
  language: "ar" | "en";
  created_at: string;
};
export type TransactionInput = Omit<Partial<TransactionProps>, "invoice_client"> & {
  invoice_client: string;
};
</file>

<file path="src/types/user.type.ts">
import {
  CalendarProps,
  CurrencyProps,
  LanguageProps,
  MultiLangString,
  ThemeProps,
} from "@/types/common.type";
import { CommentProps } from "./comment.type";
import { NoteProps } from "./note.type";
export type UserProps = {
  _id: string;
  status: "active" | "inactive" | "deactivated" | "blocked" | "verified" | "unverified";
  email: string;
  phone?: string;
  username?: string;
  password: string;
  first_name?: MultiLangString;
  last_name?: MultiLangString;
  stripe_customer_id?: string;
  default_card: string | null;
  cards: any[];
  user_agreement_id: string;
  settings: UserSettingsProps;
  paymentMethods: {
    cards: any[];
    paypal: string;
    googlePay: string;
  };
  note?: NoteProps;
  comments?: CommentProps[];
  admin_id?: string;
  client_id?: string;
  employee_id?: string;
  created_at?: string;
  updated_at?: string;
};
export type UserInputProps = {
  username: string;
  email: string;
  password: string;
  phone?: string;
  user_type: "admin" | "client" | "employee";
  first_name?: MultiLangString;
  last_name?: MultiLangString;
  role?: string;
};
export type UserSettingsProps = {
  timezone?: string;
  currency?: CurrencyProps;
  theme?: ThemeProps;
  lang?: LanguageProps;
  calendar?: CalendarProps;
};
</file>

<file path="src/utils/supabase/api.ts">
import { createServerClient, serializeCookieHeader } from "@supabase/ssr";
import { type NextApiRequest, type NextApiResponse } from "next";
export default function createClient(req: NextApiRequest, res: NextApiResponse) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || "" }));
        },
        setAll(cookiesToSet) {
          res.setHeader(
            "Set-Cookie",
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options),
            ),
          );
        },
      },
    },
  );
  return supabase;
}
</file>

<file path="src/utils/supabase/component.ts">
import { createBrowserClient } from "@supabase/ssr";
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
// Log the URL being used when the module loads
if (!supabaseUrl || !supabaseKey) {
  // This error should have already been caught if Infisical wasn't working
  console.error("[Supabase Client] Missing Supabase environment variables!");
  throw new Error("Missing Supabase environment variables");
}
// // Create a single instance of the Supabase client
// export const createClient = createBrowserClient(supabaseUrl, supabaseKey, {
//   auth: {
//     persistSession: true, // Enable session persistence
//     storageKey: "tanad_supabase_auth", // Custom storage key
//     storage: typeof window !== "undefined" ? window.localStorage : undefined, // Use localStorage in browser
//     detectSessionInUrl: true, // Enable session detection in URL
//     autoRefreshToken: true, // Enable automatic token refresh
//   },
// });
export function createClient() {
  const supabase = createBrowserClient(supabaseUrl!, supabaseKey!);
  return supabase;
}
</file>

<file path="src/utils/supabase/server-admin.ts">
import { createServerClient, serializeCookieHeader } from "@supabase/ssr";
import { parse } from "cookie";
import { type GetServerSidePropsContext } from "next";
export function createClient({ req, res }: GetServerSidePropsContext) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    {
      cookies: {
        getAll() {
          const parsed = parse(req.headers.cookie || "");
          return Object.entries(parsed).map(([name, value]) => ({ name, value: value || "" }));
        },
        setAll(cookiesToSet) {
          res.setHeader(
            "Set-Cookie",
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options),
            ),
          );
        },
      },
    },
  );
  return supabase;
}
</file>

<file path="src/utils/supabase/server-props.ts">
import { createServerClient, serializeCookieHeader } from "@supabase/ssr";
import { parse } from "cookie";
import { type GetServerSidePropsContext } from "next";
export function createClient({ req, res }: GetServerSidePropsContext) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          const parsed = parse(req.headers.cookie || "");
          return Object.entries(parsed).map(([name, value]) => ({ name, value: value || "" }));
        },
        setAll(cookiesToSet) {
          res.setHeader(
            "Set-Cookie",
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options),
            ),
          );
        },
      },
    },
  );
  return supabase;
}
</file>

<file path="src/utils/supabase/static-props.ts">
import { createClient as createClientPrimitive } from "@supabase/supabase-js";
export function createClient() {
  const supabase = createClientPrimitive(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
  return supabase;
}
</file>

<file path="src/utils/action-utils.ts">
import { toast } from "sonner";
type ActionConfig<T> = {
  [key: string]: (params: {
    id: string;
    data?: T[];
    t: (key: string) => string;
    meta?: any; // For custom extensions
  }) => void | Promise<void>;
};
export const createActions = <T extends { id: string }>(config: ActionConfig<T>) => {
  return (
    action: string,
    id: string,
    context: {
      t: (key: string) => string;
      data?: T[];
      meta?: any;
    },
  ) => {
    return config[action]?.({ id, ...context }) ?? console.warn(`Unknown action: ${action}`);
  };
};
// Optional: Pre-built mutation wrapper
export const withMutation = (
  mutation: { mutateAsync: (id: string) => Promise<any> },
  translations: { loading: string; success: string; error: string },
) => {
  return async ({ id, t }: { id: string; t: (key: string) => string }) => {
    const toastId = toast.loading(t("General.loading_operation"), {
      description: t(translations.loading),
    });
    try {
      await mutation.mutateAsync(id);
      toast.success(t("General.successful_operation"), {
        description: t(translations.success),
      });
    } catch {
      toast.error(t("General.error_operation"), {
        description: t(translations.error),
      });
    } finally {
      toast.dismiss(toastId);
    }
  };
};
</file>

<file path="src/utils/generic-store.ts">
// stores/createGenericStore.ts
import { create } from "zustand";
import { applyFilters } from "@/lib/filter-utils";
import { applySort } from "@/lib/sort-utils";
import { BaseStates, BaseActions, SearchFilterFn } from "@/types/generic-store-types";
export function createGenericStore<T extends { id: string }>(
  storeName: string,
  searchFilterFn?: SearchFilterFn<T>,
  initialState?: Partial<BaseStates<T>>,
) {
  const defaultSearchFilter: SearchFilterFn<T> = (item, searchQuery) => {
    if ("name" in item) {
      return (item as any).name.toLowerCase().includes(searchQuery.toLowerCase());
    }
    if ("title" in item) {
      return (item as any).title.toLowerCase().includes(searchQuery.toLowerCase());
    }
    return false;
  };
  const actualSearchFilter = searchFilterFn || defaultSearchFilter;
  return create<BaseStates<T> & BaseActions<T>>((set, get) => ({
    isLoading: false,
    error: null,
    selectedRows: [],
    filterConditions: [],
    filterCaseSensitive: false,
    searchQuery: "",
    viewMode: "table",
    isDeleteDialogOpen: false,
    sortRules: [],
    sortCaseSensitive: false,
    sortNullsFirst: false,
    isFormDialogOpen: false,
    actionableItem: null,
    ...initialState,
    setIsLoading: (isLoading) => set({ isLoading }),
    setError: (error) => set({ error }),
    getFilteredData: (data: T[]) => {
      const { searchQuery, filterConditions, filterCaseSensitive } = get();
      if (!data || data.length === 0) {
        return [];
      }
      let filtered = data;
      if (searchQuery) {
        filtered = filtered.filter((item) => actualSearchFilter(item, searchQuery));
      }
      if (filterConditions.length > 0) {
        filtered = applyFilters(filtered, filterConditions, filterCaseSensitive);
      }
      return filtered;
    },
    getSortedData: (data: T[]) => {
      const { sortRules, sortCaseSensitive, sortNullsFirst } = get();
      return applySort(storeName, data, sortRules, {
        caseSensitive: sortCaseSensitive,
        nullsFirst: sortNullsFirst,
      });
    },
    setSortRules: (sortRules) => set({ sortRules }),
    setSortCaseSensitive: (sortCaseSensitive) => set({ sortCaseSensitive }),
    setSortNullsFirst: (sortNullsFirst) => set({ sortNullsFirst }),
    setFilterConditions: (filterConditions) => set({ filterConditions }),
    setFilterCaseSensitive: (filterCaseSensitive) => set({ filterCaseSensitive }),
    setSearchQuery: (searchQuery) => set({ searchQuery }),
    setViewMode: (viewMode) => set({ viewMode }),
    setIsDeleteDialogOpen: (isDeleteDialogOpen) => set({ isDeleteDialogOpen }),
    setIsFormDialogOpen: (isFormDialogOpen) => set({ isFormDialogOpen }),
    setActionableItem: (actionableItem) => set({ actionableItem }),
    setSelectedRows: (ids) => {
      set((state) => {
        if (JSON.stringify(state.selectedRows) === JSON.stringify(ids)) {
          return state;
        }
        return { ...state, selectedRows: ids };
      });
    },
    clearSelection: () => {
      set((state) => {
        if (state.selectedRows.length === 0) {
          return state;
        }
        return { ...state, selectedRows: [] };
      });
    },
  }));
}
</file>

<file path="supabase/migrations/meta/_journal.json">
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1745339658393,
      "tag": "0000_careful_ronan",
      "breakpoints": true
    },
    {
      "idx": 1,
      "version": "7",
      "when": 1745342791600,
      "tag": "0001_smooth_jubilee",
      "breakpoints": true
    },
    {
      "idx": 2,
      "version": "7",
      "when": 1745343604906,
      "tag": "0002_tough_clint_barton",
      "breakpoints": true
    },
    {
      "idx": 3,
      "version": "7",
      "when": 1745343927799,
      "tag": "0003_jittery_meteorite",
      "breakpoints": true
    },
    {
      "idx": 4,
      "version": "7",
      "when": 1746134393425,
      "tag": "0004_amazing_warhawk",
      "breakpoints": true
    }
  ]
}
</file>

<file path="supabase/migrations/meta/0000_snapshot.json">
{
  "id": "00000000-0000-0000-0000-000000000000",
  "prevId": "",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.templates": {
      "name": "templates",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "templates_name_idx": {
          "name": "templates_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_type_idx": {
          "name": "templates_type_idx",
          "columns": [
            {
              "expression": "type",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_user_id_idx": {
          "name": "templates_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "templates_enterprise_id_enterprises_id_fk": {
          "name": "templates_enterprise_id_enterprises_id_fk",
          "tableFrom": "templates",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "templates_type_check": {
          "name": "templates_type_check",
          "value": "type = ANY (ARRAY['invoice'::text, 'quote'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_path": {
          "name": "file_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "documents_entity_id_idx": {
          "name": "documents_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_entity_type_idx": {
          "name": "documents_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_user_id_idx": {
          "name": "documents_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "documents_enterprise_id_enterprises_id_fk": {
          "name": "documents_enterprise_id_enterprises_id_fk",
          "tableFrom": "documents",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "documents_entity_type_check": {
          "name": "documents_entity_type_check",
          "value": "entity_type = ANY (ARRAY['company'::text, 'expense'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "sku": {
          "name": "sku",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "cost": {
          "name": "cost",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "unit": {
          "name": "unit",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "products_name_idx": {
          "name": "products_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_sku_idx": {
          "name": "products_sku_idx",
          "columns": [
            {
              "expression": "sku",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_user_id_idx": {
          "name": "products_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "products_enterprise_id_enterprises_id_fk": {
          "name": "products_enterprise_id_enterprises_id_fk",
          "tableFrom": "products",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.user_roles": {
      "name": "user_roles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_roles_enterprise_id_fkey": {
          "name": "user_roles_enterprise_id_fkey",
          "tableFrom": "user_roles",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_roles_user_id_fkey": {
          "name": "user_roles_user_id_fkey",
          "tableFrom": "user_roles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_roles_user_id_role_enterprise_id_key": {
          "columns": [
            "user_id",
            "role",
            "enterprise_id"
          ],
          "nullsNotDistinct": false,
          "name": "user_roles_user_id_role_enterprise_id_key"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.role_permissions": {
      "name": "role_permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "app_permission",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "role_permissions_role_permission_key": {
          "columns": [
            "role",
            "permission"
          ],
          "nullsNotDistinct": false,
          "name": "role_permissions_role_permission_key"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.employee_requests": {
      "name": "employee_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "attachments": {
          "name": "attachments",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "employee_requests_created_at_idx": {
          "name": "employee_requests_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_employee_id_idx": {
          "name": "employee_requests_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_status_idx": {
          "name": "employee_requests_status_idx",
          "columns": [
            {
              "expression": "status",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_type_idx": {
          "name": "employee_requests_type_idx",
          "columns": [
            {
              "expression": "type",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_user_id_idx": {
          "name": "employee_requests_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employee_requests_employee_id_employees_id_fk": {
          "name": "employee_requests_employee_id_employees_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "employees",
          "schemaTo": "public",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "employee_requests_enterprise_id_enterprises_id_fk": {
          "name": "employee_requests_enterprise_id_enterprises_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.job_listing_jobs": {
      "name": "job_listing_jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "job_listing_id": {
          "name": "job_listing_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "job_id": {
          "name": "job_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "job_listing_jobs_job_id_idx": {
          "name": "job_listing_jobs_job_id_idx",
          "columns": [
            {
              "expression": "job_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listing_jobs_job_listing_id_idx": {
          "name": "job_listing_jobs_job_listing_id_idx",
          "columns": [
            {
              "expression": "job_listing_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listing_jobs_enterprise_id_enterprises_id_fk": {
          "name": "job_listing_jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_id_jobs_id_fk": {
          "name": "job_listing_jobs_job_id_jobs_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "jobs",
          "schemaTo": "public",
          "columnsFrom": [
            "job_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_listing_id_job_listings_id_fk": {
          "name": "job_listing_jobs_job_listing_id_job_listings_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "job_listings",
          "schemaTo": "public",
          "columnsFrom": [
            "job_listing_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.invoices": {
      "name": "invoices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "invoices_client_id_idx": {
          "name": "invoices_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_status_idx": {
          "name": "invoices_status_idx",
          "columns": [
            {
              "expression": "status",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_user_id_idx": {
          "name": "invoices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoices_client_id_fkey": {
          "name": "invoices_client_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "clients",
          "schemaTo": "public",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoices_enterprise_id_enterprises_id_fk": {
          "name": "invoices_enterprise_id_enterprises_id_fk",
          "tableFrom": "invoices",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "invoices_status_check": {
          "name": "invoices_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.invoice_items": {
      "name": "invoice_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "invoice_id": {
          "name": "invoice_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "invoice_items_invoice_id_idx": {
          "name": "invoice_items_invoice_id_idx",
          "columns": [
            {
              "expression": "invoice_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoice_items_invoice_id_fkey": {
          "name": "invoice_items_invoice_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "invoices",
          "schemaTo": "public",
          "columnsFrom": [
            "invoice_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoice_items_product_id_fkey": {
          "name": "invoice_items_product_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "products",
          "schemaTo": "public",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.job_listings": {
      "name": "job_listings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "job_listings_slug_idx": {
          "name": "job_listings_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_title_idx": {
          "name": "job_listings_title_idx",
          "columns": [
            {
              "expression": "title",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_user_id_idx": {
          "name": "job_listings_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listings_enterprise_id_enterprises_id_fk": {
          "name": "job_listings_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listings",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "job_listings_slug_unique": {
          "columns": [
            "slug"
          ],
          "nullsNotDistinct": false,
          "name": "job_listings_slug_unique"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_settings": {
          "name": "user_settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subscribed_to": {
          "name": "subscribed_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price_id": {
          "name": "price_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "profiles_email_idx": {
          "name": "profiles_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_enterprise_id_idx": {
          "name": "profiles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_user_id_idx": {
          "name": "profiles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_username_idx": {
          "name": "profiles_username_idx",
          "columns": [
            {
              "expression": "username",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_enterprise_id_enterprises_id_fk": {
          "name": "profiles_enterprise_id_enterprises_id_fk",
          "tableFrom": "profiles",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.offices": {
      "name": "offices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "offices_name_idx": {
          "name": "offices_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "offices_user_id_idx": {
          "name": "offices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "offices_enterprise_id_enterprises_id_fk": {
          "name": "offices_enterprise_id_enterprises_id_fk",
          "tableFrom": "offices",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.department_locations": {
      "name": "department_locations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "location_type": {
          "name": "location_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "location_id": {
          "name": "location_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "department_locations_department_id_departments_id_fk": {
          "name": "department_locations_department_id_departments_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "departments",
          "schemaTo": "public",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "department_locations_enterprise_id_enterprises_id_fk": {
          "name": "department_locations_enterprise_id_enterprises_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_department_location": {
          "columns": [
            "department_id",
            "location_type",
            "location_id"
          ],
          "nullsNotDistinct": false,
          "name": "unique_department_location"
        }
      },
      "checkConstraints": {
        "location_type_check": {
          "name": "location_type_check",
          "value": "location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.employees": {
      "name": "employees",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hire_date": {
          "name": "hire_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "termination_date": {
          "name": "termination_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "employees_department_id_idx": {
          "name": "employees_department_id_idx",
          "columns": [
            {
              "expression": "department_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_email_idx": {
          "name": "employees_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_user_id_idx": {
          "name": "employees_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employees_department_id_departments_id_fk": {
          "name": "employees_department_id_departments_id_fk",
          "tableFrom": "employees",
          "tableTo": "departments",
          "schemaTo": "public",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "employees_enterprise_id_enterprises_id_fk": {
          "name": "employees_enterprise_id_enterprises_id_fk",
          "tableFrom": "employees",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.expenses": {
      "name": "expenses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "expense_number": {
          "name": "expense_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "expenses_client_id_idx": {
          "name": "expenses_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_status_idx": {
          "name": "expenses_status_idx",
          "columns": [
            {
              "expression": "status",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_user_id_idx": {
          "name": "expenses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "expenses_client_id_fkey": {
          "name": "expenses_client_id_fkey",
          "tableFrom": "expenses",
          "tableTo": "clients",
          "schemaTo": "public",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "expenses_enterprise_id_enterprises_id_fk": {
          "name": "expenses_enterprise_id_enterprises_id_fk",
          "tableFrom": "expenses",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "expenses_status_check": {
          "name": "expenses_status_check",
          "value": "status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.quotes": {
      "name": "quotes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "quote_number": {
          "name": "quote_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "quotes_client_id_idx": {
          "name": "quotes_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_status_idx": {
          "name": "quotes_status_idx",
          "columns": [
            {
              "expression": "status",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_user_id_idx": {
          "name": "quotes_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quotes_client_id_fkey": {
          "name": "quotes_client_id_fkey",
          "tableFrom": "quotes",
          "tableTo": "clients",
          "schemaTo": "public",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "quotes_enterprise_id_enterprises_id_fk": {
          "name": "quotes_enterprise_id_enterprises_id_fk",
          "tableFrom": "quotes",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "quotes_status_check": {
          "name": "quotes_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])"
        }
      },
      "policies": {},
      "isRLSEnabled": true
    },
    "public.salaries": {
      "name": "salaries",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "payment_frequency": {
          "name": "payment_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'monthly'"
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "salaries_employee_id_idx": {
          "name": "salaries_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "salaries_user_id_idx": {
          "name": "salaries_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "salaries_employee_id_fkey": {
          "name": "salaries_employee_id_fkey",
          "tableFrom": "salaries",
          "tableTo": "employees",
          "schemaTo": "public",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "salaries_enterprise_id_enterprises_id_fk": {
          "name": "salaries_enterprise_id_enterprises_id_fk",
          "tableFrom": "salaries",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.vendors": {
      "name": "vendors",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "vendors_email_idx": {
          "name": "vendors_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_name_idx": {
          "name": "vendors_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_user_id_idx": {
          "name": "vendors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "vendors_enterprise_id_enterprises_id_fk": {
          "name": "vendors_enterprise_id_enterprises_id_fk",
          "tableFrom": "vendors",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.departments": {
      "name": "departments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "departments_name_idx": {
          "name": "departments_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "departments_user_id_idx": {
          "name": "departments_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "departments_enterprise_id_enterprises_id_fk": {
          "name": "departments_enterprise_id_enterprises_id_fk",
          "tableFrom": "departments",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.warehouses": {
      "name": "warehouses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "capacity": {
          "name": "capacity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "warehouses_code_idx": {
          "name": "warehouses_code_idx",
          "columns": [
            {
              "expression": "code",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_name_idx": {
          "name": "warehouses_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_user_id_idx": {
          "name": "warehouses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "warehouses_enterprise_id_enterprises_id_fk": {
          "name": "warehouses_enterprise_id_enterprises_id_fk",
          "tableFrom": "warehouses",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "warehouses_code_key": {
          "columns": [
            "code"
          ],
          "nullsNotDistinct": false,
          "name": "warehouses_code_key"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.jobs": {
      "name": "jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "requirements": {
          "name": "requirements",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location": {
          "name": "location",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "department": {
          "name": "department",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "jobs_department_idx": {
          "name": "jobs_department_idx",
          "columns": [
            {
              "expression": "department",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_title_idx": {
          "name": "jobs_title_idx",
          "columns": [
            {
              "expression": "title",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_user_id_idx": {
          "name": "jobs_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jobs_enterprise_id_enterprises_id_fk": {
          "name": "jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "jobs",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.branches": {
      "name": "branches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "manager": {
          "name": "manager",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "branches_code_idx": {
          "name": "branches_code_idx",
          "columns": [
            {
              "expression": "code",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_name_idx": {
          "name": "branches_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_user_id_idx": {
          "name": "branches_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "branches_enterprise_id_enterprises_id_fk": {
          "name": "branches_enterprise_id_enterprises_id_fk",
          "tableFrom": "branches",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "branches_code_key": {
          "columns": [
            "code"
          ],
          "nullsNotDistinct": false,
          "name": "branches_code_key"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.companies": {
      "name": "companies",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "companies_email_idx": {
          "name": "companies_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_is_active_idx": {
          "name": "companies_is_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_name_idx": {
          "name": "companies_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "companies_enterprise_id_enterprises_id_fk": {
          "name": "companies_enterprise_id_enterprises_id_fk",
          "tableFrom": "companies",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.enterprises": {
      "name": "enterprises",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "enterprises_email_idx": {
          "name": "enterprises_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "enterprises_name_idx": {
          "name": "enterprises_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {
        "Enable delete for owners": {
          "name": "Enable delete for owners",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "Enable insert for signup": {
          "name": "Enable insert for signup",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ]
        },
        "Enable read for users": {
          "name": "Enable read for users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ]
        },
        "Enable update for owners": {
          "name": "Enable update for owners",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ]
        }
      },
      "isRLSEnabled": true
    },
    "public.clients": {
      "name": "clients",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "clients_email_idx": {
          "name": "clients_email_idx",
          "columns": [
            {
              "expression": "email",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_name_idx": {
          "name": "clients_name_idx",
          "columns": [
            {
              "expression": "name",
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_user_id_idx": {
          "name": "clients_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "clients_company_fkey": {
          "name": "clients_company_fkey",
          "tableFrom": "clients",
          "tableTo": "companies",
          "schemaTo": "public",
          "columnsFrom": [
            "company"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "clients_enterprise_id_enterprises_id_fk": {
          "name": "clients_enterprise_id_enterprises_id_fk",
          "tableFrom": "clients",
          "tableTo": "enterprises",
          "schemaTo": "public",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    },
    "public.quote_items": {
      "name": "quote_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "quote_id": {
          "name": "quote_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "quote_items_quote_id_idx": {
          "name": "quote_items_quote_id_idx",
          "columns": [
            {
              "expression": "quote_id",
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops",
              "isExpression": false
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quote_items_product_id_fkey": {
          "name": "quote_items_product_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "products",
          "schemaTo": "public",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "quote_items_quote_id_fkey": {
          "name": "quote_items_quote_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "quotes",
          "schemaTo": "public",
          "columnsFrom": [
            "quote_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": true
    }
  },
  "enums": {
    "public.app_permission": {
      "name": "app_permission",
      "values": [
        "profiles.create",
        "profiles.read",
        "profiles.update",
        "profiles.delete",
        "profiles.export",
        "enterprises.create",
        "enterprises.read",
        "enterprises.update",
        "enterprises.delete",
        "enterprises.export",
        "invoices.create",
        "invoices.read",
        "invoices.update",
        "invoices.delete",
        "invoices.export",
        "invoices.duplicate",
        "products.create",
        "products.read",
        "products.update",
        "products.delete",
        "products.export",
        "quotes.create",
        "quotes.read",
        "quotes.update",
        "quotes.delete",
        "quotes.export",
        "quotes.duplicate",
        "employees.create",
        "employees.read",
        "employees.update",
        "employees.delete",
        "employees.export",
        "salaries.create",
        "salaries.read",
        "salaries.update",
        "salaries.delete",
        "salaries.export",
        "documents.create",
        "documents.read",
        "documents.update",
        "documents.delete",
        "documents.export",
        "templates.create",
        "templates.read",
        "templates.update",
        "templates.delete",
        "templates.export",
        "templates.duplicate",
        "employee_requests.create",
        "employee_requests.read",
        "employee_requests.update",
        "employee_requests.delete",
        "employee_requests.export",
        "job_listings.create",
        "job_listings.read",
        "job_listings.update",
        "job_listings.delete",
        "job_listings.export",
        "offices.create",
        "offices.read",
        "offices.update",
        "offices.delete",
        "offices.export",
        "expenses.create",
        "expenses.read",
        "expenses.update",
        "expenses.delete",
        "expenses.export",
        "expenses.duplicate",
        "departments.create",
        "departments.read",
        "departments.update",
        "departments.delete",
        "departments.export",
        "warehouses.create",
        "warehouses.read",
        "warehouses.update",
        "warehouses.delete",
        "warehouses.export",
        "vendors.create",
        "vendors.read",
        "vendors.update",
        "vendors.delete",
        "vendors.export",
        "clients.create",
        "clients.read",
        "clients.update",
        "clients.delete",
        "clients.export",
        "companies.create",
        "companies.read",
        "companies.update",
        "companies.delete",
        "companies.export",
        "branches.create",
        "branches.read",
        "branches.update",
        "branches.delete",
        "branches.export"
      ],
      "schema": "public"
    },
    "public.app_role": {
      "name": "app_role",
      "values": [
        "superadmin",
        "admin",
        "accounting",
        "hr"
      ],
      "schema": "public"
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "tables": {}
  }
}
</file>

<file path="supabase/migrations/meta/0001_snapshot.json">
{
  "id": "8bc6dbbb-b921-4c20-8027-9c5b9b032884",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.branches": {
      "name": "branches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "manager": {
          "name": "manager",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "branches_code_idx": {
          "name": "branches_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_name_idx": {
          "name": "branches_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_user_id_idx": {
          "name": "branches_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "branches_enterprise_id_enterprises_id_fk": {
          "name": "branches_enterprise_id_enterprises_id_fk",
          "tableFrom": "branches",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "branches_code_key": {
          "name": "branches_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.clients": {
      "name": "clients",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "clients_email_idx": {
          "name": "clients_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_name_idx": {
          "name": "clients_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_user_id_idx": {
          "name": "clients_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "clients_company_fkey": {
          "name": "clients_company_fkey",
          "tableFrom": "clients",
          "tableTo": "companies",
          "columnsFrom": [
            "company"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "clients_enterprise_id_enterprises_id_fk": {
          "name": "clients_enterprise_id_enterprises_id_fk",
          "tableFrom": "clients",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.companies": {
      "name": "companies",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "companies_email_idx": {
          "name": "companies_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_is_active_idx": {
          "name": "companies_is_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_name_idx": {
          "name": "companies_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "companies_enterprise_id_enterprises_id_fk": {
          "name": "companies_enterprise_id_enterprises_id_fk",
          "tableFrom": "companies",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.department_locations": {
      "name": "department_locations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "location_type": {
          "name": "location_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "location_id": {
          "name": "location_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "department_locations_department_id_departments_id_fk": {
          "name": "department_locations_department_id_departments_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "department_locations_enterprise_id_enterprises_id_fk": {
          "name": "department_locations_enterprise_id_enterprises_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_department_location": {
          "name": "unique_department_location",
          "nullsNotDistinct": false,
          "columns": [
            "department_id",
            "location_type",
            "location_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "location_type_check": {
          "name": "location_type_check",
          "value": "location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.departments": {
      "name": "departments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "departments_name_idx": {
          "name": "departments_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "departments_user_id_idx": {
          "name": "departments_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "departments_enterprise_id_enterprises_id_fk": {
          "name": "departments_enterprise_id_enterprises_id_fk",
          "tableFrom": "departments",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_path": {
          "name": "file_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "documents_entity_id_idx": {
          "name": "documents_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_entity_type_idx": {
          "name": "documents_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_user_id_idx": {
          "name": "documents_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "documents_enterprise_id_enterprises_id_fk": {
          "name": "documents_enterprise_id_enterprises_id_fk",
          "tableFrom": "documents",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "documents_entity_type_check": {
          "name": "documents_entity_type_check",
          "value": "entity_type = ANY (ARRAY['company'::text, 'expense'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.employee_requests": {
      "name": "employee_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "attachments": {
          "name": "attachments",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "employee_requests_created_at_idx": {
          "name": "employee_requests_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_employee_id_idx": {
          "name": "employee_requests_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_status_idx": {
          "name": "employee_requests_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_type_idx": {
          "name": "employee_requests_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_user_id_idx": {
          "name": "employee_requests_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employee_requests_employee_id_employees_id_fk": {
          "name": "employee_requests_employee_id_employees_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "employee_requests_enterprise_id_enterprises_id_fk": {
          "name": "employee_requests_enterprise_id_enterprises_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.employees": {
      "name": "employees",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hire_date": {
          "name": "hire_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "termination_date": {
          "name": "termination_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "employees_department_id_idx": {
          "name": "employees_department_id_idx",
          "columns": [
            {
              "expression": "department_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_email_idx": {
          "name": "employees_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_user_id_idx": {
          "name": "employees_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employees_department_id_departments_id_fk": {
          "name": "employees_department_id_departments_id_fk",
          "tableFrom": "employees",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "employees_enterprise_id_enterprises_id_fk": {
          "name": "employees_enterprise_id_enterprises_id_fk",
          "tableFrom": "employees",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.enterprises": {
      "name": "enterprises",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "enterprises_email_idx": {
          "name": "enterprises_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "enterprises_name_idx": {
          "name": "enterprises_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable delete for owners": {
          "name": "Enable delete for owners",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "Enable insert for signup": {
          "name": "Enable insert for signup",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ]
        },
        "Enable read for users": {
          "name": "Enable read for users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ]
        },
        "Enable update for owners": {
          "name": "Enable update for owners",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.expenses": {
      "name": "expenses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "expense_number": {
          "name": "expense_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "expenses_client_id_idx": {
          "name": "expenses_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_status_idx": {
          "name": "expenses_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_user_id_idx": {
          "name": "expenses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "expenses_client_id_fkey": {
          "name": "expenses_client_id_fkey",
          "tableFrom": "expenses",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "expenses_enterprise_id_enterprises_id_fk": {
          "name": "expenses_enterprise_id_enterprises_id_fk",
          "tableFrom": "expenses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "expenses_status_check": {
          "name": "expenses_status_check",
          "value": "status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.invoice_items": {
      "name": "invoice_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "invoice_id": {
          "name": "invoice_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "invoice_items_invoice_id_idx": {
          "name": "invoice_items_invoice_id_idx",
          "columns": [
            {
              "expression": "invoice_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoice_items_invoice_id_fkey": {
          "name": "invoice_items_invoice_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "invoices",
          "columnsFrom": [
            "invoice_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoice_items_product_id_fkey": {
          "name": "invoice_items_product_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.invoices": {
      "name": "invoices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "invoices_client_id_idx": {
          "name": "invoices_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_status_idx": {
          "name": "invoices_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_user_id_idx": {
          "name": "invoices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoices_client_id_fkey": {
          "name": "invoices_client_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoices_enterprise_id_enterprises_id_fk": {
          "name": "invoices_enterprise_id_enterprises_id_fk",
          "tableFrom": "invoices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "invoices_status_check": {
          "name": "invoices_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.job_listing_jobs": {
      "name": "job_listing_jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "job_listing_id": {
          "name": "job_listing_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "job_id": {
          "name": "job_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "job_listing_jobs_job_id_idx": {
          "name": "job_listing_jobs_job_id_idx",
          "columns": [
            {
              "expression": "job_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listing_jobs_job_listing_id_idx": {
          "name": "job_listing_jobs_job_listing_id_idx",
          "columns": [
            {
              "expression": "job_listing_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listing_jobs_enterprise_id_enterprises_id_fk": {
          "name": "job_listing_jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_id_jobs_id_fk": {
          "name": "job_listing_jobs_job_id_jobs_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "jobs",
          "columnsFrom": [
            "job_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_listing_id_job_listings_id_fk": {
          "name": "job_listing_jobs_job_listing_id_job_listings_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "job_listings",
          "columnsFrom": [
            "job_listing_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.job_listings": {
      "name": "job_listings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "job_listings_slug_idx": {
          "name": "job_listings_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_title_idx": {
          "name": "job_listings_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_user_id_idx": {
          "name": "job_listings_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listings_enterprise_id_enterprises_id_fk": {
          "name": "job_listings_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listings",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "job_listings_slug_unique": {
          "name": "job_listings_slug_unique",
          "nullsNotDistinct": false,
          "columns": [
            "slug"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jobs": {
      "name": "jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "requirements": {
          "name": "requirements",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location": {
          "name": "location",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "department": {
          "name": "department",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "jobs_department_idx": {
          "name": "jobs_department_idx",
          "columns": [
            {
              "expression": "department",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_title_idx": {
          "name": "jobs_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_user_id_idx": {
          "name": "jobs_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jobs_enterprise_id_enterprises_id_fk": {
          "name": "jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.offices": {
      "name": "offices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "offices_name_idx": {
          "name": "offices_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "offices_user_id_idx": {
          "name": "offices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "offices_enterprise_id_enterprises_id_fk": {
          "name": "offices_enterprise_id_enterprises_id_fk",
          "tableFrom": "offices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "sku": {
          "name": "sku",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "cost": {
          "name": "cost",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "unit": {
          "name": "unit",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "products_name_idx": {
          "name": "products_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_sku_idx": {
          "name": "products_sku_idx",
          "columns": [
            {
              "expression": "sku",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_user_id_idx": {
          "name": "products_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "products_enterprise_id_enterprises_id_fk": {
          "name": "products_enterprise_id_enterprises_id_fk",
          "tableFrom": "products",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_settings": {
          "name": "user_settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subscribed_to": {
          "name": "subscribed_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price_id": {
          "name": "price_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "profiles_email_idx": {
          "name": "profiles_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_enterprise_id_idx": {
          "name": "profiles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_user_id_idx": {
          "name": "profiles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_username_idx": {
          "name": "profiles_username_idx",
          "columns": [
            {
              "expression": "username",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_enterprise_id_enterprises_id_fk": {
          "name": "profiles_enterprise_id_enterprises_id_fk",
          "tableFrom": "profiles",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quote_items": {
      "name": "quote_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "quote_id": {
          "name": "quote_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "quote_items_quote_id_idx": {
          "name": "quote_items_quote_id_idx",
          "columns": [
            {
              "expression": "quote_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quote_items_product_id_fkey": {
          "name": "quote_items_product_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "quote_items_quote_id_fkey": {
          "name": "quote_items_quote_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "quotes",
          "columnsFrom": [
            "quote_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quotes": {
      "name": "quotes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "quote_number": {
          "name": "quote_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "quotes_client_id_idx": {
          "name": "quotes_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_status_idx": {
          "name": "quotes_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_user_id_idx": {
          "name": "quotes_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quotes_client_id_fkey": {
          "name": "quotes_client_id_fkey",
          "tableFrom": "quotes",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "quotes_enterprise_id_enterprises_id_fk": {
          "name": "quotes_enterprise_id_enterprises_id_fk",
          "tableFrom": "quotes",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "quotes_status_check": {
          "name": "quotes_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.role_permissions": {
      "name": "role_permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "app_permission",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "role_permissions_role_permission_key": {
          "name": "role_permissions_role_permission_key",
          "nullsNotDistinct": false,
          "columns": [
            "role",
            "permission"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.salaries": {
      "name": "salaries",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "payment_frequency": {
          "name": "payment_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'monthly'"
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "salaries_employee_id_idx": {
          "name": "salaries_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "salaries_user_id_idx": {
          "name": "salaries_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "salaries_employee_id_fkey": {
          "name": "salaries_employee_id_fkey",
          "tableFrom": "salaries",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "salaries_enterprise_id_enterprises_id_fk": {
          "name": "salaries_enterprise_id_enterprises_id_fk",
          "tableFrom": "salaries",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.templates": {
      "name": "templates",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "templates_name_idx": {
          "name": "templates_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_type_idx": {
          "name": "templates_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_user_id_idx": {
          "name": "templates_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "templates_enterprise_id_enterprises_id_fk": {
          "name": "templates_enterprise_id_enterprises_id_fk",
          "tableFrom": "templates",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "templates_type_check": {
          "name": "templates_type_check",
          "value": "type = ANY (ARRAY['invoice'::text, 'quote'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.vendors": {
      "name": "vendors",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "vendors_email_idx": {
          "name": "vendors_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_name_idx": {
          "name": "vendors_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_user_id_idx": {
          "name": "vendors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "vendors_enterprise_id_enterprises_id_fk": {
          "name": "vendors_enterprise_id_enterprises_id_fk",
          "tableFrom": "vendors",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.warehouses": {
      "name": "warehouses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "capacity": {
          "name": "capacity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "warehouses_code_idx": {
          "name": "warehouses_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_name_idx": {
          "name": "warehouses_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_user_id_idx": {
          "name": "warehouses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "warehouses_enterprise_id_enterprises_id_fk": {
          "name": "warehouses_enterprise_id_enterprises_id_fk",
          "tableFrom": "warehouses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "warehouses_code_key": {
          "name": "warehouses_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.app_permission": {
      "name": "app_permission",
      "schema": "public",
      "values": [
        "profiles.create",
        "profiles.read",
        "profiles.update",
        "profiles.delete",
        "profiles.export",
        "enterprises.create",
        "enterprises.read",
        "enterprises.update",
        "enterprises.delete",
        "enterprises.export",
        "invoices.create",
        "invoices.read",
        "invoices.update",
        "invoices.delete",
        "invoices.export",
        "invoices.duplicate",
        "products.create",
        "products.read",
        "products.update",
        "products.delete",
        "products.export",
        "quotes.create",
        "quotes.read",
        "quotes.update",
        "quotes.delete",
        "quotes.export",
        "quotes.duplicate",
        "employees.create",
        "employees.read",
        "employees.update",
        "employees.delete",
        "employees.export",
        "salaries.create",
        "salaries.read",
        "salaries.update",
        "salaries.delete",
        "salaries.export",
        "documents.create",
        "documents.read",
        "documents.update",
        "documents.delete",
        "documents.export",
        "templates.create",
        "templates.read",
        "templates.update",
        "templates.delete",
        "templates.export",
        "templates.duplicate",
        "employee_requests.create",
        "employee_requests.read",
        "employee_requests.update",
        "employee_requests.delete",
        "employee_requests.export",
        "job_listings.create",
        "job_listings.read",
        "job_listings.update",
        "job_listings.delete",
        "job_listings.export",
        "offices.create",
        "offices.read",
        "offices.update",
        "offices.delete",
        "offices.export",
        "expenses.create",
        "expenses.read",
        "expenses.update",
        "expenses.delete",
        "expenses.export",
        "expenses.duplicate",
        "departments.create",
        "departments.read",
        "departments.update",
        "departments.delete",
        "departments.export",
        "warehouses.create",
        "warehouses.read",
        "warehouses.update",
        "warehouses.delete",
        "warehouses.export",
        "vendors.create",
        "vendors.read",
        "vendors.update",
        "vendors.delete",
        "vendors.export",
        "clients.create",
        "clients.read",
        "clients.update",
        "clients.delete",
        "clients.export",
        "companies.create",
        "companies.read",
        "companies.update",
        "companies.delete",
        "companies.export",
        "branches.create",
        "branches.read",
        "branches.update",
        "branches.delete",
        "branches.export"
      ]
    },
    "public.app_role": {
      "name": "app_role",
      "schema": "public",
      "values": [
        "superadmin",
        "admin",
        "accounting",
        "hr"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="supabase/migrations/meta/0002_snapshot.json">
{
  "id": "9b46c777-aabb-44ed-9515-3a6987a3fee4",
  "prevId": "8bc6dbbb-b921-4c20-8027-9c5b9b032884",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.branches": {
      "name": "branches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "manager": {
          "name": "manager",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "branches_code_idx": {
          "name": "branches_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_name_idx": {
          "name": "branches_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_user_id_idx": {
          "name": "branches_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "branches_enterprise_id_enterprises_id_fk": {
          "name": "branches_enterprise_id_enterprises_id_fk",
          "tableFrom": "branches",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "branches_code_key": {
          "name": "branches_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.clients": {
      "name": "clients",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "clients_email_idx": {
          "name": "clients_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_name_idx": {
          "name": "clients_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_user_id_idx": {
          "name": "clients_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "clients_company_fkey": {
          "name": "clients_company_fkey",
          "tableFrom": "clients",
          "tableTo": "companies",
          "columnsFrom": [
            "company"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "clients_enterprise_id_enterprises_id_fk": {
          "name": "clients_enterprise_id_enterprises_id_fk",
          "tableFrom": "clients",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.companies": {
      "name": "companies",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "companies_email_idx": {
          "name": "companies_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_is_active_idx": {
          "name": "companies_is_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_name_idx": {
          "name": "companies_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "companies_enterprise_id_enterprises_id_fk": {
          "name": "companies_enterprise_id_enterprises_id_fk",
          "tableFrom": "companies",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.department_locations": {
      "name": "department_locations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "location_type": {
          "name": "location_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "location_id": {
          "name": "location_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "department_locations_department_id_departments_id_fk": {
          "name": "department_locations_department_id_departments_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "department_locations_enterprise_id_enterprises_id_fk": {
          "name": "department_locations_enterprise_id_enterprises_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_department_location": {
          "name": "unique_department_location",
          "nullsNotDistinct": false,
          "columns": [
            "department_id",
            "location_type",
            "location_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "location_type_check": {
          "name": "location_type_check",
          "value": "location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.departments": {
      "name": "departments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "departments_name_idx": {
          "name": "departments_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "departments_user_id_idx": {
          "name": "departments_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "departments_enterprise_id_enterprises_id_fk": {
          "name": "departments_enterprise_id_enterprises_id_fk",
          "tableFrom": "departments",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_path": {
          "name": "file_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "documents_entity_id_idx": {
          "name": "documents_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_entity_type_idx": {
          "name": "documents_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_user_id_idx": {
          "name": "documents_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "documents_enterprise_id_enterprises_id_fk": {
          "name": "documents_enterprise_id_enterprises_id_fk",
          "tableFrom": "documents",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "documents_entity_type_check": {
          "name": "documents_entity_type_check",
          "value": "entity_type = ANY (ARRAY['company'::text, 'expense'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.employee_requests": {
      "name": "employee_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "attachments": {
          "name": "attachments",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "employee_requests_created_at_idx": {
          "name": "employee_requests_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_employee_id_idx": {
          "name": "employee_requests_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_status_idx": {
          "name": "employee_requests_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_type_idx": {
          "name": "employee_requests_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_user_id_idx": {
          "name": "employee_requests_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employee_requests_employee_id_employees_id_fk": {
          "name": "employee_requests_employee_id_employees_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "employee_requests_enterprise_id_enterprises_id_fk": {
          "name": "employee_requests_enterprise_id_enterprises_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.employees": {
      "name": "employees",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hire_date": {
          "name": "hire_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "termination_date": {
          "name": "termination_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "employees_department_id_idx": {
          "name": "employees_department_id_idx",
          "columns": [
            {
              "expression": "department_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_email_idx": {
          "name": "employees_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_user_id_idx": {
          "name": "employees_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employees_department_id_departments_id_fk": {
          "name": "employees_department_id_departments_id_fk",
          "tableFrom": "employees",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "employees_enterprise_id_enterprises_id_fk": {
          "name": "employees_enterprise_id_enterprises_id_fk",
          "tableFrom": "employees",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.enterprises": {
      "name": "enterprises",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "enterprises_email_idx": {
          "name": "enterprises_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "enterprises_name_idx": {
          "name": "enterprises_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable delete for owners": {
          "name": "Enable delete for owners",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "Enable insert for signup": {
          "name": "Enable insert for signup",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ]
        },
        "Enable read for users": {
          "name": "Enable read for users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ]
        },
        "Enable update for owners": {
          "name": "Enable update for owners",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.expenses": {
      "name": "expenses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "expense_number": {
          "name": "expense_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "expenses_client_id_idx": {
          "name": "expenses_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_status_idx": {
          "name": "expenses_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_user_id_idx": {
          "name": "expenses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "expenses_client_id_fkey": {
          "name": "expenses_client_id_fkey",
          "tableFrom": "expenses",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "expenses_enterprise_id_enterprises_id_fk": {
          "name": "expenses_enterprise_id_enterprises_id_fk",
          "tableFrom": "expenses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "expenses_status_check": {
          "name": "expenses_status_check",
          "value": "status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.invoice_items": {
      "name": "invoice_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "invoice_id": {
          "name": "invoice_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "invoice_items_invoice_id_idx": {
          "name": "invoice_items_invoice_id_idx",
          "columns": [
            {
              "expression": "invoice_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoice_items_invoice_id_fkey": {
          "name": "invoice_items_invoice_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "invoices",
          "columnsFrom": [
            "invoice_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoice_items_product_id_fkey": {
          "name": "invoice_items_product_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.invoices": {
      "name": "invoices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "invoices_client_id_idx": {
          "name": "invoices_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_status_idx": {
          "name": "invoices_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_user_id_idx": {
          "name": "invoices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoices_client_id_fkey": {
          "name": "invoices_client_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoices_enterprise_id_enterprises_id_fk": {
          "name": "invoices_enterprise_id_enterprises_id_fk",
          "tableFrom": "invoices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "invoices_status_check": {
          "name": "invoices_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.job_listing_jobs": {
      "name": "job_listing_jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "job_listing_id": {
          "name": "job_listing_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "job_id": {
          "name": "job_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "job_listing_jobs_job_id_idx": {
          "name": "job_listing_jobs_job_id_idx",
          "columns": [
            {
              "expression": "job_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listing_jobs_job_listing_id_idx": {
          "name": "job_listing_jobs_job_listing_id_idx",
          "columns": [
            {
              "expression": "job_listing_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listing_jobs_enterprise_id_enterprises_id_fk": {
          "name": "job_listing_jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_id_jobs_id_fk": {
          "name": "job_listing_jobs_job_id_jobs_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "jobs",
          "columnsFrom": [
            "job_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_listing_id_job_listings_id_fk": {
          "name": "job_listing_jobs_job_listing_id_job_listings_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "job_listings",
          "columnsFrom": [
            "job_listing_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.job_listings": {
      "name": "job_listings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "job_listings_slug_idx": {
          "name": "job_listings_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_title_idx": {
          "name": "job_listings_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_user_id_idx": {
          "name": "job_listings_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listings_enterprise_id_enterprises_id_fk": {
          "name": "job_listings_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listings",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "job_listings_slug_unique": {
          "name": "job_listings_slug_unique",
          "nullsNotDistinct": false,
          "columns": [
            "slug"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jobs": {
      "name": "jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "requirements": {
          "name": "requirements",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location": {
          "name": "location",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "department": {
          "name": "department",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "jobs_department_idx": {
          "name": "jobs_department_idx",
          "columns": [
            {
              "expression": "department",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_title_idx": {
          "name": "jobs_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_user_id_idx": {
          "name": "jobs_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jobs_enterprise_id_enterprises_id_fk": {
          "name": "jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.offices": {
      "name": "offices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "offices_name_idx": {
          "name": "offices_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "offices_user_id_idx": {
          "name": "offices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "offices_enterprise_id_enterprises_id_fk": {
          "name": "offices_enterprise_id_enterprises_id_fk",
          "tableFrom": "offices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "sku": {
          "name": "sku",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "cost": {
          "name": "cost",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "unit": {
          "name": "unit",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "products_name_idx": {
          "name": "products_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_sku_idx": {
          "name": "products_sku_idx",
          "columns": [
            {
              "expression": "sku",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_user_id_idx": {
          "name": "products_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "products_enterprise_id_enterprises_id_fk": {
          "name": "products_enterprise_id_enterprises_id_fk",
          "tableFrom": "products",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_settings": {
          "name": "user_settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subscribed_to": {
          "name": "subscribed_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price_id": {
          "name": "price_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'user'"
        }
      },
      "indexes": {
        "profiles_email_idx": {
          "name": "profiles_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_enterprise_id_idx": {
          "name": "profiles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_user_id_idx": {
          "name": "profiles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_username_idx": {
          "name": "profiles_username_idx",
          "columns": [
            {
              "expression": "username",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_enterprise_id_enterprises_id_fk": {
          "name": "profiles_enterprise_id_enterprises_id_fk",
          "tableFrom": "profiles",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quote_items": {
      "name": "quote_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "quote_id": {
          "name": "quote_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "quote_items_quote_id_idx": {
          "name": "quote_items_quote_id_idx",
          "columns": [
            {
              "expression": "quote_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quote_items_product_id_fkey": {
          "name": "quote_items_product_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "quote_items_quote_id_fkey": {
          "name": "quote_items_quote_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "quotes",
          "columnsFrom": [
            "quote_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quotes": {
      "name": "quotes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "quote_number": {
          "name": "quote_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "quotes_client_id_idx": {
          "name": "quotes_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_status_idx": {
          "name": "quotes_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_user_id_idx": {
          "name": "quotes_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quotes_client_id_fkey": {
          "name": "quotes_client_id_fkey",
          "tableFrom": "quotes",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "quotes_enterprise_id_enterprises_id_fk": {
          "name": "quotes_enterprise_id_enterprises_id_fk",
          "tableFrom": "quotes",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "quotes_status_check": {
          "name": "quotes_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.role_permissions": {
      "name": "role_permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "app_permission",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "role_permissions_role_permission_key": {
          "name": "role_permissions_role_permission_key",
          "nullsNotDistinct": false,
          "columns": [
            "role",
            "permission"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.salaries": {
      "name": "salaries",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "payment_frequency": {
          "name": "payment_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'monthly'"
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "salaries_employee_id_idx": {
          "name": "salaries_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "salaries_user_id_idx": {
          "name": "salaries_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "salaries_employee_id_fkey": {
          "name": "salaries_employee_id_fkey",
          "tableFrom": "salaries",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "salaries_enterprise_id_enterprises_id_fk": {
          "name": "salaries_enterprise_id_enterprises_id_fk",
          "tableFrom": "salaries",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.templates": {
      "name": "templates",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "templates_name_idx": {
          "name": "templates_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_type_idx": {
          "name": "templates_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_user_id_idx": {
          "name": "templates_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "templates_enterprise_id_enterprises_id_fk": {
          "name": "templates_enterprise_id_enterprises_id_fk",
          "tableFrom": "templates",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "templates_type_check": {
          "name": "templates_type_check",
          "value": "type = ANY (ARRAY['invoice'::text, 'quote'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.vendors": {
      "name": "vendors",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "vendors_email_idx": {
          "name": "vendors_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_name_idx": {
          "name": "vendors_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_user_id_idx": {
          "name": "vendors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "vendors_enterprise_id_enterprises_id_fk": {
          "name": "vendors_enterprise_id_enterprises_id_fk",
          "tableFrom": "vendors",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.warehouses": {
      "name": "warehouses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "capacity": {
          "name": "capacity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "warehouses_code_idx": {
          "name": "warehouses_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_name_idx": {
          "name": "warehouses_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_user_id_idx": {
          "name": "warehouses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "warehouses_enterprise_id_enterprises_id_fk": {
          "name": "warehouses_enterprise_id_enterprises_id_fk",
          "tableFrom": "warehouses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "warehouses_code_key": {
          "name": "warehouses_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.app_permission": {
      "name": "app_permission",
      "schema": "public",
      "values": [
        "profiles.create",
        "profiles.read",
        "profiles.update",
        "profiles.delete",
        "profiles.export",
        "enterprises.create",
        "enterprises.read",
        "enterprises.update",
        "enterprises.delete",
        "enterprises.export",
        "invoices.create",
        "invoices.read",
        "invoices.update",
        "invoices.delete",
        "invoices.export",
        "invoices.duplicate",
        "products.create",
        "products.read",
        "products.update",
        "products.delete",
        "products.export",
        "quotes.create",
        "quotes.read",
        "quotes.update",
        "quotes.delete",
        "quotes.export",
        "quotes.duplicate",
        "employees.create",
        "employees.read",
        "employees.update",
        "employees.delete",
        "employees.export",
        "salaries.create",
        "salaries.read",
        "salaries.update",
        "salaries.delete",
        "salaries.export",
        "documents.create",
        "documents.read",
        "documents.update",
        "documents.delete",
        "documents.export",
        "templates.create",
        "templates.read",
        "templates.update",
        "templates.delete",
        "templates.export",
        "templates.duplicate",
        "employee_requests.create",
        "employee_requests.read",
        "employee_requests.update",
        "employee_requests.delete",
        "employee_requests.export",
        "job_listings.create",
        "job_listings.read",
        "job_listings.update",
        "job_listings.delete",
        "job_listings.export",
        "offices.create",
        "offices.read",
        "offices.update",
        "offices.delete",
        "offices.export",
        "expenses.create",
        "expenses.read",
        "expenses.update",
        "expenses.delete",
        "expenses.export",
        "expenses.duplicate",
        "departments.create",
        "departments.read",
        "departments.update",
        "departments.delete",
        "departments.export",
        "warehouses.create",
        "warehouses.read",
        "warehouses.update",
        "warehouses.delete",
        "warehouses.export",
        "vendors.create",
        "vendors.read",
        "vendors.update",
        "vendors.delete",
        "vendors.export",
        "clients.create",
        "clients.read",
        "clients.update",
        "clients.delete",
        "clients.export",
        "companies.create",
        "companies.read",
        "companies.update",
        "companies.delete",
        "companies.export",
        "branches.create",
        "branches.read",
        "branches.update",
        "branches.delete",
        "branches.export"
      ]
    },
    "public.app_role": {
      "name": "app_role",
      "schema": "public",
      "values": [
        "superadmin",
        "admin",
        "accounting",
        "hr"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="supabase/migrations/meta/0003_snapshot.json">
{
  "id": "59565485-3c25-484d-bb12-69f2f738ccca",
  "prevId": "9b46c777-aabb-44ed-9515-3a6987a3fee4",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.branches": {
      "name": "branches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "manager": {
          "name": "manager",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "branches_code_idx": {
          "name": "branches_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_name_idx": {
          "name": "branches_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_user_id_idx": {
          "name": "branches_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "branches_enterprise_id_enterprises_id_fk": {
          "name": "branches_enterprise_id_enterprises_id_fk",
          "tableFrom": "branches",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "branches_code_key": {
          "name": "branches_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.clients": {
      "name": "clients",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "clients_email_idx": {
          "name": "clients_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_name_idx": {
          "name": "clients_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_user_id_idx": {
          "name": "clients_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "clients_company_fkey": {
          "name": "clients_company_fkey",
          "tableFrom": "clients",
          "tableTo": "companies",
          "columnsFrom": [
            "company"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "clients_enterprise_id_enterprises_id_fk": {
          "name": "clients_enterprise_id_enterprises_id_fk",
          "tableFrom": "clients",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.companies": {
      "name": "companies",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "companies_email_idx": {
          "name": "companies_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_is_active_idx": {
          "name": "companies_is_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_name_idx": {
          "name": "companies_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "companies_enterprise_id_enterprises_id_fk": {
          "name": "companies_enterprise_id_enterprises_id_fk",
          "tableFrom": "companies",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.department_locations": {
      "name": "department_locations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "location_type": {
          "name": "location_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "location_id": {
          "name": "location_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "department_locations_department_id_departments_id_fk": {
          "name": "department_locations_department_id_departments_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "department_locations_enterprise_id_enterprises_id_fk": {
          "name": "department_locations_enterprise_id_enterprises_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_department_location": {
          "name": "unique_department_location",
          "nullsNotDistinct": false,
          "columns": [
            "department_id",
            "location_type",
            "location_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "location_type_check": {
          "name": "location_type_check",
          "value": "location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.departments": {
      "name": "departments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "departments_name_idx": {
          "name": "departments_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "departments_user_id_idx": {
          "name": "departments_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "departments_enterprise_id_enterprises_id_fk": {
          "name": "departments_enterprise_id_enterprises_id_fk",
          "tableFrom": "departments",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_path": {
          "name": "file_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "documents_entity_id_idx": {
          "name": "documents_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_entity_type_idx": {
          "name": "documents_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_user_id_idx": {
          "name": "documents_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "documents_enterprise_id_enterprises_id_fk": {
          "name": "documents_enterprise_id_enterprises_id_fk",
          "tableFrom": "documents",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "documents_entity_type_check": {
          "name": "documents_entity_type_check",
          "value": "entity_type = ANY (ARRAY['company'::text, 'expense'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.employee_requests": {
      "name": "employee_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "attachments": {
          "name": "attachments",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "employee_requests_created_at_idx": {
          "name": "employee_requests_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_employee_id_idx": {
          "name": "employee_requests_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_status_idx": {
          "name": "employee_requests_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_type_idx": {
          "name": "employee_requests_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_user_id_idx": {
          "name": "employee_requests_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employee_requests_employee_id_employees_id_fk": {
          "name": "employee_requests_employee_id_employees_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "employee_requests_enterprise_id_enterprises_id_fk": {
          "name": "employee_requests_enterprise_id_enterprises_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.employees": {
      "name": "employees",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hire_date": {
          "name": "hire_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "termination_date": {
          "name": "termination_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "employees_department_id_idx": {
          "name": "employees_department_id_idx",
          "columns": [
            {
              "expression": "department_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_email_idx": {
          "name": "employees_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_user_id_idx": {
          "name": "employees_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employees_department_id_departments_id_fk": {
          "name": "employees_department_id_departments_id_fk",
          "tableFrom": "employees",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "employees_enterprise_id_enterprises_id_fk": {
          "name": "employees_enterprise_id_enterprises_id_fk",
          "tableFrom": "employees",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.enterprises": {
      "name": "enterprises",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "enterprises_email_idx": {
          "name": "enterprises_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "enterprises_name_idx": {
          "name": "enterprises_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable delete for owners": {
          "name": "Enable delete for owners",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "Enable insert for signup": {
          "name": "Enable insert for signup",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ]
        },
        "Enable read for users": {
          "name": "Enable read for users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ]
        },
        "Enable update for owners": {
          "name": "Enable update for owners",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.expenses": {
      "name": "expenses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "expense_number": {
          "name": "expense_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "expenses_client_id_idx": {
          "name": "expenses_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_status_idx": {
          "name": "expenses_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "expenses_user_id_idx": {
          "name": "expenses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "expenses_client_id_fkey": {
          "name": "expenses_client_id_fkey",
          "tableFrom": "expenses",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "expenses_enterprise_id_enterprises_id_fk": {
          "name": "expenses_enterprise_id_enterprises_id_fk",
          "tableFrom": "expenses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "expenses_status_check": {
          "name": "expenses_status_check",
          "value": "status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.invoice_items": {
      "name": "invoice_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "invoice_id": {
          "name": "invoice_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "invoice_items_invoice_id_idx": {
          "name": "invoice_items_invoice_id_idx",
          "columns": [
            {
              "expression": "invoice_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoice_items_invoice_id_fkey": {
          "name": "invoice_items_invoice_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "invoices",
          "columnsFrom": [
            "invoice_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoice_items_product_id_fkey": {
          "name": "invoice_items_product_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.invoices": {
      "name": "invoices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "invoices_client_id_idx": {
          "name": "invoices_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_status_idx": {
          "name": "invoices_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_user_id_idx": {
          "name": "invoices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoices_client_id_fkey": {
          "name": "invoices_client_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoices_enterprise_id_enterprises_id_fk": {
          "name": "invoices_enterprise_id_enterprises_id_fk",
          "tableFrom": "invoices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "invoices_status_check": {
          "name": "invoices_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.job_listing_jobs": {
      "name": "job_listing_jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "job_listing_id": {
          "name": "job_listing_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "job_id": {
          "name": "job_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "job_listing_jobs_job_id_idx": {
          "name": "job_listing_jobs_job_id_idx",
          "columns": [
            {
              "expression": "job_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listing_jobs_job_listing_id_idx": {
          "name": "job_listing_jobs_job_listing_id_idx",
          "columns": [
            {
              "expression": "job_listing_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listing_jobs_enterprise_id_enterprises_id_fk": {
          "name": "job_listing_jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_id_jobs_id_fk": {
          "name": "job_listing_jobs_job_id_jobs_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "jobs",
          "columnsFrom": [
            "job_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_listing_id_job_listings_id_fk": {
          "name": "job_listing_jobs_job_listing_id_job_listings_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "job_listings",
          "columnsFrom": [
            "job_listing_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.job_listings": {
      "name": "job_listings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "job_listings_slug_idx": {
          "name": "job_listings_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_title_idx": {
          "name": "job_listings_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_user_id_idx": {
          "name": "job_listings_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listings_enterprise_id_enterprises_id_fk": {
          "name": "job_listings_enterprise_id_enterprises_id_fk",
          "tableFrom": "job_listings",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "job_listings_slug_unique": {
          "name": "job_listings_slug_unique",
          "nullsNotDistinct": false,
          "columns": [
            "slug"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jobs": {
      "name": "jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "requirements": {
          "name": "requirements",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location": {
          "name": "location",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "department": {
          "name": "department",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "jobs_department_idx": {
          "name": "jobs_department_idx",
          "columns": [
            {
              "expression": "department",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_title_idx": {
          "name": "jobs_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_user_id_idx": {
          "name": "jobs_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jobs_enterprise_id_enterprises_id_fk": {
          "name": "jobs_enterprise_id_enterprises_id_fk",
          "tableFrom": "jobs",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.offices": {
      "name": "offices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "offices_name_idx": {
          "name": "offices_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "offices_user_id_idx": {
          "name": "offices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "offices_enterprise_id_enterprises_id_fk": {
          "name": "offices_enterprise_id_enterprises_id_fk",
          "tableFrom": "offices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "sku": {
          "name": "sku",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "cost": {
          "name": "cost",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "unit": {
          "name": "unit",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "products_name_idx": {
          "name": "products_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_sku_idx": {
          "name": "products_sku_idx",
          "columns": [
            {
              "expression": "sku",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_user_id_idx": {
          "name": "products_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "products_enterprise_id_enterprises_id_fk": {
          "name": "products_enterprise_id_enterprises_id_fk",
          "tableFrom": "products",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_settings": {
          "name": "user_settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subscribed_to": {
          "name": "subscribed_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price_id": {
          "name": "price_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'user'"
        }
      },
      "indexes": {
        "profiles_email_idx": {
          "name": "profiles_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_enterprise_id_idx": {
          "name": "profiles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_user_id_idx": {
          "name": "profiles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "profiles_username_idx": {
          "name": "profiles_username_idx",
          "columns": [
            {
              "expression": "username",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_enterprise_id_enterprises_id_fk": {
          "name": "profiles_enterprise_id_enterprises_id_fk",
          "tableFrom": "profiles",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quote_items": {
      "name": "quote_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "quote_id": {
          "name": "quote_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "quote_items_quote_id_idx": {
          "name": "quote_items_quote_id_idx",
          "columns": [
            {
              "expression": "quote_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quote_items_product_id_fkey": {
          "name": "quote_items_product_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "quote_items_quote_id_fkey": {
          "name": "quote_items_quote_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "quotes",
          "columnsFrom": [
            "quote_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quotes": {
      "name": "quotes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "quote_number": {
          "name": "quote_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "quotes_client_id_idx": {
          "name": "quotes_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_status_idx": {
          "name": "quotes_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_user_id_idx": {
          "name": "quotes_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quotes_client_id_fkey": {
          "name": "quotes_client_id_fkey",
          "tableFrom": "quotes",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "quotes_enterprise_id_enterprises_id_fk": {
          "name": "quotes_enterprise_id_enterprises_id_fk",
          "tableFrom": "quotes",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "quotes_status_check": {
          "name": "quotes_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.role_permissions": {
      "name": "role_permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "app_permission",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "role_permissions_role_permission_key": {
          "name": "role_permissions_role_permission_key",
          "nullsNotDistinct": false,
          "columns": [
            "role",
            "permission"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.salaries": {
      "name": "salaries",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "payment_frequency": {
          "name": "payment_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'monthly'"
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "salaries_employee_id_idx": {
          "name": "salaries_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "salaries_user_id_idx": {
          "name": "salaries_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "salaries_employee_id_fkey": {
          "name": "salaries_employee_id_fkey",
          "tableFrom": "salaries",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "salaries_enterprise_id_enterprises_id_fk": {
          "name": "salaries_enterprise_id_enterprises_id_fk",
          "tableFrom": "salaries",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.templates": {
      "name": "templates",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "templates_name_idx": {
          "name": "templates_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_type_idx": {
          "name": "templates_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_user_id_idx": {
          "name": "templates_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "templates_enterprise_id_enterprises_id_fk": {
          "name": "templates_enterprise_id_enterprises_id_fk",
          "tableFrom": "templates",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "templates_type_check": {
          "name": "templates_type_check",
          "value": "type = ANY (ARRAY['invoice'::text, 'quote'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.user_roles": {
      "name": "user_roles",
      "schema": "",
      "columns": {
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "user_roles_user_id_idx": {
          "name": "user_roles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_roles_role_idx": {
          "name": "user_roles_role_idx",
          "columns": [
            {
              "expression": "role",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_roles_enterprise_id_idx": {
          "name": "user_roles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_roles_user_id_profiles_id_fk": {
          "name": "user_roles_user_id_profiles_id_fk",
          "tableFrom": "user_roles",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_roles_enterprise_id_enterprises_id_fk": {
          "name": "user_roles_enterprise_id_enterprises_id_fk",
          "tableFrom": "user_roles",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "user_roles_user_id_role_enterprise_id_pk": {
          "name": "user_roles_user_id_role_enterprise_id_pk",
          "columns": [
            "user_id",
            "role",
            "enterprise_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.vendors": {
      "name": "vendors",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "vendors_email_idx": {
          "name": "vendors_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_name_idx": {
          "name": "vendors_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_user_id_idx": {
          "name": "vendors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "vendors_enterprise_id_enterprises_id_fk": {
          "name": "vendors_enterprise_id_enterprises_id_fk",
          "tableFrom": "vendors",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.warehouses": {
      "name": "warehouses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "state": {
          "name": "state",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "capacity": {
          "name": "capacity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "warehouses_code_idx": {
          "name": "warehouses_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_name_idx": {
          "name": "warehouses_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_user_id_idx": {
          "name": "warehouses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "warehouses_enterprise_id_enterprises_id_fk": {
          "name": "warehouses_enterprise_id_enterprises_id_fk",
          "tableFrom": "warehouses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "warehouses_code_key": {
          "name": "warehouses_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.app_permission": {
      "name": "app_permission",
      "schema": "public",
      "values": [
        "profiles.create",
        "profiles.read",
        "profiles.update",
        "profiles.delete",
        "profiles.export",
        "enterprises.create",
        "enterprises.read",
        "enterprises.update",
        "enterprises.delete",
        "enterprises.export",
        "invoices.create",
        "invoices.read",
        "invoices.update",
        "invoices.delete",
        "invoices.export",
        "invoices.duplicate",
        "products.create",
        "products.read",
        "products.update",
        "products.delete",
        "products.export",
        "quotes.create",
        "quotes.read",
        "quotes.update",
        "quotes.delete",
        "quotes.export",
        "quotes.duplicate",
        "employees.create",
        "employees.read",
        "employees.update",
        "employees.delete",
        "employees.export",
        "salaries.create",
        "salaries.read",
        "salaries.update",
        "salaries.delete",
        "salaries.export",
        "documents.create",
        "documents.read",
        "documents.update",
        "documents.delete",
        "documents.export",
        "templates.create",
        "templates.read",
        "templates.update",
        "templates.delete",
        "templates.export",
        "templates.duplicate",
        "employee_requests.create",
        "employee_requests.read",
        "employee_requests.update",
        "employee_requests.delete",
        "employee_requests.export",
        "job_listings.create",
        "job_listings.read",
        "job_listings.update",
        "job_listings.delete",
        "job_listings.export",
        "offices.create",
        "offices.read",
        "offices.update",
        "offices.delete",
        "offices.export",
        "expenses.create",
        "expenses.read",
        "expenses.update",
        "expenses.delete",
        "expenses.export",
        "expenses.duplicate",
        "departments.create",
        "departments.read",
        "departments.update",
        "departments.delete",
        "departments.export",
        "warehouses.create",
        "warehouses.read",
        "warehouses.update",
        "warehouses.delete",
        "warehouses.export",
        "vendors.create",
        "vendors.read",
        "vendors.update",
        "vendors.delete",
        "vendors.export",
        "clients.create",
        "clients.read",
        "clients.update",
        "clients.delete",
        "clients.export",
        "companies.create",
        "companies.read",
        "companies.update",
        "companies.delete",
        "companies.export",
        "branches.create",
        "branches.read",
        "branches.update",
        "branches.delete",
        "branches.export"
      ]
    },
    "public.app_role": {
      "name": "app_role",
      "schema": "public",
      "values": [
        "superadmin",
        "admin",
        "accounting",
        "hr"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="supabase/migrations/meta/0004_snapshot.json">
{
  "id": "bc321133-4e72-4a32-90b5-f57a56d41697",
  "prevId": "59565485-3c25-484d-bb12-69f2f738ccca",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "auth.audit_log_entries": {
      "name": "audit_log_entries",
      "schema": "auth",
      "columns": {
        "instance_id": {
          "name": "instance_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "payload": {
          "name": "payload",
          "type": "json",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "ip_address": {
          "name": "ip_address",
          "type": "varchar(64)",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        }
      },
      "indexes": {
        "audit_logs_instance_id_idx": {
          "name": "audit_logs_instance_id_idx",
          "columns": [
            {
              "expression": "instance_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.branches": {
      "name": "branches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "manager": {
          "name": "manager",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "branches_code_idx": {
          "name": "branches_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_name_idx": {
          "name": "branches_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "branches_user_id_idx": {
          "name": "branches_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "branches_code_key": {
          "name": "branches_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.clients": {
      "name": "clients",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "clients_email_idx": {
          "name": "clients_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_name_idx": {
          "name": "clients_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "clients_user_id_idx": {
          "name": "clients_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "clients_company_fkey": {
          "name": "clients_company_fkey",
          "tableFrom": "clients",
          "tableTo": "companies",
          "columnsFrom": [
            "company"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.companies": {
      "name": "companies",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "industry": {
          "name": "industry",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "companies_email_idx": {
          "name": "companies_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_is_active_idx": {
          "name": "companies_is_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "companies_name_idx": {
          "name": "companies_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.department_locations": {
      "name": "department_locations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "location_type": {
          "name": "location_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "location_id": {
          "name": "location_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "department_locations_department_id_departments_id_fk": {
          "name": "department_locations_department_id_departments_id_fk",
          "tableFrom": "department_locations",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_department_location": {
          "name": "unique_department_location",
          "nullsNotDistinct": false,
          "columns": [
            "department_id",
            "location_type",
            "location_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "location_type_check": {
          "name": "location_type_check",
          "value": "location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.departments": {
      "name": "departments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "departments_name_idx": {
          "name": "departments_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "departments_user_id_idx": {
          "name": "departments_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_path": {
          "name": "file_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "documents_entity_id_idx": {
          "name": "documents_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_entity_type_idx": {
          "name": "documents_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "documents_user_id_idx": {
          "name": "documents_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "documents_entity_type_check": {
          "name": "documents_entity_type_check",
          "value": "entity_type = ANY (ARRAY['company'::text, 'expense'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.employee_requests": {
      "name": "employee_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "attachments": {
          "name": "attachments",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "employee_requests_created_at_idx": {
          "name": "employee_requests_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_employee_id_idx": {
          "name": "employee_requests_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_status_idx": {
          "name": "employee_requests_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_type_idx": {
          "name": "employee_requests_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employee_requests_user_id_idx": {
          "name": "employee_requests_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employee_requests_employee_id_employees_id_fk": {
          "name": "employee_requests_employee_id_employees_id_fk",
          "tableFrom": "employee_requests",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.employees": {
      "name": "employees",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hire_date": {
          "name": "hire_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "termination_date": {
          "name": "termination_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "department_id": {
          "name": "department_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "position": {
          "name": "position",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "employees_department_id_idx": {
          "name": "employees_department_id_idx",
          "columns": [
            {
              "expression": "department_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_email_idx": {
          "name": "employees_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "employees_user_id_idx": {
          "name": "employees_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "employees_department_id_departments_id_fk": {
          "name": "employees_department_id_departments_id_fk",
          "tableFrom": "employees",
          "tableTo": "departments",
          "columnsFrom": [
            "department_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.enterprises": {
      "name": "enterprises",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.expenses": {
      "name": "expenses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "amount": {
          "name": "amount",
          "type": "numeric",
          "primaryKey": false,
          "notNull": false
        },
        "incurred_at": {
          "name": "incurred_at",
          "type": "date",
          "primaryKey": false,
          "notNull": false,
          "default": "CURRENT_DATE"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "expenses_created_by_fkey": {
          "name": "expenses_created_by_fkey",
          "tableFrom": "expenses",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "expenses_enterprise_id_fkey": {
          "name": "expenses_enterprise_id_fkey",
          "tableFrom": "expenses",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.flow_state": {
      "name": "flow_state",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "auth_code": {
          "name": "auth_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code_challenge_method": {
          "name": "code_challenge_method",
          "type": "code_challenge_method",
          "typeSchema": "auth",
          "primaryKey": false,
          "notNull": true
        },
        "code_challenge": {
          "name": "code_challenge",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider_type": {
          "name": "provider_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider_access_token": {
          "name": "provider_access_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider_refresh_token": {
          "name": "provider_refresh_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "authentication_method": {
          "name": "authentication_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "auth_code_issued_at": {
          "name": "auth_code_issued_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "flow_state_created_at_idx": {
          "name": "flow_state_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": false,
              "nulls": "first",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_auth_code": {
          "name": "idx_auth_code",
          "columns": [
            {
              "expression": "auth_code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_user_id_auth_method": {
          "name": "idx_user_id_auth_method",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            },
            {
              "expression": "authentication_method",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.identities": {
      "name": "identities",
      "schema": "auth",
      "columns": {
        "provider_id": {
          "name": "provider_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "identity_data": {
          "name": "identity_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "provider": {
          "name": "provider",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_sign_in_at": {
          "name": "last_sign_in_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "lower((identity_data ->> 'email'::text))",
            "type": "stored"
          }
        },
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        }
      },
      "indexes": {
        "identities_email_idx": {
          "name": "identities_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_pattern_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "identities_user_id_idx": {
          "name": "identities_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "identities_user_id_fkey": {
          "name": "identities_user_id_fkey",
          "tableFrom": "identities",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "identities_provider_id_provider_unique": {
          "name": "identities_provider_id_provider_unique",
          "nullsNotDistinct": false,
          "columns": [
            "provider_id",
            "provider"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.instances": {
      "name": "instances",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "uuid": {
          "name": "uuid",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "raw_base_config": {
          "name": "raw_base_config",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.invoice_items": {
      "name": "invoice_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "invoice_id": {
          "name": "invoice_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "invoice_items_invoice_id_idx": {
          "name": "invoice_items_invoice_id_idx",
          "columns": [
            {
              "expression": "invoice_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoice_items_product_id_fkey": {
          "name": "invoice_items_product_id_fkey",
          "tableFrom": "invoice_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.invoices": {
      "name": "invoices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false,
          "default": "CURRENT_DATE"
        },
        "due_date": {
          "name": "due_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "invoices_client_id_idx": {
          "name": "invoices_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_status_idx": {
          "name": "invoices_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "invoices_invoice_number_idx": {
          "name": "invoices_invoice_number_idx",
          "columns": [
            {
              "expression": "invoice_number",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "invoices_client_id_fkey": {
          "name": "invoices_client_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "invoices_created_by_fkey": {
          "name": "invoices_created_by_fkey",
          "tableFrom": "invoices",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "invoices_enterprise_id_fkey": {
          "name": "invoices_enterprise_id_fkey",
          "tableFrom": "invoices",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "invoices_status_check": {
          "name": "invoices_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'partially_paid'::text, 'overdue'::text, 'void'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.job_listing_jobs": {
      "name": "job_listing_jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "job_listing_id": {
          "name": "job_listing_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "job_id": {
          "name": "job_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "job_listing_jobs_job_id_idx": {
          "name": "job_listing_jobs_job_id_idx",
          "columns": [
            {
              "expression": "job_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listing_jobs_job_listing_id_idx": {
          "name": "job_listing_jobs_job_listing_id_idx",
          "columns": [
            {
              "expression": "job_listing_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "job_listing_jobs_job_id_jobs_id_fk": {
          "name": "job_listing_jobs_job_id_jobs_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "jobs",
          "columnsFrom": [
            "job_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "job_listing_jobs_job_listing_id_job_listings_id_fk": {
          "name": "job_listing_jobs_job_listing_id_job_listings_id_fk",
          "tableFrom": "job_listing_jobs",
          "tableTo": "job_listings",
          "columnsFrom": [
            "job_listing_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.job_listings": {
      "name": "job_listings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "job_listings_slug_idx": {
          "name": "job_listings_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_title_idx": {
          "name": "job_listings_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "job_listings_user_id_idx": {
          "name": "job_listings_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "job_listings_slug_unique": {
          "name": "job_listings_slug_unique",
          "nullsNotDistinct": false,
          "columns": [
            "slug"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jobs": {
      "name": "jobs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "requirements": {
          "name": "requirements",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location": {
          "name": "location",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "department": {
          "name": "department",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "salary": {
          "name": "salary",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "jobs_department_idx": {
          "name": "jobs_department_idx",
          "columns": [
            {
              "expression": "department",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_title_idx": {
          "name": "jobs_title_idx",
          "columns": [
            {
              "expression": "title",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "jobs_user_id_idx": {
          "name": "jobs_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.memberships": {
      "name": "memberships",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "role_id": {
          "name": "role_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "memberships_enterprise_id_fkey": {
          "name": "memberships_enterprise_id_fkey",
          "tableFrom": "memberships",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "memberships_profile_id_fkey": {
          "name": "memberships_profile_id_fkey",
          "tableFrom": "memberships",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "memberships_role_id_fkey": {
          "name": "memberships_role_id_fkey",
          "tableFrom": "memberships",
          "tableTo": "roles",
          "columnsFrom": [
            "role_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "restrict",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "memberships_profile_id_enterprise_id_key": {
          "name": "memberships_profile_id_enterprise_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "profile_id",
            "enterprise_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.mfa_amr_claims": {
      "name": "mfa_amr_claims",
      "schema": "auth",
      "columns": {
        "session_id": {
          "name": "session_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "authentication_method": {
          "name": "authentication_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "mfa_amr_claims_session_id_fkey": {
          "name": "mfa_amr_claims_session_id_fkey",
          "tableFrom": "mfa_amr_claims",
          "tableTo": "sessions",
          "schemaTo": "auth",
          "columnsFrom": [
            "session_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "mfa_amr_claims_session_id_authentication_method_pkey": {
          "name": "mfa_amr_claims_session_id_authentication_method_pkey",
          "nullsNotDistinct": false,
          "columns": [
            "session_id",
            "authentication_method"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.mfa_challenges": {
      "name": "mfa_challenges",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "factor_id": {
          "name": "factor_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "verified_at": {
          "name": "verified_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "ip_address": {
          "name": "ip_address",
          "type": "inet",
          "primaryKey": false,
          "notNull": true
        },
        "otp_code": {
          "name": "otp_code",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "web_authn_session_data": {
          "name": "web_authn_session_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "mfa_challenge_created_at_idx": {
          "name": "mfa_challenge_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": false,
              "nulls": "first",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mfa_challenges_auth_factor_id_fkey": {
          "name": "mfa_challenges_auth_factor_id_fkey",
          "tableFrom": "mfa_challenges",
          "tableTo": "mfa_factors",
          "schemaTo": "auth",
          "columnsFrom": [
            "factor_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.mfa_factors": {
      "name": "mfa_factors",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "friendly_name": {
          "name": "friendly_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "factor_type": {
          "name": "factor_type",
          "type": "factor_type",
          "typeSchema": "auth",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "factor_status",
          "typeSchema": "auth",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "secret": {
          "name": "secret",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_challenged_at": {
          "name": "last_challenged_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "web_authn_credential": {
          "name": "web_authn_credential",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "web_authn_aaguid": {
          "name": "web_authn_aaguid",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "factor_id_created_at_idx": {
          "name": "factor_id_created_at_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mfa_factors_user_friendly_name_unique": {
          "name": "mfa_factors_user_friendly_name_unique",
          "columns": [
            {
              "expression": "friendly_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            },
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "(TRIM(BOTH FROM friendly_name) <> ''::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mfa_factors_user_id_idx": {
          "name": "mfa_factors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "unique_phone_factor_per_user": {
          "name": "unique_phone_factor_per_user",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            },
            {
              "expression": "phone",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mfa_factors_user_id_fkey": {
          "name": "mfa_factors_user_id_fkey",
          "tableFrom": "mfa_factors",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "mfa_factors_last_challenged_at_key": {
          "name": "mfa_factors_last_challenged_at_key",
          "nullsNotDistinct": false,
          "columns": [
            "last_challenged_at"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.offices": {
      "name": "offices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "offices_name_idx": {
          "name": "offices_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "offices_user_id_idx": {
          "name": "offices_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.one_time_tokens": {
      "name": "one_time_tokens",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "token_type": {
          "name": "token_type",
          "type": "one_time_token_type",
          "typeSchema": "auth",
          "primaryKey": false,
          "notNull": true
        },
        "token_hash": {
          "name": "token_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "relates_to": {
          "name": "relates_to",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "one_time_tokens_relates_to_hash_idx": {
          "name": "one_time_tokens_relates_to_hash_idx",
          "columns": [
            {
              "expression": "relates_to",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "hash",
          "with": {}
        },
        "one_time_tokens_token_hash_hash_idx": {
          "name": "one_time_tokens_token_hash_hash_idx",
          "columns": [
            {
              "expression": "token_hash",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "hash",
          "with": {}
        },
        "one_time_tokens_user_id_token_type_key": {
          "name": "one_time_tokens_user_id_token_type_key",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            },
            {
              "expression": "token_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "one_time_tokens_user_id_fkey": {
          "name": "one_time_tokens_user_id_fkey",
          "tableFrom": "one_time_tokens",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "one_time_tokens_token_hash_check": {
          "name": "one_time_tokens_token_hash_check",
          "value": "char_length(token_hash) > 0"
        }
      },
      "isRLSEnabled": false
    },
    "public.permissions": {
      "name": "permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "role_id": {
          "name": "role_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "permissions_role_id_idx": {
          "name": "permissions_role_id_idx",
          "columns": [
            {
              "expression": "role_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "permissions_role_id_fkey": {
          "name": "permissions_role_id_fkey",
          "tableFrom": "permissions",
          "tableTo": "roles",
          "columnsFrom": [
            "role_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "sku": {
          "name": "sku",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "cost": {
          "name": "cost",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "unit": {
          "name": "unit",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "products_name_idx": {
          "name": "products_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_sku_idx": {
          "name": "products_sku_idx",
          "columns": [
            {
              "expression": "sku",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "products_user_id_idx": {
          "name": "products_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "user_settings": {
          "name": "user_settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "profiles_id_fkey": {
          "name": "profiles_id_fkey",
          "tableFrom": "profiles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "profiles_email_key": {
          "name": "profiles_email_key",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quote_items": {
      "name": "quote_items",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'1'"
        },
        "unit_price": {
          "name": "unit_price",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "(quantity * unit_price)",
            "type": "stored"
          }
        },
        "quote_id": {
          "name": "quote_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "product_id": {
          "name": "product_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "quote_items_quote_id_idx": {
          "name": "quote_items_quote_id_idx",
          "columns": [
            {
              "expression": "quote_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quote_items_product_id_fkey": {
          "name": "quote_items_product_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "quote_items_quote_id_fkey": {
          "name": "quote_items_quote_id_fkey",
          "tableFrom": "quote_items",
          "tableTo": "quotes",
          "columnsFrom": [
            "quote_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.quotes": {
      "name": "quotes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "quote_number": {
          "name": "quote_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "issue_date": {
          "name": "issue_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'draft'"
        },
        "subtotal": {
          "name": "subtotal",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "tax_rate": {
          "name": "tax_rate",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "client_id": {
          "name": "client_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tax_amount": {
          "name": "tax_amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN (0)::numeric\n    ELSE round((subtotal * tax_rate), 2)\nEND",
            "type": "stored"
          }
        },
        "total": {
          "name": "total",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "\nCASE\n    WHEN (tax_rate IS NULL) THEN subtotal\n    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)\nEND",
            "type": "stored"
          }
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "quotes_client_id_idx": {
          "name": "quotes_client_id_idx",
          "columns": [
            {
              "expression": "client_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_status_idx": {
          "name": "quotes_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "quotes_user_id_idx": {
          "name": "quotes_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "quotes_client_id_fkey": {
          "name": "quotes_client_id_fkey",
          "tableFrom": "quotes",
          "tableTo": "clients",
          "columnsFrom": [
            "client_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "quotes_status_check": {
          "name": "quotes_status_check",
          "value": "status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "auth.refresh_tokens": {
      "name": "refresh_tokens",
      "schema": "auth",
      "columns": {
        "instance_id": {
          "name": "instance_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "id": {
          "name": "id",
          "type": "bigserial",
          "primaryKey": true,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "revoked": {
          "name": "revoked",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "parent": {
          "name": "parent",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "session_id": {
          "name": "session_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "refresh_tokens_instance_id_idx": {
          "name": "refresh_tokens_instance_id_idx",
          "columns": [
            {
              "expression": "instance_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "refresh_tokens_instance_id_user_id_idx": {
          "name": "refresh_tokens_instance_id_user_id_idx",
          "columns": [
            {
              "expression": "instance_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            },
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "refresh_tokens_parent_idx": {
          "name": "refresh_tokens_parent_idx",
          "columns": [
            {
              "expression": "parent",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "refresh_tokens_session_id_revoked_idx": {
          "name": "refresh_tokens_session_id_revoked_idx",
          "columns": [
            {
              "expression": "session_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            },
            {
              "expression": "revoked",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "refresh_tokens_updated_at_idx": {
          "name": "refresh_tokens_updated_at_idx",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": false,
              "nulls": "first",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "refresh_tokens_session_id_fkey": {
          "name": "refresh_tokens_session_id_fkey",
          "tableFrom": "refresh_tokens",
          "tableTo": "sessions",
          "schemaTo": "auth",
          "columnsFrom": [
            "session_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "refresh_tokens_token_unique": {
          "name": "refresh_tokens_token_unique",
          "nullsNotDistinct": false,
          "columns": [
            "token"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.roles": {
      "name": "roles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_system": {
          "name": "is_system",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "idx_roles_enterprise_id": {
          "name": "idx_roles_enterprise_id",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "roles_enterprise_id_enterprises_id_fk": {
          "name": "roles_enterprise_id_enterprises_id_fk",
          "tableFrom": "roles",
          "tableTo": "enterprises",
          "columnsFrom": [
            "enterprise_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "roles_name_key": {
          "name": "roles_name_key",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "roles_enterprise_id_check": {
          "name": "roles_enterprise_id_check",
          "value": "(is_system = true AND enterprise_id IS NULL) OR (is_system = false AND enterprise_id IS NOT NULL)"
        }
      },
      "isRLSEnabled": false
    },
    "public.salaries": {
      "name": "salaries",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "employee_id": {
          "name": "employee_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "payment_frequency": {
          "name": "payment_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'monthly'"
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "salaries_employee_id_idx": {
          "name": "salaries_employee_id_idx",
          "columns": [
            {
              "expression": "employee_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "salaries_user_id_idx": {
          "name": "salaries_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "salaries_employee_id_fkey": {
          "name": "salaries_employee_id_fkey",
          "tableFrom": "salaries",
          "tableTo": "employees",
          "columnsFrom": [
            "employee_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.saml_providers": {
      "name": "saml_providers",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "sso_provider_id": {
          "name": "sso_provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "metadata_xml": {
          "name": "metadata_xml",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "metadata_url": {
          "name": "metadata_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "attribute_mapping": {
          "name": "attribute_mapping",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "name_id_format": {
          "name": "name_id_format",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "saml_providers_sso_provider_id_idx": {
          "name": "saml_providers_sso_provider_id_idx",
          "columns": [
            {
              "expression": "sso_provider_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "saml_providers_sso_provider_id_fkey": {
          "name": "saml_providers_sso_provider_id_fkey",
          "tableFrom": "saml_providers",
          "tableTo": "sso_providers",
          "schemaTo": "auth",
          "columnsFrom": [
            "sso_provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "saml_providers_entity_id_key": {
          "name": "saml_providers_entity_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "entity_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "entity_id not empty": {
          "name": "entity_id not empty",
          "value": "char_length(entity_id) > 0"
        },
        "metadata_url not empty": {
          "name": "metadata_url not empty",
          "value": "(metadata_url = NULL::text) OR (char_length(metadata_url) > 0)"
        },
        "metadata_xml not empty": {
          "name": "metadata_xml not empty",
          "value": "char_length(metadata_xml) > 0"
        }
      },
      "isRLSEnabled": false
    },
    "auth.saml_relay_states": {
      "name": "saml_relay_states",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "sso_provider_id": {
          "name": "sso_provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "for_email": {
          "name": "for_email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "redirect_to": {
          "name": "redirect_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "flow_state_id": {
          "name": "flow_state_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "saml_relay_states_created_at_idx": {
          "name": "saml_relay_states_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": false,
              "nulls": "first",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "saml_relay_states_for_email_idx": {
          "name": "saml_relay_states_for_email_idx",
          "columns": [
            {
              "expression": "for_email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "saml_relay_states_sso_provider_id_idx": {
          "name": "saml_relay_states_sso_provider_id_idx",
          "columns": [
            {
              "expression": "sso_provider_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "saml_relay_states_flow_state_id_fkey": {
          "name": "saml_relay_states_flow_state_id_fkey",
          "tableFrom": "saml_relay_states",
          "tableTo": "flow_state",
          "schemaTo": "auth",
          "columnsFrom": [
            "flow_state_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "saml_relay_states_sso_provider_id_fkey": {
          "name": "saml_relay_states_sso_provider_id_fkey",
          "tableFrom": "saml_relay_states",
          "tableTo": "sso_providers",
          "schemaTo": "auth",
          "columnsFrom": [
            "sso_provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "request_id not empty": {
          "name": "request_id not empty",
          "value": "char_length(request_id) > 0"
        }
      },
      "isRLSEnabled": false
    },
    "auth.schema_migrations": {
      "name": "schema_migrations",
      "schema": "auth",
      "columns": {
        "version": {
          "name": "version",
          "type": "varchar(255)",
          "primaryKey": true,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.sessions": {
      "name": "sessions",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "factor_id": {
          "name": "factor_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "aal": {
          "name": "aal",
          "type": "aal_level",
          "typeSchema": "auth",
          "primaryKey": false,
          "notNull": false
        },
        "not_after": {
          "name": "not_after",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "refreshed_at": {
          "name": "refreshed_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "ip": {
          "name": "ip",
          "type": "inet",
          "primaryKey": false,
          "notNull": false
        },
        "tag": {
          "name": "tag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "sessions_not_after_idx": {
          "name": "sessions_not_after_idx",
          "columns": [
            {
              "expression": "not_after",
              "isExpression": false,
              "asc": false,
              "nulls": "first",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "sessions_user_id_idx": {
          "name": "sessions_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_id_created_at_idx": {
          "name": "user_id_created_at_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "sessions_user_id_fkey": {
          "name": "sessions_user_id_fkey",
          "tableFrom": "sessions",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.sso_domains": {
      "name": "sso_domains",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "sso_provider_id": {
          "name": "sso_provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "domain": {
          "name": "domain",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "sso_domains_domain_idx": {
          "name": "sso_domains_domain_idx",
          "columns": [
            {
              "expression": "lower(domain)",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "sso_domains_sso_provider_id_idx": {
          "name": "sso_domains_sso_provider_id_idx",
          "columns": [
            {
              "expression": "sso_provider_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "sso_domains_sso_provider_id_fkey": {
          "name": "sso_domains_sso_provider_id_fkey",
          "tableFrom": "sso_domains",
          "tableTo": "sso_providers",
          "schemaTo": "auth",
          "columnsFrom": [
            "sso_provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "domain not empty": {
          "name": "domain not empty",
          "value": "char_length(domain) > 0"
        }
      },
      "isRLSEnabled": false
    },
    "auth.sso_providers": {
      "name": "sso_providers",
      "schema": "auth",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "resource_id": {
          "name": "resource_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "sso_providers_resource_id_idx": {
          "name": "sso_providers_resource_id_idx",
          "columns": [
            {
              "expression": "lower(resource_id)",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "resource_id not empty": {
          "name": "resource_id not empty",
          "value": "(resource_id = NULL::text) OR (char_length(resource_id) > 0)"
        }
      },
      "isRLSEnabled": false
    },
    "public.templates": {
      "name": "templates",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "templates_name_idx": {
          "name": "templates_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_type_idx": {
          "name": "templates_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "templates_user_id_idx": {
          "name": "templates_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "templates_type_check": {
          "name": "templates_type_check",
          "value": "type = ANY (ARRAY['invoice'::text, 'quote'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.user_enterprise_roles": {
      "name": "user_enterprise_roles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role_id": {
          "name": "role_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_enterprise_roles_user_id_fkey": {
          "name": "user_enterprise_roles_user_id_fkey",
          "tableFrom": "user_enterprise_roles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_enterprise_roles_user_id_enterprise_id_key": {
          "name": "user_enterprise_roles_user_id_enterprise_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "user_id",
            "enterprise_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_roles": {
      "name": "user_roles",
      "schema": "",
      "columns": {
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role_id": {
          "name": "role_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "user_roles_enterprise_id_idx": {
          "name": "user_roles_enterprise_id_idx",
          "columns": [
            {
              "expression": "enterprise_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_roles_role_id_idx": {
          "name": "user_roles_role_id_idx",
          "columns": [
            {
              "expression": "role_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_roles_user_id_idx": {
          "name": "user_roles_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_roles_user_id_fkey": {
          "name": "user_roles_user_id_fkey",
          "tableFrom": "user_roles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "user_roles_pkey": {
          "name": "user_roles_pkey",
          "columns": [
            "user_id",
            "role_id",
            "enterprise_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "auth.users": {
      "name": "users",
      "schema": "auth",
      "columns": {
        "instance_id": {
          "name": "instance_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "aud": {
          "name": "aud",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "role": {
          "name": "role",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "encrypted_password": {
          "name": "encrypted_password",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "email_confirmed_at": {
          "name": "email_confirmed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "invited_at": {
          "name": "invited_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "confirmation_token": {
          "name": "confirmation_token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "confirmation_sent_at": {
          "name": "confirmation_sent_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "recovery_token": {
          "name": "recovery_token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "recovery_sent_at": {
          "name": "recovery_sent_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "email_change_token_new": {
          "name": "email_change_token_new",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "email_change": {
          "name": "email_change",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "email_change_sent_at": {
          "name": "email_change_sent_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "last_sign_in_at": {
          "name": "last_sign_in_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "raw_app_meta_data": {
          "name": "raw_app_meta_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "raw_user_meta_data": {
          "name": "raw_user_meta_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "is_super_admin": {
          "name": "is_super_admin",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "phone_confirmed_at": {
          "name": "phone_confirmed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "phone_change": {
          "name": "phone_change",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "phone_change_token": {
          "name": "phone_change_token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "phone_change_sent_at": {
          "name": "phone_change_sent_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "confirmed_at": {
          "name": "confirmed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "as": "LEAST(email_confirmed_at, phone_confirmed_at)",
            "type": "stored"
          }
        },
        "email_change_token_current": {
          "name": "email_change_token_current",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "email_change_confirm_status": {
          "name": "email_change_confirm_status",
          "type": "smallint",
          "primaryKey": false,
          "notNull": false,
          "default": 0
        },
        "banned_until": {
          "name": "banned_until",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "reauthentication_token": {
          "name": "reauthentication_token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "reauthentication_sent_at": {
          "name": "reauthentication_sent_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "is_sso_user": {
          "name": "is_sso_user",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "is_anonymous": {
          "name": "is_anonymous",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        }
      },
      "indexes": {
        "confirmation_token_idx": {
          "name": "confirmation_token_idx",
          "columns": [
            {
              "expression": "confirmation_token",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "((confirmation_token)::text !~ '^[0-9 ]*$'::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "email_change_token_current_idx": {
          "name": "email_change_token_current_idx",
          "columns": [
            {
              "expression": "email_change_token_current",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "((email_change_token_current)::text !~ '^[0-9 ]*$'::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "email_change_token_new_idx": {
          "name": "email_change_token_new_idx",
          "columns": [
            {
              "expression": "email_change_token_new",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "((email_change_token_new)::text !~ '^[0-9 ]*$'::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "reauthentication_token_idx": {
          "name": "reauthentication_token_idx",
          "columns": [
            {
              "expression": "reauthentication_token",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "((reauthentication_token)::text !~ '^[0-9 ]*$'::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "recovery_token_idx": {
          "name": "recovery_token_idx",
          "columns": [
            {
              "expression": "recovery_token",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "((recovery_token)::text !~ '^[0-9 ]*$'::text)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_email_partial_key": {
          "name": "users_email_partial_key",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "(is_sso_user = false)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_instance_id_email_idx": {
          "name": "users_instance_id_email_idx",
          "columns": [
            {
              "expression": "instance_id",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            },
            {
              "expression": "lower((email)::text)",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_instance_id_idx": {
          "name": "users_instance_id_idx",
          "columns": [
            {
              "expression": "instance_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_is_anonymous_idx": {
          "name": "users_is_anonymous_idx",
          "columns": [
            {
              "expression": "is_anonymous",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_phone_key": {
          "name": "users_phone_key",
          "nullsNotDistinct": false,
          "columns": [
            "phone"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "users_email_change_confirm_status_check": {
          "name": "users_email_change_confirm_status_check",
          "value": "(email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)"
        }
      },
      "isRLSEnabled": false
    },
    "public.vendors": {
      "name": "vendors",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "phone": {
          "name": "phone",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "company": {
          "name": "company",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "vendors_email_idx": {
          "name": "vendors_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_name_idx": {
          "name": "vendors_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "vendors_user_id_idx": {
          "name": "vendors_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.warehouses": {
      "name": "warehouses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "code": {
          "name": "code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "short_address": {
          "name": "short_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "additional_number": {
          "name": "additional_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "building_number": {
          "name": "building_number",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "street_name": {
          "name": "street_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "city": {
          "name": "city",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "zip_code": {
          "name": "zip_code",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "capacity": {
          "name": "capacity",
          "type": "numeric(10, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "warehouses_code_idx": {
          "name": "warehouses_code_idx",
          "columns": [
            {
              "expression": "code",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_name_idx": {
          "name": "warehouses_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "warehouses_user_id_idx": {
          "name": "warehouses_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "warehouses_code_key": {
          "name": "warehouses_code_key",
          "nullsNotDistinct": false,
          "columns": [
            "code"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "auth.aal_level": {
      "name": "aal_level",
      "schema": "auth",
      "values": [
        "aal1",
        "aal2",
        "aal3"
      ]
    },
    "public.app_permission": {
      "name": "app_permission",
      "schema": "public",
      "values": [
        "users.create",
        "users.read",
        "users.update",
        "users.delete",
        "users.export",
        "users.invite",
        "users.duplicate",
        "roles.create",
        "roles.read",
        "roles.update",
        "roles.delete",
        "roles.export",
        "roles.assign",
        "roles.duplicate",
        "companies.create",
        "companies.read",
        "companies.update",
        "companies.delete",
        "companies.export",
        "companies.duplicate",
        "clients.create",
        "clients.read",
        "clients.update",
        "clients.delete",
        "clients.export",
        "clients.duplicate",
        "invoices.create",
        "invoices.read",
        "invoices.update",
        "invoices.delete",
        "invoices.export",
        "invoices.duplicate",
        "expenses.create",
        "expenses.read",
        "expenses.update",
        "expenses.delete",
        "expenses.export",
        "expenses.duplicate",
        "quotes.read",
        "quotes.create",
        "quotes.delete",
        "quotes.update",
        "quotes.duplicate",
        "quotes.export",
        "branches.read",
        "branches.create",
        "branches.delete",
        "branches.update",
        "branches.duplicate",
        "branches.export",
        "vendors.read",
        "vendors.create",
        "vendors.delete",
        "vendors.update",
        "vendors.duplicate",
        "vendors.export",
        "offices.read",
        "offices.create",
        "offices.delete",
        "offices.update",
        "offices.duplicate",
        "offices.export",
        "warehouses.read",
        "warehouses.create",
        "warehouses.delete",
        "warehouses.update",
        "warehouses.duplicate",
        "warehouses.export",
        "purchases.read",
        "purchases.create",
        "purchases.delete",
        "purchases.update",
        "purchases.duplicate",
        "purchases.export",
        "products.read",
        "products.create",
        "products.delete",
        "products.update",
        "products.duplicate",
        "products.export",
        "employees.read",
        "employees.create",
        "employees.delete",
        "employees.update",
        "employees.duplicate",
        "employees.export",
        "departments.read",
        "departments.create",
        "departments.delete",
        "departments.update",
        "departments.duplicate",
        "departments.export",
        "salaries.read",
        "salaries.create",
        "salaries.delete",
        "salaries.update",
        "salaries.duplicate",
        "salaries.export",
        "job_listings.read",
        "job_listings.create",
        "job_listings.delete",
        "job_listings.update",
        "job_listings.duplicate",
        "job_listings.export",
        "employee_requests.read",
        "employee_requests.create",
        "employee_requests.delete",
        "employee_requests.update",
        "employee_requests.duplicate",
        "employee_requests.export",
        "jobs.read",
        "jobs.create",
        "jobs.delete",
        "jobs.update",
        "jobs.duplicate",
        "jobs.export",
        "applicants.read",
        "applicants.create",
        "applicants.delete",
        "applicants.update",
        "applicants.duplicate",
        "applicants.export"
      ]
    },
    "auth.code_challenge_method": {
      "name": "code_challenge_method",
      "schema": "auth",
      "values": [
        "s256",
        "plain"
      ]
    },
    "auth.factor_status": {
      "name": "factor_status",
      "schema": "auth",
      "values": [
        "unverified",
        "verified"
      ]
    },
    "auth.factor_type": {
      "name": "factor_type",
      "schema": "auth",
      "values": [
        "totp",
        "webauthn",
        "phone"
      ]
    },
    "auth.one_time_token_type": {
      "name": "one_time_token_type",
      "schema": "auth",
      "values": [
        "confirmation_token",
        "reauthentication_token",
        "recovery_token",
        "email_change_token_new",
        "email_change_token_current",
        "phone_change_token"
      ]
    }
  },
  "schemas": {
    "auth": "auth"
  },
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.user_permissions_view": {
      "columns": {
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "enterprise_id": {
          "name": "enterprise_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "permission": {
          "name": "permission",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "SELECT m.profile_id, m.enterprise_id, p.permission FROM memberships m JOIN permissions p ON m.role_id = p.role_id",
      "name": "user_permissions_view",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    }
  },
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="supabase/migrations/0000_careful_ronan.sql">
-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."app_permission" AS ENUM('profiles.create', 'profiles.read', 'profiles.update', 'profiles.delete', 'profiles.export', 'enterprises.create', 'enterprises.read', 'enterprises.update', 'enterprises.delete', 'enterprises.export', 'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate', 'products.create', 'products.read', 'products.update', 'products.delete', 'products.export', 'quotes.create', 'quotes.read', 'quotes.update', 'quotes.delete', 'quotes.export', 'quotes.duplicate', 'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export', 'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export', 'documents.create', 'documents.read', 'documents.update', 'documents.delete', 'documents.export', 'templates.create', 'templates.read', 'templates.update', 'templates.delete', 'templates.export', 'templates.duplicate', 'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export', 'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export', 'offices.create', 'offices.read', 'offices.update', 'offices.delete', 'offices.export', 'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate', 'departments.create', 'departments.read', 'departments.update', 'departments.delete', 'departments.export', 'warehouses.create', 'warehouses.read', 'warehouses.update', 'warehouses.delete', 'warehouses.export', 'vendors.create', 'vendors.read', 'vendors.update', 'vendors.delete', 'vendors.export', 'clients.create', 'clients.read', 'clients.update', 'clients.delete', 'clients.export', 'companies.create', 'companies.read', 'companies.update', 'companies.delete', 'companies.export', 'branches.create', 'branches.read', 'branches.update', 'branches.delete', 'branches.export');--> statement-breakpoint
CREATE TYPE "public"."app_role" AS ENUM('superadmin', 'admin', 'accounting', 'hr');--> statement-breakpoint
CREATE TABLE "templates" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"type" text NOT NULL,
	"content" jsonb NOT NULL,
	"is_default" boolean DEFAULT false NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "templates_type_check" CHECK (type = ANY (ARRAY['invoice'::text, 'quote'::text]))
);
--> statement-breakpoint
ALTER TABLE "templates" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "documents" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"updated_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"url" text NOT NULL,
	"file_path" text NOT NULL,
	"entity_id" uuid NOT NULL,
	"entity_type" text NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "documents_entity_type_check" CHECK (entity_type = ANY (ARRAY['company'::text, 'expense'::text]))
);
--> statement-breakpoint
ALTER TABLE "documents" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "products" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"name" text NOT NULL,
	"description" text,
	"price" numeric(10, 2) NOT NULL,
	"sku" text,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	"cost" numeric(10, 2),
	"quantity" numeric(10, 2) DEFAULT '0' NOT NULL,
	"unit" text,
	"is_active" boolean DEFAULT true NOT NULL
);
--> statement-breakpoint
ALTER TABLE "products" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_roles" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" uuid,
	"role" "app_role" NOT NULL,
	"enterprise_id" uuid,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "user_roles_user_id_role_enterprise_id_key" UNIQUE("user_id","role","enterprise_id")
);
--> statement-breakpoint
CREATE TABLE "role_permissions" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"role" "app_role" NOT NULL,
	"permission" "app_permission" NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "role_permissions_role_permission_key" UNIQUE("role","permission")
);
--> statement-breakpoint
CREATE TABLE "employee_requests" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"employee_id" uuid NOT NULL,
	"type" text NOT NULL,
	"status" text DEFAULT 'pending' NOT NULL,
	"title" text NOT NULL,
	"description" text,
	"start_date" date,
	"end_date" date,
	"amount" numeric(10, 2),
	"attachments" jsonb DEFAULT '[]'::jsonb,
	"notes" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "employee_requests" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "job_listing_jobs" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"job_listing_id" uuid NOT NULL,
	"job_id" uuid NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "job_listing_jobs" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "invoices" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"invoice_number" text NOT NULL,
	"issue_date" date NOT NULL,
	"due_date" date NOT NULL,
	"status" text NOT NULL,
	"subtotal" numeric(10, 2) DEFAULT '0' NOT NULL,
	"tax_rate" numeric(5, 2) DEFAULT '0',
	"notes" text,
	"client_id" uuid NOT NULL,
	"user_id" uuid NOT NULL,
	"tax_amount" numeric(10, 2) GENERATED ALWAYS AS (
CASE
    WHEN (tax_rate IS NULL) THEN (0)::numeric
    ELSE round((subtotal * tax_rate), 2)
END) STORED,
	"total" numeric(10, 2) GENERATED ALWAYS AS (
CASE
    WHEN (tax_rate IS NULL) THEN subtotal
    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
END) STORED,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "invoices_status_check" CHECK (status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text]))
);
--> statement-breakpoint
ALTER TABLE "invoices" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "invoice_items" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"description" text NOT NULL,
	"quantity" numeric(10, 2) DEFAULT '1' NOT NULL,
	"unit_price" numeric(10, 2) NOT NULL,
	"amount" numeric(10, 2) GENERATED ALWAYS AS ((quantity * unit_price)) STORED,
	"invoice_id" uuid NOT NULL,
	"product_id" uuid
);
--> statement-breakpoint
ALTER TABLE "invoice_items" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "job_listings" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"title" varchar(255) NOT NULL,
	"description" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"slug" varchar(255) NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	"is_public" boolean DEFAULT false NOT NULL,
	CONSTRAINT "job_listings_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
ALTER TABLE "job_listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "profiles" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"full_name" text,
	"email" text NOT NULL,
	"user_settings" jsonb,
	"enterprise_id" uuid,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"stripe_customer_id" text,
	"avatar_url" text,
	"username" text,
	"subscribed_to" text,
	"price_id" text,
	"first_name" text NOT NULL,
	"last_name" text NOT NULL,
	"phone" text,
	"address" text,
	"city" text,
	"state" text,
	"zip_code" text,
	"country" text,
	"user_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "profiles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "offices" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"address" text NOT NULL,
	"city" text NOT NULL,
	"state" text NOT NULL,
	"zip_code" text NOT NULL,
	"phone" text,
	"email" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "offices" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "department_locations" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"department_id" uuid NOT NULL,
	"location_type" text NOT NULL,
	"location_id" uuid NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "unique_department_location" UNIQUE("department_id","location_type","location_id"),
	CONSTRAINT "location_type_check" CHECK (location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text]))
);
--> statement-breakpoint
ALTER TABLE "department_locations" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "employees" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"first_name" text NOT NULL,
	"last_name" text NOT NULL,
	"email" text NOT NULL,
	"phone" text,
	"hire_date" date,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	"address" text,
	"city" text,
	"state" text,
	"zip_code" text,
	"country" text,
	"termination_date" date,
	"is_active" boolean DEFAULT true NOT NULL,
	"department_id" uuid
);
--> statement-breakpoint
ALTER TABLE "employees" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "expenses" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"expense_number" text NOT NULL,
	"issue_date" date NOT NULL,
	"due_date" date NOT NULL,
	"status" text DEFAULT 'pending' NOT NULL,
	"amount" numeric(10, 2) NOT NULL,
	"category" text NOT NULL,
	"notes" text,
	"client_id" uuid,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "expenses_status_check" CHECK (status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text]))
);
--> statement-breakpoint
ALTER TABLE "expenses" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "quotes" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"quote_number" text NOT NULL,
	"issue_date" date NOT NULL,
	"expiry_date" date NOT NULL,
	"status" text DEFAULT 'draft' NOT NULL,
	"subtotal" numeric(10, 2) DEFAULT '0' NOT NULL,
	"tax_rate" numeric(5, 2) DEFAULT '0',
	"notes" text,
	"client_id" uuid NOT NULL,
	"user_id" uuid NOT NULL,
	"tax_amount" numeric(10, 2) GENERATED ALWAYS AS (
CASE
    WHEN (tax_rate IS NULL) THEN (0)::numeric
    ELSE round((subtotal * tax_rate), 2)
END) STORED,
	"total" numeric(10, 2) GENERATED ALWAYS AS (
CASE
    WHEN (tax_rate IS NULL) THEN subtotal
    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
END) STORED,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "quotes_status_check" CHECK (status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text]))
);
--> statement-breakpoint
ALTER TABLE "quotes" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "salaries" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"notes" text,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	"employee_id" uuid NOT NULL,
	"amount" numeric(10, 2) NOT NULL,
	"currency" text DEFAULT 'USD' NOT NULL,
	"payment_frequency" text DEFAULT 'monthly' NOT NULL,
	"start_date" date NOT NULL,
	"end_date" date
);
--> statement-breakpoint
ALTER TABLE "salaries" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "vendors" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"email" text NOT NULL,
	"phone" text NOT NULL,
	"company" text NOT NULL,
	"address" text NOT NULL,
	"city" text NOT NULL,
	"state" text NOT NULL,
	"zip_code" text NOT NULL,
	"notes" text,
	"user_id" uuid NOT NULL,
	"updated_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "vendors" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "departments" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"description" text,
	"user_id" uuid NOT NULL,
	"updated_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"is_active" boolean DEFAULT true NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "departments" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "warehouses" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"code" text NOT NULL,
	"address" text NOT NULL,
	"city" text NOT NULL,
	"state" text NOT NULL,
	"zip_code" text NOT NULL,
	"capacity" numeric(10, 2),
	"is_active" boolean DEFAULT true NOT NULL,
	"notes" text,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "warehouses_code_key" UNIQUE("code")
);
--> statement-breakpoint
ALTER TABLE "warehouses" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "jobs" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"title" varchar(255) NOT NULL,
	"description" text,
	"requirements" text,
	"location" varchar(255),
	"department" varchar(255),
	"type" varchar(50) NOT NULL,
	"salary" numeric(10, 2),
	"is_active" boolean DEFAULT true NOT NULL,
	"start_date" date,
	"end_date" date,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "jobs" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "branches" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"code" text,
	"address" text NOT NULL,
	"city" text NOT NULL,
	"state" text NOT NULL,
	"zip_code" text NOT NULL,
	"phone" text,
	"email" text,
	"manager" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"notes" text,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL,
	CONSTRAINT "branches_code_key" UNIQUE("code")
);
--> statement-breakpoint
ALTER TABLE "branches" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "companies" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"email" text NOT NULL,
	"phone" text,
	"website" text,
	"address" text,
	"city" text,
	"state" text,
	"zip_code" text,
	"industry" text,
	"size" text,
	"notes" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"user_id" uuid NOT NULL,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "companies" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "enterprises" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"email" text NOT NULL,
	"phone" text,
	"address" text,
	"city" text,
	"state" text,
	"zip_code" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"website" text,
	"industry" text,
	"size" text,
	"notes" text
);
--> statement-breakpoint
ALTER TABLE "enterprises" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "clients" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"name" text NOT NULL,
	"email" text,
	"phone" text NOT NULL,
	"address" text NOT NULL,
	"city" text NOT NULL,
	"state" text NOT NULL,
	"zip_code" text NOT NULL,
	"notes" text,
	"user_id" uuid NOT NULL,
	"company" uuid,
	"enterprise_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "clients" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "quote_items" (
	"id" uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
	"description" text NOT NULL,
	"quantity" numeric(10, 2) DEFAULT '1' NOT NULL,
	"unit_price" numeric(10, 2) NOT NULL,
	"amount" numeric(10, 2) GENERATED ALWAYS AS ((quantity * unit_price)) STORED,
	"quote_id" uuid NOT NULL,
	"product_id" uuid
);
--> statement-breakpoint
ALTER TABLE "quote_items" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "templates" ADD CONSTRAINT "templates_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "documents" ADD CONSTRAINT "documents_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_enterprise_id_fkey" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "employee_requests" ADD CONSTRAINT "employee_requests_employee_id_employees_id_fk" FOREIGN KEY ("employee_id") REFERENCES "public"."employees"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "employee_requests" ADD CONSTRAINT "employee_requests_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "job_listing_jobs" ADD CONSTRAINT "job_listing_jobs_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "job_listing_jobs" ADD CONSTRAINT "job_listing_jobs_job_id_jobs_id_fk" FOREIGN KEY ("job_id") REFERENCES "public"."jobs"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "job_listing_jobs" ADD CONSTRAINT "job_listing_jobs_job_listing_id_job_listings_id_fk" FOREIGN KEY ("job_listing_id") REFERENCES "public"."job_listings"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "invoices" ADD CONSTRAINT "invoices_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "invoices" ADD CONSTRAINT "invoices_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "invoice_items" ADD CONSTRAINT "invoice_items_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "invoice_items" ADD CONSTRAINT "invoice_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "job_listings" ADD CONSTRAINT "job_listings_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "profiles" ADD CONSTRAINT "profiles_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "offices" ADD CONSTRAINT "offices_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "department_locations" ADD CONSTRAINT "department_locations_department_id_departments_id_fk" FOREIGN KEY ("department_id") REFERENCES "public"."departments"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "department_locations" ADD CONSTRAINT "department_locations_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "employees" ADD CONSTRAINT "employees_department_id_departments_id_fk" FOREIGN KEY ("department_id") REFERENCES "public"."departments"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "employees" ADD CONSTRAINT "employees_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "expenses" ADD CONSTRAINT "expenses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "expenses" ADD CONSTRAINT "expenses_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "quotes" ADD CONSTRAINT "quotes_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "quotes" ADD CONSTRAINT "quotes_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "salaries" ADD CONSTRAINT "salaries_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."employees"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "salaries" ADD CONSTRAINT "salaries_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "vendors" ADD CONSTRAINT "vendors_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "departments" ADD CONSTRAINT "departments_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "warehouses" ADD CONSTRAINT "warehouses_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "jobs" ADD CONSTRAINT "jobs_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "branches" ADD CONSTRAINT "branches_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "companies" ADD CONSTRAINT "companies_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "clients" ADD CONSTRAINT "clients_company_fkey" FOREIGN KEY ("company") REFERENCES "public"."companies"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "clients" ADD CONSTRAINT "clients_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "quote_items" ADD CONSTRAINT "quote_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "quote_items" ADD CONSTRAINT "quote_items_quote_id_fkey" FOREIGN KEY ("quote_id") REFERENCES "public"."quotes"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "templates_name_idx" ON "templates" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "templates_type_idx" ON "templates" USING btree ("type" text_ops);--> statement-breakpoint
CREATE INDEX "templates_user_id_idx" ON "templates" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "documents_entity_id_idx" ON "documents" USING btree ("entity_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "documents_entity_type_idx" ON "documents" USING btree ("entity_type" text_ops);--> statement-breakpoint
CREATE INDEX "documents_user_id_idx" ON "documents" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "products_name_idx" ON "products" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "products_sku_idx" ON "products" USING btree ("sku" text_ops);--> statement-breakpoint
CREATE INDEX "products_user_id_idx" ON "products" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "employee_requests_created_at_idx" ON "employee_requests" USING btree ("created_at" timestamptz_ops);--> statement-breakpoint
CREATE INDEX "employee_requests_employee_id_idx" ON "employee_requests" USING btree ("employee_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "employee_requests_status_idx" ON "employee_requests" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "employee_requests_type_idx" ON "employee_requests" USING btree ("type" text_ops);--> statement-breakpoint
CREATE INDEX "employee_requests_user_id_idx" ON "employee_requests" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "job_listing_jobs_job_id_idx" ON "job_listing_jobs" USING btree ("job_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "job_listing_jobs_job_listing_id_idx" ON "job_listing_jobs" USING btree ("job_listing_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "invoices_client_id_idx" ON "invoices" USING btree ("client_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "invoices_status_idx" ON "invoices" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "invoices_user_id_idx" ON "invoices" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "invoice_items_invoice_id_idx" ON "invoice_items" USING btree ("invoice_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "job_listings_slug_idx" ON "job_listings" USING btree ("slug" text_ops);--> statement-breakpoint
CREATE INDEX "job_listings_title_idx" ON "job_listings" USING btree ("title" text_ops);--> statement-breakpoint
CREATE INDEX "job_listings_user_id_idx" ON "job_listings" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "profiles_email_idx" ON "profiles" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "profiles_enterprise_id_idx" ON "profiles" USING btree ("enterprise_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "profiles_user_id_idx" ON "profiles" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "profiles_username_idx" ON "profiles" USING btree ("username" text_ops);--> statement-breakpoint
CREATE INDEX "offices_name_idx" ON "offices" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "offices_user_id_idx" ON "offices" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "employees_department_id_idx" ON "employees" USING btree ("department_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "employees_email_idx" ON "employees" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "employees_user_id_idx" ON "employees" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "expenses_client_id_idx" ON "expenses" USING btree ("client_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "expenses_status_idx" ON "expenses" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "expenses_user_id_idx" ON "expenses" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "quotes_client_id_idx" ON "quotes" USING btree ("client_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "quotes_status_idx" ON "quotes" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "quotes_user_id_idx" ON "quotes" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "salaries_employee_id_idx" ON "salaries" USING btree ("employee_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "salaries_user_id_idx" ON "salaries" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "vendors_email_idx" ON "vendors" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "vendors_name_idx" ON "vendors" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "vendors_user_id_idx" ON "vendors" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "departments_name_idx" ON "departments" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "departments_user_id_idx" ON "departments" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "warehouses_code_idx" ON "warehouses" USING btree ("code" text_ops);--> statement-breakpoint
CREATE INDEX "warehouses_name_idx" ON "warehouses" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "warehouses_user_id_idx" ON "warehouses" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "jobs_department_idx" ON "jobs" USING btree ("department" text_ops);--> statement-breakpoint
CREATE INDEX "jobs_title_idx" ON "jobs" USING btree ("title" text_ops);--> statement-breakpoint
CREATE INDEX "jobs_user_id_idx" ON "jobs" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "branches_code_idx" ON "branches" USING btree ("code" text_ops);--> statement-breakpoint
CREATE INDEX "branches_name_idx" ON "branches" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "branches_user_id_idx" ON "branches" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "companies_email_idx" ON "companies" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "companies_is_active_idx" ON "companies" USING btree ("is_active" bool_ops);--> statement-breakpoint
CREATE INDEX "companies_name_idx" ON "companies" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "enterprises_email_idx" ON "enterprises" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "enterprises_name_idx" ON "enterprises" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "clients_email_idx" ON "clients" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "clients_name_idx" ON "clients" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "clients_user_id_idx" ON "clients" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "quote_items_quote_id_idx" ON "quote_items" USING btree ("quote_id" uuid_ops);--> statement-breakpoint
CREATE POLICY "Enable delete for owners" ON "enterprises" AS PERMISSIVE FOR DELETE TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for signup" ON "enterprises" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read for users" ON "enterprises" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable update for owners" ON "enterprises" AS PERMISSIVE FOR UPDATE TO "authenticated";
*/
</file>

<file path="supabase/migrations/0001_smooth_jubilee.sql">
ALTER TABLE "branches" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "clients" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "companies" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "department_locations" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "departments" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "documents" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "employee_requests" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "employees" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "expenses" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "invoice_items" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "invoices" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "job_listing_jobs" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "job_listings" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "jobs" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "offices" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "products" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "profiles" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "quote_items" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "quotes" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "salaries" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "templates" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "vendors" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "warehouses" DISABLE ROW LEVEL SECURITY;--> statement-breakpoint
</file>

<file path="supabase/migrations/0002_tough_clint_barton.sql">
ALTER TABLE "profiles" ADD COLUMN "role" text DEFAULT 'user' NOT NULL;
</file>

<file path="supabase/migrations/0003_jittery_meteorite.sql">
-- DROP TABLE "user_roles";
-- CREATE TABLE "user_roles" (
-- 	"user_id" uuid NOT NULL,
-- 	"role" "app_role" NOT NULL,
-- 	"enterprise_id" uuid NOT NULL,
-- 	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
-- 	CONSTRAINT "user_roles_user_id_role_enterprise_id_pk" PRIMARY KEY("user_id","role","enterprise_id")
-- );
-- --> statement-breakpoint
-- ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_profiles_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
-- ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_enterprise_id_enterprises_id_fk" FOREIGN KEY ("enterprise_id") REFERENCES "public"."enterprises"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
-- CREATE INDEX "user_roles_user_id_idx" ON "user_roles" USING btree ("user_id");--> statement-breakpoint
-- CREATE INDEX "user_roles_role_idx" ON "user_roles" USING btree ("role");--> statement-breakpoint
-- CREATE INDEX "user_roles_enterprise_id_idx" ON "user_roles" USING btree ("enterprise_id");
</file>

<file path="supabase/migrations/0004_amazing_warhawk.sql">
ALTER TABLE "expenses" ALTER COLUMN "id" SET DEFAULT gen_random_uuid();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" SET DATA TYPE numeric;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" SET DEFAULT CURRENT_DATE;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "due_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "status" SET DEFAULT 'draft';--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "id" DROP DEFAULT;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "email" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
-- ALTER TABLE "branches" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "clients" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "companies" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "companies" ADD COLUMN "country" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "building_number" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "street_name" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "position" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "salary" numeric(10, 2);--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "notes" text;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "description" text;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "incurred_at" date DEFAULT CURRENT_DATE;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "created_by" uuid;--> statement-breakpoint
-- ALTER TABLE "invoices" ADD COLUMN "created_by" uuid;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "building_number" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "street_name" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "country" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "notes" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "building_number" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "street_name" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "country" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "additional_number" text;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "building_number" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "street_name" text NOT NULL;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "country" text NOT NULL;--> statement-breakpoint
</file>

<file path="supabase/migrations/20250422152050_create_enterprises.sql">
-- Create enterprises table
CREATE TABLE IF NOT EXISTS public.enterprises (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  name text NOT NULL,
  email text NOT NULL,
  phone text,
  address text,
  city text,
  state text,
  zip_code text,
  is_active boolean DEFAULT true NOT NULL,
  website text,
  industry text,
  size text,
  notes text
);
-- Enable RLS
ALTER TABLE public.enterprises ENABLE ROW LEVEL SECURITY;
-- Add email column if it doesn't exist (to handle partial application)
ALTER TABLE public.enterprises ADD COLUMN IF NOT EXISTS email text;
-- Create indexes
CREATE INDEX IF NOT EXISTS enterprises_email_idx ON public.enterprises USING btree (email);
CREATE INDEX IF NOT EXISTS enterprises_name_idx ON public.enterprises USING btree (name);
</file>

<file path="supabase/migrations/20250422152100_mig_1.sql">
-- Drop existing types if they exist
DROP TYPE IF EXISTS public.app_permission CASCADE;
DROP TYPE IF EXISTS public.app_role CASCADE;
-- Create enum types if they don't exist
CREATE TYPE public.app_role AS ENUM ('superadmin', 'admin', 'accounting', 'hr');
CREATE TYPE public.app_permission AS ENUM (
    'profiles.create', 'profiles.read', 'profiles.update', 'profiles.delete', 'profiles.export',
    'enterprises.create', 'enterprises.read', 'enterprises.update', 'enterprises.delete', 'enterprises.export',
    'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate',
    'products.create', 'products.read', 'products.update', 'products.delete', 'products.export',
    'quotes.create', 'quotes.read', 'quotes.update', 'quotes.delete', 'quotes.export', 'quotes.duplicate',
    'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export',
    'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export',
    'documents.create', 'documents.read', 'documents.update', 'documents.delete', 'documents.export',
    'templates.create', 'templates.read', 'templates.update', 'templates.delete', 'templates.export', 'templates.duplicate',
    'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export',
    'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export',
    'offices.create', 'offices.read', 'offices.update', 'offices.delete', 'offices.export',
    'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate',
    'departments.create', 'departments.read', 'departments.update', 'departments.delete', 'departments.export',
    'warehouses.create', 'warehouses.read', 'warehouses.update', 'warehouses.delete', 'warehouses.export',
    'vendors.create', 'vendors.read', 'vendors.update', 'vendors.delete', 'vendors.export',
    'clients.create', 'clients.read', 'clients.update', 'clients.delete', 'clients.export',
    'companies.create', 'companies.read', 'companies.update', 'companies.delete', 'companies.export',
    'branches.create', 'branches.read', 'branches.update', 'branches.delete', 'branches.export'
);
</file>

<file path="supabase/migrations/20250422152150_create_role_permissions.sql">
-- Create role_permissions table
CREATE TABLE IF NOT EXISTS public.role_permissions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  CONSTRAINT role_permissions_role_permission_key UNIQUE(role, permission)
);
-- Enable RLS
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
</file>

<file path="supabase/migrations/20250422152200_create_profiles.sql">
-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz DEFAULT timezone('utc'::text, now()),
  username text UNIQUE,
  email text UNIQUE,
  full_name text,
  avatar_url text,
  enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE,
  role app_role
);
-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
-- Add username column if it doesn't exist (to handle partial application)
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS username text;
-- Add enterprise_id column if it doesn't exist (to handle partial application)
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS enterprise_id uuid;
-- Create indexes
CREATE INDEX IF NOT EXISTS profiles_email_idx ON public.profiles USING btree (email);
CREATE INDEX IF NOT EXISTS profiles_username_idx ON public.profiles USING btree (username);
CREATE INDEX IF NOT EXISTS profiles_enterprise_id_idx ON public.profiles USING btree (enterprise_id);
CREATE INDEX IF NOT EXISTS profiles_user_id_idx ON public.profiles USING btree (id);
-- Create updated_at trigger
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
</file>

<file path="supabase/migrations/20250422152232_mig_2.sql">
-- Create the user_roles table
CREATE TABLE IF NOT EXISTS public.user_roles (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY NOT NULL,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  role app_role NOT NULL,
  enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE(user_id, role, enterprise_id)
);
-- Enable RLS
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
-- Create updated_at trigger
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.user_roles
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
</file>

<file path="supabase/migrations/20250422152300_create_departments.sql">
-- Create departments table
CREATE TABLE IF NOT EXISTS public.departments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz DEFAULT timezone('utc'::text, now()),
  name text NOT NULL,
  description text,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE NOT NULL
);
-- Enable RLS
ALTER TABLE public.departments ENABLE ROW LEVEL SECURITY;
-- Create indexes
CREATE INDEX IF NOT EXISTS departments_name_idx ON public.departments USING btree (name);
CREATE INDEX IF NOT EXISTS departments_user_id_idx ON public.departments USING btree (user_id);
-- Create updated_at trigger
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.departments
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
</file>

<file path="supabase/migrations/20250422152400_create_employees.sql">
-- Create employees table
CREATE TABLE IF NOT EXISTS public.employees (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz DEFAULT timezone('utc'::text, now()),
  first_name text NOT NULL,
  last_name text NOT NULL,
  email text NOT NULL,
  phone text,
  hire_date date,
  position text,
  salary numeric(10,2),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE NOT NULL,
  department_id uuid REFERENCES departments(id) ON DELETE SET NULL
);
-- Enable RLS
ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;
-- Create indexes
CREATE INDEX IF NOT EXISTS employees_email_idx ON public.employees USING btree (email);
CREATE INDEX IF NOT EXISTS employees_user_id_idx ON public.employees USING btree (user_id);
CREATE INDEX IF NOT EXISTS employees_department_id_idx ON public.employees USING btree (department_id);
-- Create updated_at trigger
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON public.employees
  FOR EACH ROW
  EXECUTE FUNCTION public.set_updated_at();
</file>

<file path="supabase/migrations/20250422152611_drop_role_column.sql">
ALTER TABLE user_roles DROP COLUMN IF EXISTS role;
</file>

<file path="supabase/migrations/20250422152849_add_custom_access_token_hook_and_permissions.sql">
-- Create the custom access token hook function
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
declare
  claims jsonb;
  user_role public.app_role;
  user_permissions text[];
begin
  -- Fetch the user role in the user_roles table
  select role into user_role 
  from public.user_roles 
  where user_id = (event->>'user_id')::uuid;
  -- Get user permissions
  select array_agg(rp.permission::text)
  into user_permissions
  from public.role_permissions rp
  where rp.role = user_role;
  claims := event->'claims';
  if user_role is not null then
    -- Set the role claim
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    -- Set the permissions claim
    claims := jsonb_set(claims, '{user_permissions}', to_jsonb(user_permissions));
  else
    claims := jsonb_set(claims, '{user_role}', 'null');
    claims := jsonb_set(claims, '{user_permissions}', '[]');
  end if;
  -- Update the claims object in the original event
  event := jsonb_set(event, '{claims}', claims);
  return event;
end;
$$;
-- Grant necessary permissions
grant usage on schema public to supabase_auth_admin;
grant execute on function public.custom_access_token_hook to supabase_auth_admin;
revoke execute on function public.custom_access_token_hook from authenticated, anon, public;
-- Insert default role permissions
-- First clear existing permissions to avoid duplicates
DELETE FROM public.role_permissions;
-- Insert permissions for superadmin (all permissions)
INSERT INTO public.role_permissions (role, permission)
SELECT 'superadmin', unnest(enum_range(NULL::app_permission));
-- Insert permissions for admin (most permissions except sensitive ones)
INSERT INTO public.role_permissions (role, permission)
SELECT 'admin', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text NOT IN ('profiles.delete', 'enterprises.delete');
-- Insert permissions for accounting
INSERT INTO public.role_permissions (role, permission)
SELECT 'accounting', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text IN (
  'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate',
  'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate',
  'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export'
);
-- Insert permissions for HR
INSERT INTO public.role_permissions (role, permission)
SELECT 'hr', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text IN (
  'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export',
  'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export',
  'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export'
);
</file>

<file path="supabase/migrations/20250422152908_fix_types_and_roles.sql">
-- First, drop existing objects that depend on the types
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user_role();
DROP FUNCTION IF EXISTS custom_access_token_hook(jsonb);
-- Drop existing tables that depend on the types
DROP TABLE IF EXISTS role_permissions CASCADE;
DROP TABLE IF EXISTS user_roles CASCADE;
-- Drop the types
DROP TYPE IF EXISTS app_permission CASCADE;
DROP TYPE IF EXISTS app_role CASCADE;
-- Create the types
CREATE TYPE app_role AS ENUM ('superadmin', 'admin', 'accounting', 'hr');
CREATE TYPE app_permission AS ENUM (
    'profiles.create', 'profiles.read', 'profiles.update', 'profiles.delete', 'profiles.export',
    'enterprises.create', 'enterprises.read', 'enterprises.update', 'enterprises.delete', 'enterprises.export',
    'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate',
    'products.create', 'products.read', 'products.update', 'products.delete', 'products.export',
    'quotes.create', 'quotes.read', 'quotes.update', 'quotes.delete', 'quotes.export', 'quotes.duplicate',
    'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export',
    'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export',
    'documents.create', 'documents.read', 'documents.update', 'documents.delete', 'documents.export',
    'templates.create', 'templates.read', 'templates.update', 'templates.delete', 'templates.export', 'templates.duplicate',
    'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export',
    'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export',
    'offices.create', 'offices.read', 'offices.update', 'offices.delete', 'offices.export',
    'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate',
    'departments.create', 'departments.read', 'departments.update', 'departments.delete', 'departments.export',
    'warehouses.create', 'warehouses.read', 'warehouses.update', 'warehouses.delete', 'warehouses.export',
    'vendors.create', 'vendors.read', 'vendors.update', 'vendors.delete', 'vendors.export',
    'clients.create', 'clients.read', 'clients.update', 'clients.delete', 'clients.export',
    'companies.create', 'companies.read', 'companies.update', 'companies.delete', 'companies.export',
    'branches.create', 'branches.read', 'branches.update', 'branches.delete', 'branches.export'
);
-- Create the tables
CREATE TABLE IF NOT EXISTS user_roles (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role app_role NOT NULL,
    enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(user_id, role, enterprise_id)
);
CREATE TABLE IF NOT EXISTS role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    role app_role NOT NULL,
    permission app_permission NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(role, permission)
);
-- Create the handle_new_user_role function
CREATE OR REPLACE FUNCTION handle_new_user_role()
RETURNS TRIGGER AS $$
BEGIN
    -- Create a superadmin role for the new user
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create the trigger
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION handle_new_user_role();
-- Create the custom access token hook
CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
AS $$
DECLARE
    claims jsonb;
    user_role public.app_role;
    user_permissions text[];
BEGIN
    -- Fetch the user role in the user_roles table
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = (event->>'user_id')::uuid;
    -- Get user permissions
    SELECT array_agg(rp.permission::text)
    INTO user_permissions
    FROM public.role_permissions rp
    WHERE rp.role = user_role;
    claims := event->'claims';
    IF user_role IS NOT NULL THEN
        -- Set the role claim
        claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
        -- Set the permissions claim
        claims := jsonb_set(claims, '{user_permissions}', to_jsonb(user_permissions));
    ELSE
        claims := jsonb_set(claims, '{user_role}', 'null');
        claims := jsonb_set(claims, '{user_permissions}', '[]');
    END IF;
    -- Update the claims object in the original event
    event := jsonb_set(event, '{claims}', claims);
    RETURN event;
END;
$$;
-- Grant necessary permissions
GRANT usage ON schema public TO supabase_auth_admin;
GRANT execute ON function public.custom_access_token_hook TO supabase_auth_admin;
REVOKE execute ON function public.custom_access_token_hook FROM authenticated, anon, public;
-- Insert default role permissions
INSERT INTO public.role_permissions (role, permission)
SELECT 'superadmin', unnest(enum_range(NULL::app_permission));
-- Insert permissions for admin (most permissions except sensitive ones)
INSERT INTO public.role_permissions (role, permission)
SELECT 'admin', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text NOT IN ('profiles.delete', 'enterprises.delete');
-- Insert permissions for accounting
INSERT INTO public.role_permissions (role, permission)
SELECT 'accounting', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text IN (
    'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate',
    'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate',
    'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export'
);
-- Insert permissions for HR
INSERT INTO public.role_permissions (role, permission)
SELECT 'hr', permission
FROM unnest(enum_range(NULL::app_permission)) AS permission
WHERE permission::text IN (
    'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export',
    'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export',
    'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export'
);
</file>

<file path="supabase/migrations/20250422152925_fix_profiles_role_column.sql">
-- First, make sure the app_role type exists
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE app_role AS ENUM ('superadmin', 'admin', 'accounting', 'hr');
    END IF;
END $$;
-- Add the role column to profiles if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'profiles' 
        AND column_name = 'role'
    ) THEN
        ALTER TABLE profiles ADD COLUMN role app_role;
    END IF;
END $$;
-- Update existing profiles to have a role based on user_roles
UPDATE profiles p
SET role = ur.role
FROM user_roles ur
WHERE p.id = ur.user_id
AND p.role IS NULL;
</file>

<file path="supabase/migrations/20250422152941_add_profile_creation_trigger_fixed.sql">
-- Create function to handle new user profile creation
CREATE OR REPLACE FUNCTION public.handle_new_user_profile()
RETURNS TRIGGER AS $$
BEGIN
    -- First create the role
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin');
    -- Then create the profile using the role we just created
    INSERT INTO public.profiles (
        id,
        user_id,
        email,
        first_name,
        last_name,
        role,
        created_at
    )
    VALUES (
        NEW.id,
        NEW.id,
        NEW.email,
        COALESCE(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 1), ''),
        COALESCE(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 2), ''),
        'superadmin',
        NOW()
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Drop existing triggers
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP TRIGGER IF EXISTS on_auth_user_created_profile ON auth.users;
DROP TRIGGER IF EXISTS on_auth_user_created_role ON auth.users;
-- Create single trigger that handles both role and profile creation
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user_profile();
</file>

<file path="supabase/migrations/20250422153001_fix_auth_user_trigger.sql">
-- Drop existing trigger and function if they exist
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user_profile();
-- Recreate the function with proper schema references
CREATE OR REPLACE FUNCTION public.handle_new_user_profile()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Insert into user_roles first
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin'::public.app_role);
    -- Then create the profile
    INSERT INTO public.profiles (
        id,
        user_id,
        email,
        first_name,
        last_name,
        role,
        created_at
    )
    VALUES (
        NEW.id,
        NEW.id,
        NEW.email,
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 1), ''), 'New'),
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 2), ''), 'User'),
        'superadmin'::public.app_role,
        NOW()
    );
    RETURN NEW;
END;
$$;
-- Recreate the trigger with proper schema reference
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user_profile();
</file>

<file path="supabase/migrations/20250422153016_fix_auth_trigger_with_logging.sql">
-- Drop existing trigger and function
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user_profile();
-- Create an audit table to debug trigger execution
CREATE TABLE IF NOT EXISTS public.trigger_audit_log (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    trigger_name text,
    table_name text,
    user_id uuid,
    executed_at timestamp with time zone DEFAULT now(),
    data jsonb
);
-- Recreate the function with logging
CREATE OR REPLACE FUNCTION public.handle_new_user_profile()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    _role public.app_role;
BEGIN
    -- Set the role
    _role := 'superadmin'::public.app_role;
    -- Log the trigger execution
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile', 'auth.users', NEW.id, row_to_json(NEW)::jsonb);
    -- Insert into user_roles first with explicit schema
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, _role);
    -- Then create the profile with explicit schema
    INSERT INTO public.profiles (
        id,
        user_id,
        email,
        first_name,
        last_name,
        role,
        created_at
    )
    VALUES (
        NEW.id,
        NEW.id,
        NEW.email,
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 1), ''), 'New'),
        COALESCE(NULLIF(split_part(NEW.raw_user_meta_data->>'full_name', ' ', 2), ''), 'User'),
        _role,
        NOW()
    );
    RETURN NEW;
EXCEPTION WHEN OTHERS THEN
    -- Log any errors
    INSERT INTO public.trigger_audit_log (trigger_name, table_name, user_id, data)
    VALUES ('handle_new_user_profile_error', 'auth.users', NEW.id, jsonb_build_object('error', SQLERRM));
    RAISE;
END;
$$;
-- Recreate the trigger with explicit schema reference
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user_profile();
-- Ensure the trigger has the correct permissions
ALTER FUNCTION public.handle_new_user_profile() SECURITY DEFINER;
</file>

<file path="supabase/migrations/20250422153030_fix_enterprises_rls_policies.sql">
-- Drop existing policies if any
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.enterprises;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.enterprises;
DROP POLICY IF EXISTS "Enable update for users based on email" ON public.enterprises;
DROP POLICY IF EXISTS "Enable delete for users based on email" ON public.enterprises;
-- Create RLS policies for enterprises table
ALTER TABLE public.enterprises ENABLE ROW LEVEL SECURITY;
-- Allow authenticated users to create enterprises during signup
CREATE POLICY "Enable insert for authenticated users"
ON public.enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);
-- Allow users to read enterprises they are associated with
CREATE POLICY "Enable read access for authenticated users"
ON public.enterprises
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur 
    WHERE ur.enterprise_id = id 
    AND ur.user_id = auth.uid()
  )
);
-- Allow users to update enterprises they are associated with
CREATE POLICY "Enable update for users based on email"
ON public.enterprises
FOR UPDATE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur 
    WHERE ur.enterprise_id = id 
    AND ur.user_id = auth.uid()
    AND ur.role = 'superadmin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.user_roles ur 
    WHERE ur.enterprise_id = id 
    AND ur.user_id = auth.uid()
    AND ur.role = 'superadmin'
  )
);
-- Allow users to delete enterprises they are associated with
CREATE POLICY "Enable delete for users based on email"
ON public.enterprises
FOR DELETE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur 
    WHERE ur.enterprise_id = id 
    AND ur.user_id = auth.uid()
    AND ur.role = 'superadmin'
  )
);
</file>

<file path="supabase/migrations/20250422153049_update_enterprises_rls_policies.sql">
-- First, let's enable the postgres extension if not already enabled
CREATE EXTENSION IF NOT EXISTS postgres_fdw;
-- Drop existing policies
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.enterprises;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.enterprises;
DROP POLICY IF EXISTS "Enable update for users based on email" ON public.enterprises;
DROP POLICY IF EXISTS "Enable delete for users based on email" ON public.enterprises;
-- Temporarily disable RLS to ensure we can create the initial enterprise
ALTER TABLE public.enterprises DISABLE ROW LEVEL SECURITY;
-- Create a more permissive insert policy
CREATE POLICY "Enable insert for service role"
ON public.enterprises
FOR INSERT
TO service_role
WITH CHECK (true);
-- Create a more permissive insert policy for authenticated users
CREATE POLICY "Enable insert for authenticated users"
ON public.enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);
-- Read policy
CREATE POLICY "Enable read access for users"
ON public.enterprises
FOR SELECT
TO authenticated
USING (true);
-- Update policy for admins
CREATE POLICY "Enable update for admins"
ON public.enterprises
FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.user_roles ur 
        WHERE ur.enterprise_id = id 
        AND ur.user_id = auth.uid()
        AND ur.role = 'superadmin'
    )
);
-- Delete policy for admins
CREATE POLICY "Enable delete for admins"
ON public.enterprises
FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.user_roles ur 
        WHERE ur.enterprise_id = id 
        AND ur.user_id = auth.uid()
        AND ur.role = 'superadmin'
    )
);
-- Re-enable RLS
ALTER TABLE public.enterprises ENABLE ROW LEVEL SECURITY;
</file>

<file path="supabase/migrations/20250422153200_fix_app_role_type.sql">
-- Drop the type if it exists
DROP TYPE IF EXISTS app_role CASCADE;
-- Create the type
CREATE TYPE app_role AS ENUM ('superadmin', 'admin', 'accounting', 'hr');
-- Recreate any dependent objects that were dropped
CREATE TABLE IF NOT EXISTS user_roles (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role app_role NOT NULL,
    enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(user_id, role, enterprise_id)
);
-- Recreate the handle_new_user_role function
CREATE OR REPLACE FUNCTION handle_new_user_role()
RETURNS TRIGGER AS $$
BEGIN
    -- Create a superadmin role for the new user
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Recreate the trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION handle_new_user_role();
</file>

<file path="supabase/migrations/20250422154925_create_test_table.sql">
-- Create test table
CREATE TABLE IF NOT EXISTS public.test_table_2 (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz DEFAULT timezone('utc'::text, now()),
  first_name text NOT NULL
);
</file>

<file path="supabase/migrations/20250422170000_fix_app_role_type.sql">
-- Drop existing objects that might depend on the types
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user_role();
DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP TABLE IF EXISTS public.user_roles CASCADE;
DROP TYPE IF EXISTS public.app_role CASCADE;
DROP TYPE IF EXISTS public.app_permission CASCADE;
-- Create the app_role type
CREATE TYPE public.app_role AS ENUM (
    'superadmin',
    'admin',
    'accounting',
    'hr'
);
-- Create the app_permission type if it doesn't exist
CREATE TYPE public.app_permission AS ENUM (
    'profiles.create', 'profiles.read', 'profiles.update', 'profiles.delete', 'profiles.export',
    'enterprises.create', 'enterprises.read', 'enterprises.update', 'enterprises.delete', 'enterprises.export',
    'invoices.create', 'invoices.read', 'invoices.update', 'invoices.delete', 'invoices.export', 'invoices.duplicate',
    'products.create', 'products.read', 'products.update', 'products.delete', 'products.export',
    'quotes.create', 'quotes.read', 'quotes.update', 'quotes.delete', 'quotes.export', 'quotes.duplicate',
    'employees.create', 'employees.read', 'employees.update', 'employees.delete', 'employees.export',
    'salaries.create', 'salaries.read', 'salaries.update', 'salaries.delete', 'salaries.export',
    'documents.create', 'documents.read', 'documents.update', 'documents.delete', 'documents.export',
    'templates.create', 'templates.read', 'templates.update', 'templates.delete', 'templates.export', 'templates.duplicate',
    'employee_requests.create', 'employee_requests.read', 'employee_requests.update', 'employee_requests.delete', 'employee_requests.export',
    'job_listings.create', 'job_listings.read', 'job_listings.update', 'job_listings.delete', 'job_listings.export',
    'offices.create', 'offices.read', 'offices.update', 'offices.delete', 'offices.export',
    'expenses.create', 'expenses.read', 'expenses.update', 'expenses.delete', 'expenses.export', 'expenses.duplicate',
    'departments.create', 'departments.read', 'departments.update', 'departments.delete', 'departments.export',
    'warehouses.create', 'warehouses.read', 'warehouses.update', 'warehouses.delete', 'warehouses.export',
    'vendors.create', 'vendors.read', 'vendors.update', 'vendors.delete', 'vendors.export',
    'clients.create', 'clients.read', 'clients.update', 'clients.delete', 'clients.export',
    'companies.create', 'companies.read', 'companies.update', 'companies.delete', 'companies.export',
    'branches.create', 'branches.read', 'branches.update', 'branches.delete', 'branches.export'
);
-- Create the user_roles table
CREATE TABLE IF NOT EXISTS public.user_roles (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role app_role NOT NULL,
    enterprise_id uuid REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(user_id, role, enterprise_id)
);
-- Create the role_permissions table
CREATE TABLE IF NOT EXISTS public.role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    role app_role NOT NULL,
    permission app_permission NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(role, permission)
);
-- Create the handle_new_user_role function
CREATE OR REPLACE FUNCTION handle_new_user_role()
RETURNS TRIGGER AS $$
BEGIN
    -- Create a superadmin role for the new user
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'superadmin');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create the trigger
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION handle_new_user_role();
-- Insert default role permissions for superadmin
INSERT INTO public.role_permissions (role, permission)
SELECT 'superadmin'::app_role, unnest(enum_range(NULL::app_permission))
ON CONFLICT (role, permission) DO NOTHING;
</file>

<file path="supabase/migrations/20250422170100_fix_enterprises_rls.sql">
-- Enable RLS on enterprises table if not already enabled
ALTER TABLE enterprises ENABLE ROW LEVEL SECURITY;
-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON enterprises;
DROP POLICY IF EXISTS "Enable read access for users with access to the enterprise" ON enterprises;
DROP POLICY IF EXISTS "Enable update for users with access to the enterprise" ON enterprises;
DROP POLICY IF EXISTS "Enable delete for superadmins" ON enterprises;
-- Create policies
-- Allow authenticated users to create enterprises (needed for signup)
CREATE POLICY "Enable insert for authenticated users"
ON enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);  -- Allow any authenticated user to create an enterprise
-- Allow users to read enterprises they have access to
CREATE POLICY "Enable read access for users with access to the enterprise"
ON enterprises
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
    )
);
-- Allow users to update enterprises they have access to as superadmin
CREATE POLICY "Enable update for users with access to the enterprise"
ON enterprises
FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
);
-- Allow superadmins to delete enterprises
CREATE POLICY "Enable delete for superadmins"
ON enterprises
FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
);
</file>

<file path="supabase/migrations/20250422170200_fix_enterprises_rls_again.sql">
-- First disable RLS temporarily to allow the migration
ALTER TABLE enterprises DISABLE ROW LEVEL SECURITY;
-- Drop all existing policies
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON enterprises;
DROP POLICY IF EXISTS "Enable read access for users with access to the enterprise" ON enterprises;
DROP POLICY IF EXISTS "Enable update for users with access to the enterprise" ON enterprises;
DROP POLICY IF EXISTS "Enable delete for superadmins" ON enterprises;
DROP POLICY IF EXISTS "Enable insert for signup" ON enterprises;
DROP POLICY IF EXISTS "Enable read for users" ON enterprises;
DROP POLICY IF EXISTS "Enable update for owners" ON enterprises;
DROP POLICY IF EXISTS "Enable delete for owners" ON enterprises;
-- Create a more permissive insert policy
CREATE POLICY "Enable insert for signup"
ON enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);
-- Create read policy
CREATE POLICY "Enable read for users"
ON enterprises
FOR SELECT
TO authenticated
USING (true);
-- Create update policy for owners
CREATE POLICY "Enable update for owners"
ON enterprises
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);
-- Create delete policy for owners
CREATE POLICY "Enable delete for owners"
ON enterprises
FOR DELETE
TO authenticated
USING (true);
-- Re-enable RLS
ALTER TABLE enterprises ENABLE ROW LEVEL SECURITY;
</file>

<file path="supabase/migrations/20250422172512_create_handle_new_user_trigger.sql">
-- Function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER -- Important: Allows the function to run with elevated privileges
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email and derive basic name parts from it
  user_email := NEW.email;
  user_first_name := 'User'; -- Default first name
  user_last_name := split_part(user_email, '@', 1); -- Use part before '@' as last name
  -- Create a new enterprise for the user
  INSERT INTO public.enterprises (name, email, is_active)
  VALUES ('My Enterprise', user_email, true)
  RETURNING id INTO new_enterprise_id;
  -- Create the user's profile, linking to the new user and enterprise
  INSERT INTO public.profiles (id, user_id, enterprise_id, email, first_name, last_name, role)
  VALUES (
    NEW.id, -- Use the user's ID from auth.users as the profile ID
    NEW.id, -- Link to the user_id
    new_enterprise_id, -- Link to the newly created enterprise
    user_email,
    user_first_name,
    user_last_name,
    'superadmin' -- Set the initial role in the profile (can also be derived from user_roles)
  );
  -- Add the user to the user_roles table for the new enterprise
  INSERT INTO public.user_roles (user_id, enterprise_id, role)
  VALUES (NEW.id, new_enterprise_id, 'superadmin');
  RETURN NEW;
END;
$$;
-- Trigger to call handle_new_user on new user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users; -- Drop existing trigger if it exists
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250422174135_add_role_to_profiles.sql">
-- ALTER TABLE public.profiles
-- ADD COLUMN role TEXT NOT NULL DEFAULT 'user';
</file>

<file path="supabase/migrations/20250422174152_create_user_roles_table.sql">
-- Create user_roles table
CREATE TABLE IF NOT EXISTS public.user_roles (
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    role app_role NOT NULL,
    created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
    PRIMARY KEY (user_id, role)
);
-- Add indices for faster lookups
CREATE INDEX user_roles_user_id_idx ON public.user_roles(user_id);
CREATE INDEX user_roles_role_idx ON public.user_roles(role);
-- Add comments
COMMENT ON TABLE public.user_roles IS 'Stores roles assigned to user profiles.';
</file>

<file path="supabase/migrations/20250422180000_fix_enterprise_access.sql">
-- Drop all existing enterprise policies
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON enterprises;
DROP POLICY IF EXISTS "Enable read access for users" ON enterprises;
DROP POLICY IF EXISTS "Enable update for admins" ON enterprises;
DROP POLICY IF EXISTS "Enable delete for admins" ON enterprises;
DROP POLICY IF EXISTS "Enable insert for signup" ON enterprises;
DROP POLICY IF EXISTS "Enable read for users" ON enterprises;
DROP POLICY IF EXISTS "Enable update for owners" ON enterprises;
DROP POLICY IF EXISTS "Enable delete for owners" ON enterprises;
-- Create new policies
-- Allow authenticated users to create enterprises (needed for signup)
CREATE POLICY "Enable insert for authenticated users"
ON enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);
-- Allow users to read enterprises they have access to through user_roles
CREATE POLICY "Enable read access for users"
ON enterprises
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
    )
);
-- Allow superadmins to update their enterprises
CREATE POLICY "Enable update for superadmins"
ON enterprises
FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
);
-- Allow superadmins to delete their enterprises
CREATE POLICY "Enable delete for superadmins"
ON enterprises
FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles
        WHERE user_id = auth.uid()
        AND enterprise_id = enterprises.id
        AND role = 'superadmin'
    )
);
</file>

<file path="supabase/migrations/20250422180100_fix_user_creation.sql">
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Modify the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if a profile already exists (means user was created by admin)
  IF EXISTS (SELECT 1 FROM public.profiles WHERE id = NEW.id) THEN
    -- User was created by admin, don't create enterprise
    RETURN NEW;
  END IF;
  -- Create a new enterprise only for self-signup users
  INSERT INTO public.enterprises (name, email, is_active)
  VALUES (user_first_name || '''s Enterprise', user_email, true)
  RETURNING id INTO new_enterprise_id;
  -- Create the user's profile
  INSERT INTO public.profiles (
    id,
    user_id,
    enterprise_id,
    email,
    first_name,
    last_name,
    role
  )
  VALUES (
    NEW.id,
    NEW.id,
    new_enterprise_id,
    user_email,
    user_first_name,
    user_last_name,
    'superadmin'
  );
  -- Add the user to user_roles
  INSERT INTO public.user_roles (user_id, enterprise_id, role)
  VALUES (NEW.id, new_enterprise_id, 'superadmin');
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250422183025_allow_custom_role_names.sql">
-- Drop constraints that depend on the 'role' column type or 'app_role' enum, if they still exist
ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_user_id_role_enterprise_id_pk;
ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_pkey; -- Also try dropping the key possibly created by the older migration
ALTER TABLE public.role_permissions DROP CONSTRAINT IF EXISTS role_permissions_role_permission_key;
DROP INDEX IF EXISTS public.user_roles_role_idx;
-- Alter relevant columns from enum to text BEFORE dropping the type
-- The user_roles.role column should have been removed by migration 20250430111354
-- ALTER TABLE public.user_roles ALTER COLUMN role TYPE text;
ALTER TABLE public.role_permissions ALTER COLUMN role TYPE text;
ALTER TABLE public.profiles ALTER COLUMN role TYPE text; -- Alter profiles.role as well
-- Drop the now unused enum type if it exists
-- Recreate the constraints for role_permissions with the new text type
-- The user_roles constraints are handled by migration 20250430111354
-- ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_user_id_role_enterprise_id_pk PRIMARY KEY (user_id, role, enterprise_id);
ALTER TABLE public.role_permissions ADD CONSTRAINT role_permissions_role_permission_key UNIQUE (role, permission);
-- CREATE INDEX user_roles_role_idx ON public.user_roles USING btree (role);
</file>

<file path="supabase/migrations/20250422195136_add_predefiend_roles.sql">
-- Clear existing permissions for these roles to avoid duplicates if run again
DELETE FROM public.role_permissions WHERE role IN ('superadmin', 'hr', 'accounting', 'employee');
-- Superadmin Permissions (All)
INSERT INTO public.role_permissions (role, permission)
SELECT 'superadmin', permission
FROM unnest(enum_range(NULL::public.app_permission)) AS permission;
-- HR Permissions
INSERT INTO public.role_permissions (role, permission) VALUES
  ('hr', 'employees.create'),
  ('hr', 'employees.read'),
  ('hr', 'employees.update'),
  ('hr', 'employees.delete'),
  ('hr', 'employees.export'),
  ('hr', 'salaries.create'),
  ('hr', 'salaries.read'),
  ('hr', 'salaries.update'),
  ('hr', 'salaries.delete'),
  ('hr', 'salaries.export'),
  ('hr', 'documents.create'),
  ('hr', 'documents.read'),
  ('hr', 'documents.update'),
  ('hr', 'documents.delete'),
  ('hr', 'documents.export'),
  ('hr', 'job_listings.create'),
  ('hr', 'job_listings.read'),
  ('hr', 'job_listings.update'),
  ('hr', 'job_listings.delete'),
  ('hr', 'job_listings.export'),
  ('hr', 'employee_requests.read'),
  ('hr', 'employee_requests.update'),
  ('hr', 'profiles.read');
-- Accounting Permissions
INSERT INTO public.role_permissions (role, permission) VALUES
  ('accounting', 'invoices.create'),
  ('accounting', 'invoices.read'),
  ('accounting', 'invoices.update'),
  ('accounting', 'invoices.delete'),
  ('accounting', 'invoices.export'),
  ('accounting', 'invoices.duplicate'),
  ('accounting', 'products.create'),
  ('accounting', 'products.read'),
  ('accounting', 'products.update'),
  ('accounting', 'products.delete'),
  ('accounting', 'products.export'),
  ('accounting', 'expenses.create'),
  ('accounting', 'expenses.read'),
  ('accounting', 'expenses.update'),
  ('accounting', 'expenses.delete'),
  ('accounting', 'expenses.export'),
  ('accounting', 'expenses.duplicate'),
  ('accounting', 'vendors.create'),
  ('accounting', 'vendors.read'),
  ('accounting', 'vendors.update'),
  ('accounting', 'vendors.delete'),
  ('accounting', 'vendors.export'),
  ('accounting', 'clients.read'),
  ('accounting', 'companies.read'),
  ('accounting', 'quotes.read');
-- Employee Permissions
INSERT INTO public.role_permissions (role, permission) VALUES
  ('employee', 'employee_requests.create'),
  ('employee', 'employee_requests.read'),
  ('employee', 'employee_requests.update'),
  ('employee', 'employee_requests.delete'),
  ('employee', 'profiles.read'),
  ('employee', 'profiles.update'),
  ('employee', 'documents.read');
</file>

<file path="supabase/migrations/20250422205935_create_role_permissions_table.sql">
-- Check if table exists before creating
DO $outer$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'role_permissions') THEN
        -- Create role_permissions table
        CREATE TABLE role_permissions (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            role TEXT NOT NULL,
            permission TEXT[] NOT NULL DEFAULT '{}',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()) NOT NULL
        );
        -- Create unique index on role to ensure one permission set per role
        CREATE UNIQUE INDEX role_permissions_role_idx ON role_permissions(role);
        -- Create RLS policies
        ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
        -- Allow read access to authenticated users
        CREATE POLICY "Allow read access to authenticated users" ON role_permissions
            FOR SELECT TO authenticated
            USING (true);
        -- Allow all access to service_role only
        CREATE POLICY "Allow all access to service_role" ON role_permissions
            FOR ALL TO service_role
            USING (true)
            WITH CHECK (true);
        -- Create function to update updated_at timestamp if it doesn't exist
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $inner$
        BEGIN
            NEW.updated_at = TIMEZONE('utc', NOW());
            RETURN NEW;
        END;
        $inner$ language 'plpgsql';
        -- Create trigger to update updated_at
        CREATE TRIGGER update_role_permissions_updated_at
            BEFORE UPDATE ON role_permissions
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;
END;
$outer$;
</file>

<file path="supabase/migrations/20250422215653_update_handle_new_user_with_enterprise_owner_check.sql">
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Modify the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if user is an enterprise owner
  IF (NEW.raw_user_meta_data->>'enterprise_owner')::boolean = true THEN
    -- Create a new enterprise for enterprise owners
    INSERT INTO public.enterprises (name, email, is_active)
    VALUES (user_first_name || '''s Enterprise', user_email, true)
    RETURNING id INTO new_enterprise_id;
    -- Create the user's profile
    INSERT INTO public.profiles (
      id,
      user_id,
      enterprise_id,
      email,
      first_name,
      last_name,
      role
    )
    VALUES (
      NEW.id,
      NEW.id,
      new_enterprise_id,
      user_email,
      user_first_name,
      user_last_name,
      'superadmin'
    );
    -- Add the user to user_roles
    INSERT INTO public.user_roles (user_id, enterprise_id, role)
    VALUES (NEW.id, new_enterprise_id, 'superadmin');
  END IF;
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250422220226_update_user_handler_metadata.sql">
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Modify the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if user is an enterprise owner
  IF (NEW.raw_user_meta_data->>'enterprise_owner')::boolean = true THEN
    -- Create a new enterprise for enterprise owners
    INSERT INTO public.enterprises (name, email, is_active)
    VALUES (user_first_name || '''s Enterprise', user_email, true)
    RETURNING id INTO new_enterprise_id;
    -- Create the user's profile
    INSERT INTO public.profiles (
      id,
      user_id,
      enterprise_id,
      email,
      first_name,
      last_name,
      role
    )
    VALUES (
      NEW.id,
      NEW.id,
      new_enterprise_id,
      user_email,
      user_first_name,
      user_last_name,
      'superadmin'
    );
    -- Add the user to user_roles
    INSERT INTO public.user_roles (user_id, enterprise_id, role)
    VALUES (NEW.id, new_enterprise_id, 'superadmin');
  END IF;
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250428230141_add_roles_table.sql">
-- Create roles table
CREATE TABLE IF NOT EXISTS roles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  permissions JSONB DEFAULT '[]',
  created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),
  enterprise_id UUID NOT NULL REFERENCES enterprises(id) ON DELETE CASCADE
);
-- Create indexes for roles table
CREATE INDEX IF NOT EXISTS roles_name_idx ON roles(name);
CREATE INDEX IF NOT EXISTS roles_enterprise_id_idx ON roles(enterprise_id);
-- Insert default roles based on existing user_roles
INSERT INTO roles (name, description, enterprise_id)
SELECT DISTINCT role, 'Default role', enterprise_id
FROM user_roles;
-- Add role_id column to user_roles
ALTER TABLE user_roles 
ADD COLUMN role_id UUID REFERENCES roles(id);
-- Update user_roles with role_id values
UPDATE user_roles ur
SET role_id = r.id
FROM roles r
WHERE r.name = ur.role::text
AND r.enterprise_id = ur.enterprise_id;
-- Make role_id NOT NULL after populating data
ALTER TABLE user_roles 
ALTER COLUMN role_id SET NOT NULL;
-- Rename old role column to deprecated_role instead of dropping it
-- This allows existing dependencies to continue working while you migrate them
ALTER TABLE user_roles
RENAME COLUMN role TO deprecated_role;
-- Add comment to indicate this column is deprecated
COMMENT ON COLUMN user_roles.deprecated_role IS 'DEPRECATED: This column is replaced by role_id referencing the roles table. Maintain temporarily for backward compatibility.';
-- Drop existing primary key constraint
DO $$ 
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_name = 'user_roles' 
        AND constraint_type = 'PRIMARY KEY'
    ) THEN
        EXECUTE (
            SELECT 'ALTER TABLE user_roles DROP CONSTRAINT ' || quote_ident(constraint_name)
            FROM information_schema.table_constraints
            WHERE table_name = 'user_roles'
            AND constraint_type = 'PRIMARY KEY'
        );
    END IF;
END $$;
-- Add new primary key
ALTER TABLE user_roles
ADD PRIMARY KEY (user_id, role_id, enterprise_id);
-- Create new indexes
CREATE INDEX IF NOT EXISTS user_roles_role_id_idx ON user_roles(role_id);
</file>

<file path="supabase/migrations/20250429105801_fix-user-roles-trigger.sql">
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Create a function to get or create a role by name
CREATE OR REPLACE FUNCTION get_or_create_role(role_name text, enterprise_id uuid)
RETURNS uuid
LANGUAGE plpgsql
AS $$
DECLARE
  role_id uuid;
BEGIN
  -- Try to find existing role
  SELECT id INTO role_id
  FROM roles
  WHERE name = role_name AND enterprise_id = get_or_create_role.enterprise_id;
  -- If role doesn't exist, create it
  IF role_id IS NULL THEN
    INSERT INTO roles (name, enterprise_id)
    VALUES (role_name, get_or_create_role.enterprise_id)
    RETURNING id INTO role_id;
  END IF;
  RETURN role_id;
END;
$$;
-- Modify the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  new_role_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if user is an enterprise owner
  IF (NEW.raw_user_meta_data->>'enterprise_owner')::boolean = true THEN
    -- Create a new enterprise for enterprise owners
    INSERT INTO public.enterprises (name, email, is_active)
    VALUES (user_first_name || '''s Enterprise', user_email, true)
    RETURNING id INTO new_enterprise_id;
    -- Get or create the superadmin role
    new_role_id := get_or_create_role('superadmin', new_enterprise_id);
    -- Create the user's profile
    INSERT INTO public.profiles (
      id,
      user_id,
      enterprise_id,
      email,
      first_name,
      last_name,
      role
    )
    VALUES (
      NEW.id,
      NEW.id,
      new_enterprise_id,
      user_email,
      user_first_name,
      user_last_name,
      'superadmin'
    );
    -- Add the user to user_roles with role_id
    INSERT INTO public.user_roles (user_id, role_id, enterprise_id)
    VALUES (NEW.id, new_role_id, new_enterprise_id);
  END IF;
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250429112252_fix-ambiguous-enterprise-id.sql">
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Modify the get_or_create_role function to use table aliases
CREATE OR REPLACE FUNCTION get_or_create_role(role_name text, enterprise_id uuid)
RETURNS uuid
LANGUAGE plpgsql
AS $$
DECLARE
  role_id uuid;
BEGIN
  -- Try to find existing role with table alias
  SELECT r.id INTO role_id
  FROM roles r
  WHERE r.name = role_name 
  AND r.enterprise_id = get_or_create_role.enterprise_id;
  -- If role doesn't exist, create it
  IF role_id IS NULL THEN
    INSERT INTO roles (name, enterprise_id)
    VALUES (role_name, get_or_create_role.enterprise_id)
    RETURNING id INTO role_id;
  END IF;
  RETURN role_id;
END;
$$;
-- Modify the handle_new_user function to use table aliases
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  new_role_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if user is an enterprise owner
  IF (NEW.raw_user_meta_data->>'enterprise_owner')::boolean = true THEN
    -- Create a new enterprise for enterprise owners
    INSERT INTO public.enterprises (name, email, is_active)
    VALUES (user_first_name || '''s Enterprise', user_email, true)
    RETURNING id INTO new_enterprise_id;
    -- Get or create the superadmin role
    new_role_id := get_or_create_role('superadmin', new_enterprise_id);
    -- Create the user's profile
    INSERT INTO public.profiles (
      id,
      user_id,
      enterprise_id,
      email,
      first_name,
      last_name,
      role
    )
    VALUES (
      NEW.id,
      NEW.id,
      new_enterprise_id,
      user_email,
      user_first_name,
      user_last_name,
      'superadmin'
    );
    -- Add the user to user_roles with role_id
    INSERT INTO public.user_roles (user_id, role_id, enterprise_id)
    VALUES (NEW.id, new_role_id, new_enterprise_id);
  END IF;
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250429112833_fix-deprecated-role-constraint.sql">
-- First, make the deprecated_role column nullable
ALTER TABLE user_roles ALTER COLUMN deprecated_role DROP NOT NULL;
-- Drop existing trigger first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Modify the handle_new_user function to handle both role_id and deprecated_role
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  new_enterprise_id uuid;
  new_role_id uuid;
  user_email text;
  user_first_name text;
  user_last_name text;
BEGIN
  -- Extract email
  user_email := NEW.email;
  user_first_name := split_part(user_email, '@', 1); -- Use part before '@' as first name
  user_last_name := 'User'; -- Default last name
  -- Check if user is an enterprise owner
  IF (NEW.raw_user_meta_data->>'enterprise_owner')::boolean = true THEN
    -- Create a new enterprise for enterprise owners
    INSERT INTO public.enterprises (name, email, is_active)
    VALUES (user_first_name || '''s Enterprise', user_email, true)
    RETURNING id INTO new_enterprise_id;
    -- Get or create the superadmin role
    new_role_id := get_or_create_role('superadmin', new_enterprise_id);
    -- Create the user's profile
    INSERT INTO public.profiles (
      id,
      user_id,
      enterprise_id,
      email,
      first_name,
      last_name,
      role
    )
    VALUES (
      NEW.id,
      NEW.id,
      new_enterprise_id,
      user_email,
      user_first_name,
      user_last_name,
      'superadmin'
    );
    -- Add the user to user_roles with both role_id and deprecated_role
    INSERT INTO public.user_roles (user_id, role_id, enterprise_id, deprecated_role)
    VALUES (NEW.id, new_role_id, new_enterprise_id, 'superadmin');
  END IF;
  RETURN NEW;
END;
$$;
-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
</file>

<file path="supabase/migrations/20250429202902_create_get_user_permissions_function.sql">
CREATE OR REPLACE FUNCTION get_user_permissions(user_id UUID, enterprise_id UUID)
RETURNS TABLE (permission app_permission) AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT rp.permission
  FROM user_roles ur
  JOIN roles r ON r.id = ur.role_id
  JOIN role_permissions rp ON rp.role = r.name
  WHERE ur.user_id = $1
  AND ur.enterprise_id = $2;
END;
$$ LANGUAGE plpgsql;
</file>

<file path="supabase/migrations/20250429203927_update_get_permissions_function.sql">
-- Drop the existing function first
DROP FUNCTION IF EXISTS get_user_permissions(UUID, UUID);
-- Create the function with the new return type
CREATE OR REPLACE FUNCTION get_user_permissions(user_id UUID, enterprise_id UUID)
RETURNS TABLE (permission app_permission) AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT rp.permission
  FROM user_roles ur
  JOIN roles r ON r.id = ur.role_id
  JOIN role_permissions rp ON rp.role = r.name
  WHERE ur.user_id = $1
  AND ur.enterprise_id = $2;
END;
$$ LANGUAGE plpgsql;
</file>

<file path="supabase/migrations/20250429210946_fix_role_permissions.sql">
-- Drop existing role_permissions table if it exists
DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP VIEW IF EXISTS public.user_permissions_view;
-- Create new role_permissions table with proper relationships
CREATE TABLE public.role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    role_id uuid NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    permission app_permission NOT NULL,
    created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(role_id, permission)
);
-- Enable RLS
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
-- Create policies for role_permissions
CREATE POLICY "Users can view role permissions"
    ON public.role_permissions FOR SELECT
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM user_roles ur
            WHERE ur.user_id = auth.uid()
            AND ur.role_id IN (
                SELECT id FROM roles r
                WHERE r.id = role_permissions.role_id
            )
        )
    );
-- Create function to get user permissions
CREATE OR REPLACE FUNCTION get_user_permissions(enterprise_id uuid)
RETURNS SETOF app_permission
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
    SELECT DISTINCT rp.permission
    FROM user_roles ur
    JOIN role_permissions rp ON ur.role_id = rp.role_id
    WHERE ur.user_id = auth.uid()
    AND ur.enterprise_id = get_user_permissions.enterprise_id;
$$;
-- Create trigger to update updated_at
CREATE TRIGGER set_role_permissions_updated_at
    BEFORE UPDATE ON public.role_permissions
    FOR EACH ROW
    EXECUTE FUNCTION set_updated_at();
-- Create view for user permissions
CREATE OR REPLACE VIEW public.user_permissions_view AS
SELECT 
    ur.user_id,
    ur.enterprise_id,
    ur.role_id,
    r.name as role_name,
    rp.permission
FROM user_roles ur
JOIN roles r ON ur.role_id = r.id
JOIN role_permissions rp ON r.id = rp.role_id;
-- Policy on the view is removed as RLS is handled by underlying tables
-- Insert default permissions for admin role
INSERT INTO public.role_permissions (role_id, permission)
SELECT 
    r.id,
    unnest(enum_range(NULL::app_permission)) AS permission
FROM roles r
WHERE r.name = 'admin';
</file>

<file path="supabase/migrations/20250429212638_create_user_permissions_view.sql">
-- Drop view if exists
DROP VIEW IF EXISTS public.user_permissions_view;
-- Create view for user permissions with security
CREATE VIEW public.user_permissions_view 
WITH (security_invoker = true)
AS
SELECT 
    ur.user_id,
    ur.enterprise_id,
    ur.role_id,
    r.name as role_name,
    rp.permission
FROM user_roles ur
JOIN roles r ON ur.role_id = r.id
JOIN role_permissions rp ON r.id = rp.role_id
WHERE ur.user_id = auth.uid(); -- Apply the security check in the view definition
</file>

<file path="supabase/migrations/20250429221132_fix_role_permissions_schema.sql">
-- Drop the existing role_permissions table
DROP TABLE IF EXISTS public.role_permissions CASCADE;
-- Create the new role_permissions table with proper structure
CREATE TABLE public.role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    role_id uuid NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    permission app_permission NOT NULL,
    created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(role_id, permission)
);
-- Create index on role_id
CREATE INDEX role_permissions_role_id_idx ON public.role_permissions (role_id);
-- Enable RLS
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
-- Create RLS policy
CREATE POLICY "Users can view role permissions for their roles"
    ON public.role_permissions
    FOR SELECT
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM user_roles ur
            WHERE ur.user_id = auth.uid()
            AND ur.role_id = role_permissions.role_id
        )
    );
-- Insert default permissions for admin role
INSERT INTO public.role_permissions (role_id, permission)
SELECT 
    r.id,
    unnest(enum_range(NULL::app_permission)) AS permission
FROM roles r
WHERE r.name = 'admin';
</file>

<file path="supabase/migrations/20250429223334_fix_deprecated_role.sql">
-- Disable RLS temporarily to avoid policy conflicts
ALTER TABLE enterprises DISABLE ROW LEVEL SECURITY;
-- Drop all policies on enterprises that might reference the deprecated_role
DROP POLICY IF EXISTS "Enable update for superadmins" ON enterprises CASCADE;
DROP POLICY IF EXISTS "Enable delete for superadmins" ON enterprises CASCADE;
DROP POLICY IF EXISTS "Enable read access for users" ON enterprises CASCADE;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON enterprises CASCADE;
-- Now drop the deprecated_role column
ALTER TABLE user_roles DROP COLUMN IF EXISTS deprecated_role CASCADE;
-- Re-enable RLS
ALTER TABLE enterprises ENABLE ROW LEVEL SECURITY;
-- Recreate the policies using the new role system
CREATE POLICY "Enable insert for authenticated users"
ON enterprises
FOR INSERT
TO authenticated
WITH CHECK (true);
CREATE POLICY "Enable read access for users"
ON enterprises
FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Enable update for superadmins"
ON enterprises
FOR UPDATE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id
    WHERE ur.user_id = auth.uid()
    AND r.name = 'superadmin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id
    WHERE ur.user_id = auth.uid()
    AND r.name = 'superadmin'
  )
);
CREATE POLICY "Enable delete for superadmins"
ON enterprises
FOR DELETE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id
    WHERE ur.user_id = auth.uid()
    AND r.name = 'superadmin'
  )
);
</file>

<file path="supabase/migrations/20250429223947_fix_role_permissions_relationship.sql">
-- Drop existing role_permissions table and its dependencies
DROP TABLE IF EXISTS role_permissions CASCADE;
-- Recreate role_permissions table with proper foreign key relationship
CREATE TABLE role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    role_id uuid NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission app_permission NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,
    UNIQUE(role_id, permission)
);
-- Enable RLS
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
-- Create policies for role_permissions
CREATE POLICY "Users can view role permissions"
ON role_permissions FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur
        WHERE ur.role_id = role_permissions.role_id
        AND ur.user_id = auth.uid()
    )
);
CREATE POLICY "Only superadmins can manage role permissions"
ON role_permissions FOR ALL
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid()
        AND r.name = 'superadmin'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM user_roles ur
        JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = auth.uid()
        AND r.name = 'superadmin'
    )
);
-- Create trigger for updated_at
CREATE TRIGGER set_role_permissions_updated_at
    BEFORE UPDATE ON role_permissions
    FOR EACH ROW
    EXECUTE FUNCTION set_updated_at();
</file>

<file path="supabase/migrations/20250429224612_fix_user_role_permissions_relationship.sql">
-- Drop existing foreign key constraints
ALTER TABLE public.role_permissions DROP CONSTRAINT IF EXISTS role_permissions_role_id_fkey;
ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_role_id_fkey;
-- Add new foreign key constraints with ON DELETE CASCADE
ALTER TABLE public.role_permissions 
  ADD CONSTRAINT role_permissions_role_id_fkey 
  FOREIGN KEY (role_id) 
  REFERENCES public.roles(id) 
  ON DELETE CASCADE;
ALTER TABLE public.user_roles 
  ADD CONSTRAINT user_roles_role_id_fkey 
  FOREIGN KEY (role_id) 
  REFERENCES public.roles(id) 
  ON DELETE CASCADE;
-- Add table comments
COMMENT ON TABLE public.role_permissions IS 'Stores permissions assigned to roles. When a role is deleted, all associated permissions are automatically removed.';
COMMENT ON TABLE public.user_roles IS 'Maps users to their assigned roles. When a role is deleted, all user associations are automatically removed.';
-- Create RLS policy for role_permissions
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.role_permissions;
CREATE POLICY "Enable read access for authenticated users" ON public.role_permissions
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur
    JOIN public.roles r ON ur.role_id = r.id
    WHERE ur.user_id = auth.uid()
    AND r.id = role_permissions.role_id
  )
);
</file>

<file path="supabase/migrations/20250429225425_fix_role_permissions_policy.sql">
-- Drop existing policy
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.role_permissions;
-- Create new policy with proper table relationships
CREATE POLICY "Enable read access for authenticated users" ON public.role_permissions
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur
    JOIN public.roles r ON ur.role_id = r.id
    WHERE ur.user_id = auth.uid()
    AND r.id = role_permissions.role_id
  )
);
</file>

<file path="supabase/migrations/20250429225707_fix_role_permissions_view.sql">
-- Drop existing objects
DROP TABLE IF EXISTS public.user_role_permissions CASCADE;
-- Create table to handle the relationship
CREATE TABLE public.user_role_permissions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    enterprise_id uuid NOT NULL REFERENCES public.enterprises(id) ON DELETE CASCADE,
    role_id uuid NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    role_name text NOT NULL,
    permission_id uuid NOT NULL REFERENCES public.role_permissions(id) ON DELETE CASCADE,
    permission app_permission NOT NULL,
    UNIQUE(user_id, role_id, permission_id)
);
-- Enable RLS
ALTER TABLE public.user_role_permissions ENABLE ROW LEVEL SECURITY;
-- Create policy
CREATE POLICY "Users can view their own role permissions"
    ON public.user_role_permissions
    FOR SELECT
    TO authenticated
    USING (user_id = auth.uid());
-- Function to sync the permissions table
CREATE OR REPLACE FUNCTION sync_user_role_permissions()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    -- Clear existing entries that might be affected
    DELETE FROM public.user_role_permissions
    WHERE role_id IN (
        SELECT DISTINCT r.id 
        FROM public.roles r
        WHERE r.id IN (
            SELECT ur.role_id FROM public.user_roles ur
            UNION
            SELECT rp.role_id FROM public.role_permissions rp
        )
    );
    -- Insert fresh data
    INSERT INTO public.user_role_permissions (
        user_id,
        enterprise_id,
        role_id,
        role_name,
        permission_id,
        permission
    )
    SELECT DISTINCT
        ur.user_id,
        ur.enterprise_id,
        ur.role_id,
        r.name,
        rp.id,
        rp.permission
    FROM public.user_roles ur
    JOIN public.roles r ON ur.role_id = r.id
    JOIN public.role_permissions rp ON r.id = rp.role_id;
    RETURN NULL;
END;
$$;
-- Create triggers to keep the table in sync
DROP TRIGGER IF EXISTS sync_user_role_permissions_user_roles ON public.user_roles;
CREATE TRIGGER sync_user_role_permissions_user_roles
    AFTER INSERT OR UPDATE OR DELETE
    ON public.user_roles
    FOR EACH STATEMENT
    EXECUTE FUNCTION sync_user_role_permissions();
DROP TRIGGER IF EXISTS sync_user_role_permissions_roles ON public.roles;
CREATE TRIGGER sync_user_role_permissions_roles
    AFTER INSERT OR UPDATE OR DELETE
    ON public.roles
    FOR EACH STATEMENT
    EXECUTE FUNCTION sync_user_role_permissions();
DROP TRIGGER IF EXISTS sync_user_role_permissions_role_permissions ON public.role_permissions;
CREATE TRIGGER sync_user_role_permissions_role_permissions
    AFTER INSERT OR UPDATE OR DELETE
    ON public.role_permissions
    FOR EACH STATEMENT
    EXECUTE FUNCTION sync_user_role_permissions();
-- Update role_permissions policy to be simpler
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.role_permissions;
CREATE POLICY "Enable read access for authenticated users" ON public.role_permissions
FOR SELECT
USING (
    role_id IN (
        SELECT role_id 
        FROM public.user_roles 
        WHERE user_id = auth.uid()
    )
);
-- Initial population of the table
INSERT INTO public.user_role_permissions (
    user_id,
    enterprise_id,
    role_id,
    role_name,
    permission_id,
    permission
)
SELECT DISTINCT
    ur.user_id,
    ur.enterprise_id,
    ur.role_id,
    r.name,
    rp.id,
    rp.permission
FROM public.user_roles ur
JOIN public.roles r ON ur.role_id = r.id
JOIN public.role_permissions rp ON r.id = rp.role_id;
</file>

<file path="supabase/migrations/20250429232805_setup_roles_and_permissions.sql">
-- Drop existing objects if they exist
DO $$ 
DECLARE
    v_type text;
BEGIN
    SELECT c.relkind INTO v_type
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE n.nspname = 'public'
    AND c.relname = 'user_role_permissions';
    IF v_type = 'v' THEN
        DROP VIEW IF EXISTS user_role_permissions CASCADE;
    ELSIF v_type = 'r' THEN
        DROP TABLE IF EXISTS user_role_permissions CASCADE;
    END IF;
EXCEPTION
    WHEN undefined_table THEN
        NULL;
END $$;
-- Drop other objects
DROP TABLE IF EXISTS role_permissions CASCADE;
DROP TABLE IF EXISTS roles CASCADE;
DROP TYPE IF EXISTS app_permission CASCADE;
-- Create user_enterprises view
CREATE OR REPLACE VIEW user_enterprises AS
SELECT DISTINCT
    p.id AS user_id,
    p.enterprise_id
FROM profiles p;
-- Create the app_permission enum type
CREATE TYPE app_permission AS ENUM (
    'users.create',
    'users.read',
    'users.update',
    'users.delete',
    'users.export',
    'users.invite',
    'roles.create',
    'roles.read',
    'roles.update',
    'roles.delete',
    'roles.export',
    'roles.assign',
    'companies.create',
    'companies.read',
    'companies.update',
    'companies.delete',
    'companies.export',
    'companies.duplicate',
    'branches.create',
    'branches.read',
    'branches.update',
    'branches.delete',
    'branches.export',
    'branches.duplicate',
    'clients.create',
    'clients.read',
    'clients.update',
    'clients.delete',
    'clients.export',
    'clients.duplicate',
    'vendors.create',
    'vendors.read',
    'vendors.update',
    'vendors.delete',
    'vendors.export',
    'vendors.duplicate',
    'products.create',
    'products.read',
    'products.update',
    'products.delete',
    'products.export',
    'products.duplicate',
    'invoices.create',
    'invoices.read',
    'invoices.update',
    'invoices.delete',
    'invoices.export',
    'invoices.duplicate',
    'expenses.create',
    'expenses.read',
    'expenses.update',
    'expenses.delete',
    'expenses.export',
    'expenses.duplicate',
    'settings.read',
    'settings.update'
);
-- Create roles table
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    description TEXT,
    is_system BOOLEAN DEFAULT false,
    enterprise_id UUID REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(name, enterprise_id)
);
-- Create RLS policies for roles
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view roles in their enterprise" ON roles
    FOR SELECT
    USING (
        enterprise_id IN (
            SELECT enterprise_id
            FROM user_enterprises
            WHERE user_id = auth.uid()
        ) OR
        is_system = true
    );
CREATE POLICY "Users can create roles in their enterprise" ON roles
    FOR INSERT
    WITH CHECK (
        enterprise_id IN (
            SELECT enterprise_id
            FROM user_enterprises
            WHERE user_id = auth.uid()
        )
    );
CREATE POLICY "Users can update roles in their enterprise" ON roles
    FOR UPDATE
    USING (
        enterprise_id IN (
            SELECT enterprise_id
            FROM user_enterprises
            WHERE user_id = auth.uid()
        )
    )
    WITH CHECK (
        enterprise_id IN (
            SELECT enterprise_id
            FROM user_enterprises
            WHERE user_id = auth.uid()
        )
    );
CREATE POLICY "Users can delete roles in their enterprise" ON roles
    FOR DELETE
    USING (
        enterprise_id IN (
            SELECT enterprise_id
            FROM user_enterprises
            WHERE user_id = auth.uid()
        )
    );
-- Create role_permissions table
CREATE TABLE role_permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_id UUID REFERENCES roles(id) ON DELETE CASCADE,
    permission app_permission NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(role_id, permission)
);
-- Create RLS policies for role_permissions
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view role permissions in their enterprise" ON role_permissions
    FOR SELECT
    USING (
        role_id IN (
            SELECT id
            FROM roles
            WHERE enterprise_id IN (
                SELECT enterprise_id
                FROM user_enterprises
                WHERE user_id = auth.uid()
            ) OR is_system = true
        )
    );
CREATE POLICY "Users can manage role permissions in their enterprise" ON role_permissions
    FOR ALL
    USING (
        role_id IN (
            SELECT id
            FROM roles
            WHERE enterprise_id IN (
                SELECT enterprise_id
                FROM user_enterprises
                WHERE user_id = auth.uid()
            )
        )
    )
    WITH CHECK (
        role_id IN (
            SELECT id
            FROM roles
            WHERE enterprise_id IN (
                SELECT enterprise_id
                FROM user_enterprises
                WHERE user_id = auth.uid()
            )
        )
    );
-- Create user_role_permissions view
CREATE OR REPLACE VIEW user_role_permissions AS
SELECT DISTINCT
    up.user_id,
    rp.permission::text
FROM user_roles up
JOIN role_permissions rp ON rp.role_id = up.role_id
WHERE up.user_id = auth.uid();
-- Insert predefined roles and their permissions
DO $$
DECLARE
    superadmin_id UUID;
    admin_id UUID;
    manager_id UUID;
    accounting_id UUID;
    employee_id UUID;
BEGIN
    -- Insert superadmin role first
    INSERT INTO roles (name, description, is_system)
    VALUES ('superadmin', 'Super Administrator with full system access', true)
    RETURNING id INTO superadmin_id;
    -- Insert all permissions for superadmin
    INSERT INTO role_permissions (role_id, permission)
    SELECT 
        superadmin_id,
        unnest(enum_range(NULL::app_permission));
    -- Insert other roles
    INSERT INTO roles (name, description, is_system)
    VALUES 
        ('admin', 'Administrator with enterprise-wide access', true),
        ('manager', 'Manager with branch-level access', true),
        ('accounting', 'Accounting role with financial access', true),
        ('employee', 'Regular employee with basic access', true);
    -- Get other role IDs
    SELECT id INTO admin_id FROM roles WHERE name = 'admin';
    SELECT id INTO manager_id FROM roles WHERE name = 'manager';
    SELECT id INTO accounting_id FROM roles WHERE name = 'accounting';
    SELECT id INTO employee_id FROM roles WHERE name = 'employee';
    -- Insert admin permissions
    INSERT INTO role_permissions (role_id, permission)
    SELECT 
        admin_id,
        unnest(ARRAY[
            'users.create',
            'users.read',
            'users.update',
            'users.delete',
            'users.export',
            'users.invite',
            'roles.create',
            'roles.read',
            'roles.update',
            'roles.delete',
            'roles.export',
            'roles.assign',
            'companies.create',
            'companies.read',
            'companies.update',
            'companies.delete',
            'companies.export',
            'companies.duplicate',
            'branches.create',
            'branches.read',
            'branches.update',
            'branches.delete',
            'branches.export',
            'branches.duplicate',
            'clients.create',
            'clients.read',
            'clients.update',
            'clients.delete',
            'clients.export',
            'clients.duplicate',
            'vendors.create',
            'vendors.read',
            'vendors.update',
            'vendors.delete',
            'vendors.export',
            'vendors.duplicate',
            'products.create',
            'products.read',
            'products.update',
            'products.delete',
            'products.export',
            'products.duplicate',
            'invoices.create',
            'invoices.read',
            'invoices.update',
            'invoices.delete',
            'invoices.export',
            'invoices.duplicate',
            'expenses.create',
            'expenses.read',
            'expenses.update',
            'expenses.delete',
            'expenses.export',
            'expenses.duplicate',
            'settings.read',
            'settings.update'
        ]::app_permission[]);
    -- Insert manager permissions
    INSERT INTO role_permissions (role_id, permission)
    SELECT 
        manager_id,
        unnest(ARRAY[
            'users.read',
            'roles.read',
            'companies.read',
            'branches.read',
            'branches.update',
            'clients.create',
            'clients.read',
            'clients.update',
            'clients.delete',
            'clients.export',
            'vendors.read',
            'products.read',
            'invoices.read',
            'expenses.read',
            'settings.read'
        ]::app_permission[]);
    -- Insert accounting permissions
    INSERT INTO role_permissions (role_id, permission)
    SELECT 
        accounting_id,
        unnest(ARRAY[
            'invoices.create',
            'invoices.read',
            'invoices.update',
            'invoices.delete',
            'invoices.export',
            'expenses.create',
            'expenses.read',
            'expenses.update',
            'expenses.delete',
            'expenses.export',
            'companies.read'
        ]::app_permission[]);
    -- Insert employee permissions
    INSERT INTO role_permissions (role_id, permission)
    SELECT 
        employee_id,
        unnest(ARRAY[
            'clients.read',
            'vendors.read',
            'products.read',
            'invoices.read',
            'expenses.read'
        ]::app_permission[]);
END $$;
</file>

<file path="supabase/migrations/20250430093635_fix_user_permissions_function.sql">
-- Drop existing functions
DROP FUNCTION IF EXISTS get_user_permissions(uuid);
DROP FUNCTION IF EXISTS get_user_permissions(uuid, uuid);
-- Create function to get user permissions
CREATE OR REPLACE FUNCTION get_user_permissions(p_user_id uuid, p_enterprise_id uuid)
RETURNS SETOF text
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
    WITH user_permissions AS (
        SELECT DISTINCT rp.permission::text
        FROM user_roles ur
        JOIN role_permissions rp ON rp.role_id = ur.role_id
        WHERE ur.user_id = p_user_id
        AND ur.enterprise_id = p_enterprise_id
    )
    SELECT permission FROM user_permissions;
$$;
</file>

<file path="supabase/migrations/20250430100832_fix_user_permissions_parameter_order.sql">
-- Drop existing function
DROP FUNCTION IF EXISTS get_user_permissions(uuid, uuid);
-- Create function to get user permissions with parameters in the correct order
CREATE OR REPLACE FUNCTION get_user_permissions(p_enterprise_id uuid, p_user_id uuid)
RETURNS SETOF text
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
    WITH user_permissions AS (
        SELECT DISTINCT rp.permission::text
        FROM user_roles ur
        JOIN role_permissions rp ON rp.role_id = ur.role_id
        WHERE ur.user_id = p_user_id
        AND ur.enterprise_id = p_enterprise_id
    )
    SELECT permission FROM user_permissions;
$$;
</file>

<file path="supabase/migrations/20250430102020_init_rbac_system.sql">
-- Create app_permission type
DO $$ BEGIN
    CREATE TYPE app_permission AS ENUM (
        'roles.manage',
        'users.manage',
        'enterprises.manage'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;
-- Create roles table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    description TEXT,
    enterprise_id UUID NOT NULL REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(name, enterprise_id)
);
-- Create role_permissions table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.role_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_id UUID NOT NULL,
    permission app_permission NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(role_id, permission)
);
-- Create user_roles table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.user_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role_id UUID NOT NULL,
    enterprise_id UUID NOT NULL REFERENCES enterprises(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(user_id, role_id, enterprise_id)
);
-- Insert default role permissions for admin role
INSERT INTO public.roles (name, description, enterprise_id)
SELECT 
    'Admin',
    'Administrator role with full permissions',
    id
FROM public.enterprises
ON CONFLICT (name, enterprise_id) DO NOTHING;
-- Insert default permissions for admin role
INSERT INTO public.role_permissions (role_id, permission)
SELECT r.id, p.permission
FROM public.roles r
CROSS JOIN (
    SELECT unnest(enum_range(NULL::app_permission)) AS permission
) p
WHERE r.name = 'Admin'
ON CONFLICT (role_id, permission) DO NOTHING;
</file>

<file path="supabase/migrations/20250430102021_add_rbac_policies.sql">
-- Drop all existing policies
DO $$ BEGIN
    -- Drop policies for roles table
    DROP POLICY IF EXISTS "Users can view roles in their enterprise" ON public.roles;
    DROP POLICY IF EXISTS "Enterprise admins can manage roles" ON public.roles;
    DROP POLICY IF EXISTS "Users can read roles" ON public.roles;
    DROP POLICY IF EXISTS "Admins can manage roles" ON public.roles;
    -- Drop policies for user_roles table
    DROP POLICY IF EXISTS "Users can view user roles in their enterprise" ON public.user_roles;
    DROP POLICY IF EXISTS "Enterprise admins can manage user roles" ON public.user_roles;
    DROP POLICY IF EXISTS "Users can read user roles" ON public.user_roles;
    DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
    -- Drop policies for role_permissions table
    DROP POLICY IF EXISTS "Users can view role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Users can view role permissions in their enterprise" ON public.role_permissions;
    DROP POLICY IF EXISTS "Enterprise admins can manage role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Users can read role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Admins can manage role permissions" ON public.role_permissions;
EXCEPTION
    WHEN undefined_object THEN null;
END $$;
-- Function to get user permissions
CREATE OR REPLACE FUNCTION public.get_user_permissions(p_enterprise_id UUID, p_user_id UUID)
RETURNS TABLE (permission_name TEXT)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    RETURN QUERY
    SELECT DISTINCT rp.permission::TEXT
    FROM user_roles ur
    INNER JOIN roles r ON r.id = ur.role_id
    INNER JOIN role_permissions rp ON rp.role_id = r.id
    WHERE ur.enterprise_id = p_enterprise_id
    AND ur.user_id = p_user_id;
END;
$$;
-- Add RLS policies
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
-- Roles policies
CREATE POLICY "Users can read roles" ON public.roles
    FOR SELECT
    USING (enterprise_id IN (
        SELECT enterprise_id FROM user_roles WHERE user_id = auth.uid()
    ));
CREATE POLICY "Admins can manage roles" ON public.roles
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM user_roles ur
            INNER JOIN role_permissions rp ON rp.role_id = ur.role_id
            WHERE ur.user_id = auth.uid()
            AND ur.enterprise_id = roles.enterprise_id
            AND rp.permission = 'roles.create'::app_permission
        )
    );
-- User roles policies
CREATE POLICY "Users can read user roles" ON public.user_roles
    FOR SELECT
    USING (enterprise_id IN (
        SELECT enterprise_id FROM user_roles WHERE user_id = auth.uid()
    ));
CREATE POLICY "Admins can manage user roles" ON public.user_roles
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM user_roles ur
            INNER JOIN role_permissions rp ON rp.role_id = ur.role_id
            WHERE ur.user_id = auth.uid()
            AND ur.enterprise_id = user_roles.enterprise_id
            AND rp.permission = 'roles.create'::app_permission
        )
    );
-- Role permissions policies
CREATE POLICY "Users can read role permissions" ON public.role_permissions
    FOR SELECT
    USING (
        role_id IN (
            SELECT r.id FROM roles r
            INNER JOIN user_roles ur ON ur.role_id = r.id
            WHERE ur.user_id = auth.uid()
        )
    );
CREATE POLICY "Admins can manage role permissions" ON public.role_permissions
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM user_roles ur
            INNER JOIN roles r ON r.id = ur.role_id
            INNER JOIN role_permissions rp ON rp.role_id = r.id
            WHERE ur.user_id = auth.uid()
            AND r.enterprise_id IN (
                SELECT r2.enterprise_id FROM roles r2
                WHERE r2.id = role_permissions.role_id
            )
            AND rp.permission = 'roles.create'::app_permission
        )
    );
</file>

<file path="supabase/migrations/20250430103245_fix_rbac_system.sql">
-- Drop existing function if it exists
DROP FUNCTION IF EXISTS public.get_user_permissions(enterprise_id UUID, user_id UUID);
-- Create the function with correct parameter names
CREATE OR REPLACE FUNCTION public.get_user_permissions(p_enterprise_id UUID, p_user_id UUID)
RETURNS TABLE (permission_name TEXT) AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT rp.permission::TEXT
  FROM user_roles ur
  INNER JOIN roles r ON r.id = ur.role_id
  INNER JOIN role_permissions rp ON rp.role_id = r.id
  WHERE ur.user_id = p_user_id
  AND ur.enterprise_id = p_enterprise_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Enable RLS on the tables
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
-- Drop existing policies
DO $$ BEGIN
    -- Drop policies for roles table
    DROP POLICY IF EXISTS "Users can view roles in their enterprise" ON public.roles;
    DROP POLICY IF EXISTS "Enterprise admins can manage roles" ON public.roles;
    DROP POLICY IF EXISTS "Users can read roles" ON public.roles;
    DROP POLICY IF EXISTS "Admins can manage roles" ON public.roles;
    -- Drop policies for role_permissions table
    DROP POLICY IF EXISTS "Users can view role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Users can view role permissions in their enterprise" ON public.role_permissions;
    DROP POLICY IF EXISTS "Enterprise admins can manage role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Users can read role permissions" ON public.role_permissions;
    DROP POLICY IF EXISTS "Admins can manage role permissions" ON public.role_permissions;
EXCEPTION
    WHEN undefined_object THEN null;
END $$;
-- Create policies for roles table
CREATE POLICY "Users can read roles" ON public.roles
  FOR SELECT
  USING (enterprise_id IN (
    SELECT enterprise_id FROM user_roles WHERE user_id = auth.uid()
  ));
CREATE POLICY "Admins can manage roles" ON public.roles
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM user_roles ur
      INNER JOIN role_permissions rp ON rp.role_id = ur.role_id
      WHERE ur.user_id = auth.uid()
      AND ur.enterprise_id = roles.enterprise_id
      AND rp.permission = 'roles.create'::app_permission
    )
  );
-- Create policies for role_permissions table
CREATE POLICY "Users can read role permissions" ON public.role_permissions
  FOR SELECT
  USING (
    role_id IN (
      SELECT r.id FROM roles r
      INNER JOIN user_roles ur ON ur.enterprise_id = r.enterprise_id
      WHERE ur.user_id = auth.uid()
    )
  );
</file>

<file path="supabase/migrations/20250430105728_fix_user_roles_table.sql">
-- Drop dependent objects first
DROP FUNCTION IF EXISTS public.get_user_permissions(UUID, UUID);
-- Drop existing constraints
DO $$ BEGIN
    ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_pkey;
    ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_user_id_fkey;
    ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_role_id_fkey;
    ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_enterprise_id_fkey;
EXCEPTION
    WHEN undefined_object THEN null;
END $$;
-- Drop existing indexes
DROP INDEX IF EXISTS public.user_roles_user_id_idx;
DROP INDEX IF EXISTS public.user_roles_role_id_idx;
DROP INDEX IF EXISTS public.user_roles_enterprise_id_idx;
-- Drop existing policies
DO $$ BEGIN
    DROP POLICY IF EXISTS "Users can read user roles" ON public.user_roles;
    DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
EXCEPTION
    WHEN undefined_object THEN null;
END $$;
-- Drop dependent view if it exists
DROP VIEW IF EXISTS public.user_role_permissions;
-- Drop the table if it exists
DROP TABLE IF EXISTS public.user_roles CASCADE;
-- Create the table with the correct structure
CREATE TABLE public.user_roles (
    user_id UUID NOT NULL,
    role_id UUID NOT NULL,
    enterprise_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id, enterprise_id)
);
-- Add indexes
CREATE INDEX IF NOT EXISTS user_roles_user_id_idx ON public.user_roles (user_id);
CREATE INDEX IF NOT EXISTS user_roles_role_id_idx ON public.user_roles (role_id);
CREATE INDEX IF NOT EXISTS user_roles_enterprise_id_idx ON public.user_roles (enterprise_id);
-- Add foreign key constraints
ALTER TABLE public.user_roles
ADD CONSTRAINT user_roles_user_id_fkey
FOREIGN KEY (user_id) REFERENCES auth.users(id)
ON DELETE CASCADE;
ALTER TABLE public.user_roles
ADD CONSTRAINT user_roles_role_id_fkey
FOREIGN KEY (role_id) REFERENCES public.roles(id)
ON DELETE CASCADE;
ALTER TABLE public.user_roles
ADD CONSTRAINT user_roles_enterprise_id_fkey
FOREIGN KEY (enterprise_id) REFERENCES public.enterprises(id)
ON DELETE CASCADE;
-- Enable RLS
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
-- Create policies
CREATE POLICY "Users can read user roles" ON public.user_roles
  FOR SELECT
  USING (enterprise_id IN (
    SELECT enterprise_id FROM user_roles WHERE user_id = auth.uid()
  ));
CREATE POLICY "Admins can manage user roles" ON public.user_roles
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM user_roles ur
      INNER JOIN role_permissions rp ON rp.role_id = ur.role_id
      WHERE ur.user_id = auth.uid()
      AND ur.enterprise_id = user_roles.enterprise_id
      AND rp.permission = 'roles.create'::app_permission
    )
  );
-- Recreate the view
CREATE VIEW public.user_role_permissions AS
SELECT ur.user_id,
       ur.role_id,
       ur.enterprise_id,
       r.name AS role_name,
       r.description AS role_description,
       rp.permission
FROM user_roles ur
JOIN roles r ON r.id = ur.role_id
JOIN role_permissions rp ON rp.role_id = r.id;
-- Restore valid data from backup if it exists
DO $$ BEGIN
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'user_roles_backup'
    ) THEN
        INSERT INTO public.user_roles (user_id, role_id, enterprise_id, created_at)
        SELECT urb.user_id, urb.role_id, urb.enterprise_id, urb.created_at
        FROM public.user_roles_backup urb
        INNER JOIN auth.users u ON u.id = urb.user_id
        INNER JOIN public.roles r ON r.id = urb.role_id
        INNER JOIN public.enterprises e ON e.id = urb.enterprise_id;
        DROP TABLE public.user_roles_backup;
    END IF;
END $$;
-- Recreate the function
CREATE OR REPLACE FUNCTION public.get_user_permissions(p_enterprise_id UUID, p_user_id UUID)
RETURNS TABLE (permission_name TEXT) AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT rp.permission::TEXT
  FROM user_roles ur
  INNER JOIN roles r ON r.id = ur.role_id
  INNER JOIN role_permissions rp ON rp.role_id = r.id
  WHERE ur.user_id = p_user_id
  AND ur.enterprise_id = p_enterprise_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
</file>

<file path="supabase/migrations/20250430111354_create_user_roles_table.sql">
CREATE TABLE IF NOT EXISTS public.user_roles (
    user_id UUID NOT NULL,
    role_id UUID NOT NULL,
    enterprise_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id, enterprise_id)
);
-- Alter table to match the desired schema if it exists from an older migration
DO $$
BEGIN
    -- Check if the old primary key exists and drop it
    IF EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'user_roles_pkey' 
        AND table_name = 'user_roles'
        AND constraint_type = 'PRIMARY KEY'
    ) THEN
        -- Check if the primary key columns are just user_id, role (old schema)
        IF EXISTS (
            SELECT 1 FROM information_schema.key_column_usage
            WHERE constraint_name = 'user_roles_pkey' 
            AND table_name = 'user_roles' 
            AND column_name = 'role'
        ) THEN 
            ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_pkey;
        END IF;
    END IF;
    -- Drop the old 'role' column if it exists
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='user_roles' AND column_name='role') THEN
        ALTER TABLE public.user_roles DROP COLUMN role;
    END IF;
    -- Add role_id if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='user_roles' AND column_name='role_id') THEN
        ALTER TABLE public.user_roles ADD COLUMN role_id UUID;
    END IF;
    -- Ensure role_id is NOT NULL (might be needed if added above)
    ALTER TABLE public.user_roles ALTER COLUMN role_id SET NOT NULL;
    -- Add enterprise_id if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='user_roles' AND column_name='enterprise_id') THEN
        ALTER TABLE public.user_roles ADD COLUMN enterprise_id UUID;
    END IF;
    -- Ensure enterprise_id is NOT NULL (might be needed if added above)
    ALTER TABLE public.user_roles ALTER COLUMN enterprise_id SET NOT NULL;
    -- Ensure user_id is NOT NULL (should exist but make sure)
    ALTER TABLE public.user_roles ALTER COLUMN user_id SET NOT NULL;
    -- Add the new primary key if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'user_roles_pkey' 
        AND table_name = 'user_roles'
        AND constraint_type = 'PRIMARY KEY'
    ) THEN
        ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id, enterprise_id);
    END IF;
END $$;
</file>

<file path="supabase/migrations/20250430112929_fix_user_roles_policies_and_function.sql">
-- Drop existing policies
DROP POLICY IF EXISTS "Users can read user roles" ON public.user_roles;
DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
-- Create a view for user enterprises to avoid recursion
CREATE OR REPLACE VIEW user_enterprises AS
SELECT DISTINCT p.id AS user_id, p.enterprise_id
FROM profiles p;
-- Create new policies using the view instead
CREATE POLICY "Users can read user roles" ON public.user_roles
FOR SELECT TO authenticated
USING (
  enterprise_id IN (
    SELECT enterprise_id 
    FROM user_enterprises 
    WHERE user_id = auth.uid()
  )
);
CREATE POLICY "Admins can manage user roles" ON public.user_roles
FOR ALL TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM user_enterprises ue
    JOIN user_roles ur ON ur.enterprise_id = ue.enterprise_id
    JOIN role_permissions rp ON rp.role_id = ur.role_id
    WHERE ue.user_id = auth.uid()
    AND ue.enterprise_id = user_roles.enterprise_id
    AND rp.permission IN ('roles.create'::app_permission, 'roles.update'::app_permission)
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM user_enterprises ue
    JOIN user_roles ur ON ur.enterprise_id = ue.enterprise_id
    JOIN role_permissions rp ON rp.role_id = ur.role_id
    WHERE ue.user_id = auth.uid()
    AND ue.enterprise_id = user_roles.enterprise_id
    AND rp.permission IN ('roles.create'::app_permission, 'roles.update'::app_permission)
  )
);
-- Drop and recreate the get_user_permissions function with both parameter styles
DROP FUNCTION IF EXISTS public.get_user_permissions(uuid, uuid);
DROP FUNCTION IF EXISTS public.get_user_permissions(enterprise_id uuid, user_id uuid);
CREATE OR REPLACE FUNCTION public.get_user_permissions(enterprise_id uuid, user_id uuid)
RETURNS TABLE (permission text)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT rp.permission::TEXT
  FROM user_roles ur
  INNER JOIN roles r ON r.id = ur.role_id
  INNER JOIN role_permissions rp ON rp.role_id = r.id
  WHERE ur.enterprise_id = get_user_permissions.enterprise_id
  AND ur.user_id = get_user_permissions.user_id;
END;
$$;
</file>

<file path="supabase/migrations/20250430113406_fix_user_role_functions.sql">
-- Drop existing triggers and functions
DROP TRIGGER IF EXISTS validate_user_role_trigger ON public.user_roles;
DROP FUNCTION IF EXISTS public.validate_user_role();
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user_role();
-- Create new validate_user_role function
CREATE OR REPLACE FUNCTION public.validate_user_role()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  -- Check if the user exists in auth.users
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = NEW.user_id) THEN
    RAISE EXCEPTION 'Invalid user_id';
  END IF;
  -- Check if the role exists
  IF NOT EXISTS (SELECT 1 FROM public.roles WHERE id = NEW.role_id) THEN
    RAISE EXCEPTION 'Invalid role_id';
  END IF;
  -- Check if the enterprise exists
  IF NEW.enterprise_id IS NOT NULL AND NOT EXISTS (SELECT 1 FROM enterprises WHERE id = NEW.enterprise_id) THEN
    RAISE EXCEPTION 'Invalid enterprise_id';
  END IF;
  -- Check if the user is already assigned this role in this enterprise
  IF EXISTS (
    SELECT 1 FROM user_roles 
    WHERE user_id = NEW.user_id 
    AND role_id = NEW.role_id 
    AND enterprise_id = NEW.enterprise_id
  ) THEN
    RAISE EXCEPTION 'User already has this role in this enterprise';
  END IF;
  RETURN NEW;
END;
$$;
-- Create new trigger for user role validation
CREATE TRIGGER validate_user_role_trigger
BEFORE INSERT OR UPDATE ON public.user_roles
FOR EACH ROW
EXECUTE FUNCTION public.validate_user_role();
-- Create new handle_new_user_role function
CREATE OR REPLACE FUNCTION public.handle_new_user_role()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  default_role_id uuid;
BEGIN
  -- Get or create the default admin role for the user's enterprise
  WITH enterprise_role AS (
    INSERT INTO public.roles (name, description, enterprise_id)
    SELECT 
      'Admin',
      'Default administrator role',
      auth.jwt() ->> 'user_metadata'::text ->> 'enterprise_id'
    WHERE auth.jwt() ->> 'user_metadata'::text ->> 'enterprise_id' IS NOT NULL
    ON CONFLICT (name, enterprise_id) DO UPDATE SET updated_at = now()
    RETURNING id
  )
  SELECT id INTO default_role_id FROM enterprise_role;
  -- If we have a role and enterprise, create the user role assignment
  IF default_role_id IS NOT NULL THEN
    INSERT INTO public.user_roles (user_id, role_id, enterprise_id)
    VALUES (
      NEW.id,
      default_role_id,
      (auth.jwt() ->> 'user_metadata'::text)::jsonb ->> 'enterprise_id'
    );
  END IF;
  RETURN NEW;
END;
$$;
-- Create new trigger for handling new users
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user_role();
</file>

<file path="supabase/migrations/20250430113713_fix_jwt_metadata_access.sql">
-- Drop the existing function and trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user_role();
-- Create new handle_new_user_role function with fixed JWT metadata access
CREATE OR REPLACE FUNCTION public.handle_new_user_role()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  default_role_id uuid;
  user_metadata jsonb;
  enterprise_id uuid;
BEGIN
  -- Get user metadata from the JWT
  user_metadata := (auth.jwt() ->> 'user_metadata')::jsonb;
  -- Extract enterprise_id from metadata if it exists
  enterprise_id := (user_metadata ->> 'enterprise_id')::uuid;
  -- Get or create the default admin role for the user's enterprise
  IF enterprise_id IS NOT NULL THEN
    WITH enterprise_role AS (
      INSERT INTO public.roles (name, description, enterprise_id)
      VALUES (
        'Admin',
        'Default administrator role',
        enterprise_id
      )
      ON CONFLICT (name, enterprise_id) DO UPDATE SET updated_at = now()
      RETURNING id
    )
    SELECT id INTO default_role_id FROM enterprise_role;
    -- Create the user role assignment
    IF default_role_id IS NOT NULL THEN
      INSERT INTO public.user_roles (user_id, role_id, enterprise_id)
      VALUES (NEW.id, default_role_id, enterprise_id);
    END IF;
  END IF;
  RETURN NEW;
END;
$$;
-- Create new trigger for handling new users
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user_role();
</file>

<file path="supabase/migrations/20250430114134_fix_user_roles_rls_policies.sql">
-- Drop existing policies
DROP POLICY IF EXISTS "Users can read user roles" ON public.user_roles;
DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
-- Create a function to check if a user has admin permissions in an enterprise
CREATE OR REPLACE FUNCTION public.has_enterprise_permission(
  p_enterprise_id uuid,
  p_permissions app_permission[]
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM user_enterprises ue
    JOIN user_roles ur ON ur.enterprise_id = ue.enterprise_id AND ur.user_id = ue.user_id
    JOIN role_permissions rp ON rp.role_id = ur.role_id
    WHERE ue.user_id = auth.uid()
    AND ue.enterprise_id = p_enterprise_id
    AND rp.permission = ANY(p_permissions)
  );
END;
$$;
-- Create new policies using the helper function
CREATE POLICY "Users can read user roles"
ON public.user_roles
FOR SELECT
TO authenticated
USING (
  enterprise_id IN (
    SELECT enterprise_id 
    FROM user_enterprises 
    WHERE user_id = auth.uid()
  )
);
CREATE POLICY "Admins can manage user roles"
ON public.user_roles
FOR ALL
TO authenticated
USING (
  has_enterprise_permission(
    enterprise_id, 
    ARRAY['roles.create'::app_permission, 'roles.update'::app_permission]
  )
)
WITH CHECK (
  has_enterprise_permission(
    enterprise_id, 
    ARRAY['roles.create'::app_permission, 'roles.update'::app_permission]
  )
);
</file>

<file path="supabase/migrations/20250430122127_create_user_enterprise_roles.sql">
-- Function to update updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = timezone('utc'::text, now());
   RETURN NEW;
END;
$$ language 'plpgsql';
-- Create user_enterprise_roles table
CREATE TABLE IF NOT EXISTS user_enterprise_roles (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    enterprise_id UUID NOT NULL REFERENCES enterprises(id),
    role_id UUID NOT NULL REFERENCES roles(id),
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()),
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()),
    UNIQUE(user_id, enterprise_id)
);
-- Drop the existing user_enterprises view and dependent objects
DROP VIEW IF EXISTS user_enterprises CASCADE;
-- Create the updated user_enterprises view
CREATE VIEW user_enterprises AS
SELECT DISTINCT 
    uer.user_id,
    uer.enterprise_id,
    uer.role_id
FROM user_enterprise_roles uer;
-- Add RLS policies
ALTER TABLE user_enterprise_roles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own enterprise roles"
    ON user_enterprise_roles
    FOR SELECT
    USING (auth.uid() = user_id);
CREATE POLICY "Users with roles.create permission can insert enterprise roles"
    ON user_enterprise_roles
    FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1
            FROM user_roles ur
            JOIN role_permissions rp ON ur.role_id = rp.role_id
            WHERE ur.user_id = auth.uid()
            AND rp.permission = 'roles.create'::app_permission
        )
    );
CREATE POLICY "Users with roles.update permission can update enterprise roles"
    ON user_enterprise_roles
    FOR UPDATE
    USING (
        EXISTS (
            SELECT 1
            FROM user_roles ur
            JOIN role_permissions rp ON ur.role_id = rp.role_id
            WHERE ur.user_id = auth.uid()
            AND rp.permission = 'roles.update'::app_permission
        )
    );
-- Add trigger to update updated_at
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON user_enterprise_roles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
</file>

<file path="supabase/migrations/20250430151506_add_invoice_columns.sql">
ALTER TABLE public.invoices
ADD COLUMN IF NOT EXISTS invoice_number text NOT NULL,
ADD COLUMN IF NOT EXISTS due_date date,
ADD COLUMN IF NOT EXISTS status text NOT NULL DEFAULT 'draft',
ADD COLUMN IF NOT EXISTS subtotal numeric(10, 2) NOT NULL DEFAULT '0',
ADD COLUMN IF NOT EXISTS tax_rate numeric(5, 2) DEFAULT '0',
ADD COLUMN IF NOT EXISTS notes text,
ADD COLUMN IF NOT EXISTS client_id uuid NOT NULL;
-- Rename issued_at to issue_date only if issued_at exists and issue_date doesn't
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name='invoices' AND column_name='issued_at') AND
       NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name='invoices' AND column_name='issue_date') THEN
        ALTER TABLE public.invoices RENAME COLUMN issued_at TO issue_date;
    END IF;
END $$;
ALTER TABLE public.invoices
DROP COLUMN IF EXISTS issued_to,
DROP COLUMN IF EXISTS amount;
ALTER TABLE public.invoices
ADD COLUMN IF NOT EXISTS tax_amount numeric(10, 2) GENERATED ALWAYS AS (
  CASE
      WHEN (tax_rate IS NULL) THEN (0)::numeric
      ELSE round((subtotal * tax_rate), 2)
  END
) STORED;
ALTER TABLE public.invoices
ADD COLUMN IF NOT EXISTS total numeric(10, 2) GENERATED ALWAYS AS (
  CASE
      WHEN (tax_rate IS NULL) THEN subtotal
      ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
  END
) STORED;
-- Add foreign key constraint only if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'invoices_client_id_fkey'
          AND conrelid = 'public.invoices'::regclass
    ) THEN
        ALTER TABLE public.invoices
        ADD CONSTRAINT invoices_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id) ON DELETE CASCADE;
    END IF;
END $$;
-- Add check constraint only if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'invoices_status_check'
          AND conrelid = 'public.invoices'::regclass
    ) THEN
        ALTER TABLE public.invoices
        ADD CONSTRAINT invoices_status_check CHECK (status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'partially_paid'::text, 'overdue'::text, 'void'::text]));
    END IF;
END $$;
-- Add index for client_id if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM   pg_class c
        JOIN   pg_namespace n ON n.oid = c.relnamespace
        WHERE  c.relname = 'invoices_client_id_idx'
        AND    n.nspname = 'public'
    ) THEN
        CREATE INDEX invoices_client_id_idx ON public.invoices USING btree (client_id);
    END IF;
END$$;
-- Add index for status if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM   pg_class c
        JOIN   pg_namespace n ON n.oid = c.relnamespace
        WHERE  c.relname = 'invoices_status_idx'
        AND    n.nspname = 'public'
    ) THEN
        CREATE INDEX invoices_status_idx ON public.invoices USING btree (status);
    END IF;
END$$;
-- Add index for invoice_number if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM   pg_class c
        JOIN   pg_namespace n ON n.oid = c.relnamespace
        WHERE  c.relname = 'invoices_invoice_number_idx'
        AND    n.nspname = 'public'
    ) THEN
        CREATE INDEX invoices_invoice_number_idx ON public.invoices USING btree (invoice_number text_ops ASC NULLS LAST);
    END IF;
END$$;
</file>

<file path="supabase/migrations/20250430163726_add_role_description_and_system_flag.sql">
-- Add description column
ALTER TABLE public.roles
ADD COLUMN IF NOT EXISTS description text;
-- Add is_system column
ALTER TABLE public.roles
ADD COLUMN IF NOT EXISTS is_system boolean DEFAULT false NOT NULL;
-- Update existing system roles to set is_system = true
UPDATE public.roles
SET is_system = true
WHERE name IN ('superadmin', 'admin', 'viewer');
</file>

<file path="supabase/migrations/20250430184030_fix_role_enterprise_data.sql">
-- Set enterprise_id to NULL for all existing system roles
UPDATE public.roles
SET enterprise_id = NULL
WHERE is_system = true;
-- Note: If you have existing *custom* roles (is_system = false)
-- that currently have enterprise_id = NULL, they will still violate
-- the constraint. You might need to manually update them or add
-- another UPDATE statement here to assign them a default enterprise_id
-- if applicable.
-- Example:
-- UPDATE public.roles
-- SET enterprise_id = 'YOUR_DEFAULT_ENTERPRISE_ID_HERE' -- Replace with an actual enterprise ID
-- WHERE is_system = false AND enterprise_id IS NULL;
</file>

<file path="supabase/migrations/20250430184341_cleanup_enterprises_and_roles.sql">
-- Delete all custom roles (non-system roles)
DELETE FROM public.roles
WHERE is_system = false;
-- Delete all enterprises (this will cascade delete memberships)
DELETE FROM public.enterprises;
</file>

<file path="supabase/migrations/20250430190714_fix_custom_role_permission_names.sql">
-- Correct permission names for custom role 'surub2_role'
UPDATE permissions SET permission = 'companies.create' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Create companies';
UPDATE permissions SET permission = 'companies.read' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Read companies';
UPDATE permissions SET permission = 'companies.update' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Update companies';
UPDATE permissions SET permission = 'companies.delete' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Delete companies';
UPDATE permissions SET permission = 'companies.export' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Export companies';
UPDATE permissions SET permission = 'companies.duplicate' WHERE role_id = '9aa8f264-2190-4383-82a4-2200136a3716' AND permission = 'Duplicate companies';
</file>

<file path="supabase/migrations/20250430215354_add_permissions_to_accounting_role.sql">
insert into
  permissions (role_id, permission)
values
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.read'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.create'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.delete'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.update'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.duplicate'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'invoices.export'
  );
insert into
  permissions (role_id, permission)
values
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.read'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.create'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.delete'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.update'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.duplicate'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'quotes.export'
  );
insert into
  permissions (role_id, permission)
values
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.read'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.create'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.delete'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.update'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.duplicate'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'salaries.export'
  );
insert into
  permissions (role_id, permission)
values
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.read'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.create'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.delete'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.update'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.duplicate'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'expenses.export'
  );
insert into
  permissions (role_id, permission)
values
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.read'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.create'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.delete'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.update'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.duplicate'
  ),
  (
    '92ab3da2-b00c-44cb-a6e0-af4c22bbf278',
    'purchases.export'
  );
</file>

<file path="supabase/migrations/20250430223230_add_user_settings_to_profiles.sql">
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS user_settings jsonb;
</file>

<file path="supabase/migrations/20250501181741_update_companies_table_fields.sql">
-- Add new columns
ALTER TABLE companies
ADD COLUMN IF NOT EXISTS building_number TEXT;
ALTER TABLE companies
ADD COLUMN IF NOT EXISTS street_name TEXT;
ALTER TABLE companies
ADD COLUMN IF NOT EXISTS region TEXT;
ALTER TABLE companies
ADD COLUMN IF NOT EXISTS additional_number TEXT;
-- Drop old columns
ALTER TABLE companies
DROP COLUMN IF EXISTS address;
ALTER TABLE companies
DROP COLUMN IF EXISTS state;
</file>

<file path="supabase/migrations/20250501214218_remove_null_from_address_fields.sql">
ALTER TABLE "expenses" ALTER COLUMN "id" SET DEFAULT gen_random_uuid();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" SET DATA TYPE numeric;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" SET DEFAULT CURRENT_DATE;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "due_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "status" SET DEFAULT 'draft';--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "id" DROP DEFAULT;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "email" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "branches" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "clients" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "companies" ADD COLUMN IF NOT EXISTS "short_address" text;--> statement-breakpoint
ALTER TABLE "companies" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "region" text;--> statement-breakpoint
ALTER TABLE "employees" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "employees" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "employees" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "position" text;--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "salary" numeric(10, 2);--> statement-breakpoint
-- ALTER TABLE "employees" ADD COLUMN "notes" text;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "description" text;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "incurred_at" date DEFAULT CURRENT_DATE;--> statement-breakpoint
-- ALTER TABLE "expenses" ADD COLUMN "created_by" uuid;--> statement-breakpoint
-- ALTER TABLE "invoices" ADD COLUMN "created_by" uuid;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "short_address" text;--> statement-breakpoint
-- ALTER TABLE "offices" ADD COLUMN "region" text;--> statement-breakpoint
ALTER TABLE "offices" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "offices" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "offices" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
ALTER TABLE "offices" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
ALTER TABLE "offices" ADD COLUMN IF NOT EXISTS "notes" text;--> statement-breakpoint
ALTER TABLE "vendors" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "vendors" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "vendors" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "vendors" ADD COLUMN "short_address" text;--> statement-breakpoint
ALTER TABLE "vendors" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
ALTER TABLE "warehouses" ADD COLUMN IF NOT EXISTS "additional_number" text;--> statement-breakpoint
ALTER TABLE "warehouses" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "warehouses" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "region" text;--> statement-breakpoint
-- ALTER TABLE "warehouses" ADD COLUMN "short_address" text;--> statement-breakpoint
ALTER TABLE "warehouses" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
</file>

<file path="supabase/migrations/20250501214649_remove_null_from_address_fields_2.sql">
ALTER TABLE "expenses" ALTER COLUMN "id" SET DEFAULT gen_random_uuid();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" SET DATA TYPE numeric;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "amount" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "expenses" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" SET DEFAULT CURRENT_DATE;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "issue_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "due_date" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "status" SET DEFAULT 'draft';--> statement-breakpoint
ALTER TABLE "invoices" ALTER COLUMN "enterprise_id" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "id" DROP DEFAULT;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "email" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "profiles" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "branches" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "clients" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "companies" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "companies" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "employees" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "employees" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "employees" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "employees" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "employees" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "employees" ALTER COLUMN "position" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "employees" ALTER COLUMN "salary" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "employees" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "expenses" ALTER COLUMN "description" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "expenses" ALTER COLUMN "incurred_at" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "expenses" ALTER COLUMN "created_by" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "invoices" ALTER COLUMN "created_by" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "offices" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "offices" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "offices" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "offices" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "offices" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "offices" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "offices" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "vendors" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "vendors" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "warehouses" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
-- ALTER TABLE "warehouses" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
</file>

<file path="supabase/migrations/20250501214818_turn_address_fields_optional.sql">
ALTER TABLE "warehouses" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "warehouses" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "branches" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "branches" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "branches" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "branches" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "branches" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
ALTER TABLE "branches" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
ALTER TABLE "branches" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "building_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "street_name" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "country" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "vendors" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "clients" ALTER COLUMN "additional_number" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "clients" ADD COLUMN IF NOT EXISTS "building_number" text;--> statement-breakpoint
ALTER TABLE "clients" ADD COLUMN IF NOT EXISTS "street_name" text;--> statement-breakpoint
ALTER TABLE "clients" ADD COLUMN IF NOT EXISTS "country" text;--> statement-breakpoint
ALTER TABLE "clients" ALTER COLUMN "notes" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "clients" ALTER COLUMN "region" DROP NOT NULL;--> statement-breakpoint
ALTER TABLE "clients" ALTER COLUMN "short_address" DROP NOT NULL;--> statement-breakpoint
</file>

<file path="supabase/migrations/relations.ts">
import { relations } from "drizzle-orm/relations";
import { jobs, job_listing_jobs, job_listings, employees, employee_requests, sso_providersInAuth, saml_providersInAuth, flow_stateInAuth, saml_relay_statesInAuth, products, invoice_items, usersInAuth, identitiesInAuth, sessionsInAuth, refresh_tokensInAuth, mfa_factorsInAuth, one_time_tokensInAuth, mfa_amr_claimsInAuth, mfa_challengesInAuth, sso_domainsInAuth, departments, department_locations, clients, quotes, salaries, quote_items, companies, user_enterprise_roles, profiles, roles, permissions, enterprises, memberships, invoices, expenses, user_roles } from "./schema";
export const job_listing_jobsRelations = relations(job_listing_jobs, ({one}) => ({
	job: one(jobs, {
		fields: [job_listing_jobs.job_id],
		references: [jobs.id]
	}),
	job_listing: one(job_listings, {
		fields: [job_listing_jobs.job_listing_id],
		references: [job_listings.id]
	}),
}));
export const jobsRelations = relations(jobs, ({many}) => ({
	job_listing_jobs: many(job_listing_jobs),
}));
export const job_listingsRelations = relations(job_listings, ({many}) => ({
	job_listing_jobs: many(job_listing_jobs),
}));
export const employee_requestsRelations = relations(employee_requests, ({one}) => ({
	employee: one(employees, {
		fields: [employee_requests.employee_id],
		references: [employees.id]
	}),
}));
export const employeesRelations = relations(employees, ({one, many}) => ({
	employee_requests: many(employee_requests),
	department: one(departments, {
		fields: [employees.department_id],
		references: [departments.id]
	}),
	salaries: many(salaries),
}));
export const saml_providersInAuthRelations = relations(saml_providersInAuth, ({one}) => ({
	sso_providersInAuth: one(sso_providersInAuth, {
		fields: [saml_providersInAuth.sso_provider_id],
		references: [sso_providersInAuth.id]
	}),
}));
export const sso_providersInAuthRelations = relations(sso_providersInAuth, ({many}) => ({
	saml_providersInAuths: many(saml_providersInAuth),
	saml_relay_statesInAuths: many(saml_relay_statesInAuth),
	sso_domainsInAuths: many(sso_domainsInAuth),
}));
export const saml_relay_statesInAuthRelations = relations(saml_relay_statesInAuth, ({one}) => ({
	flow_stateInAuth: one(flow_stateInAuth, {
		fields: [saml_relay_statesInAuth.flow_state_id],
		references: [flow_stateInAuth.id]
	}),
	sso_providersInAuth: one(sso_providersInAuth, {
		fields: [saml_relay_statesInAuth.sso_provider_id],
		references: [sso_providersInAuth.id]
	}),
}));
export const flow_stateInAuthRelations = relations(flow_stateInAuth, ({many}) => ({
	saml_relay_statesInAuths: many(saml_relay_statesInAuth),
}));
export const invoice_itemsRelations = relations(invoice_items, ({one}) => ({
	product: one(products, {
		fields: [invoice_items.product_id],
		references: [products.id]
	}),
}));
export const productsRelations = relations(products, ({many}) => ({
	invoice_items: many(invoice_items),
	quote_items: many(quote_items),
}));
export const identitiesInAuthRelations = relations(identitiesInAuth, ({one}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [identitiesInAuth.user_id],
		references: [usersInAuth.id]
	}),
}));
export const usersInAuthRelations = relations(usersInAuth, ({many}) => ({
	identitiesInAuths: many(identitiesInAuth),
	sessionsInAuths: many(sessionsInAuth),
	mfa_factorsInAuths: many(mfa_factorsInAuth),
	one_time_tokensInAuths: many(one_time_tokensInAuth),
	user_enterprise_roles: many(user_enterprise_roles),
	profiles: many(profiles),
	user_roles: many(user_roles),
}));
export const sessionsInAuthRelations = relations(sessionsInAuth, ({one, many}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [sessionsInAuth.user_id],
		references: [usersInAuth.id]
	}),
	refresh_tokensInAuths: many(refresh_tokensInAuth),
	mfa_amr_claimsInAuths: many(mfa_amr_claimsInAuth),
}));
export const refresh_tokensInAuthRelations = relations(refresh_tokensInAuth, ({one}) => ({
	sessionsInAuth: one(sessionsInAuth, {
		fields: [refresh_tokensInAuth.session_id],
		references: [sessionsInAuth.id]
	}),
}));
export const mfa_factorsInAuthRelations = relations(mfa_factorsInAuth, ({one, many}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [mfa_factorsInAuth.user_id],
		references: [usersInAuth.id]
	}),
	mfa_challengesInAuths: many(mfa_challengesInAuth),
}));
export const one_time_tokensInAuthRelations = relations(one_time_tokensInAuth, ({one}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [one_time_tokensInAuth.user_id],
		references: [usersInAuth.id]
	}),
}));
export const mfa_amr_claimsInAuthRelations = relations(mfa_amr_claimsInAuth, ({one}) => ({
	sessionsInAuth: one(sessionsInAuth, {
		fields: [mfa_amr_claimsInAuth.session_id],
		references: [sessionsInAuth.id]
	}),
}));
export const mfa_challengesInAuthRelations = relations(mfa_challengesInAuth, ({one}) => ({
	mfa_factorsInAuth: one(mfa_factorsInAuth, {
		fields: [mfa_challengesInAuth.factor_id],
		references: [mfa_factorsInAuth.id]
	}),
}));
export const sso_domainsInAuthRelations = relations(sso_domainsInAuth, ({one}) => ({
	sso_providersInAuth: one(sso_providersInAuth, {
		fields: [sso_domainsInAuth.sso_provider_id],
		references: [sso_providersInAuth.id]
	}),
}));
export const departmentsRelations = relations(departments, ({many}) => ({
	employees: many(employees),
	department_locations: many(department_locations),
}));
export const department_locationsRelations = relations(department_locations, ({one}) => ({
	department: one(departments, {
		fields: [department_locations.department_id],
		references: [departments.id]
	}),
}));
export const quotesRelations = relations(quotes, ({one, many}) => ({
	client: one(clients, {
		fields: [quotes.client_id],
		references: [clients.id]
	}),
	quote_items: many(quote_items),
}));
export const clientsRelations = relations(clients, ({one, many}) => ({
	quotes: many(quotes),
	company: one(companies, {
		fields: [clients.company],
		references: [companies.id]
	}),
}));
export const salariesRelations = relations(salaries, ({one}) => ({
	employee: one(employees, {
		fields: [salaries.employee_id],
		references: [employees.id]
	}),
}));
export const quote_itemsRelations = relations(quote_items, ({one}) => ({
	product: one(products, {
		fields: [quote_items.product_id],
		references: [products.id]
	}),
	quote: one(quotes, {
		fields: [quote_items.quote_id],
		references: [quotes.id]
	}),
}));
export const companiesRelations = relations(companies, ({many}) => ({
	clients: many(clients),
}));
export const user_enterprise_rolesRelations = relations(user_enterprise_roles, ({one}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [user_enterprise_roles.user_id],
		references: [usersInAuth.id]
	}),
}));
export const profilesRelations = relations(profiles, ({one, many}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [profiles.id],
		references: [usersInAuth.id]
	}),
	memberships: many(memberships),
	invoices: many(invoices),
	expenses: many(expenses),
}));
export const permissionsRelations = relations(permissions, ({one}) => ({
	role: one(roles, {
		fields: [permissions.role_id],
		references: [roles.id]
	}),
}));
export const rolesRelations = relations(roles, ({many}) => ({
	permissions: many(permissions),
	memberships: many(memberships),
}));
export const membershipsRelations = relations(memberships, ({one}) => ({
	enterprise: one(enterprises, {
		fields: [memberships.enterprise_id],
		references: [enterprises.id]
	}),
	profile: one(profiles, {
		fields: [memberships.profile_id],
		references: [profiles.id]
	}),
	role: one(roles, {
		fields: [memberships.role_id],
		references: [roles.id]
	}),
}));
export const enterprisesRelations = relations(enterprises, ({many}) => ({
	memberships: many(memberships),
	invoices: many(invoices),
	expenses: many(expenses),
}));
export const invoicesRelations = relations(invoices, ({one}) => ({
	profile: one(profiles, {
		fields: [invoices.created_by],
		references: [profiles.id]
	}),
	enterprise: one(enterprises, {
		fields: [invoices.enterprise_id],
		references: [enterprises.id]
	}),
}));
export const expensesRelations = relations(expenses, ({one}) => ({
	profile: one(profiles, {
		fields: [expenses.created_by],
		references: [profiles.id]
	}),
	enterprise: one(enterprises, {
		fields: [expenses.enterprise_id],
		references: [enterprises.id]
	}),
}));
export const user_rolesRelations = relations(user_roles, ({one}) => ({
	usersInAuth: one(usersInAuth, {
		fields: [user_roles.user_id],
		references: [usersInAuth.id]
	}),
}));
</file>

<file path="supabase/migrations/schema.ts">
import { sql } from "drizzle-orm";
import {
  pgTable,
  index,
  uuid,
  text,
  numeric,
  timestamp,
  boolean,
  check,
  jsonb,
  foreignKey,
  date,
  pgSchema,
  unique,
  uniqueIndex,
  pgPolicy,
  varchar,
  smallint,
  json,
  inet,
  bigserial,
  primaryKey,
  pgView,
  pgEnum,
} from "drizzle-orm/pg-core";
export const auth = pgSchema("auth");
export const aal_levelInAuth = auth.enum("aal_level", ["aal1", "aal2", "aal3"]);
export const code_challenge_methodInAuth = auth.enum("code_challenge_method", ["s256", "plain"]);
export const factor_statusInAuth = auth.enum("factor_status", ["unverified", "verified"]);
export const factor_typeInAuth = auth.enum("factor_type", ["totp", "webauthn", "phone"]);
export const one_time_token_typeInAuth = auth.enum("one_time_token_type", [
  "confirmation_token",
  "reauthentication_token",
  "recovery_token",
  "email_change_token_new",
  "email_change_token_current",
  "phone_change_token",
]);
export const app_permission = pgEnum("app_permission", [
  "users.create",
  "users.read",
  "users.update",
  "users.delete",
  "users.export",
  "users.invite",
  "roles.create",
  "roles.read",
  "roles.update",
  "roles.delete",
  "roles.export",
  "roles.assign",
  "companies.create",
  "companies.read",
  "companies.update",
  "companies.delete",
  "companies.export",
  "companies.duplicate",
  "branches.create",
  "branches.read",
  "branches.update",
  "branches.delete",
  "branches.export",
  "branches.duplicate",
  "clients.create",
  "clients.read",
  "clients.update",
  "clients.delete",
  "clients.export",
  "clients.duplicate",
  "vendors.create",
  "vendors.read",
  "vendors.update",
  "vendors.delete",
  "vendors.export",
  "vendors.duplicate",
  "products.create",
  "products.read",
  "products.update",
  "products.delete",
  "products.export",
  "products.duplicate",
  "invoices.create",
  "invoices.read",
  "invoices.update",
  "invoices.delete",
  "invoices.export",
  "invoices.duplicate",
  "expenses.create",
  "expenses.read",
  "expenses.update",
  "expenses.delete",
  "expenses.export",
  "expenses.duplicate",
  "settings.read",
  "settings.update",
]);
export const products = pgTable(
  "products",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    name: text().notNull(),
    description: text(),
    price: numeric({ precision: 10, scale: 2 }).notNull(),
    sku: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    cost: numeric({ precision: 10, scale: 2 }),
    quantity: numeric({ precision: 10, scale: 2 }).default("0").notNull(),
    unit: text(),
    is_active: boolean().default(true).notNull(),
  },
  (table) => [
    index("products_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("products_sku_idx").using("btree", table.sku.asc().nullsLast().op("text_ops")),
    index("products_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const templates = pgTable(
  "templates",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    type: text().notNull(),
    content: jsonb().notNull(),
    is_default: boolean().default(false).notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("templates_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("templates_type_idx").using("btree", table.type.asc().nullsLast().op("text_ops")),
    index("templates_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    check("templates_type_check", sql`type = ANY (ARRAY['invoice'::text, 'quote'::text])`),
  ],
);
export const documents = pgTable(
  "documents",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    url: text().notNull(),
    file_path: text().notNull(),
    entity_id: uuid().notNull(),
    entity_type: text().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("documents_entity_id_idx").using(
      "btree",
      table.entity_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("documents_entity_type_idx").using(
      "btree",
      table.entity_type.asc().nullsLast().op("text_ops"),
    ),
    index("documents_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    check(
      "documents_entity_type_check",
      sql`entity_type = ANY (ARRAY['company'::text, 'expense'::text])`,
    ),
  ],
);
export const job_listing_jobs = pgTable(
  "job_listing_jobs",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    job_listing_id: uuid().notNull(),
    job_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("job_listing_jobs_job_id_idx").using(
      "btree",
      table.job_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("job_listing_jobs_job_listing_id_idx").using(
      "btree",
      table.job_listing_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.job_id],
      foreignColumns: [jobs.id],
      name: "job_listing_jobs_job_id_jobs_id_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.job_listing_id],
      foreignColumns: [job_listings.id],
      name: "job_listing_jobs_job_listing_id_job_listings_id_fk",
    }).onDelete("cascade"),
  ],
);
export const employee_requests = pgTable(
  "employee_requests",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    employee_id: uuid().notNull(),
    type: text().notNull(),
    status: text().default("pending").notNull(),
    title: text().notNull(),
    description: text(),
    start_date: date(),
    end_date: date(),
    amount: numeric({ precision: 10, scale: 2 }),
    attachments: jsonb().default([]),
    notes: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("employee_requests_created_at_idx").using(
      "btree",
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    index("employee_requests_employee_id_idx").using(
      "btree",
      table.employee_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("employee_requests_status_idx").using(
      "btree",
      table.status.asc().nullsLast().op("text_ops"),
    ),
    index("employee_requests_type_idx").using("btree", table.type.asc().nullsLast().op("text_ops")),
    index("employee_requests_user_id_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.employee_id],
      foreignColumns: [employees.id],
      name: "employee_requests_employee_id_employees_id_fk",
    }),
  ],
);
export const saml_providersInAuth = auth.table(
  "saml_providers",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    entity_id: text().notNull(),
    metadata_xml: text().notNull(),
    metadata_url: text(),
    attribute_mapping: jsonb(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    name_id_format: text(),
  },
  (table) => [
    index("saml_providers_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "saml_providers_sso_provider_id_fkey",
    }).onDelete("cascade"),
    unique("saml_providers_entity_id_key").on(table.entity_id),
    check("entity_id not empty", sql`char_length(entity_id) > 0`),
    check(
      "metadata_url not empty",
      sql`(metadata_url = NULL::text) OR (char_length(metadata_url) > 0)`,
    ),
    check("metadata_xml not empty", sql`char_length(metadata_xml) > 0`),
  ],
);
export const saml_relay_statesInAuth = auth.table(
  "saml_relay_states",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    request_id: text().notNull(),
    for_email: text(),
    redirect_to: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    flow_state_id: uuid(),
  },
  (table) => [
    index("saml_relay_states_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("saml_relay_states_for_email_idx").using(
      "btree",
      table.for_email.asc().nullsLast().op("text_ops"),
    ),
    index("saml_relay_states_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.flow_state_id],
      foreignColumns: [flow_stateInAuth.id],
      name: "saml_relay_states_flow_state_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "saml_relay_states_sso_provider_id_fkey",
    }).onDelete("cascade"),
    check("request_id not empty", sql`char_length(request_id) > 0`),
  ],
);
export const usersInAuth = auth.table(
  "users",
  {
    instance_id: uuid(),
    id: uuid().primaryKey().notNull(),
    aud: varchar({ length: 255 }),
    role: varchar({ length: 255 }),
    email: varchar({ length: 255 }),
    encrypted_password: varchar({ length: 255 }),
    email_confirmed_at: timestamp({ withTimezone: true, mode: "string" }),
    invited_at: timestamp({ withTimezone: true, mode: "string" }),
    confirmation_token: varchar({ length: 255 }),
    confirmation_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    recovery_token: varchar({ length: 255 }),
    recovery_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    email_change_token_new: varchar({ length: 255 }),
    email_change: varchar({ length: 255 }),
    email_change_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    last_sign_in_at: timestamp({ withTimezone: true, mode: "string" }),
    raw_app_meta_data: jsonb(),
    raw_user_meta_data: jsonb(),
    is_super_admin: boolean(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    phone: text().default(sql`NULL`),
    phone_confirmed_at: timestamp({ withTimezone: true, mode: "string" }),
    phone_change: text().default(sql`NULL`),
    phone_change_token: varchar({ length: 255 }).default(sql`NULL`),
    phone_change_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    confirmed_at: timestamp({ withTimezone: true, mode: "string" }).generatedAlwaysAs(
      sql`LEAST(email_confirmed_at, phone_confirmed_at)`,
    ),
    email_change_token_current: varchar({ length: 255 }).default(sql`NULL`),
    email_change_confirm_status: smallint().default(0),
    banned_until: timestamp({ withTimezone: true, mode: "string" }),
    reauthentication_token: varchar({ length: 255 }).default(sql`NULL`),
    reauthentication_sent_at: timestamp({ withTimezone: true, mode: "string" }),
    is_sso_user: boolean().default(false).notNull(),
    deleted_at: timestamp({ withTimezone: true, mode: "string" }),
    is_anonymous: boolean().default(false).notNull(),
  },
  (table) => [
    uniqueIndex("confirmation_token_idx")
      .using("btree", table.confirmation_token.asc().nullsLast().op("text_ops"))
      .where(sql`((confirmation_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("email_change_token_current_idx")
      .using("btree", table.email_change_token_current.asc().nullsLast().op("text_ops"))
      .where(sql`((email_change_token_current)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("email_change_token_new_idx")
      .using("btree", table.email_change_token_new.asc().nullsLast().op("text_ops"))
      .where(sql`((email_change_token_new)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("reauthentication_token_idx")
      .using("btree", table.reauthentication_token.asc().nullsLast().op("text_ops"))
      .where(sql`((reauthentication_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("recovery_token_idx")
      .using("btree", table.recovery_token.asc().nullsLast().op("text_ops"))
      .where(sql`((recovery_token)::text !~ '^[0-9 ]*$'::text)`),
    uniqueIndex("users_email_partial_key")
      .using("btree", table.email.asc().nullsLast().op("text_ops"))
      .where(sql`(is_sso_user = false)`),
    index("users_instance_id_email_idx").using(
      "btree",
      sql`instance_id`,
      sql`lower((email)::text)`,
    ),
    index("users_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("users_is_anonymous_idx").using(
      "btree",
      table.is_anonymous.asc().nullsLast().op("bool_ops"),
    ),
    unique("users_phone_key").on(table.phone),
    pgPolicy("Users can view their own user data", {
      as: "permissive",
      for: "select",
      to: ["authenticated"],
      using: sql`(auth.uid() = id)`,
    }),
    check(
      "users_email_change_confirm_status_check",
      sql`(email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)`,
    ),
  ],
);
export const sso_providersInAuth = auth.table(
  "sso_providers",
  {
    id: uuid().primaryKey().notNull(),
    resource_id: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    uniqueIndex("sso_providers_resource_id_idx").using("btree", sql`lower(resource_id)`),
    check(
      "resource_id not empty",
      sql`(resource_id = NULL::text) OR (char_length(resource_id) > 0)`,
    ),
  ],
);
export const invoice_items = pgTable(
  "invoice_items",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    description: text().notNull(),
    quantity: numeric({ precision: 10, scale: 2 }).default("1").notNull(),
    unit_price: numeric({ precision: 10, scale: 2 }).notNull(),
    amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`(quantity * unit_price)`),
    invoice_id: uuid().notNull(),
    product_id: uuid(),
  },
  (table) => [
    index("invoice_items_invoice_id_idx").using(
      "btree",
      table.invoice_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.product_id],
      foreignColumns: [products.id],
      name: "invoice_items_product_id_fkey",
    }),
  ],
);
export const job_listings = pgTable(
  "job_listings",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    title: varchar({ length: 255 }).notNull(),
    description: text(),
    is_active: boolean().default(true).notNull(),
    slug: varchar({ length: 255 }).notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    is_public: boolean().default(false).notNull(),
  },
  (table) => [
    index("job_listings_slug_idx").using("btree", table.slug.asc().nullsLast().op("text_ops")),
    index("job_listings_title_idx").using("btree", table.title.asc().nullsLast().op("text_ops")),
    index("job_listings_user_id_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    unique("job_listings_slug_unique").on(table.slug),
  ],
);
export const offices = pgTable(
  "offices",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    address: text().notNull(),
    city: text().notNull(),
    state: text().notNull(),
    zip_code: text().notNull(),
    phone: text(),
    email: text(),
    is_active: boolean().default(true).notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("offices_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("offices_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const flow_stateInAuth = auth.table(
  "flow_state",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid(),
    auth_code: text().notNull(),
    code_challenge_method: code_challenge_methodInAuth().notNull(),
    code_challenge: text().notNull(),
    provider_type: text().notNull(),
    provider_access_token: text(),
    provider_refresh_token: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    authentication_method: text().notNull(),
    auth_code_issued_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    index("flow_state_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("idx_auth_code").using("btree", table.auth_code.asc().nullsLast().op("text_ops")),
    index("idx_user_id_auth_method").using(
      "btree",
      table.user_id.asc().nullsLast().op("text_ops"),
      table.authentication_method.asc().nullsLast().op("text_ops"),
    ),
  ],
);
export const identitiesInAuth = auth.table(
  "identities",
  {
    provider_id: text().notNull(),
    user_id: uuid().notNull(),
    identity_data: jsonb().notNull(),
    provider: text().notNull(),
    last_sign_in_at: timestamp({ withTimezone: true, mode: "string" }),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    email: text().generatedAlwaysAs(sql`lower((identity_data ->> 'email'::text))`),
    id: uuid().defaultRandom().primaryKey().notNull(),
  },
  (table) => [
    index("identities_email_idx").using(
      "btree",
      table.email.asc().nullsLast().op("text_pattern_ops"),
    ),
    index("identities_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "identities_user_id_fkey",
    }).onDelete("cascade"),
    unique("identities_provider_id_provider_unique").on(table.provider_id, table.provider),
  ],
);
export const audit_log_entriesInAuth = auth.table(
  "audit_log_entries",
  {
    instance_id: uuid(),
    id: uuid().primaryKey().notNull(),
    payload: json(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    ip_address: varchar({ length: 64 }).default(sql`NULL`),
  },
  (table) => [
    index("audit_logs_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
  ],
);
export const instancesInAuth = auth.table("instances", {
  id: uuid().primaryKey().notNull(),
  uuid: uuid(),
  raw_base_config: text(),
  created_at: timestamp({ withTimezone: true, mode: "string" }),
  updated_at: timestamp({ withTimezone: true, mode: "string" }),
});
export const schema_migrationsInAuth = auth.table("schema_migrations", {
  version: varchar({ length: 255 }).primaryKey().notNull(),
});
export const sessionsInAuth = auth.table(
  "sessions",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    factor_id: uuid(),
    aal: aal_levelInAuth(),
    not_after: timestamp({ withTimezone: true, mode: "string" }),
    refreshed_at: timestamp({ mode: "string" }),
    user_agent: text(),
    ip: inet(),
    tag: text(),
  },
  (table) => [
    index("sessions_not_after_idx").using(
      "btree",
      table.not_after.desc().nullsFirst().op("timestamptz_ops"),
    ),
    index("sessions_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    index("user_id_created_at_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("timestamptz_ops"),
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "sessions_user_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const refresh_tokensInAuth = auth.table(
  "refresh_tokens",
  {
    instance_id: uuid(),
    id: bigserial({ mode: "bigint" }).primaryKey().notNull(),
    token: varchar({ length: 255 }),
    user_id: varchar({ length: 255 }),
    revoked: boolean(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
    parent: varchar({ length: 255 }),
    session_id: uuid(),
  },
  (table) => [
    index("refresh_tokens_instance_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("refresh_tokens_instance_id_user_id_idx").using(
      "btree",
      table.instance_id.asc().nullsLast().op("text_ops"),
      table.user_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("refresh_tokens_parent_idx").using(
      "btree",
      table.parent.asc().nullsLast().op("text_ops"),
    ),
    index("refresh_tokens_session_id_revoked_idx").using(
      "btree",
      table.session_id.asc().nullsLast().op("bool_ops"),
      table.revoked.asc().nullsLast().op("bool_ops"),
    ),
    index("refresh_tokens_updated_at_idx").using(
      "btree",
      table.updated_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.session_id],
      foreignColumns: [sessionsInAuth.id],
      name: "refresh_tokens_session_id_fkey",
    }).onDelete("cascade"),
    unique("refresh_tokens_token_unique").on(table.token),
  ],
);
export const mfa_factorsInAuth = auth.table(
  "mfa_factors",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    friendly_name: text(),
    factor_type: factor_typeInAuth().notNull(),
    status: factor_statusInAuth().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    secret: text(),
    phone: text(),
    last_challenged_at: timestamp({ withTimezone: true, mode: "string" }),
    web_authn_credential: jsonb(),
    web_authn_aaguid: uuid(),
  },
  (table) => [
    index("factor_id_created_at_idx").using(
      "btree",
      table.user_id.asc().nullsLast().op("timestamptz_ops"),
      table.created_at.asc().nullsLast().op("timestamptz_ops"),
    ),
    uniqueIndex("mfa_factors_user_friendly_name_unique")
      .using(
        "btree",
        table.friendly_name.asc().nullsLast().op("uuid_ops"),
        table.user_id.asc().nullsLast().op("text_ops"),
      )
      .where(sql`(TRIM(BOTH FROM friendly_name) <> ''::text)`),
    index("mfa_factors_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    uniqueIndex("unique_phone_factor_per_user").using(
      "btree",
      table.user_id.asc().nullsLast().op("text_ops"),
      table.phone.asc().nullsLast().op("text_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "mfa_factors_user_id_fkey",
    }).onDelete("cascade"),
    unique("mfa_factors_last_challenged_at_key").on(table.last_challenged_at),
  ],
);
export const one_time_tokensInAuth = auth.table(
  "one_time_tokens",
  {
    id: uuid().primaryKey().notNull(),
    user_id: uuid().notNull(),
    token_type: one_time_token_typeInAuth().notNull(),
    token_hash: text().notNull(),
    relates_to: text().notNull(),
    created_at: timestamp({ mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ mode: "string" }).defaultNow().notNull(),
  },
  (table) => [
    index("one_time_tokens_relates_to_hash_idx").using(
      "hash",
      table.relates_to.asc().nullsLast().op("text_ops"),
    ),
    index("one_time_tokens_token_hash_hash_idx").using(
      "hash",
      table.token_hash.asc().nullsLast().op("text_ops"),
    ),
    uniqueIndex("one_time_tokens_user_id_token_type_key").using(
      "btree",
      table.user_id.asc().nullsLast().op("uuid_ops"),
      table.token_type.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "one_time_tokens_user_id_fkey",
    }).onDelete("cascade"),
    check("one_time_tokens_token_hash_check", sql`char_length(token_hash) > 0`),
  ],
);
export const mfa_amr_claimsInAuth = auth.table(
  "mfa_amr_claims",
  {
    session_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    authentication_method: text().notNull(),
    id: uuid().primaryKey().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.session_id],
      foreignColumns: [sessionsInAuth.id],
      name: "mfa_amr_claims_session_id_fkey",
    }).onDelete("cascade"),
    unique("mfa_amr_claims_session_id_authentication_method_pkey").on(
      table.session_id,
      table.authentication_method,
    ),
  ],
);
export const user_permissions_view = pgView("user_permissions_view", {
  profile_id: uuid(),
  enterprise_id: uuid(),
  permission: text(),
}).as(
  sql`SELECT m.profile_id, m.enterprise_id, p.permission FROM memberships m JOIN permissions p ON m.role_id = p.role_id`,
);
export const mfa_challengesInAuth = auth.table(
  "mfa_challenges",
  {
    id: uuid().primaryKey().notNull(),
    factor_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).notNull(),
    verified_at: timestamp({ withTimezone: true, mode: "string" }),
    ip_address: inet().notNull(),
    otp_code: text(),
    web_authn_session_data: jsonb(),
  },
  (table) => [
    index("mfa_challenge_created_at_idx").using(
      "btree",
      table.created_at.desc().nullsFirst().op("timestamptz_ops"),
    ),
    foreignKey({
      columns: [table.factor_id],
      foreignColumns: [mfa_factorsInAuth.id],
      name: "mfa_challenges_auth_factor_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const sso_domainsInAuth = auth.table(
  "sso_domains",
  {
    id: uuid().primaryKey().notNull(),
    sso_provider_id: uuid().notNull(),
    domain: text().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }),
    updated_at: timestamp({ withTimezone: true, mode: "string" }),
  },
  (table) => [
    uniqueIndex("sso_domains_domain_idx").using("btree", sql`lower(domain)`),
    index("sso_domains_sso_provider_id_idx").using(
      "btree",
      table.sso_provider_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.sso_provider_id],
      foreignColumns: [sso_providersInAuth.id],
      name: "sso_domains_sso_provider_id_fkey",
    }).onDelete("cascade"),
    check("domain not empty", sql`char_length(domain) > 0`),
  ],
);
export const employees = pgTable(
  "employees",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    first_name: text().notNull(),
    last_name: text().notNull(),
    email: text().notNull(),
    phone: text(),
    hire_date: date(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    address: text(),
    city: text(),
    state: text(),
    zip_code: text(),
    country: text(),
    termination_date: date(),
    is_active: boolean().default(true).notNull(),
    department_id: uuid(),
    position: text(),
    salary: numeric({ precision: 10, scale: 2 }),
    notes: text(),
  },
  (table) => [
    index("employees_department_id_idx").using(
      "btree",
      table.department_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("employees_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("employees_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.department_id],
      foreignColumns: [departments.id],
      name: "employees_department_id_departments_id_fk",
    }).onDelete("set null"),
  ],
);
export const department_locations = pgTable(
  "department_locations",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    department_id: uuid().notNull(),
    location_type: text().notNull(),
    location_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.department_id],
      foreignColumns: [departments.id],
      name: "department_locations_department_id_departments_id_fk",
    }).onDelete("cascade"),
    unique("unique_department_location").on(
      table.department_id,
      table.location_type,
      table.location_id,
    ),
    check(
      "location_type_check",
      sql`location_type = ANY (ARRAY['office'::text, 'branch'::text, 'warehouse'::text])`,
    ),
  ],
);
export const quotes = pgTable(
  "quotes",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    quote_number: text().notNull(),
    issue_date: date().notNull(),
    expiry_date: date().notNull(),
    status: text().default("draft").notNull(),
    subtotal: numeric({ precision: 10, scale: 2 }).default("0").notNull(),
    tax_rate: numeric({ precision: 5, scale: 2 }).default("0"),
    notes: text(),
    client_id: uuid().notNull(),
    user_id: uuid().notNull(),
    tax_amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN (0)::numeric
    ELSE round((subtotal * tax_rate), 2)
END`),
    total: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`
CASE
    WHEN (tax_rate IS NULL) THEN subtotal
    ELSE round((subtotal * ((1)::numeric + tax_rate)), 2)
END`),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("quotes_client_id_idx").using("btree", table.client_id.asc().nullsLast().op("uuid_ops")),
    index("quotes_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
    index("quotes_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.client_id],
      foreignColumns: [clients.id],
      name: "quotes_client_id_fkey",
    }).onDelete("cascade"),
    check(
      "quotes_status_check",
      sql`status = ANY (ARRAY['draft'::text, 'sent'::text, 'accepted'::text, 'rejected'::text, 'expired'::text])`,
    ),
  ],
);
export const salaries = pgTable(
  "salaries",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    employee_id: uuid().notNull(),
    amount: numeric({ precision: 10, scale: 2 }).notNull(),
    currency: text().default("USD").notNull(),
    payment_frequency: text().default("monthly").notNull(),
    start_date: date().notNull(),
    end_date: date(),
  },
  (table) => [
    index("salaries_employee_id_idx").using(
      "btree",
      table.employee_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("salaries_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.employee_id],
      foreignColumns: [employees.id],
      name: "salaries_employee_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const departments = pgTable(
  "departments",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    description: text(),
    user_id: uuid().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    is_active: boolean().default(true).notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("departments_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("departments_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const jobs = pgTable(
  "jobs",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    title: varchar({ length: 255 }).notNull(),
    description: text(),
    requirements: text(),
    location: varchar({ length: 255 }),
    department: varchar({ length: 255 }),
    type: varchar({ length: 50 }).notNull(),
    salary: numeric({ precision: 10, scale: 2 }),
    is_active: boolean().default(true).notNull(),
    start_date: date(),
    end_date: date(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow().notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("jobs_department_idx").using("btree", table.department.asc().nullsLast().op("text_ops")),
    index("jobs_title_idx").using("btree", table.title.asc().nullsLast().op("text_ops")),
    index("jobs_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const vendors = pgTable(
  "vendors",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text().notNull(),
    phone: text().notNull(),
    company: text().notNull(),
    address: text().notNull(),
    city: text().notNull(),
    state: text().notNull(),
    zip_code: text().notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("vendors_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("vendors_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("vendors_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
  ],
);
export const warehouses = pgTable(
  "warehouses",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    code: text().notNull(),
    address: text().notNull(),
    city: text().notNull(),
    state: text().notNull(),
    zip_code: text().notNull(),
    capacity: numeric({ precision: 10, scale: 2 }),
    is_active: boolean().default(true).notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("warehouses_code_idx").using("btree", table.code.asc().nullsLast().op("text_ops")),
    index("warehouses_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("warehouses_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    unique("warehouses_code_key").on(table.code),
  ],
);
export const branches = pgTable(
  "branches",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    code: text(),
    address: text().notNull(),
    city: text().notNull(),
    state: text().notNull(),
    zip_code: text().notNull(),
    phone: text(),
    email: text(),
    manager: text(),
    is_active: boolean().default(true).notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("branches_code_idx").using("btree", table.code.asc().nullsLast().op("text_ops")),
    index("branches_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("branches_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    unique("branches_code_key").on(table.code),
  ],
);
export const companies = pgTable(
  "companies",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text().notNull(),
    phone: text(),
    website: text(),
    address: text(),
    city: text(),
    state: text(),
    zip_code: text(),
    industry: text(),
    size: text(),
    notes: text(),
    is_active: boolean().default(true).notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("companies_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("companies_is_active_idx").using(
      "btree",
      table.is_active.asc().nullsLast().op("bool_ops"),
    ),
    index("companies_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
  ],
);
export const quote_items = pgTable(
  "quote_items",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    description: text().notNull(),
    quantity: numeric({ precision: 10, scale: 2 }).default("1").notNull(),
    unit_price: numeric({ precision: 10, scale: 2 }).notNull(),
    amount: numeric({ precision: 10, scale: 2 }).generatedAlwaysAs(sql`(quantity * unit_price)`),
    quote_id: uuid().notNull(),
    product_id: uuid(),
  },
  (table) => [
    index("quote_items_quote_id_idx").using(
      "btree",
      table.quote_id.asc().nullsLast().op("uuid_ops"),
    ),
    foreignKey({
      columns: [table.product_id],
      foreignColumns: [products.id],
      name: "quote_items_product_id_fkey",
    }),
    foreignKey({
      columns: [table.quote_id],
      foreignColumns: [quotes.id],
      name: "quote_items_quote_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const clients = pgTable(
  "clients",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    name: text().notNull(),
    email: text(),
    phone: text().notNull(),
    address: text().notNull(),
    city: text().notNull(),
    state: text().notNull(),
    zip_code: text().notNull(),
    notes: text(),
    user_id: uuid().notNull(),
    company: uuid(),
    enterprise_id: uuid().notNull(),
  },
  (table) => [
    index("clients_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
    index("clients_name_idx").using("btree", table.name.asc().nullsLast().op("text_ops")),
    index("clients_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.company],
      foreignColumns: [companies.id],
      name: "clients_company_fkey",
    }),
  ],
);
export const user_enterprise_roles = pgTable(
  "user_enterprise_roles",
  {
    id: uuid()
      .default(sql`uuid_generate_v4()`)
      .primaryKey()
      .notNull(),
    user_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    role_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
    updated_at: timestamp({ withTimezone: true, mode: "string" }).default(
      sql`timezone('utc'::text, now())`,
    ),
  },
  (table) => [
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "user_enterprise_roles_user_id_fkey",
    }),
    unique("user_enterprise_roles_user_id_enterprise_id_key").on(
      table.user_id,
      table.enterprise_id,
    ),
    pgPolicy("Enable delete for users", {
      as: "permissive",
      for: "delete",
      to: ["authenticated"],
      using: sql`(auth.uid() = user_id)`,
    }),
    pgPolicy("Enable insert for authenticated users", {
      as: "permissive",
      for: "insert",
      to: ["authenticated"],
    }),
    pgPolicy("Enable read access for users", {
      as: "permissive",
      for: "select",
      to: ["authenticated"],
    }),
    pgPolicy("Enable update for users", { as: "permissive", for: "update", to: ["authenticated"] }),
  ],
);
export const profiles = pgTable(
  "profiles",
  {
    id: uuid().primaryKey().notNull(),
    email: text(),
    full_name: text(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.id],
      foreignColumns: [usersInAuth.id],
      name: "profiles_id_fkey",
    }).onDelete("cascade"),
    unique("profiles_email_key").on(table.email),
    pgPolicy("Users can insert own profile", {
      as: "permissive",
      for: "insert",
      to: ["public"],
      withCheck: sql`(auth.uid() = id)`,
    }),
    pgPolicy("Users can update own profile", { as: "permissive", for: "update", to: ["public"] }),
    pgPolicy("Users can view own profile", { as: "permissive", for: "select", to: ["public"] }),
  ],
);
export const roles = pgTable(
  "roles",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    name: text().notNull(),
  },
  (table) => [unique("roles_name_key").on(table.name)],
);
export const permissions = pgTable(
  "permissions",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    role_id: uuid(),
    permission: text().notNull(),
  },
  (table) => [
    foreignKey({
      columns: [table.role_id],
      foreignColumns: [roles.id],
      name: "permissions_role_id_fkey",
    }).onDelete("cascade"),
  ],
);
export const enterprises = pgTable(
  "enterprises",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    name: text().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    pgPolicy("Access if member", {
      as: "permissive",
      for: "select",
      to: ["public"],
      using: sql`(EXISTS ( SELECT 1
   FROM memberships
  WHERE ((memberships.enterprise_id = enterprises.id) AND (memberships.profile_id = auth.uid()))))`,
    }),
  ],
);
export const memberships = pgTable(
  "memberships",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    profile_id: uuid(),
    enterprise_id: uuid(),
    role_id: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "memberships_enterprise_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.profile_id],
      foreignColumns: [profiles.id],
      name: "memberships_profile_id_fkey",
    }).onDelete("cascade"),
    foreignKey({
      columns: [table.role_id],
      foreignColumns: [roles.id],
      name: "memberships_role_id_fkey",
    }).onDelete("restrict"),
    unique("memberships_profile_id_enterprise_id_key").on(table.profile_id, table.enterprise_id),
    pgPolicy("Access if same user", {
      as: "permissive",
      for: "select",
      to: ["public"],
      using: sql`(profile_id = auth.uid())`,
    }),
  ],
);
export const invoices = pgTable(
  "invoices",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    enterprise_id: uuid(),
    issued_to: text(),
    amount: numeric(),
    issued_at: date().default(sql`CURRENT_DATE`),
    created_by: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.created_by],
      foreignColumns: [profiles.id],
      name: "invoices_created_by_fkey",
    }),
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "invoices_enterprise_id_fkey",
    }).onDelete("cascade"),
    pgPolicy("Delete if has permission", {
      as: "permissive",
      for: "delete",
      to: ["public"],
      using: sql`(EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'invoices.delete'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = invoices.enterprise_id))))`,
    }),
    pgPolicy("Read if has permission", { as: "permissive", for: "select", to: ["public"] }),
  ],
);
export const expenses = pgTable(
  "expenses",
  {
    id: uuid().defaultRandom().primaryKey().notNull(),
    enterprise_id: uuid(),
    description: text(),
    amount: numeric(),
    incurred_at: date().default(sql`CURRENT_DATE`),
    created_by: uuid(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    foreignKey({
      columns: [table.created_by],
      foreignColumns: [profiles.id],
      name: "expenses_created_by_fkey",
    }),
    foreignKey({
      columns: [table.enterprise_id],
      foreignColumns: [enterprises.id],
      name: "expenses_enterprise_id_fkey",
    }).onDelete("cascade"),
    pgPolicy("Create if has permission", {
      as: "permissive",
      for: "insert",
      to: ["public"],
      withCheck: sql`(EXISTS ( SELECT 1
   FROM user_permissions_view
  WHERE ((user_permissions_view.permission = 'expenses.create'::text) AND (user_permissions_view.profile_id = auth.uid()) AND (user_permissions_view.enterprise_id = expenses.enterprise_id))))`,
    }),
    pgPolicy("Read if has permission", { as: "permissive", for: "select", to: ["public"] }),
  ],
);
export const role_permissions = pgTable(
  "role_permissions",
  {
    role_id: uuid().notNull(),
    permission_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" }).defaultNow(),
  },
  (table) => [
    primaryKey({ columns: [table.role_id, table.permission_id], name: "role_permissions_pkey" }),
  ],
);
export const user_roles = pgTable(
  "user_roles",
  {
    user_id: uuid().notNull(),
    role_id: uuid().notNull(),
    enterprise_id: uuid().notNull(),
    created_at: timestamp({ withTimezone: true, mode: "string" })
      .default(sql`timezone('utc'::text, now())`)
      .notNull(),
  },
  (table) => [
    index("user_roles_enterprise_id_idx").using(
      "btree",
      table.enterprise_id.asc().nullsLast().op("uuid_ops"),
    ),
    index("user_roles_role_id_idx").using("btree", table.role_id.asc().nullsLast().op("uuid_ops")),
    index("user_roles_user_id_idx").using("btree", table.user_id.asc().nullsLast().op("uuid_ops")),
    foreignKey({
      columns: [table.user_id],
      foreignColumns: [usersInAuth.id],
      name: "user_roles_user_id_fkey",
    }).onDelete("cascade"),
    primaryKey({
      columns: [table.user_id, table.role_id, table.enterprise_id],
      name: "user_roles_pkey",
    }),
    pgPolicy("Admins can manage user roles", {
      as: "permissive",
      for: "all",
      to: ["authenticated"],
      using: sql`has_enterprise_permission(enterprise_id, ARRAY['roles.create'::app_permission, 'roles.update'::app_permission])`,
      withCheck: sql`has_enterprise_permission(enterprise_id, ARRAY['roles.create'::app_permission, 'roles.update'::app_permission])`,
    }),
  ],
);
</file>

<file path="supabase/.gitignore">
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local
</file>

<file path="supabase/config.toml">
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "admin-portal"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 1

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".nvmrc">
22.14.0
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks",
    "types": "@/types"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="drizzle.config.ts">
import * as dotenv from "dotenv";
import type { Config } from "drizzle-kit";
dotenv.config();
const connectionString = process.env.DATABASE_URL!;
const url = new URL(connectionString);
export default {
  schema: "./src/db/schema.ts",
  out: "./supabase/migrations",
  dialect: "postgresql",
  schemaFilter: ["public", "auth"],
  tablesFilter: ["*", "auth.users"],
  introspect: { casing: "preserve" },
  dbCredentials: {
    host: url.hostname,
    port: parseInt(url.port),
    user: url.username,
    password: url.password,
    database: url.pathname.slice(1),
    ssl: url.searchParams.get("sslmode") === "require",
  },
  verbose: true,
  strict: true,
} satisfies Config;
</file>

<file path="landing.config.tsx">
import {
  BarChart3,
  Brush,
  Hash,
  HelpCircle,
  QrCode,
  SearchCheck,
  ShieldCheck,
  ShoppingCart,
  TabletSmartphone,
} from "lucide-react";
import { ContactSettings } from "@/lib/types";
const settings: settingsProps = {
  navigation: { withRegister: true, withLogin: true, fullWidth: true },
  projectName: { ar: "تند", en: "Tanad" },
  languages: ["ar", "en"],
  billingCycles: ["monthly", "annually"],
  billingCurrencies: ["sar", "usd"],
  usedByLogos: [
    { src: `/assets/pukla-logo-full-black.png`, name: "Company 1" },
    { src: `/assets/pukla-logo-full-purple.png`, name: "Company 2" },
    { src: `/assets/pukla-logo-full-green.png`, name: "Company 3" },
    { src: `/assets/pukla-logo-full-white.png`, name: "Company 4" },
    { src: `/assets/pukla-logo-full-black.png`, name: "Company 1" },
    { src: `/assets/pukla-logo-full-purple.png`, name: "Company 2" },
    { src: `/assets/pukla-logo-full-green.png`, name: "Company 3" },
    { src: `/assets/pukla-logo-full-white.png`, name: "Company 4" },
  ],
  paths: {
    login: `${process.env.NEXT_PUBLIC_USER_PORTAL}/login`,
    register: `${process.env.NEXT_PUBLIC_USER_PORTAL}/register`,
  },
  contact: {
    whatsapp: "https://wa.me/966531045453",
    twitter: "https://twitter.com/pukla_app",
    instagram: "https://instagram.com/pukla_app",
    mail: "pukla@sikka.io",
    phone: "+966531045453",
  },
  footerLinks: [
    {
      title: "resources",
      links: [
        { label: "help", href: "/help" },
        { label: "pricing", href: "/pricing" },
        // { label: "blog", href: "/blog" },
        // { label: "support", href: "/support" }
      ],
    },
    {
      title: "company",
      links: [
        // { label: "about", href: "/about" },
        { label: "features", href: "/features" },
        { label: "contact", href: "/contact" },
      ],
    },
    {
      title: "legal",
      links: [
        { label: "privacy", href: "/privacy" },
        { label: "tos", href: "/terms" },
        // { label: "cookie-preferences", href: "/cookies" }
      ],
    },
  ],
  logoSettings: {
    type: "full",
    showText: true,
    assets: {
      full: {
        ar: {
          light:
            "https://sikka-images.s3.ap-southeast-1.amazonaws.com/pukla/pukla-logo-full-purple.png",
          dark: "https://sikka-images.s3.ap-southeast-1.amazonaws.com/app-logos/pukla/pukla-logo-full-green.png",
        },
        en: {
          light:
            "https://sikka-images.s3.ap-southeast-1.amazonaws.com/pukla/pukla-logo-full-purple-en.png",
          dark: "https://sikka-images.s3.ap-southeast-1.amazonaws.com/pukla/pukla-logo-full-green-en.png",
        },
      },
      symbol: {
        light:
          "https://sikka-images.s3.ap-southeast-1.amazonaws.com/pukla/pukla-logo-symbol-purple.png",
        dark: "https://sikka-images.s3.ap-southeast-1.amazonaws.com/pukla/pukla-logo-symbol-green.png",
      },
    },
  },
  features: [
    {
      icon: <Brush />,
      title: "feature-1.title",
      description: "feature-1.description",
    },
    {
      icon: <Hash />,
      title: "feature-2.title",
      description: "feature-2.description",
    },
    {
      icon: <SearchCheck />,
      title: "feature-3.title",
      description: "feature-3.description",
    },
    {
      icon: <ShieldCheck />,
      title: "feature-4.title",
      description: "feature-4.description",
    },
    {
      icon: <HelpCircle />,
      title: "feature-5.title",
      description: "feature-5.description",
    },
    {
      icon: <TabletSmartphone />,
      title: "feature-6.title",
      description: "feature-6.description",
    },
    {
      icon: <BarChart3 />,
      title: "feature-7.title",
      description: "feature-7.description",
    },
    {
      icon: <QrCode />,
      title: "feature-8.title",
      description: "feature-8.description",
    },
    // {
    //   icon: <ShoppingCart />,
    //   title: "feature-9.title",
    //   description: "feature-9.description",
    //   soon: true,
    // },
  ],
};
type settingsProps = {
  navigation: {
    withRegister?: boolean;
    withLogin?: boolean;
    fullWidth?: boolean;
  };
  projectName: { ar?: string; en?: string };
  billingCycles: string[];
  billingCurrencies: string[];
  languages: string[];
  paths: { login: string; register: string };
  usedByLogos: { src: string; name: string }[];
  contact: ContactSettings;
  features: singleFeature[];
  footerLinks?: footerLinksSection[];
  navbarLinks?: any;
  logoSettings: {
    type: "full" | "symbol";
    showText?: boolean;
    assets: {
      full: {
        ar: { light: string; dark: string };
        en: { light: string; dark: string };
      };
      symbol: {
        light: string;
        dark: string;
      };
    };
  };
};
// type metaProps = {
//   title?: string;
//   description?: string;
//   image?: string;
//   url?: string;
//   keywords?: string;
//   author?: string;
//   type?: string;
//   siteName?: string;
//   locale?: string;
//   twitterCard?: string;
//   twitterSite?: string;
//   twitterCreator?: string;
//   twitterTitle?: string;
//   twitterDescription?: string;
//   twitterImage?: string;
//   ogTitle?: string;
//   ogDescription?: string;
//   ogImage?: string;
//   ogType?: string;
//   ogSiteName?: string;
//   ogLocale?: string;
//   fbAppId?: string;
//   fbTitle?: string;
//   fbDescription?: string;
//   fbImage?: string;
//   fbType?: string;
//   fbSiteName?: string;
//   fbLocale?: string;
// };
type singleFeature = {
  icon?: any;
  title: string;
  description: string;
  soon?: boolean;
};
type footerLinksSection = {
  title?: string;
  links: { label: string; href: string }[];
};
export default settings;
</file>

<file path="middleware.ts">
import createMiddleware from "next-intl/middleware";
export default createMiddleware({
  locales: ["en", "ar"], // Add your supported locales
  defaultLocale: "ar", // Set your default locale
  localeDetection: false,
});
// Optional: Configure the middleware to exclude certain paths
export const config = {
  matcher: ["/((?!api|_next|.*\\..*).*)"], // Match all routes except API routes and static files
};
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
const { version } = require("./package.json");
const nextConfig: NextConfig = {
  output: "standalone",
  async redirects() {
    return [
      {
        source: "/profile",
        destination: "/account",
        permanent: true,
      },
    ];
  },
  pageExtensions: ["js", "jsx", "md", "mdx", "ts", "tsx"],
  i18n: {
    locales: ["en", "ar"],
    defaultLocale: "ar",
    localeDetection: false,
  },
  publicRuntimeConfig: { version },
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "sikka-images.s3.ap-southeast-1.amazonaws.com",
      },
      {
        protocol: "https",
        hostname: "klssrjyuytbctygegsqt.supabase.co",
      },
    ],
  },
};
module.exports = nextConfig;
</file>

<file path="nixpacks.toml">
# nixpacks.toml
[phase.name]
nixpkgsArchive = "5d053ff21df2edd995d98d9e5beb62d7302d9249"
# Phase 1: Setup - Install necessary system packages/tools
[phases.setup]
nixPkgs = ["nodejs", "pnpm"]

# Add the 'infisical' Nix package.
# Note: Check the Nixpkgs search (search.nixos.org) if 'infisical' isn't the exact name; sometimes it might be 'infisical-cli'. 'infisical' is the common name currently.
pkgs = ["infisical"]

# Phase 2: Install - Install language-specific dependencies
[phases.install]
# Override the default install command (which would just be 'bun install')
# This command first exports secrets from Infisical to a .env file,
# and only if that succeeds (due to &&), it runs 'bun install'.
cmds = [
  "pnpm dlx @infisical/cli run --env=dev --domain=https://secrets.sikka.io --projectId=b1c8c504-ff56-43bb-9226-b1035bf94426 --token=$INFISICAL_TOKEN pnpm install",
]

# You might also have build and start phases defined here
[phases.build]
cmds = [
  "pnpm dlx @infisical/cli run --env=dev --domain=https://secrets.sikka.io --projectId=b1c8c504-ff56-43bb-9226-b1035bf94426 --token=$INFISICAL_TOKEN pnpm run build",
]

[start]
cmd = "pnpm dlx @infisical/cli run --env=dev --domain=https://secrets.sikka.io --projectId=b1c8c504-ff56-43bb-9226-b1035bf94426 --token=$INFISICAL_TOKEN pnpm run start"
</file>

<file path="package.json">
{
  "name": "@tanad/admin",
  "version": "0.14.7",
  "license": "Proprietary",
  "author": {
    "name": "Sikka Software",
    "email": "hello@sikka.io",
    "url": "https://sikka.io"
  },
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack --port 3037",
    "build": "next build",
    "admin:dev": "infisical run --env=dev -- next dev --turbopack --port 3037",
    "admin:build": "infisical run --env=prod -- next build",
    "start": "next start -p 3037",
    "lint": "next lint",
    "check-types": "tsc --noEmit",
    "db:generate": "drizzle-kit generate",
    "db:push": "drizzle-kit push",
    "db:migrate": "drizzle-kit migrate",
    "db:studio": "drizzle-kit studio",
    "db:sync": "tsx scripts/sync.ts",
    "db:generate-migration": "tsx scripts/generate-migration.ts",
    "db:setup-new": "tsx scripts/setup-new.ts",
    "db:policies": "tsx scripts/apply-policies.ts",
    "db:types": "tsx scripts/apply-types.ts",
    "db:update": "infisical run --env=dev -- tsx scripts/apply-types.ts && infisical run --env=dev -- tsx scripts/apply-rbac.ts && infisical run --env=dev -- tsx scripts/apply-triggers.ts && infisical run --env=dev -- drizzle-kit push && infisical run --env=dev -- tsx scripts/apply-policies.ts"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@hookform/resolvers": "^5.0.1",
    "@icons-pack/react-simple-icons": "^10.1.0",
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@radix-ui/react-accordion": "^1.2.8",
    "@radix-ui/react-alert-dialog": "^1.1.11",
    "@radix-ui/react-avatar": "^1.1.7",
    "@radix-ui/react-checkbox": "^1.2.3",
    "@radix-ui/react-collapsible": "^1.1.8",
    "@radix-ui/react-dialog": "^1.1.11",
    "@radix-ui/react-dropdown-menu": "^2.1.12",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-popover": "^1.1.11",
    "@radix-ui/react-progress": "^1.1.4",
    "@radix-ui/react-radio-group": "^1.3.4",
    "@radix-ui/react-scroll-area": "^1.2.6",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slider": "^1.3.2",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.9",
    "@radix-ui/react-tooltip": "^1.2.4",
    "@react-spring/three": "^9.7.5",
    "@shadergradient/react": "^2.0.25",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.49.4",
    "@tailwindcss/postcss": "^4.1.5",
    "@tanstack/react-query": "^5.75.0",
    "@tanstack/react-query-devtools": "^5.75.0",
    "@tanstack/react-table": "^8.21.3",
    "@tanstack/react-virtual": "^3.13.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "cookie": "^1.0.2",
    "date-fns": "^4.1.0",
    "dotenv": "^16.5.0",
    "drizzle-orm": "^0.43.1",
    "js-cookie": "^3.0.5",
    "libphonenumber-js": "^1.12.7",
    "lodash": "^4.17.21",
    "lucide-react": "^0.503.0",
    "maxmind": "^4.3.25",
    "motion": "^12.9.4",
    "next": "15.3.1",
    "next-intl": "^4.1.0",
    "next-themes": "^0.4.6",
    "nprogress": "^0.2.0",
    "pg": "^8.15.6",
    "postgres": "^3.4.5",
    "qrcode.react": "^4.2.0",
    "react": "^19.1.0",
    "react-day-picker": "8.10.1",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.56.1",
    "react-use-measure": "^2.1.7",
    "recharts": "^2.15.3",
    "signature_pad": "^5.0.7",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "trim-canvas": "^0.1.2",
    "ua-parser-js": "^2.0.3",
    "use-debounce": "^10.0.4",
    "uuid": "^11.1.0",
    "zod": "^3.24.3",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@trivago/prettier-plugin-sort-imports": "^5.2.2",
    "@types/cookie": "^1.0.0",
    "@types/js-cookie": "^3.0.6",
    "@types/lodash": "^4.17.16",
    "@types/node": "^22",
    "@types/nprogress": "^0.2.3",
    "@types/pg": "^8.11.14",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "drizzle-kit": "^0.31.0",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^4.1.5",
    "tsx": "^4.19.4",
    "tw-animate-css": "^1.2.8",
    "typescript": "^5"
  },
  "$schema": "https://json.schemastore.org/package.json"
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};
export default config;
</file>

<file path="prettier.config.js">
/** @type {import("prettier").Config} */
module.exports = {
  trailingComma: "all",
  printWidth: 100,
  importOrderSeparation: true,
  importOrder: [
    "<THIRD_PARTY_MODULES>",
    "^@sikka/(.*)$",
    "^@/ui/(.*)$",
    "^@/root/(.*)$",
    "^@/utils/(.*)$",
    "^@/hooks/(.*)$",
    "^@/components/(.*)$",
    "^@/forms/(.*)$",
    "^@/tables/(.*)$",
    "^@/lib/(.*)$",
    "^@/services/(.*)$",
    "^@/types/(.*)$",
    "^@/shared/(.*)$",
    "^@/for_invoices/(.*)$",
    "^@/data/(.*)$",
    "^@/api/(.*)$",
    "^@/tags/(.*)$",
    "^@/office/(.*)$",
    "^@/job/(.*)$",
    "^@/applicant/(.*)$",
    "^@/branch/(.*)$",
    "^@/client/(.*)$",
    "^@/company/(.*)$",
    "^@/dashboard/(.*)$",
    "^@/department/(.*)$",
    "^@/employee/(.*)$",
    "^@/employee-request/(.*)$",
    "^@/expense/(.*)$",
    "^@/invoice/(.*)$",
    "^@/job-listing/(.*)$",
    "^@/product/(.*)$",
    "^@/purchase/(.*)$",
    "^@/quote/(.*)$",
    "^@/role/(.*)$",
    "^@/salary/(.*)$",
    "^@/sale/(.*)$",
    "^@/setting/(.*)$",
    "^@/user/(.*)$",
    "^@/vendor/(.*)$",
    "^@/warehouse/(.*)$",
    "^@/(.*)$",
    "^[./]",
  ],
  plugins: ["@trivago/prettier-plugin-sort-imports", "prettier-plugin-tailwindcss"],
};
</file>

<file path="tanad.config.ts">
import {
  Building2,
  Briefcase,
  FileInput,
  FileText,
  Filter,
  LayoutDashboard,
  ShieldPlus,
  Store,
  UserRoundCog,
  Users,
  Warehouse,
  CircleDollarSign,
  SaudiRiyal,
  Settings,
  ShoppingCart,
  BriefcaseBusiness,
} from "lucide-react";
const ModulesOptions = {
  dashboard: {
    icon: LayoutDashboard,
    label: "Dashboard.title",
    translationKey: "Dashboard.title",
    url: "/dashboard",
  },
  sales: {
    icon: SaudiRiyal,
    label: "Sales.title",
    translationKey: "Sales.title",
    url: "/sales",
  },
  job_listings: {
    icon: Briefcase,
    label: "JobListings.title",
    translationKey: "JobListings.title",
    url: "/jobs/listings",
  },
  companies: {
    icon: Building2,
    label: "Companies.title",
    translationKey: "Companies.title",
    url: "/companies",
  },
  roles: {
    icon: ShieldPlus,
    label: "Roles.title",
    translationKey: "Roles.title",
    url: "/roles",
  },
  applicants: {
    icon: Users,
    label: "Applicants.title",
    translationKey: "Applicants.title",
    url: "/applicants",
  },
  purchases: {
    icon: ShoppingCart,
    label: "Purchases.title",
    translationKey: "Purchases.title",
    url: "/purchases",
  },
  clients: {
    icon: Users,
    label: "Clients.title",
    translationKey: "Clients.title",
    url: "/clients",
  },
  vendors: {
    icon: Users,
    label: "Vendors.title",
    translationKey: "Vendors.title",
    url: "/vendors",
  },
  invoices: {
    icon: FileText,
    label: "Invoices.title",
    translationKey: "Invoices.title",
    url: "/invoices",
  },
  quotes: {
    icon: FileInput,
    label: "Quotes.title",
    translationKey: "Quotes.title",
    url: "/quotes",
  },
  products: {
    icon: Filter,
    label: "Products.title",
    translationKey: "Products.title",
    url: "/products",
  },
  offices: {
    icon: Building2,
    label: "Offices.title",
    translationKey: "Offices.title",
    url: "/offices",
  },
  warehouses: {
    icon: Warehouse,
    label: "Warehouses.title",
    translationKey: "Warehouses.title",
    url: "/warehouses",
  },
  branches: {
    icon: Store,
    label: "Branches.title",
    translationKey: "Branches.title",
    url: "/branches",
  },
  employees: {
    icon: BriefcaseBusiness,
    label: "Employees.title",
    translationKey: "Employees.title",
    url: "/employees",
  },
  departments: {
    icon: Building2,
    label: "Departments.title",
    translationKey: "Departments.title",
    url: "/departments",
  },
  employeeRequests: {
    icon: Briefcase,
    label: "EmployeeRequests.title",
    translationKey: "EmployeeRequests.title",
    url: "/employee-requests",
  },
  jobs: {
    icon: Briefcase,
    label: "Jobs.title",
    translationKey: "Jobs.title",
    url: "/jobs",
  },
  expenses: {
    icon: CircleDollarSign,
    label: "Expenses.title",
    translationKey: "Expenses.title",
    url: "/expenses",
  },
  salaries: {
    icon: SaudiRiyal,
    label: "Salaries.title",
    translationKey: "Salaries.title",
    url: "/salaries",
  },
  users: {
    icon: UserRoundCog,
    label: "Users.title",
    translationKey: "Users.title",
    url: "/users",
  },
  settings: {
    icon: Settings,
    label: "Settings.title",
    translationKey: "Settings.title",
    url: "/settings",
  },
};
export { ModulesOptions };
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"],
      "@components/*": ["./src/components/*"],
      "@hooks/*": ["./src/hooks/*"],
      "@lib/*": ["./src/lib/*"],
      "@pages/*": ["./src/pages/*"],
      "@utils/*": ["./src/utils/*"],
      "@/forms/*": ["./src/components/forms/*"],
      "@/tables/*": ["./src/components/tables/*"],
      "@/ui/*": ["./src/components/ui/*"],
      "@/office/*": ["./src/modules/office/*"],
      "@/job/*": ["./src/modules/job/*"],
      "@/applicant/*": ["./src/modules/applicant/*"],
      "@/branch/*": ["./src/modules/branch/*"],
      "@/client/*": ["./src/modules/client/*"],
      "@/company/*": ["./src/modules/company/*"],
      "@/dashboard/*": ["./src/modules/dashboard/*"],
      "@/department/*": ["./src/modules/department/*"],
      "@/employee/*": ["./src/modules/employee/*"],
      "@/employee-request/*": ["./src/modules/employee-request/*"],
      "@/expense/*": ["./src/modules/expense/*"],
      "@/invoice/*": ["./src/modules/invoice/*"],
      "@/job-listing/*": ["./src/modules/job-listing/*"],
      "@/product/*": ["./src/modules/product/*"],
      "@/purchase/*": ["./src/modules/purchase/*"],
      "@/quote/*": ["./src/modules/quote/*"],
      "@/role/*": ["./src/modules/role/*"],
      "@/salary/*": ["./src/modules/salary/*"],
      "@/sale/*": ["./src/modules/sale/*"],
      "@/setting/*": ["./src/modules/setting/*"],
      "@/user/*": ["./src/modules/user/*"],
      "@/vendor/*": ["./src/modules/vendor/*"],
      "@/warehouse/*": ["./src/modules/warehouse/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["**/*.ts", "**/*.tsx", "next-env.d.ts", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="vibe-tools.config.json">
{
  "web": {
    "provider": "perplexity",
    "model": "sonar"
  },
  "plan": {
    "fileProvider": "anthropic",
    "thinkingProvider": "anthropic",
    "fileModel": "claude-3-7-sonnet",
    "thinkingModel": "claude-3-7-sonnet"
  },
  "repo": {
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219"
  },
  "doc": {
    "provider": "gemini",
    "model": "gemini-2.5-pro-preview-03-25"
  },
  "ide": "cursor"
}
</file>

</files>
